
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	c8 6d 00 20 a1 2a 00 00 19 5c 00 00 75 2a 00 00     .m. .*...\..u*..
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	75 2a 00 00 75 2a 00 00 75 2a 00 00 75 2a 00 00     u*..u*..u*..u*..
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	7d 27 00 00 75 2a 00 00 00 00 00 00 75 2a 00 00     }'..u*......u*..
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	75 2a 00 00                                         u*..

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	d9 27 00 00 d9 27 00 00 d9 27 00 00 d9 27 00 00     .'...'...'...'..
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	d9 27 00 00 d9 27 00 00 d9 27 00 00 d9 27 00 00     .'...'...'...'..
		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
				*(const char **)buf = s;
  60:	d9 27 00 00 d9 27 00 00 d9 27 00 00 d9 27 00 00     .'...'...'...'..
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	d9 27 00 00 d9 27 00 00 d9 27 00 00 d9 27 00 00     .'...'...'...'..
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	d9 27 00 00 d9 27 00 00 d9 27 00 00 d9 27 00 00     .'...'...'...'..
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	d9 27 00 00 d9 27 00 00 d9 27 00 00 d9 27 00 00     .'...'...'...'..
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
					str_ptr_arg[s_idx] = arg_idx;
  a0:	d9 27 00 00 d9 27 00 00 d9 27 00 00 d9 27 00 00     .'...'...'...'..
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	d9 27 00 00 d9 27 00 00 d9 27 00 00 d9 27 00 00     .'...'...'...'..
			switch (*fmt) {
  c0:	d9 27 00 00 d9 27 00 00 d9 27 00 00 d9 27 00 00     .'...'...'...'..
  d0:	d9 27 00 00 d9 27 00 00 d9 27 00 00 d9 27 00 00     .'...'...'...'..
  e0:	d9 27 00 00 d9 27 00 00 d9 27 00 00 d9 27 00 00     .'...'...'...'..
  f0:	d9 27 00 00 d9 27 00 00 d9 27 00 00 d9 27 00 00     .'...'...'...'..
 100:	d9 27 00 00 d9 27 00 00 d9 27 00 00 d9 27 00 00     .'...'...'...'..
 110:	d9 27 00 00 d9 27 00 00 d9 27 00 00 d9 27 00 00     .'...'...'...'..
				align = VA_STACK_ALIGN(void *);
 120:	d9 27 00 00 d9 27 00 00 d9 27 00 00 d9 27 00 00     .'...'...'...'..
			switch (*fmt) {
 130:	d9 27 00 00 d9 27 00 00 d9 27 00 00 d9 27 00 00     .'...'...'...'..
 140:	d9 27 00 00                                         .'..

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
		buf = (void *) ROUND_UP(buf, align);
     144:	b953      	cbnz	r3, 15c <__data_size+0xc>
     146:	b94a      	cbnz	r2, 15c <__data_size+0xc>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295
     154:	f04f 30ff 	movne.w	r0, #4294967295
     158:	f000 b80c 	b.w	174 <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
		if (is_str_arg) {
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	f000 f808 	bl	178 <__udivmoddi4>
			int v = va_arg(ap, int);
     168:	f8dd e004 	ldr.w	lr, [sp, #4]

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
				arg_idx--;
     172:	4770      	bx	lr

00000174 <__aeabi_idiv0>:
     174:	4770      	bx	lr
     176:	bf00      	nop

00000178 <__udivmoddi4>:
				parsing = false;
     178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				continue;
     17c:	4686      	mov	lr, r0
				if (fmt[-1] == 'l') {
     17e:	468c      	mov	ip, r1
     180:	4608      	mov	r0, r1
     182:	9e08      	ldr	r6, [sp, #32]
     184:	4615      	mov	r5, r2
					if (fmt[-2] == 'l') {
     186:	4674      	mov	r4, lr
     188:	4619      	mov	r1, r3
     18a:	2b00      	cmp	r3, #0
				parsing = false;
     18c:	f040 80c1 	bne.w	312 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x12>
					if (fmt[-2] == 'l') {
     190:	4285      	cmp	r5, r0
						align = VA_STACK_ALIGN(long long);
     192:	fab2 f282 	clz	r2, r2
				size = sizeof(void *);
     196:	d945      	bls.n	224 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x24>
     198:	b14a      	cbz	r2, 1ae <__udivmoddi4+0x36>
					v.ld = va_arg(ap, long double);
     19a:	f1c2 0320 	rsb	r3, r2, #32
     19e:	fa00 fc02 	lsl.w	ip, r0, r2
				buf = (void *) ROUND_UP(buf, align);
     1a2:	4095      	lsls	r5, r2
     1a4:	4094      	lsls	r4, r2
     1a6:	fa2e f303 	lsr.w	r3, lr, r3
					v.ld = va_arg(ap, long double);
     1aa:	ea43 0c0c 	orr.w	ip, r3, ip
					if (BUF_OFFSET + size > len) {
     1ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1b2:	b2a8      	uxth	r0, r5
     1b4:	0c23      	lsrs	r3, r4, #16
     1b6:	fbbc f8fe 	udiv	r8, ip, lr
						*(long double *)buf = v.ld;
     1ba:	fb0e cc18 	mls	ip, lr, r8, ip
				parsing = false;
     1be:	fb08 f900 	mul.w	r9, r8, r0
			switch (*fmt) {
     1c2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1c6:	4599      	cmp	r9, r3
			if (*++fmt == '\0') {
     1c8:	d928      	bls.n	21c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1c>
     1ca:	18eb      	adds	r3, r5, r3
     1cc:	f108 37ff 	add.w	r7, r8, #4294967295
			if (!parsing) {
     1d0:	d204      	bcs.n	1dc <__udivmoddi4+0x64>
     1d2:	4599      	cmp	r9, r3
     1d4:	d902      	bls.n	1dc <__udivmoddi4+0x64>
     1d6:	f1a8 0702 	sub.w	r7, r8, #2
				if (*fmt == '%') {
     1da:	442b      	add	r3, r5
					parsing = true;
     1dc:	eba3 0309 	sub.w	r3, r3, r9
					arg_idx++;
     1e0:	b2a4      	uxth	r4, r4
     1e2:	fbb3 fcfe 	udiv	ip, r3, lr
				align = VA_STACK_ALIGN(size_t);
     1e6:	fb0e 331c 	mls	r3, lr, ip, r3
     1ea:	fb0c f000 	mul.w	r0, ip, r0
			switch (*fmt) {
     1ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
				parsing = false;
     1f2:	42a0      	cmp	r0, r4
     1f4:	d914      	bls.n	220 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x20>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f6:	192c      	adds	r4, r5, r4
     1f8:	f10c 33ff 	add.w	r3, ip, #4294967295
					return -EINVAL;
     1fc:	d204      	bcs.n	208 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x8>
     1fe:	42a0      	cmp	r0, r4
			long long v = va_arg(ap, long long);
     200:	d902      	bls.n	208 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x8>
     202:	f1ac 0302 	sub.w	r3, ip, #2
     206:	442c      	add	r4, r5
     208:	1a24      	subs	r4, r4, r0
     20a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20e:	b11e      	cbz	r6, 218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
				}
			}
			buf += sizeof(long long);
     210:	40d4      	lsrs	r4, r2
     212:	2300      	movs	r3, #0
     214:	6034      	str	r4, [r6, #0]
		if (is_str_arg) {
     216:	6073      	str	r3, [r6, #4]
		} else if (size == sizeof(int)) {
     218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			int v = va_arg(ap, int);
     21c:	4647      	mov	r7, r8
     21e:	e7dd      	b.n	1dc <__udivmoddi4+0x64>
			if (buf0 != NULL) {
     220:	4663      	mov	r3, ip
		} else if (size == sizeof(long long)) {
     222:	e7f1      	b.n	208 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x8>
     224:	bb92      	cbnz	r2, 28c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc>
			long long v = va_arg(ap, long long);
     226:	1b43      	subs	r3, r0, r5
     228:	2101      	movs	r1, #1
     22a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     22e:	b2af      	uxth	r7, r5
     230:	0c20      	lsrs	r0, r4, #16
			if (buf0 != NULL) {
     232:	fbb3 fcfe 	udiv	ip, r3, lr
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     236:	fb0e 331c 	mls	r3, lr, ip, r3
			s = va_arg(ap, char *);
     23a:	fb0c f807 	mul.w	r8, ip, r7
     23e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
			if (is_ro && !do_ro) {
     242:	4598      	cmp	r8, r3
     244:	d961      	bls.n	30a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa>
     246:	18eb      	adds	r3, r5, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     248:	f10c 30ff 	add.w	r0, ip, #4294967295
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24c:	d204      	bcs.n	258 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x58>
     24e:	4598      	cmp	r8, r3
     250:	d902      	bls.n	258 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x58>
     252:	f1ac 0002 	sub.w	r0, ip, #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     256:	442b      	add	r3, r5
     258:	eba3 0308 	sub.w	r3, r3, r8
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	b2a4      	uxth	r4, r4
				if (buf0 != NULL) {
     25e:	fbb3 fcfe 	udiv	ip, r3, lr
					str_ptr_pos[s_idx] = s_ptr_idx;
     262:	fb0e 331c 	mls	r3, lr, ip, r3
     266:	fb0c f707 	mul.w	r7, ip, r7
     26a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     26e:	42a7      	cmp	r7, r4
					str_ptr_arg[s_idx] = arg_idx;
     270:	d94d      	bls.n	30e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe>
     272:	192c      	adds	r4, r5, r4
					if (is_ro) {
     274:	f10c 33ff 	add.w	r3, ip, #4294967295
     278:	d204      	bcs.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     27a:	42a7      	cmp	r7, r4
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27c:	d902      	bls.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     27e:	f1ac 0302 	sub.w	r3, ip, #2
     282:	442c      	add	r4, r5
						s_ro_cnt++;
     284:	1be4      	subs	r4, r4, r7
     286:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
					if (BUF_OFFSET + size > len) {
     28a:	e7c0      	b.n	20e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xe>
     28c:	f1c2 0320 	rsb	r3, r2, #32
			switch (*fmt) {
     290:	4095      	lsls	r5, r2
			buf += sizeof(char *);
     292:	4094      	lsls	r4, r2
					if (BUF_OFFSET + size > len) {
     294:	fa20 f103 	lsr.w	r1, r0, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     298:	fa2e f303 	lsr.w	r3, lr, r3
     29c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
				} else if (is_ro) {
     2a0:	4090      	lsls	r0, r2
     2a2:	b2af      	uxth	r7, r5
					len += 1;
     2a4:	4303      	orrs	r3, r0
     2a6:	fbb1 fcfe 	udiv	ip, r1, lr
					len += 2;
     2aa:	fb0e 101c 	mls	r0, lr, ip, r1
				} else if (rws_pos_en) {
     2ae:	0c19      	lsrs	r1, r3, #16
					len += strlen(s) + 1 + 1;
     2b0:	fb0c f807 	mul.w	r8, ip, r7
     2b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2b8:	4588      	cmp	r8, r1
     2ba:	d922      	bls.n	302 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x2>
     2bc:	1869      	adds	r1, r5, r1
     2be:	f10c 30ff 	add.w	r0, ip, #4294967295
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c2:	d204      	bcs.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     2c4:	4588      	cmp	r8, r1
     2c6:	d902      	bls.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     2c8:	f1ac 0002 	sub.w	r0, ip, #2
	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2cc:	4429      	add	r1, r5
     2ce:	eba1 0108 	sub.w	r1, r1, r8
     2d2:	b29b      	uxth	r3, r3
     2d4:	fbb1 fcfe 	udiv	ip, r1, lr
     2d8:	fb0e 111c 	mls	r1, lr, ip, r1
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2dc:	fb0c f707 	mul.w	r7, ip, r7
	*(char **)buf0 = NULL;
     2e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e4:	429f      	cmp	r7, r3
     2e6:	d90e      	bls.n	306 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x6>
	if (rws_pos_en) {
     2e8:	18eb      	adds	r3, r5, r3
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2ea:	f10c 31ff 	add.w	r1, ip, #4294967295
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2ee:	d204      	bcs.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f0:	429f      	cmp	r7, r3
     2f2:	d902      	bls.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     2f4:	f1ac 0102 	sub.w	r1, ip, #2
		for (i = 0; i < s_idx; i++) {
     2f8:	442b      	add	r3, r5
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fa:	1bdb      	subs	r3, r3, r7
     2fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
		for (i = 0; i < s_idx; i++) {
     300:	e793      	b.n	22a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x2a>
			continue;
		}

		if (rws_pos_en) {
			size = 0;
			*buf++ = str_ptr_arg[i];
     302:	4660      	mov	r0, ip
     304:	e7e3      	b.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     306:	4661      	mov	r1, ip
     308:	e7f7      	b.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     30a:	4660      	mov	r0, ip
     30c:	e7a4      	b.n	258 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x58>
     30e:	4663      	mov	r3, ip
			*buf++ = str_ptr_arg[i];
     310:	e7b8      	b.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     312:	4283      	cmp	r3, r0
	for (i = 0; i < s_idx; i++) {
     314:	d906      	bls.n	324 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x24>
     316:	b916      	cbnz	r6, 31e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x1e>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     318:	2100      	movs	r1, #0
     31a:	4608      	mov	r0, r1
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     31c:	e77c      	b.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
		pkg_hdr->desc.rw_str_cnt = 0;
     31e:	e9c6 e000 	strd	lr, r0, [r6]
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     322:	e7f9      	b.n	318 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x18>
     324:	fab3 f783 	clz	r7, r3
			if (BUF_OFFSET + 1 > len) {
     328:	b98f      	cbnz	r7, 34e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x4e>
     32a:	4283      	cmp	r3, r0
     32c:	d301      	bcc.n	332 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x32>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     32e:	4572      	cmp	r2, lr
     330:	d808      	bhi.n	344 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x44>
			if (BUF_OFFSET + 1 > len) {
     332:	ebbe 0402 	subs.w	r4, lr, r2
			*buf++ = pos;
     336:	eb60 0303 	sbc.w	r3, r0, r3
		for (i = 0; i < s_idx; i++) {
     33a:	2001      	movs	r0, #1
     33c:	469c      	mov	ip, r3
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     33e:	b91e      	cbnz	r6, 348 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x48>
     340:	2100      	movs	r1, #0
     342:	e769      	b.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
     344:	4638      	mov	r0, r7
     346:	e7fa      	b.n	33e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x3e>
     348:	e9c6 4c00 	strd	r4, ip, [r6]
		if (rws_pos_en) {
     34c:	e7f8      	b.n	340 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x40>
     34e:	f1c7 0c20 	rsb	ip, r7, #32
			*buf++ = str_ptr_arg[i];
     352:	40bb      	lsls	r3, r7
     354:	fa0e f507 	lsl.w	r5, lr, r7
			size = 0;
     358:	fa22 f40c 	lsr.w	r4, r2, ip
		if (BUF_OFFSET + 1 + size > len) {
     35c:	fa2e f10c 	lsr.w	r1, lr, ip
     360:	40ba      	lsls	r2, r7
     362:	431c      	orrs	r4, r3
     364:	fa20 f30c 	lsr.w	r3, r0, ip
		*buf++ = str_ptr_pos[i];
     368:	40b8      	lsls	r0, r7
		memcpy(buf, s, size);
     36a:	ea4f 4914 	mov.w	r9, r4, lsr #16
		*buf++ = str_ptr_pos[i];
     36e:	4301      	orrs	r1, r0
		memcpy(buf, s, size);
     370:	fa1f fe84 	uxth.w	lr, r4
     374:	fbb3 f8f9 	udiv	r8, r3, r9
		buf += size;
     378:	fb09 3018 	mls	r0, r9, r8, r3
	for (i = 0; i < s_idx; i++) {
     37c:	0c0b      	lsrs	r3, r1, #16
     37e:	fb08 fa0e 	mul.w	sl, r8, lr
     382:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     386:	459a      	cmp	sl, r3
     388:	d940      	bls.n	40c <CONFIG_BOOT_SERIAL_MAX_RECEIVE_SIZE+0xc>
     38a:	18e3      	adds	r3, r4, r3
     38c:	f108 30ff 	add.w	r0, r8, #4294967295
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     390:	d204      	bcs.n	39c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x9c>
			size = strlen(s) + 1;
     392:	459a      	cmp	sl, r3
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     394:	d902      	bls.n	39c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x9c>
     396:	f1a8 0002 	sub.w	r0, r8, #2
			size = strlen(s) + 1;
     39a:	4423      	add	r3, r4
     39c:	eba3 030a 	sub.w	r3, r3, sl
		return -EFAULT;
     3a0:	b289      	uxth	r1, r1
     3a2:	fbb3 f8f9 	udiv	r8, r3, r9
     3a6:	fb09 3318 	mls	r3, r9, r8, r3
     3aa:	fb08 fe0e 	mul.w	lr, r8, lr
     3ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3b2:	458e      	cmp	lr, r1
     3b4:	d92c      	bls.n	410 <CONFIG_BOOT_SERIAL_MAX_RECEIVE_SIZE+0x10>
     3b6:	1861      	adds	r1, r4, r1
     3b8:	f108 33ff 	add.w	r3, r8, #4294967295
     3bc:	d204      	bcs.n	3c8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc8>
     3be:	458e      	cmp	lr, r1
     3c0:	d902      	bls.n	3c8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc8>
     3c2:	f1a8 0302 	sub.w	r3, r8, #2
     3c6:	4421      	add	r1, r4
     3c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3cc:	eba1 010e 	sub.w	r1, r1, lr
     3d0:	fba0 9802 	umull	r9, r8, r0, r2
     3d4:	4541      	cmp	r1, r8
     3d6:	46ce      	mov	lr, r9
     3d8:	4643      	mov	r3, r8
     3da:	d302      	bcc.n	3e2 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe2>
     3dc:	d106      	bne.n	3ec <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xec>
     3de:	454d      	cmp	r5, r9
     3e0:	d204      	bcs.n	3ec <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xec>
     3e2:	3801      	subs	r0, #1
     3e4:	ebb9 0e02 	subs.w	lr, r9, r2
     3e8:	eb68 0304 	sbc.w	r3, r8, r4
     3ec:	2e00      	cmp	r6, #0
     3ee:	d0a7      	beq.n	340 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x40>
     3f0:	ebb5 020e 	subs.w	r2, r5, lr
     3f4:	eb61 0103 	sbc.w	r1, r1, r3
     3f8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3fc:	fa22 f307 	lsr.w	r3, r2, r7
     400:	40f9      	lsrs	r1, r7
     402:	ea4c 0303 	orr.w	r3, ip, r3
     406:	e9c6 3100 	strd	r3, r1, [r6]
     40a:	e799      	b.n	340 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x40>
     40c:	4640      	mov	r0, r8
     40e:	e7c5      	b.n	39c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x9c>
     410:	4643      	mov	r3, r8
     412:	e7d9      	b.n	3c8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc8>

00000414 <main>:
    __ASSERT(0, "Bootloader serial process was terminated unexpectedly.\n");
}
#endif

void main(void)
{
     414:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     416:	4b37      	ldr	r3, [pc, #220]	; (4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>)
     418:	4a37      	ldr	r2, [pc, #220]	; (4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>)
     41a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
     41e:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     422:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     426:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     42a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     42e:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     432:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     436:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     43a:	f000 f867 	bl	50c <os_heap_init>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     43e:	4c2f      	ldr	r4, [pc, #188]	; (4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>)
     440:	4620      	mov	r0, r4
     442:	f007 feec 	bl	821e <z_device_is_ready>
    if (!device_is_ready(button0.port)) {
     446:	b300      	cbz	r0, 48a <FIH_LABEL_FIH_CALL_START_468>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     448:	6925      	ldr	r5, [r4, #16]
	const struct gpio_driver_api *api =
     44a:	68a6      	ldr	r6, [r4, #8]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     44c:	682b      	ldr	r3, [r5, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     44e:	211a      	movs	r1, #26
		data->invert |= (gpio_port_pins_t)BIT(pin);
     450:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     454:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
     456:	4620      	mov	r0, r4
     458:	6833      	ldr	r3, [r6, #0]
     45a:	4a29      	ldr	r2, [pc, #164]	; (500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>)
     45c:	4798      	blx	r3
					   gpio_port_value_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_get_raw(port, value);
     45e:	4620      	mov	r0, r4
     460:	6873      	ldr	r3, [r6, #4]
     462:	a901      	add	r1, sp, #4
     464:	4798      	blx	r3
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;
	int ret;

	ret = gpio_port_get_raw(port, value);
	if (ret == 0) {
     466:	b920      	cbnz	r0, 472 <main+0x5e>
		*value ^= data->invert;
     468:	682a      	ldr	r2, [r5, #0]
     46a:	9b01      	ldr	r3, [sp, #4]
     46c:	4053      	eors	r3, r2
    (void)rc;

    mcuboot_status_change(MCUBOOT_STATUS_STARTUP);

#ifdef CONFIG_BOOT_SERIAL_ENTRANCE_GPIO
    if (detect_pin() &&
     46e:	015a      	lsls	r2, r3, #5
     470:	d50b      	bpl.n	48a <FIH_LABEL_FIH_CALL_START_468>
#endif // defined(DPPI_PRESENT)

#if NRF_POWER_HAS_RESETREAS
NRF_STATIC_INLINE uint32_t nrf_power_resetreas_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->RESETREAS;
     472:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     476:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return !(rr == 0 || (rr & NRFX_RESET_REASON_RESETPIN_MASK));
     47a:	b10b      	cbz	r3, 480 <main+0x6c>
     47c:	07db      	lsls	r3, r3, #31
     47e:	d504      	bpl.n	48a <FIH_LABEL_FIH_CALL_START_468>
    rc = boot_console_init();
     480:	f001 fc50 	bl	1d24 <boot_console_init>
    boot_serial_start(&boot_funcs);
     484:	481f      	ldr	r0, [pc, #124]	; (504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>)
     486:	f001 ffd5 	bl	2434 <boot_serial_start>

0000048a <FIH_LABEL_FIH_CALL_START_468>:
    rc = boot_console_init();
    int timeout_in_ms = CONFIG_BOOT_SERIAL_WAIT_FOR_DFU_TIMEOUT;
    uint32_t start = k_uptime_get_32();
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     48a:	f000 fa71 	bl	970 <fih_cfi_get_and_increment>
     48e:	4605      	mov	r5, r0
     490:	a801      	add	r0, sp, #4
     492:	f000 fcb9 	bl	e08 <boot_go>
     496:	4604      	mov	r4, r0
     498:	4628      	mov	r0, r5
     49a:	f000 fa79 	bl	990 <fih_cfi_validate>

0000049e <FIH_LABEL_FIH_CALL_END_488>:
        timeout_in_ms = 1;
    }
    boot_serial_check_start(&boot_funcs,timeout_in_ms);
#endif

    if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     49e:	4b1a      	ldr	r3, [pc, #104]	; (508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
     4a0:	681b      	ldr	r3, [r3, #0]
     4a2:	42a3      	cmp	r3, r4
     4a4:	d001      	beq.n	4aa <FIH_LABEL_FIH_CALL_END_488+0xc>
         * recovery mode
         */
        boot_serial_enter();
#endif

        FIH_PANIC;
     4a6:	f004 ffc8 	bl	543a <fih_panic_loop>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     4aa:	4669      	mov	r1, sp
     4ac:	f89d 0008 	ldrb.w	r0, [sp, #8]
     4b0:	f004 feae 	bl	5210 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     4b4:	9b00      	ldr	r3, [sp, #0]
     4b6:	9c03      	ldr	r4, [sp, #12]
     4b8:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
     4ba:	9b01      	ldr	r3, [sp, #4]
     4bc:	891d      	ldrh	r5, [r3, #8]
        sys_clock_disable();
     4be:	f003 fa2f 	bl	3920 <sys_clock_disable>
                                     rsp->br_image_off +
     4c2:	1966      	adds	r6, r4, r5
    nrf_cleanup_peripheral();
     4c4:	f000 fe46 	bl	1154 <nrf_cleanup_peripheral>
    cleanup_arm_nvic(); /* cleanup NVIC registers */
     4c8:	f000 fe28 	bl	111c <cleanup_arm_nvic>
    z_arm_clear_arm_mpu_config();
     4cc:	f002 fb2a 	bl	2b24 <z_arm_clear_arm_mpu_config>
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
     4d0:	2300      	movs	r3, #0
     4d2:	f383 880b 	msr	PSPLIM, r3
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
     4d6:	f383 880a 	msr	MSPLIM, r3
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     4da:	5962      	ldr	r2, [r4, r5]
     4dc:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
     4e0:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
     4e4:	f3bf 8f6f 	isb	sy
     4e8:	f3bf 8f6f 	isb	sy
    ((void (*)(void))vt->reset)();
     4ec:	6873      	ldr	r3, [r6, #4]
     4ee:	4798      	blx	r3
    do_boot(&rsp);

    mcuboot_status_change(MCUBOOT_STATUS_BOOT_FAILED);

    BOOT_LOG_ERR("Never should get here");
    while (1)
     4f0:	e7fe      	b.n	4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
     4f2:	bf00      	nop
     4f4:	50018000 	.word	0x50018000
     4f8:	6e524635 	.word	0x6e524635
     4fc:	000082e4 	.word	0x000082e4
     500:	00010011 	.word	0x00010011
     504:	000085e8 	.word	0x000085e8
     508:	20000008 	.word	0x20000008

0000050c <os_heap_init>:
/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     50c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     510:	4801      	ldr	r0, [pc, #4]	; (518 <os_heap_init+0xc>)
     512:	f003 bc37 	b.w	3d84 <mbedtls_memory_buffer_alloc_init>
     516:	bf00      	nop
     518:	20001bda 	.word	0x20001bda

0000051c <bootutil_img_validate>:
fih_ret
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    FIH_DECLARE(valid_signature, FIH_FAILURE);
     520:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 704 <FIH_LABEL_FIH_CALL_END_813+0x14>
{
     524:	b0f9      	sub	sp, #484	; 0x1e4
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     526:	a838      	add	r0, sp, #224	; 0xe0
     528:	e9dd 7884 	ldrd	r7, r8, [sp, #528]	; 0x210
     52c:	4616      	mov	r6, r2
     52e:	461c      	mov	r4, r3
     530:	f8dd b218 	ldr.w	fp, [sp, #536]	; 0x218
    FIH_DECLARE(valid_signature, FIH_FAILURE);
     534:	f8da 5000 	ldr.w	r5, [sl]
     538:	f007 fa24 	bl	7984 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     53c:	2100      	movs	r1, #0
     53e:	a838      	add	r0, sp, #224	; 0xe0
     540:	f003 fd34 	bl	3fac <mbedtls_sha256_starts>
    if (seed && (seed_len > 0)) {
     544:	b13f      	cbz	r7, 556 <bootutil_img_validate+0x3a>
     546:	f1b8 0f00 	cmp.w	r8, #0
     54a:	dd04      	ble.n	556 <bootutil_img_validate+0x3a>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     54c:	4642      	mov	r2, r8
     54e:	4639      	mov	r1, r7
     550:	a838      	add	r0, sp, #224	; 0xe0
     552:	f007 fa1b 	bl	798c <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     556:	f04f 0800 	mov.w	r8, #0
    size += hdr->ih_protect_tlv_size;
     55a:	8973      	ldrh	r3, [r6, #10]
    size = hdr_size = hdr->ih_hdr_size;
     55c:	8937      	ldrh	r7, [r6, #8]
     55e:	441f      	add	r7, r3
    size += hdr->ih_protect_tlv_size;
     560:	68f3      	ldr	r3, [r6, #12]
     562:	441f      	add	r7, r3
    for (off = 0; off < size; off += blk_sz) {
     564:	4547      	cmp	r7, r8
     566:	d84e      	bhi.n	606 <FIH_LABEL_FIH_CALL_END_458+0xe>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
     568:	a90d      	add	r1, sp, #52	; 0x34
     56a:	a838      	add	r0, sp, #224	; 0xe0
     56c:	f007 fa52 	bl	7a14 <mbedtls_sha256_finish>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     570:	f1bb 0f00 	cmp.w	fp, #0
     574:	d004      	beq.n	580 <bootutil_img_validate+0x64>
        memcpy(out_hash, hash, 32);
     576:	2220      	movs	r2, #32
     578:	4658      	mov	r0, fp
     57a:	a90d      	add	r1, sp, #52	; 0x34
     57c:	f005 fb81 	bl	5c82 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     580:	2300      	movs	r3, #0
     582:	4622      	mov	r2, r4
     584:	9300      	str	r3, [sp, #0]
     586:	4631      	mov	r1, r6
     588:	f64f 73ff 	movw	r3, #65535	; 0xffff
     58c:	a807      	add	r0, sp, #28
     58e:	f004 fe69 	bl	5264 <bootutil_tlv_iter_begin>
    if (rc) {
     592:	4680      	mov	r8, r0
     594:	2800      	cmp	r0, #0
     596:	d133      	bne.n	600 <FIH_LABEL_FIH_CALL_END_458+0x8>
        goto out;
    }

    if (it.tlv_end > bootutil_max_image_size(fap)) {
     598:	4620      	mov	r0, r4
     59a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
     59c:	f004 ff3e 	bl	541c <bootutil_max_image_size>
     5a0:	4286      	cmp	r6, r0
     5a2:	d82d      	bhi.n	600 <FIH_LABEL_FIH_CALL_END_458+0x8>
    int key_id = -1;
     5a4:	f04f 37ff 	mov.w	r7, #4294967295
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     5a8:	f8df 915c 	ldr.w	r9, [pc, #348]	; 708 <FIH_LABEL_FIH_CALL_END_813+0x18>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     5ac:	f10d 0316 	add.w	r3, sp, #22
     5b0:	aa05      	add	r2, sp, #20
     5b2:	a906      	add	r1, sp, #24
     5b4:	a807      	add	r0, sp, #28
     5b6:	f004 fea3 	bl	5300 <bootutil_tlv_iter_next>
        if (rc < 0) {
     5ba:	2800      	cmp	r0, #0
     5bc:	db20      	blt.n	600 <FIH_LABEL_FIH_CALL_END_458+0x8>
        } else if (rc > 0) {
     5be:	f040 8098 	bne.w	6f2 <FIH_LABEL_FIH_CALL_END_813+0x2>
        if (type == IMAGE_TLV_SHA256) {
     5c2:	f8bd 6016 	ldrh.w	r6, [sp, #22]
     5c6:	2e10      	cmp	r6, #16
     5c8:	d135      	bne.n	636 <FIH_LABEL_FIH_CALL_END_458+0x3e>
            if (len != sizeof(hash)) {
     5ca:	f8bd 6014 	ldrh.w	r6, [sp, #20]
     5ce:	2e20      	cmp	r6, #32
     5d0:	d116      	bne.n	600 <FIH_LABEL_FIH_CALL_END_458+0x8>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     5d2:	4633      	mov	r3, r6
     5d4:	4620      	mov	r0, r4
     5d6:	9906      	ldr	r1, [sp, #24]
     5d8:	aa38      	add	r2, sp, #224	; 0xe0
     5da:	f005 fa73 	bl	5ac4 <flash_area_read>
            if (rc) {
     5de:	b978      	cbnz	r0, 600 <FIH_LABEL_FIH_CALL_END_458+0x8>

000005e0 <FIH_LABEL_FIH_CALL_START_434>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     5e0:	f000 f9c6 	bl	970 <fih_cfi_get_and_increment>
     5e4:	4632      	mov	r2, r6
     5e6:	4680      	mov	r8, r0
     5e8:	a938      	add	r1, sp, #224	; 0xe0
     5ea:	a80d      	add	r0, sp, #52	; 0x34
     5ec:	f000 f988 	bl	900 <boot_fih_memequal>
     5f0:	4606      	mov	r6, r0
     5f2:	4640      	mov	r0, r8
     5f4:	f000 f9cc 	bl	990 <fih_cfi_validate>

000005f8 <FIH_LABEL_FIH_CALL_END_458>:
            if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     5f8:	4b44      	ldr	r3, [pc, #272]	; (70c <FIH_LABEL_FIH_CALL_END_813+0x1c>)
     5fa:	681b      	ldr	r3, [r3, #0]
     5fc:	42b3      	cmp	r3, r6
     5fe:	d017      	beq.n	630 <FIH_LABEL_FIH_CALL_END_458+0x38>
    }
#endif

out:
    if (rc) {
        FIH_SET(fih_rc, FIH_FAILURE);
     600:	f8da 5000 	ldr.w	r5, [sl]
     604:	e078      	b.n	6f8 <FIH_LABEL_FIH_CALL_END_813+0x8>
        if (blk_sz > tmp_buf_sz) {
     606:	9b83      	ldr	r3, [sp, #524]	; 0x20c
        blk_sz = size - off;
     608:	eba7 0908 	sub.w	r9, r7, r8
     60c:	4599      	cmp	r9, r3
     60e:	bf28      	it	cs
     610:	4699      	movcs	r9, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     612:	4641      	mov	r1, r8
     614:	464b      	mov	r3, r9
     616:	4620      	mov	r0, r4
     618:	9a82      	ldr	r2, [sp, #520]	; 0x208
     61a:	f005 fa53 	bl	5ac4 <flash_area_read>
        if (rc) {
     61e:	2800      	cmp	r0, #0
     620:	d1ee      	bne.n	600 <FIH_LABEL_FIH_CALL_END_458+0x8>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     622:	464a      	mov	r2, r9
     624:	9982      	ldr	r1, [sp, #520]	; 0x208
     626:	a838      	add	r0, sp, #224	; 0xe0
     628:	f007 f9b0 	bl	798c <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     62c:	44c8      	add	r8, r9
     62e:	e799      	b.n	564 <bootutil_img_validate+0x48>
            sha256_valid = 1;
     630:	f04f 0801 	mov.w	r8, #1
     634:	e7ba      	b.n	5ac <bootutil_img_validate+0x90>
        } else if (type == IMAGE_TLV_KEYHASH) {
     636:	2e01      	cmp	r6, #1
     638:	d135      	bne.n	6a6 <FIH_LABEL_FIH_CALL_END_458+0xae>
            if (len > 32) {
     63a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     63e:	2b20      	cmp	r3, #32
     640:	d8de      	bhi.n	600 <FIH_LABEL_FIH_CALL_END_458+0x8>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     642:	4620      	mov	r0, r4
     644:	9906      	ldr	r1, [sp, #24]
     646:	aa38      	add	r2, sp, #224	; 0xe0
     648:	f005 fa3c 	bl	5ac4 <flash_area_read>
            if (rc) {
     64c:	4607      	mov	r7, r0
     64e:	2800      	cmp	r0, #0
     650:	d1d6      	bne.n	600 <FIH_LABEL_FIH_CALL_END_458+0x8>
            key_id = bootutil_find_key(buf, len);
     652:	f89d b014 	ldrb.w	fp, [sp, #20]
    if (keyhash_len > 32) {
     656:	f1bb 0f20 	cmp.w	fp, #32
     65a:	d902      	bls.n	662 <FIH_LABEL_FIH_CALL_END_458+0x6a>
                key_id = -1;
     65c:	f04f 37ff 	mov.w	r7, #4294967295
     660:	e7a4      	b.n	5ac <bootutil_img_validate+0x90>
    for (i = 0; i < bootutil_key_cnt; i++) {
     662:	f8d9 3000 	ldr.w	r3, [r9]
     666:	4e2a      	ldr	r6, [pc, #168]	; (710 <FIH_LABEL_FIH_CALL_END_813+0x20>)
     668:	9303      	str	r3, [sp, #12]
     66a:	9b03      	ldr	r3, [sp, #12]
     66c:	429f      	cmp	r7, r3
     66e:	daf5      	bge.n	65c <FIH_LABEL_FIH_CALL_END_458+0x64>
    mbedtls_sha256_init(ctx);
     670:	a81d      	add	r0, sp, #116	; 0x74
     672:	f007 f987 	bl	7984 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     676:	2100      	movs	r1, #0
     678:	a81d      	add	r0, sp, #116	; 0x74
     67a:	f003 fc97 	bl	3fac <mbedtls_sha256_starts>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     67e:	6872      	ldr	r2, [r6, #4]
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     680:	a81d      	add	r0, sp, #116	; 0x74
     682:	6812      	ldr	r2, [r2, #0]
     684:	f856 1b08 	ldr.w	r1, [r6], #8
     688:	f007 f980 	bl	798c <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     68c:	a915      	add	r1, sp, #84	; 0x54
     68e:	a81d      	add	r0, sp, #116	; 0x74
     690:	f007 f9c0 	bl	7a14 <mbedtls_sha256_finish>
        if (!memcmp(hash, keyhash, keyhash_len)) {
     694:	465a      	mov	r2, fp
     696:	a938      	add	r1, sp, #224	; 0xe0
     698:	a815      	add	r0, sp, #84	; 0x54
     69a:	f005 facb 	bl	5c34 <memcmp>
     69e:	2800      	cmp	r0, #0
     6a0:	d084      	beq.n	5ac <bootutil_img_validate+0x90>
    for (i = 0; i < bootutil_key_cnt; i++) {
     6a2:	3701      	adds	r7, #1
     6a4:	e7e1      	b.n	66a <FIH_LABEL_FIH_CALL_END_458+0x72>
        } else if (type == EXPECTED_SIG_TLV) {
     6a6:	2e20      	cmp	r6, #32
     6a8:	d180      	bne.n	5ac <bootutil_img_validate+0x90>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     6aa:	1c7b      	adds	r3, r7, #1
     6ac:	f43f af7e 	beq.w	5ac <bootutil_img_validate+0x90>
     6b0:	f8d9 3000 	ldr.w	r3, [r9]
     6b4:	42bb      	cmp	r3, r7
     6b6:	ddd1      	ble.n	65c <FIH_LABEL_FIH_CALL_END_458+0x64>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     6b8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     6bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     6c0:	d19e      	bne.n	600 <FIH_LABEL_FIH_CALL_END_458+0x8>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     6c2:	4620      	mov	r0, r4
     6c4:	9906      	ldr	r1, [sp, #24]
     6c6:	aa38      	add	r2, sp, #224	; 0xe0
     6c8:	f005 f9fc 	bl	5ac4 <flash_area_read>
            if (rc) {
     6cc:	2800      	cmp	r0, #0
     6ce:	d197      	bne.n	600 <FIH_LABEL_FIH_CALL_END_458+0x8>

000006d0 <FIH_LABEL_FIH_CALL_START_785>:
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     6d0:	f000 f94e 	bl	970 <fih_cfi_get_and_increment>
     6d4:	b2ff      	uxtb	r7, r7
     6d6:	4683      	mov	fp, r0
     6d8:	4631      	mov	r1, r6
     6da:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     6de:	aa38      	add	r2, sp, #224	; 0xe0
     6e0:	9700      	str	r7, [sp, #0]
     6e2:	a80d      	add	r0, sp, #52	; 0x34
     6e4:	f000 f816 	bl	714 <bootutil_verify_sig>
     6e8:	4605      	mov	r5, r0
     6ea:	4658      	mov	r0, fp
     6ec:	f000 f950 	bl	990 <fih_cfi_validate>

000006f0 <FIH_LABEL_FIH_CALL_END_813>:
            key_id = -1;
     6f0:	e7b4      	b.n	65c <FIH_LABEL_FIH_CALL_END_458+0x64>
    if (rc) {
     6f2:	f1b8 0f00 	cmp.w	r8, #0
     6f6:	d083      	beq.n	600 <FIH_LABEL_FIH_CALL_END_458+0x8>
    }

    FIH_RET(fih_rc);
     6f8:	f000 f942 	bl	980 <fih_cfi_decrement>
}
     6fc:	4628      	mov	r0, r5
     6fe:	b079      	add	sp, #484	; 0x1e4
     700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     704:	20000004 	.word	0x20000004
     708:	000085f0 	.word	0x000085f0
     70c:	20000008 	.word	0x20000008
     710:	000085f4 	.word	0x000085f4

00000714 <bootutil_verify_sig>:
}

fih_ret
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_rsa_context ctx;
    int rc;
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     718:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8f4 <FIH_LABEL_FIH_CALL_END_660+0x4>
{
     71c:	f5ad 7d4d 	sub.w	sp, sp, #820	; 0x334
     720:	4606      	mov	r6, r0
    uint8_t *cp;
    uint8_t *end;

#if MBEDTLS_VERSION_NUMBER >= 0x03000000
    mbedtls_rsa_init(&ctx);
     722:	a829      	add	r0, sp, #164	; 0xa4
{
     724:	f89d b358 	ldrb.w	fp, [sp, #856]	; 0x358
     728:	4688      	mov	r8, r1
     72a:	4617      	mov	r7, r2
     72c:	4699      	mov	r9, r3
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     72e:	f8da 5000 	ldr.w	r5, [sl]
    mbedtls_rsa_init(&ctx);
     732:	f007 f8e4 	bl	78fe <mbedtls_rsa_init>
#else
    mbedtls_rsa_init(&ctx, 0, 0);
#endif

    cp = (uint8_t *)bootutil_keys[key_id].key;
     736:	4b70      	ldr	r3, [pc, #448]	; (8f8 <FIH_LABEL_FIH_CALL_END_660+0x8>)
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     738:	aa8c      	add	r2, sp, #560	; 0x230
    cp = (uint8_t *)bootutil_keys[key_id].key;
     73a:	f853 403b 	ldr.w	r4, [r3, fp, lsl #3]
    end = cp + *bootutil_keys[key_id].len;
     73e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
     742:	685b      	ldr	r3, [r3, #4]
    cp = (uint8_t *)bootutil_keys[key_id].key;
     744:	9404      	str	r4, [sp, #16]
    end = cp + *bootutil_keys[key_id].len;
     746:	681b      	ldr	r3, [r3, #0]
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     748:	a804      	add	r0, sp, #16
    end = cp + *bootutil_keys[key_id].len;
     74a:	441c      	add	r4, r3
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     74c:	4621      	mov	r1, r4
     74e:	2330      	movs	r3, #48	; 0x30
     750:	f005 fefc 	bl	654c <mbedtls_asn1_get_tag>
     754:	bb70      	cbnz	r0, 7b4 <bootutil_verify_sig+0xa0>
    if (*p + len != end) {
     756:	9b04      	ldr	r3, [sp, #16]
     758:	9a8c      	ldr	r2, [sp, #560]	; 0x230
     75a:	4413      	add	r3, r2
     75c:	429c      	cmp	r4, r3
     75e:	d129      	bne.n	7b4 <bootutil_verify_sig+0xa0>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     760:	4621      	mov	r1, r4
     762:	aa2b      	add	r2, sp, #172	; 0xac
     764:	a804      	add	r0, sp, #16
     766:	f005 ff05 	bl	6574 <mbedtls_asn1_get_mpi>
     76a:	bb18      	cbnz	r0, 7b4 <bootutil_verify_sig+0xa0>
        (rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(E))) != 0) {
     76c:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
     770:	465a      	mov	r2, fp
     772:	4621      	mov	r1, r4
     774:	a804      	add	r0, sp, #16
     776:	f005 fefd 	bl	6574 <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     77a:	9003      	str	r0, [sp, #12]
     77c:	b9d0      	cbnz	r0, 7b4 <bootutil_verify_sig+0xa0>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     77e:	a82b      	add	r0, sp, #172	; 0xac
     780:	f005 ffef 	bl	6762 <mbedtls_mpi_size>
    if (*p != end) {
     784:	9a04      	ldr	r2, [sp, #16]
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     786:	902a      	str	r0, [sp, #168]	; 0xa8
    if (*p != end) {
     788:	4294      	cmp	r4, r2
     78a:	d113      	bne.n	7b4 <bootutil_verify_sig+0xa0>
    rc = mbedtls_rsa_import(ctx, &ctx->MBEDTLS_CONTEXT_MEMBER(N), NULL,
     78c:	9b03      	ldr	r3, [sp, #12]
     78e:	f8cd b004 	str.w	fp, [sp, #4]
     792:	461a      	mov	r2, r3
     794:	9300      	str	r3, [sp, #0]
     796:	a92b      	add	r1, sp, #172	; 0xac
     798:	a829      	add	r0, sp, #164	; 0xa4
     79a:	f007 f86d 	bl	7878 <mbedtls_rsa_import>
    if (rc != 0) {
     79e:	b948      	cbnz	r0, 7b4 <bootutil_verify_sig+0xa0>
    rc = mbedtls_rsa_check_pubkey(ctx);
     7a0:	a829      	add	r0, sp, #164	; 0xa4
     7a2:	f003 fb95 	bl	3ed0 <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
     7a6:	b928      	cbnz	r0, 7b4 <bootutil_verify_sig+0xa0>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     7a8:	a82b      	add	r0, sp, #172	; 0xac
     7aa:	f005 ffda 	bl	6762 <mbedtls_mpi_size>

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     7ae:	4581      	cmp	r9, r0
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     7b0:	902a      	str	r0, [sp, #168]	; 0xa8
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     7b2:	d00c      	beq.n	7ce <FIH_LABEL_FIH_CALL_START_235>
        mbedtls_rsa_free(&ctx);
     7b4:	a829      	add	r0, sp, #164	; 0xa4
     7b6:	f007 f8ac 	bl	7912 <mbedtls_rsa_free>
        goto out;
    }
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);

out:
    mbedtls_rsa_free(&ctx);
     7ba:	a829      	add	r0, sp, #164	; 0xa4
     7bc:	f007 f8a9 	bl	7912 <mbedtls_rsa_free>

    FIH_RET(fih_rc);
     7c0:	f000 f8de 	bl	980 <fih_cfi_decrement>
}
     7c4:	4628      	mov	r0, r5
     7c6:	f50d 7d4d 	add.w	sp, sp, #820	; 0x334
     7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000007ce <FIH_LABEL_FIH_CALL_START_235>:
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     7ce:	f000 f8cf 	bl	970 <fih_cfi_get_and_increment>
    if (ctx->MBEDTLS_CONTEXT_MEMBER(len) != PSS_EMLEN ||
     7d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     7d4:	4681      	mov	r9, r0
    if (ctx->MBEDTLS_CONTEXT_MEMBER(len) != PSS_EMLEN ||
     7d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     7da:	f8da 5000 	ldr.w	r5, [sl]
    if (ctx->MBEDTLS_CONTEXT_MEMBER(len) != PSS_EMLEN ||
     7de:	f040 8082 	bne.w	8e6 <FIH_LABEL_FIH_CALL_END_630>
    if (hlen != PSS_HLEN) {
     7e2:	f1b8 0f20 	cmp.w	r8, #32
     7e6:	d17e      	bne.n	8e6 <FIH_LABEL_FIH_CALL_END_630>
    if (mbedtls_rsa_public(ctx, sig, em)) {
     7e8:	4639      	mov	r1, r7
     7ea:	aa8c      	add	r2, sp, #560	; 0x230
     7ec:	a829      	add	r0, sp, #164	; 0xa4
     7ee:	f003 fb95 	bl	3f1c <mbedtls_rsa_public>
     7f2:	4604      	mov	r4, r0
     7f4:	2800      	cmp	r0, #0
     7f6:	d176      	bne.n	8e6 <FIH_LABEL_FIH_CALL_END_630>
    if (em[PSS_EMLEN - 1] != 0xbc) {
     7f8:	f89d 332f 	ldrb.w	r3, [sp, #815]	; 0x32f
     7fc:	2bbc      	cmp	r3, #188	; 0xbc
     7fe:	d172      	bne.n	8e6 <FIH_LABEL_FIH_CALL_END_630>
    int count = PSS_MASK_LEN;
     800:	27df      	movs	r7, #223	; 0xdf
    uint8_t counter[4] = { 0, 0, 0, 0 };
     802:	9005      	str	r0, [sp, #20]
     804:	f50d 7aa8 	add.w	sl, sp, #336	; 0x150
    mbedtls_sha256_init(ctx);
     808:	a80e      	add	r0, sp, #56	; 0x38
     80a:	f007 f8bb 	bl	7984 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     80e:	2100      	movs	r1, #0
     810:	a80e      	add	r0, sp, #56	; 0x38
     812:	f003 fbcb 	bl	3fac <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     816:	2220      	movs	r2, #32
     818:	f20d 310f 	addw	r1, sp, #783	; 0x30f
     81c:	a80e      	add	r0, sp, #56	; 0x38
     81e:	f007 f8b5 	bl	798c <mbedtls_sha256_update>
     822:	2204      	movs	r2, #4
     824:	a905      	add	r1, sp, #20
     826:	a80e      	add	r0, sp, #56	; 0x38
     828:	f007 f8b0 	bl	798c <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     82c:	a906      	add	r1, sp, #24
     82e:	a80e      	add	r0, sp, #56	; 0x38
     830:	f007 f8f0 	bl	7a14 <mbedtls_sha256_finish>
        if (bytes > count)
     834:	2f20      	cmp	r7, #32
     836:	46b8      	mov	r8, r7
     838:	bfa8      	it	ge
     83a:	f04f 0820 	movge.w	r8, #32
        counter[3]++;
     83e:	f89d 3017 	ldrb.w	r3, [sp, #23]
        memcpy(mask, htmp, bytes);
     842:	4650      	mov	r0, sl
        counter[3]++;
     844:	3301      	adds	r3, #1
        memcpy(mask, htmp, bytes);
     846:	4642      	mov	r2, r8
     848:	a906      	add	r1, sp, #24
        count -= bytes;
     84a:	eba7 0708 	sub.w	r7, r7, r8
        counter[3]++;
     84e:	f88d 3017 	strb.w	r3, [sp, #23]
        memcpy(mask, htmp, bytes);
     852:	f005 fa16 	bl	5c82 <memcpy>
    while (count > 0) {
     856:	2f00      	cmp	r7, #0
        mask += bytes;
     858:	44c2      	add	sl, r8
    while (count > 0) {
     85a:	dcd5      	bgt.n	808 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x8>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     85c:	aa54      	add	r2, sp, #336	; 0x150
     85e:	4610      	mov	r0, r2
     860:	21df      	movs	r1, #223	; 0xdf
     862:	ab8c      	add	r3, sp, #560	; 0x230
        db_mask[i] ^= em[i];
     864:	7807      	ldrb	r7, [r0, #0]
     866:	f813 cb01 	ldrb.w	ip, [r3], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     86a:	3901      	subs	r1, #1
        db_mask[i] ^= em[i];
     86c:	ea87 070c 	eor.w	r7, r7, ip
     870:	f800 7b01 	strb.w	r7, [r0], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     874:	d1f6      	bne.n	864 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x64>
    db_mask[0] &= 0x7F;
     876:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
     87a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     87e:	f88d 3150 	strb.w	r3, [sp, #336]	; 0x150
        if (db_mask[i] != 0) {
     882:	f812 7b01 	ldrb.w	r7, [r2], #1
     886:	bb77      	cbnz	r7, 8e6 <FIH_LABEL_FIH_CALL_END_630>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     888:	3401      	adds	r4, #1
     88a:	2cbe      	cmp	r4, #190	; 0xbe
     88c:	d1f9      	bne.n	882 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x82>
    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     88e:	f89d 320e 	ldrb.w	r3, [sp, #526]	; 0x20e
     892:	2b01      	cmp	r3, #1
     894:	d127      	bne.n	8e6 <FIH_LABEL_FIH_CALL_END_630>
    mbedtls_sha256_init(ctx);
     896:	a80e      	add	r0, sp, #56	; 0x38
     898:	f007 f874 	bl	7984 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     89c:	4639      	mov	r1, r7
     89e:	a80e      	add	r0, sp, #56	; 0x38
     8a0:	f003 fb84 	bl	3fac <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     8a4:	2208      	movs	r2, #8
     8a6:	4915      	ldr	r1, [pc, #84]	; (8fc <FIH_LABEL_FIH_CALL_END_660+0xc>)
     8a8:	a80e      	add	r0, sp, #56	; 0x38
     8aa:	f007 f86f 	bl	798c <mbedtls_sha256_update>
     8ae:	4631      	mov	r1, r6
     8b0:	2220      	movs	r2, #32
     8b2:	a80e      	add	r0, sp, #56	; 0x38
     8b4:	f007 f86a 	bl	798c <mbedtls_sha256_update>
     8b8:	2220      	movs	r2, #32
     8ba:	f20d 210f 	addw	r1, sp, #527	; 0x20f
     8be:	a80e      	add	r0, sp, #56	; 0x38
     8c0:	f007 f864 	bl	798c <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     8c4:	a906      	add	r1, sp, #24
     8c6:	a80e      	add	r0, sp, #56	; 0x38
     8c8:	f007 f8a4 	bl	7a14 <mbedtls_sha256_finish>

000008cc <FIH_LABEL_FIH_CALL_START_606>:
    FIH_CALL(boot_fih_memequal, fih_rc, h2, &em[PSS_HASH_OFFSET], PSS_HLEN);
     8cc:	f000 f850 	bl	970 <fih_cfi_get_and_increment>
     8d0:	2220      	movs	r2, #32
     8d2:	4604      	mov	r4, r0
     8d4:	f20d 310f 	addw	r1, sp, #783	; 0x30f
     8d8:	a806      	add	r0, sp, #24
     8da:	f000 f811 	bl	900 <boot_fih_memequal>
     8de:	4605      	mov	r5, r0
     8e0:	4620      	mov	r0, r4
     8e2:	f000 f855 	bl	990 <fih_cfi_validate>

000008e6 <FIH_LABEL_FIH_CALL_END_630>:
    FIH_RET(fih_rc);
     8e6:	f000 f84b 	bl	980 <fih_cfi_decrement>
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     8ea:	4648      	mov	r0, r9
     8ec:	f000 f850 	bl	990 <fih_cfi_validate>

000008f0 <FIH_LABEL_FIH_CALL_END_660>:
     8f0:	e763      	b.n	7ba <bootutil_verify_sig+0xa6>
     8f2:	bf00      	nop
     8f4:	20000004 	.word	0x20000004
     8f8:	000085f4 	.word	0x000085f4
     8fc:	000089d8 	.word	0x000089d8

00000900 <boot_fih_memequal>:
{
    return memcmp(s1, s2, n);
}
#else
fih_ret boot_fih_memequal(const void *s1, const void *s2, size_t n)
{
     900:	b570      	push	{r4, r5, r6, lr}
    size_t i;
    uint8_t *s1_p = (uint8_t*) s1;
    uint8_t *s2_p = (uint8_t*) s2;
    FIH_DECLARE(ret, FIH_FAILURE);
     902:	4b09      	ldr	r3, [pc, #36]	; (928 <boot_fih_memequal+0x28>)
{
     904:	4604      	mov	r4, r0
    FIH_DECLARE(ret, FIH_FAILURE);
     906:	681d      	ldr	r5, [r3, #0]

    for (i = 0; i < n; i++) {
     908:	2300      	movs	r3, #0
     90a:	4293      	cmp	r3, r2
     90c:	d105      	bne.n	91a <boot_fih_memequal+0x1a>
        if (s1_p[i] != s2_p[i]) {
            goto out;
        }
    }
    if (i == n) {
        ret = FIH_SUCCESS;
     90e:	4b07      	ldr	r3, [pc, #28]	; (92c <boot_fih_memequal+0x2c>)
     910:	681d      	ldr	r5, [r3, #0]
    }

out:
    FIH_RET(ret);
     912:	f000 f835 	bl	980 <fih_cfi_decrement>
}
     916:	4628      	mov	r0, r5
     918:	bd70      	pop	{r4, r5, r6, pc}
        if (s1_p[i] != s2_p[i]) {
     91a:	5ce6      	ldrb	r6, [r4, r3]
     91c:	5cc8      	ldrb	r0, [r1, r3]
     91e:	4286      	cmp	r6, r0
     920:	d1f7      	bne.n	912 <boot_fih_memequal+0x12>
    for (i = 0; i < n; i++) {
     922:	3301      	adds	r3, #1
     924:	e7f1      	b.n	90a <boot_fih_memequal+0xa>
     926:	bf00      	nop
     928:	20000004 	.word	0x20000004
     92c:	20000008 	.word	0x20000008

00000930 <boot_find_status>:
 *
 * @returns 0 on success, -1 on errors
 */
int
boot_find_status(int image_index, const struct flash_area **fap)
{
     930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     */

    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
        uint8_t magic[BOOT_MAGIC_SZ];

        if (flash_area_open(areas[i], fap)) {
     932:	2002      	movs	r0, #2
{
     934:	460c      	mov	r4, r1
        if (flash_area_open(areas[i], fap)) {
     936:	f001 f8f1 	bl	1b1c <flash_area_open>
     93a:	b950      	cbnz	r0, 952 <boot_find_status+0x22>
            break;
        }

        if (flash_area_read(*fap, boot_magic_off(*fap), magic, BOOT_MAGIC_SZ)) {
     93c:	6820      	ldr	r0, [r4, #0]
     93e:	2310      	movs	r3, #16
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
     940:	6881      	ldr	r1, [r0, #8]
     942:	466a      	mov	r2, sp
     944:	3910      	subs	r1, #16
     946:	f005 f8bd 	bl	5ac4 <flash_area_read>
     94a:	b128      	cbz	r0, 958 <boot_find_status+0x28>

        if (BOOT_MAGIC_GOOD == boot_magic_decode(magic)) {
            return 0;
        }

        flash_area_close(*fap);
     94c:	6820      	ldr	r0, [r4, #0]
     94e:	f005 f8b8 	bl	5ac2 <flash_area_close>
    }

    /* If we got here, no magic was found */
    fap = NULL;
    return -1;
     952:	f04f 30ff 	mov.w	r0, #4294967295
     956:	e006      	b.n	966 <boot_find_status+0x36>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
     958:	2210      	movs	r2, #16
     95a:	4668      	mov	r0, sp
     95c:	4903      	ldr	r1, [pc, #12]	; (96c <boot_find_status+0x3c>)
     95e:	f005 f969 	bl	5c34 <memcmp>
     962:	2800      	cmp	r0, #0
     964:	d1f2      	bne.n	94c <boot_find_status+0x1c>
}
     966:	b004      	add	sp, #16
     968:	bd10      	pop	{r4, pc}
     96a:	bf00      	nop
     96c:	000089c0 	.word	0x000089c0

00000970 <fih_cfi_get_and_increment>:

/* Increment the CFI counter by one, and return the value before the increment.
 */
fih_int fih_cfi_get_and_increment(void)
{
    fih_int saved = _fih_cfi_ctr;
     970:	4b02      	ldr	r3, [pc, #8]	; (97c <fih_cfi_get_and_increment+0xc>)
     972:	6818      	ldr	r0, [r3, #0]
    _fih_cfi_ctr = fih_int_encode(fih_int_decode(saved) + 1);
     974:	1c42      	adds	r2, r0, #1
     976:	601a      	str	r2, [r3, #0]
    return saved;
}
     978:	4770      	bx	lr
     97a:	bf00      	nop
     97c:	20000208 	.word	0x20000208

00000980 <fih_cfi_decrement>:
/* Decrement the global CFI counter by one, so that it has the same value as
 * before the cfi_precall
 */
void fih_cfi_decrement(void)
{
    _fih_cfi_ctr = fih_int_encode(fih_int_decode(_fih_cfi_ctr) - 1);
     980:	4a02      	ldr	r2, [pc, #8]	; (98c <fih_cfi_decrement+0xc>)
     982:	6813      	ldr	r3, [r2, #0]
     984:	3b01      	subs	r3, #1
     986:	6013      	str	r3, [r2, #0]
}
     988:	4770      	bx	lr
     98a:	bf00      	nop
     98c:	20000208 	.word	0x20000208

00000990 <fih_cfi_validate>:
    if (fih_int_decode(saved) != fih_int_decode(_fih_cfi_ctr)) {
     990:	4b03      	ldr	r3, [pc, #12]	; (9a0 <fih_cfi_validate+0x10>)
     992:	681b      	ldr	r3, [r3, #0]
     994:	4283      	cmp	r3, r0
     996:	d001      	beq.n	99c <fih_cfi_validate+0xc>
        FIH_PANIC;
     998:	f004 bd4f 	b.w	543a <fih_panic_loop>
}
     99c:	4770      	bx	lr
     99e:	bf00      	nop
     9a0:	20000208 	.word	0x20000208

000009a4 <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         FIH_NO_BOOTABLE_IMAGE            if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_ret
boot_validate_slot(struct boot_loader_state *state, int slot,
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     9a8:	4b3d      	ldr	r3, [pc, #244]	; (aa0 <FIH_LABEL_FIH_CALL_END_509+0x68>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     9aa:	b08b      	sub	sp, #44	; 0x2c
     9ac:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9ae:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     9b0:	460d      	mov	r5, r1
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     9b2:	681c      	ldr	r4, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9b4:	f004 fc32 	bl	521c <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     9b8:	a908      	add	r1, sp, #32
     9ba:	b2c0      	uxtb	r0, r0
     9bc:	f001 f8ae 	bl	1b1c <flash_area_open>
    if (rc != 0) {
     9c0:	b128      	cbz	r0, 9ce <boot_validate_slot.isra.0+0x2a>
#endif

out:
    flash_area_close(fap);

    FIH_RET(fih_rc);
     9c2:	f7ff ffdd 	bl	980 <fih_cfi_decrement>
}
     9c6:	4620      	mov	r0, r4
     9c8:	b00b      	add	sp, #44	; 0x2c
     9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9ce:	4629      	mov	r1, r5
     9d0:	f004 fc24 	bl	521c <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     9d4:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     9d8:	a909      	add	r1, sp, #36	; 0x24
     9da:	b2c0      	uxtb	r0, r0
     9dc:	fb0b 6b05 	mla	fp, fp, r5, r6
     9e0:	f001 f89c 	bl	1b1c <flash_area_open>
    if (rc != 0) {
     9e4:	2800      	cmp	r0, #0
     9e6:	d03f      	beq.n	a68 <FIH_LABEL_FIH_CALL_END_509+0x30>
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     9e8:	272c      	movs	r7, #44	; 0x2c
     9ea:	436f      	muls	r7, r5
     9ec:	eb06 0807 	add.w	r8, r6, r7
     9f0:	f8d8 4010 	ldr.w	r4, [r8, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     9f4:	f014 0410 	ands.w	r4, r4, #16
     9f8:	d147      	bne.n	a8a <FIH_LABEL_FIH_CALL_END_509+0x52>

000009fa <FIH_LABEL_FIH_CALL_START_421>:
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
     9fa:	f7ff ffb9 	bl	970 <fih_cfi_get_and_increment>
     9fe:	9b08      	ldr	r3, [sp, #32]
     a00:	4681      	mov	r9, r0
     a02:	9307      	str	r3, [sp, #28]

00000a04 <FIH_LABEL_FIH_CALL_START_453>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     a04:	f7ff ffb4 	bl	970 <fih_cfi_get_and_increment>
     a08:	f44f 7280 	mov.w	r2, #256	; 0x100
     a0c:	9201      	str	r2, [sp, #4]
     a0e:	4a25      	ldr	r2, [pc, #148]	; (aa4 <FIH_LABEL_FIH_CALL_END_509+0x6c>)
     a10:	4621      	mov	r1, r4
     a12:	4682      	mov	sl, r0
     a14:	e9cd 4403 	strd	r4, r4, [sp, #12]
     a18:	9b07      	ldr	r3, [sp, #28]
     a1a:	9402      	str	r4, [sp, #8]
     a1c:	9200      	str	r2, [sp, #0]
     a1e:	4620      	mov	r0, r4
     a20:	465a      	mov	r2, fp
     a22:	f7ff fd7b 	bl	51c <bootutil_img_validate>
     a26:	4604      	mov	r4, r0
     a28:	4650      	mov	r0, sl
     a2a:	f7ff ffb1 	bl	990 <fih_cfi_validate>

00000a2e <FIH_LABEL_FIH_CALL_END_487>:
    FIH_RET(fih_rc);
     a2e:	f7ff ffa7 	bl	980 <fih_cfi_decrement>
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
     a32:	4648      	mov	r0, r9
     a34:	f7ff ffac 	bl	990 <fih_cfi_validate>

00000a38 <FIH_LABEL_FIH_CALL_END_509>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a38:	4b1b      	ldr	r3, [pc, #108]	; (aa8 <FIH_LABEL_FIH_CALL_END_509+0x70>)
     a3a:	59f2      	ldr	r2, [r6, r7]
    if (!boot_is_header_valid(hdr, fap) || FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     a3c:	9808      	ldr	r0, [sp, #32]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a3e:	429a      	cmp	r2, r3
     a40:	d10c      	bne.n	a5c <FIH_LABEL_FIH_CALL_END_509+0x24>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     a42:	f8d8 200c 	ldr.w	r2, [r8, #12]
     a46:	f8b8 3008 	ldrh.w	r3, [r8, #8]
    if (a > UINT32_MAX - b) {
     a4a:	189b      	adds	r3, r3, r2
     a4c:	d206      	bcs.n	a5c <FIH_LABEL_FIH_CALL_END_509+0x24>
    if (size >= flash_area_get_size(fap)) {
     a4e:	6882      	ldr	r2, [r0, #8]
     a50:	4293      	cmp	r3, r2
     a52:	d203      	bcs.n	a5c <FIH_LABEL_FIH_CALL_END_509+0x24>
    if (!boot_is_header_valid(hdr, fap) || FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     a54:	4b15      	ldr	r3, [pc, #84]	; (aac <FIH_LABEL_FIH_CALL_END_509+0x74>)
     a56:	681b      	ldr	r3, [r3, #0]
     a58:	42a3      	cmp	r3, r4
     a5a:	d01d      	beq.n	a98 <FIH_LABEL_FIH_CALL_END_509+0x60>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     a5c:	b1d5      	cbz	r5, a94 <FIH_LABEL_FIH_CALL_END_509+0x5c>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     a5e:	2100      	movs	r1, #0
     a60:	6882      	ldr	r2, [r0, #8]
     a62:	f005 f859 	bl	5b18 <flash_area_erase>
     a66:	e015      	b.n	a94 <FIH_LABEL_FIH_CALL_END_509+0x5c>
    erased_val = flash_area_erased_val(fap);
     a68:	9809      	ldr	r0, [sp, #36]	; 0x24
     a6a:	f005 f870 	bl	5b4e <flash_area_erased_val>
     a6e:	4604      	mov	r4, r0
    flash_area_close(fap);
     a70:	9809      	ldr	r0, [sp, #36]	; 0x24
     a72:	f005 f826 	bl	5ac2 <flash_area_close>
    for (i = 0; i < len; i++) {
     a76:	f10b 33ff 	add.w	r3, fp, #4294967295
     a7a:	f10b 0203 	add.w	r2, fp, #3
        if (val != p[i]) {
     a7e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     a82:	42a1      	cmp	r1, r4
     a84:	d1b0      	bne.n	9e8 <boot_validate_slot.isra.0+0x44>
    for (i = 0; i < len; i++) {
     a86:	4293      	cmp	r3, r2
     a88:	d1f9      	bne.n	a7e <FIH_LABEL_FIH_CALL_END_509+0x46>
        if (slot != BOOT_PRIMARY_SLOT) {
     a8a:	b11d      	cbz	r5, a94 <FIH_LABEL_FIH_CALL_END_509+0x5c>
            swap_erase_trailer_sectors(state, fap);
     a8c:	4630      	mov	r0, r6
     a8e:	9908      	ldr	r1, [sp, #32]
     a90:	f004 fda9 	bl	55e6 <swap_erase_trailer_sectors>
        fih_rc = FIH_NO_BOOTABLE_IMAGE;
     a94:	4b06      	ldr	r3, [pc, #24]	; (ab0 <FIH_LABEL_FIH_CALL_END_509+0x78>)
     a96:	681c      	ldr	r4, [r3, #0]
    flash_area_close(fap);
     a98:	9808      	ldr	r0, [sp, #32]
     a9a:	f005 f812 	bl	5ac2 <flash_area_close>
     a9e:	e790      	b.n	9c2 <boot_validate_slot.isra.0+0x1e>
     aa0:	20000004 	.word	0x20000004
     aa4:	200033da 	.word	0x200033da
     aa8:	96f3b83d 	.word	0x96f3b83d
     aac:	20000008 	.word	0x20000008
     ab0:	20000000 	.word	0x20000000

00000ab4 <boot_swap_image.isra.0>:
 *                                  function on return.
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
     ab4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     ab6:	460d      	mov	r5, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     ab8:	2100      	movs	r1, #0
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
     aba:	4604      	mov	r4, r0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     abc:	4628      	mov	r0, r5
    size = copy_size = 0;
     abe:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (boot_status_is_reset(bs)) {
     ac2:	f004 fd4f 	bl	5564 <boot_status_is_reset>
     ac6:	b1e8      	cbz	r0, b04 <boot_swap_image.isra.0+0x50>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     ac8:	4e15      	ldr	r6, [pc, #84]	; (b20 <boot_swap_image.isra.0+0x6c>)
     aca:	6823      	ldr	r3, [r4, #0]
     acc:	42b3      	cmp	r3, r6
     ace:	d103      	bne.n	ad8 <boot_swap_image.isra.0+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     ad0:	4620      	mov	r0, r4
     ad2:	aa03      	add	r2, sp, #12
     ad4:	f004 fcda 	bl	548c <boot_read_image_size.constprop.0.isra.0>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     ad8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     ada:	42b3      	cmp	r3, r6
     adc:	d104      	bne.n	ae8 <boot_swap_image.isra.0+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     ade:	2101      	movs	r1, #1
     ae0:	4620      	mov	r0, r4
     ae2:	aa02      	add	r2, sp, #8
     ae4:	f004 fcd2 	bl	548c <boot_read_image_size.constprop.0.isra.0>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        if (size > copy_size) {
     ae8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
     aec:	4293      	cmp	r3, r2
            copy_size = size;
     aee:	bf88      	it	hi
     af0:	9303      	strhi	r3, [sp, #12]
        }

        bs->swap_size = copy_size;
     af2:	9b03      	ldr	r3, [sp, #12]
     af4:	60ab      	str	r3, [r5, #8]
        }
#endif
        flash_area_close(fap);
    }

    swap_run(state, bs, copy_size);
     af6:	4629      	mov	r1, r5
     af8:	4620      	mov	r0, r4
     afa:	9a03      	ldr	r2, [sp, #12]
     afc:	f000 fa2c 	bl	f58 <swap_run>
#endif
    rc = BOOT_HOOK_CALL(boot_copy_region_post_hook, 0, BOOT_CURR_IMG(state),
                        BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT), size);

    return 0;
}
     b00:	b004      	add	sp, #16
     b02:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_find_status(image_index, &fap);
     b04:	a901      	add	r1, sp, #4
     b06:	f7ff ff13 	bl	930 <boot_find_status>
        rc = boot_read_swap_size(fap, &bs->swap_size);
     b0a:	9801      	ldr	r0, [sp, #4]
     b0c:	f105 0108 	add.w	r1, r5, #8
     b10:	f004 fc5f 	bl	53d2 <boot_read_swap_size>
        copy_size = bs->swap_size;
     b14:	68ab      	ldr	r3, [r5, #8]
        flash_area_close(fap);
     b16:	9801      	ldr	r0, [sp, #4]
        copy_size = bs->swap_size;
     b18:	9303      	str	r3, [sp, #12]
        flash_area_close(fap);
     b1a:	f004 ffd2 	bl	5ac2 <flash_area_close>
     b1e:	e7ea      	b.n	af6 <boot_swap_image.isra.0+0x42>
     b20:	96f3b83d 	.word	0x96f3b83d

00000b24 <boot_copy_region>:
{
     b24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b28:	4688      	mov	r8, r1
     b2a:	4691      	mov	r9, r2
     b2c:	469a      	mov	sl, r3
    bytes_copied = 0;
     b2e:	2600      	movs	r6, #0
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b30:	f8df b068 	ldr.w	fp, [pc, #104]	; b9c <boot_copy_region+0x78>
     b34:	4c1a      	ldr	r4, [pc, #104]	; (ba0 <boot_copy_region+0x7c>)
     b36:	4d1b      	ldr	r5, [pc, #108]	; (ba4 <boot_copy_region+0x80>)
    while (bytes_copied < sz) {
     b38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b3a:	429e      	cmp	r6, r3
     b3c:	d301      	bcc.n	b42 <boot_copy_region+0x1e>
    return 0;
     b3e:	2000      	movs	r0, #0
     b40:	e00f      	b.n	b62 <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b44:	4640      	mov	r0, r8
        if (sz - bytes_copied > sizeof buf) {
     b46:	1b9f      	subs	r7, r3, r6
     b48:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     b4c:	bf28      	it	cs
     b4e:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b52:	4a12      	ldr	r2, [pc, #72]	; (b9c <boot_copy_region+0x78>)
     b54:	463b      	mov	r3, r7
     b56:	eb06 010a 	add.w	r1, r6, sl
     b5a:	f004 ffb3 	bl	5ac4 <flash_area_read>
        if (rc != 0) {
     b5e:	b110      	cbz	r0, b66 <boot_copy_region+0x42>
            return BOOT_EFLASH;
     b60:	2001      	movs	r0, #1
}
     b62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     b66:	990a      	ldr	r1, [sp, #40]	; 0x28
     b68:	463b      	mov	r3, r7
     b6a:	465a      	mov	r2, fp
     b6c:	4648      	mov	r0, r9
     b6e:	1871      	adds	r1, r6, r1
     b70:	f004 ffbd 	bl	5aee <flash_area_write>
        if (rc != 0) {
     b74:	2800      	cmp	r0, #0
     b76:	d1f3      	bne.n	b60 <boot_copy_region+0x3c>
     b78:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     b7c:	443e      	add	r6, r7
     b7e:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     b82:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     b86:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     b8a:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     b8e:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     b92:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     b96:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     b9a:	e7cd      	b.n	b38 <boot_copy_region+0x14>
     b9c:	2000120c 	.word	0x2000120c
     ba0:	50018000 	.word	0x50018000
     ba4:	6e524635 	.word	0x6e524635

00000ba8 <context_boot_go>:
#endif
}

fih_ret
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     bac:	460e      	mov	r6, r1

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     bae:	2100      	movs	r1, #0
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     bb0:	4b90      	ldr	r3, [pc, #576]	; (df4 <FIH_LABEL_FIH_CALL_END_2260+0x40>)
{
     bb2:	b086      	sub	sp, #24
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     bb4:	6243      	str	r3, [r0, #36]	; 0x24
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     bb6:	4b90      	ldr	r3, [pc, #576]	; (df8 <FIH_LABEL_FIH_CALL_END_2260+0x44>)
{
     bb8:	4604      	mov	r4, r0
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     bba:	6503      	str	r3, [r0, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     bbc:	4608      	mov	r0, r1
     bbe:	f004 fb2d 	bl	521c <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     bc2:	f104 0120 	add.w	r1, r4, #32
     bc6:	b2c0      	uxtb	r0, r0
     bc8:	f000 ffa8 	bl	1b1c <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     bcc:	2101      	movs	r1, #1
     bce:	2000      	movs	r0, #0
     bd0:	f004 fb24 	bl	521c <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     bd4:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     bd8:	b2c0      	uxtb	r0, r0
     bda:	f000 ff9f 	bl	1b1c <flash_area_open>
    rc = boot_read_sectors(state);
     bde:	4620      	mov	r0, r4
     be0:	f004 fc95 	bl	550e <boot_read_sectors>
    if (rc != 0) {
     be4:	2800      	cmp	r0, #0
     be6:	d149      	bne.n	c7c <context_boot_go+0xd4>
    rc = boot_read_image_headers(state, false, NULL);
     be8:	2200      	movs	r2, #0
     bea:	4620      	mov	r0, r4
     bec:	4611      	mov	r1, r2
     bee:	f004 fc37 	bl	5460 <boot_read_image_headers>
    if (rc != 0) {
     bf2:	2800      	cmp	r0, #0
     bf4:	d159      	bne.n	caa <context_boot_go+0x102>
    if (boot_slots_compatible(state)) {
     bf6:	4620      	mov	r0, r4
     bf8:	f004 fe21 	bl	583e <boot_slots_compatible>
     bfc:	2800      	cmp	r0, #0
     bfe:	d054      	beq.n	caa <context_boot_go+0x102>
        boot_status_reset(bs);
     c00:	a802      	add	r0, sp, #8
     c02:	f004 fca6 	bl	5552 <boot_status_reset>
        rc = swap_read_status(state, bs);
     c06:	4601      	mov	r1, r0
     c08:	4620      	mov	r0, r4
     c0a:	f004 fd41 	bl	5690 <swap_read_status>
        if (rc != 0) {
     c0e:	2800      	cmp	r0, #0
     c10:	d14b      	bne.n	caa <context_boot_go+0x102>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     c12:	a802      	add	r0, sp, #8
     c14:	f004 fca6 	bl	5564 <boot_status_is_reset>
     c18:	f080 0101 	eor.w	r1, r0, #1
     c1c:	aa02      	add	r2, sp, #8
     c1e:	4620      	mov	r0, r4
     c20:	b2c9      	uxtb	r1, r1
     c22:	f004 fc1d 	bl	5460 <boot_read_image_headers>
        if (rc != 0) {
     c26:	4602      	mov	r2, r0
     c28:	2800      	cmp	r0, #0
     c2a:	d13e      	bne.n	caa <context_boot_go+0x102>
        if (!boot_status_is_reset(bs)) {
     c2c:	a802      	add	r0, sp, #8
     c2e:	f004 fc99 	bl	5564 <boot_status_is_reset>
     c32:	4605      	mov	r5, r0
     c34:	bbe8      	cbnz	r0, cb2 <context_boot_go+0x10a>
    rc = boot_swap_image(state, bs);
     c36:	4620      	mov	r0, r4
     c38:	a902      	add	r1, sp, #8
     c3a:	f7ff ff3b 	bl	ab4 <boot_swap_image.isra.0>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     c42:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     c46:	3b03      	subs	r3, #3
     c48:	2b01      	cmp	r3, #1
     c4a:	d806      	bhi.n	c5a <context_boot_go+0xb2>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c4c:	4628      	mov	r0, r5
     c4e:	f004 fd6d 	bl	572c <swap_set_image_ok>
        if (rc != 0) {
     c52:	b110      	cbz	r0, c5a <context_boot_go+0xb2>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c54:	23ff      	movs	r3, #255	; 0xff
     c56:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     c5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
     c5e:	3b02      	subs	r3, #2
     c60:	2b02      	cmp	r3, #2
     c62:	d806      	bhi.n	c72 <context_boot_go+0xca>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     c64:	2000      	movs	r0, #0
     c66:	f004 fd4f 	bl	5708 <swap_set_copy_done>
        if (rc != 0) {
     c6a:	b110      	cbz	r0, c72 <context_boot_go+0xca>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c6c:	23ff      	movs	r3, #255	; 0xff
     c6e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     c72:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     c76:	2bff      	cmp	r3, #255	; 0xff
     c78:	d112      	bne.n	ca0 <context_boot_go+0xf8>
        while (1) {}
     c7a:	e7fe      	b.n	c7a <context_boot_go+0xd2>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c7c:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     c7e:	4298      	cmp	r0, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c80:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (rc == BOOT_EFLASH)
     c84:	d1b0      	bne.n	be8 <context_boot_go+0x40>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     c86:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);

        switch (BOOT_SWAP_TYPE(state)) {
     c8a:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     c8c:	f88d 300f 	strb.w	r3, [sp, #15]
        switch (BOOT_SWAP_TYPE(state)) {
     c90:	d845      	bhi.n	d1e <FIH_LABEL_FIH_CALL_END_2015+0x10>
     c92:	2b01      	cmp	r3, #1
     c94:	d849      	bhi.n	d2a <FIH_LABEL_FIH_CALL_END_2015+0x1c>
     c96:	d05b      	beq.n	d50 <FIH_LABEL_FIH_CALL_END_2015+0x42>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c98:	23ff      	movs	r3, #255	; 0xff
     c9a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     c9e:	e057      	b.n	d50 <FIH_LABEL_FIH_CALL_END_2015+0x42>
            rc = boot_read_image_headers(state, false, bs);
     ca0:	2100      	movs	r1, #0
     ca2:	4620      	mov	r0, r4
     ca4:	aa02      	add	r2, sp, #8
     ca6:	f004 fbdb 	bl	5460 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     caa:	2301      	movs	r3, #1
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     cac:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     cb0:	e7e9      	b.n	c86 <context_boot_go+0xde>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     cb2:	f89d 700f 	ldrb.w	r7, [sp, #15]
     cb6:	2f01      	cmp	r7, #1
     cb8:	d11e      	bne.n	cf8 <FIH_LABEL_FIH_CALL_START_1992>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     cba:	4610      	mov	r0, r2
     cbc:	f002 febe 	bl	3a3c <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     cc0:	1e83      	subs	r3, r0, #2
     cc2:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     cc4:	4605      	mov	r5, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     cc6:	d814      	bhi.n	cf2 <FIH_LABEL_FIH_CALL_END_1952+0x14>

00000cc8 <FIH_LABEL_FIH_CALL_START_1929>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     cc8:	f7ff fe52 	bl	970 <fih_cfi_get_and_increment>
     ccc:	4639      	mov	r1, r7
     cce:	4680      	mov	r8, r0
     cd0:	4620      	mov	r0, r4
     cd2:	f7ff fe67 	bl	9a4 <boot_validate_slot.isra.0>
     cd6:	4607      	mov	r7, r0
     cd8:	4640      	mov	r0, r8
     cda:	f7ff fe59 	bl	990 <fih_cfi_validate>

00000cde <FIH_LABEL_FIH_CALL_END_1952>:
        if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     cde:	4b47      	ldr	r3, [pc, #284]	; (dfc <FIH_LABEL_FIH_CALL_END_2260+0x48>)
     ce0:	681b      	ldr	r3, [r3, #0]
     ce2:	429f      	cmp	r7, r3
     ce4:	d005      	beq.n	cf2 <FIH_LABEL_FIH_CALL_END_1952+0x14>
            if (FIH_EQ(fih_rc, FIH_NO_BOOTABLE_IMAGE)) {
     ce6:	4b46      	ldr	r3, [pc, #280]	; (e00 <FIH_LABEL_FIH_CALL_END_2260+0x4c>)
     ce8:	681d      	ldr	r5, [r3, #0]
                swap_type = BOOT_SWAP_TYPE_NONE;
     cea:	42af      	cmp	r7, r5
     cec:	bf14      	ite	ne
     cee:	2505      	movne	r5, #5
     cf0:	2501      	moveq	r5, #1
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     cf2:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
     cf6:	e7c6      	b.n	c86 <context_boot_go+0xde>

00000cf8 <FIH_LABEL_FIH_CALL_START_1992>:
                FIH_CALL(boot_validate_slot, fih_rc,
     cf8:	f7ff fe3a 	bl	970 <fih_cfi_get_and_increment>
     cfc:	2101      	movs	r1, #1
     cfe:	4607      	mov	r7, r0
     d00:	4620      	mov	r0, r4
     d02:	f7ff fe4f 	bl	9a4 <boot_validate_slot.isra.0>
     d06:	4605      	mov	r5, r0
     d08:	4638      	mov	r0, r7
     d0a:	f7ff fe41 	bl	990 <fih_cfi_validate>

00000d0e <FIH_LABEL_FIH_CALL_END_2015>:
                if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     d0e:	4b3b      	ldr	r3, [pc, #236]	; (dfc <FIH_LABEL_FIH_CALL_END_2260+0x48>)
     d10:	681b      	ldr	r3, [r3, #0]
     d12:	429d      	cmp	r5, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     d14:	bf14      	ite	ne
     d16:	2305      	movne	r3, #5
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     d18:	f89d 300f 	ldrbeq.w	r3, [sp, #15]
     d1c:	e7c6      	b.n	cac <context_boot_go+0x104>
        switch (BOOT_SWAP_TYPE(state)) {
     d1e:	2b05      	cmp	r3, #5
     d20:	d1ba      	bne.n	c98 <context_boot_go+0xf0>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d22:	2000      	movs	r0, #0
     d24:	f004 fd02 	bl	572c <swap_set_image_ok>
     d28:	e010      	b.n	d4c <FIH_LABEL_FIH_CALL_END_2015+0x3e>
        rc = boot_swap_image(state, bs);
     d2a:	4620      	mov	r0, r4
     d2c:	a902      	add	r1, sp, #8
     d2e:	f7ff fec1 	bl	ab4 <boot_swap_image.isra.0>
    swap_type = BOOT_SWAP_TYPE(state);
     d32:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     d36:	1eda      	subs	r2, r3, #3
     d38:	2a01      	cmp	r2, #1
     d3a:	d82d      	bhi.n	d98 <FIH_LABEL_FIH_CALL_END_2015+0x8a>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d3c:	2000      	movs	r0, #0
     d3e:	f004 fcf5 	bl	572c <swap_set_image_ok>
        if (rc != 0) {
     d42:	2800      	cmp	r0, #0
     d44:	d1a8      	bne.n	c98 <context_boot_go+0xf0>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     d46:	2000      	movs	r0, #0
     d48:	f004 fcde 	bl	5708 <swap_set_copy_done>
        if (rc != 0) {
     d4c:	2800      	cmp	r0, #0
     d4e:	d1a3      	bne.n	c98 <context_boot_go+0xf0>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     d50:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     d54:	2bff      	cmp	r3, #255	; 0xff
     d56:	d101      	bne.n	d5c <FIH_LABEL_FIH_CALL_END_2015+0x4e>
            BOOT_LOG_ERR("panic!");
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     d58:	f004 fb6f 	bl	543a <fih_panic_loop>

    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    FIH_SET(fih_cnt, 0);
     d5c:	2100      	movs	r1, #0
        if (FIH_EQ(tmp_img_mask, true)) {
            ++fih_cnt;
            continue;
        }
#endif
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     d5e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     d62:	4f28      	ldr	r7, [pc, #160]	; (e04 <FIH_LABEL_FIH_CALL_END_2260+0x50>)
     d64:	2b01      	cmp	r3, #1
    FIH_SET(fih_cnt, 0);
     d66:	9101      	str	r1, [sp, #4]
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     d68:	d019      	beq.n	d9e <FIH_LABEL_FIH_CALL_START_2238>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     d6a:	4620      	mov	r0, r4
     d6c:	aa02      	add	r2, sp, #8
     d6e:	f004 fb77 	bl	5460 <boot_read_image_headers>
            if (rc != 0) {
     d72:	b1a0      	cbz	r0, d9e <FIH_LABEL_FIH_CALL_START_2238>
             * is meant to prevent FI attack.
             */
            if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS) ||
                FIH_EQ(fih_rc, FIH_FAILURE) ||
                FIH_EQ(fih_rc, FIH_NO_BOOTABLE_IMAGE)) {
                FIH_SET(fih_rc, FIH_FAILURE);
     d74:	683d      	ldr	r5, [r7, #0]
     * easily recover them.
     */
#if defined(MCUBOOT_ENC_IMAGES) || defined(MCUBOOT_SWAP_SAVE_ENCTLV)
    like_mbedtls_zeroize(&bs, sizeof(bs));
#else
    memset(&bs, 0, sizeof(struct boot_status));
     d76:	2210      	movs	r2, #16
     d78:	2100      	movs	r1, #0
     d7a:	a802      	add	r0, sp, #8
     d7c:	f004 ff8c 	bl	5c98 <memset>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     d80:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     d82:	f004 fe9e 	bl	5ac2 <flash_area_close>
     d86:	6a20      	ldr	r0, [r4, #32]
     d88:	f004 fe9b 	bl	5ac2 <flash_area_close>
#endif

    close_all_flash_areas(state);
    FIH_RET(fih_rc);
     d8c:	f7ff fdf8 	bl	980 <fih_cfi_decrement>
}
     d90:	4628      	mov	r0, r5
     d92:	b006      	add	sp, #24
     d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (BOOT_IS_UPGRADE(swap_type)) {
     d98:	2b02      	cmp	r3, #2
     d9a:	d1d9      	bne.n	d50 <FIH_LABEL_FIH_CALL_END_2015+0x42>
     d9c:	e7d3      	b.n	d46 <FIH_LABEL_FIH_CALL_END_2015+0x38>

00000d9e <FIH_LABEL_FIH_CALL_START_2238>:
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     d9e:	f7ff fde7 	bl	970 <fih_cfi_get_and_increment>
     da2:	2100      	movs	r1, #0
     da4:	4680      	mov	r8, r0
     da6:	4620      	mov	r0, r4
     da8:	f7ff fdfc 	bl	9a4 <boot_validate_slot.isra.0>
     dac:	4605      	mov	r5, r0
     dae:	4640      	mov	r0, r8
     db0:	f7ff fdee 	bl	990 <fih_cfi_validate>

00000db4 <FIH_LABEL_FIH_CALL_END_2260>:
            if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS) ||
     db4:	f8df 8044 	ldr.w	r8, [pc, #68]	; dfc <FIH_LABEL_FIH_CALL_END_2260+0x48>
     db8:	f8d8 3000 	ldr.w	r3, [r8]
     dbc:	429d      	cmp	r5, r3
     dbe:	d1d9      	bne.n	d74 <FIH_LABEL_FIH_CALL_END_2015+0x66>
     dc0:	683b      	ldr	r3, [r7, #0]
     dc2:	429d      	cmp	r5, r3
     dc4:	d0d6      	beq.n	d74 <FIH_LABEL_FIH_CALL_END_2015+0x66>
                FIH_EQ(fih_rc, FIH_NO_BOOTABLE_IMAGE)) {
     dc6:	4b0e      	ldr	r3, [pc, #56]	; (e00 <FIH_LABEL_FIH_CALL_END_2260+0x4c>)
                FIH_EQ(fih_rc, FIH_FAILURE) ||
     dc8:	681b      	ldr	r3, [r3, #0]
     dca:	429d      	cmp	r5, r3
     dcc:	d0d2      	beq.n	d74 <FIH_LABEL_FIH_CALL_END_2015+0x66>
        ++fih_cnt;
     dce:	9b01      	ldr	r3, [sp, #4]
     dd0:	3301      	adds	r3, #1
     dd2:	9301      	str	r3, [sp, #4]
    if(FIH_NOT_EQ(fih_cnt, BOOT_IMAGE_NUMBER)) {
     dd4:	9b01      	ldr	r3, [sp, #4]
     dd6:	2b01      	cmp	r3, #1
     dd8:	d001      	beq.n	dde <FIH_LABEL_FIH_CALL_END_2260+0x2a>
        FIH_PANIC;
     dda:	f004 fb2e 	bl	543a <fih_panic_loop>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     dde:	6a20      	ldr	r0, [r4, #32]
     de0:	f004 fa25 	bl	522e <flash_area_get_device_id>
     de4:	7130      	strb	r0, [r6, #4]
 */
int flash_area_sector_from_off(off_t off, struct flash_sector *sector);

static inline uint32_t flash_area_get_off(const struct flash_area *fa)
{
	return (uint32_t)fa->fa_off;
     de6:	6a23      	ldr	r3, [r4, #32]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     de8:	685b      	ldr	r3, [r3, #4]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     dea:	6034      	str	r4, [r6, #0]
    fih_rc = FIH_SUCCESS;
     dec:	f8d8 5000 	ldr.w	r5, [r8]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     df0:	60b3      	str	r3, [r6, #8]
    fih_rc = FIH_SUCCESS;
     df2:	e7c0      	b.n	d76 <FIH_LABEL_FIH_CALL_END_2015+0x68>
     df4:	20000a0c 	.word	0x20000a0c
     df8:	2000020c 	.word	0x2000020c
     dfc:	20000008 	.word	0x20000008
     e00:	20000000 	.word	0x20000000
     e04:	20000004 	.word	0x20000004

00000e08 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_ret
boot_go(struct boot_rsp *rsp)
{
     e08:	b570      	push	{r4, r5, r6, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     e0a:	4e0b      	ldr	r6, [pc, #44]	; (e38 <FIH_LABEL_FIH_CALL_END_2929+0xa>)
{
     e0c:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     e0e:	2260      	movs	r2, #96	; 0x60
     e10:	2100      	movs	r1, #0
     e12:	4630      	mov	r0, r6
     e14:	f004 ff40 	bl	5c98 <memset>

00000e18 <FIH_LABEL_FIH_CALL_START_2906>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     e18:	f7ff fdaa 	bl	970 <fih_cfi_get_and_increment>
     e1c:	4621      	mov	r1, r4
     e1e:	4605      	mov	r5, r0
     e20:	4630      	mov	r0, r6
     e22:	f7ff fec1 	bl	ba8 <context_boot_go>
     e26:	4604      	mov	r4, r0
     e28:	4628      	mov	r0, r5
     e2a:	f7ff fdb1 	bl	990 <fih_cfi_validate>

00000e2e <FIH_LABEL_FIH_CALL_END_2929>:
    FIH_RET(fih_rc);
     e2e:	f7ff fda7 	bl	980 <fih_cfi_decrement>
}
     e32:	4620      	mov	r0, r4
     e34:	bd70      	pop	{r4, r5, r6, pc}
     e36:	bf00      	nop
     e38:	2000160c 	.word	0x2000160c

00000e3c <boot_read_image_header>:
}

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     e3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
     e40:	4606      	mov	r6, r0
     e42:	460c      	mov	r4, r1
     e44:	4617      	mov	r7, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs && !boot_status_is_reset(bs)) {
     e46:	461d      	mov	r5, r3
     e48:	b90b      	cbnz	r3, e4e <boot_read_image_header+0x12>
    off = 0;
     e4a:	2600      	movs	r6, #0
     e4c:	e028      	b.n	ea0 <boot_read_image_header+0x64>
    if (bs && !boot_status_is_reset(bs)) {
     e4e:	4618      	mov	r0, r3
     e50:	f004 fb88 	bl	5564 <boot_status_is_reset>
     e54:	2800      	cmp	r0, #0
     e56:	d1f8      	bne.n	e4a <boot_read_image_header+0xe>
	boot_find_status(BOOT_CURR_IMG(state), &fap);
     e58:	4669      	mov	r1, sp
     e5a:	f7ff fd69 	bl	930 <boot_find_status>
        if (fap == NULL || boot_read_swap_size(fap, &swap_size)) {
     e5e:	9800      	ldr	r0, [sp, #0]
     e60:	b938      	cbnz	r0, e72 <boot_read_image_header+0x36>
            rc = BOOT_EFLASH;
     e62:	2401      	movs	r4, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     e64:	9800      	ldr	r0, [sp, #0]
     e66:	f004 fe2c 	bl	5ac2 <flash_area_close>
    return rc;
}
     e6a:	4620      	mov	r0, r4
     e6c:	b002      	add	sp, #8
     e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (fap == NULL || boot_read_swap_size(fap, &swap_size)) {
     e72:	a901      	add	r1, sp, #4
     e74:	f004 faad 	bl	53d2 <boot_read_swap_size>
     e78:	2800      	cmp	r0, #0
     e7a:	d1f2      	bne.n	e62 <boot_read_image_header+0x26>
        flash_area_close(fap);
     e7c:	9800      	ldr	r0, [sp, #0]
     e7e:	f004 fe20 	bl	5ac2 <flash_area_close>
        last_idx = find_last_idx(state, swap_size);
     e82:	4630      	mov	r0, r6
     e84:	9901      	ldr	r1, [sp, #4]
     e86:	f004 fc6f 	bl	5768 <find_last_idx>
	return fs->fs_off;
}

static inline uint32_t flash_sector_get_size(const struct flash_sector *fs)
{
	return fs->fs_size;
     e8a:	6a73      	ldr	r3, [r6, #36]	; 0x24
     e8c:	685e      	ldr	r6, [r3, #4]
        if (bs->op == BOOT_STATUS_OP_MOVE && slot == 0 && bs->idx > last_idx) {
     e8e:	796b      	ldrb	r3, [r5, #5]
     e90:	2b01      	cmp	r3, #1
     e92:	d121      	bne.n	ed8 <boot_read_image_header+0x9c>
     e94:	2c00      	cmp	r4, #0
     e96:	d1d8      	bne.n	e4a <boot_read_image_header+0xe>
     e98:	682b      	ldr	r3, [r5, #0]
    off = 0;
     e9a:	4283      	cmp	r3, r0
     e9c:	bf98      	it	ls
     e9e:	2600      	movls	r6, #0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     ea0:	4621      	mov	r1, r4
     ea2:	2000      	movs	r0, #0
     ea4:	f004 f9ba 	bl	521c <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     ea8:	4669      	mov	r1, sp
     eaa:	b2c0      	uxtb	r0, r0
     eac:	f000 fe36 	bl	1b1c <flash_area_open>
    if (rc != 0) {
     eb0:	2800      	cmp	r0, #0
     eb2:	d1d6      	bne.n	e62 <boot_read_image_header+0x26>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     eb4:	2320      	movs	r3, #32
     eb6:	463a      	mov	r2, r7
     eb8:	4631      	mov	r1, r6
     eba:	9800      	ldr	r0, [sp, #0]
     ebc:	f004 fe02 	bl	5ac4 <flash_area_read>
    if (rc != 0) {
     ec0:	4604      	mov	r4, r0
     ec2:	2800      	cmp	r0, #0
     ec4:	d1cd      	bne.n	e62 <boot_read_image_header+0x26>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     ec6:	2d00      	cmp	r5, #0
     ec8:	d0cc      	beq.n	e64 <boot_read_image_header+0x28>
     eca:	683c      	ldr	r4, [r7, #0]
     ecc:	4b0d      	ldr	r3, [pc, #52]	; (f04 <boot_read_image_header+0xc8>)
     ece:	1ae4      	subs	r4, r4, r3
     ed0:	bf18      	it	ne
     ed2:	f04f 34ff 	movne.w	r4, #4294967295
     ed6:	e7c5      	b.n	e64 <boot_read_image_header+0x28>
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     ed8:	2b02      	cmp	r3, #2
     eda:	d1b6      	bne.n	e4a <boot_read_image_header+0xe>
            if (bs->idx > 1 && bs->idx <= last_idx) {
     edc:	682b      	ldr	r3, [r5, #0]
     ede:	2b01      	cmp	r3, #1
     ee0:	d905      	bls.n	eee <boot_read_image_header+0xb2>
     ee2:	4283      	cmp	r3, r0
     ee4:	d8b1      	bhi.n	e4a <boot_read_image_header+0xe>
                slot = (slot == 0) ? 1 : 0;
     ee6:	fab4 f484 	clz	r4, r4
     eea:	0964      	lsrs	r4, r4, #5
     eec:	e7ad      	b.n	e4a <boot_read_image_header+0xe>
            } else if (bs->idx == 1) {
     eee:	d1ac      	bne.n	e4a <boot_read_image_header+0xe>
                if (slot == 0) {
     ef0:	2c00      	cmp	r4, #0
     ef2:	d0d5      	beq.n	ea0 <boot_read_image_header+0x64>
                } else if (slot == 1 && bs->state == 2) {
     ef4:	2c01      	cmp	r4, #1
     ef6:	d1a8      	bne.n	e4a <boot_read_image_header+0xe>
     ef8:	792c      	ldrb	r4, [r5, #4]
     efa:	3c02      	subs	r4, #2
     efc:	bf18      	it	ne
     efe:	2401      	movne	r4, #1
     f00:	e7a3      	b.n	e4a <boot_read_image_header+0xe>
     f02:	bf00      	nop
     f04:	96f3b83d 	.word	0x96f3b83d

00000f08 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec)
{
     f08:	b573      	push	{r0, r1, r4, r5, r6, lr}
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     f0a:	684b      	ldr	r3, [r1, #4]
{
     f0c:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     f0e:	4a11      	ldr	r2, [pc, #68]	; (f54 <fixup_revert+0x4c>)
     f10:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
     f14:	4293      	cmp	r3, r2
{
     f16:	4606      	mov	r6, r0
     f18:	460d      	mov	r5, r1
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     f1a:	d118      	bne.n	f4e <fixup_revert+0x46>
        bs->op != BOOT_STATUS_OP_MOVE ||
     f1c:	680b      	ldr	r3, [r1, #0]
     f1e:	2b01      	cmp	r3, #1
     f20:	d115      	bne.n	f4e <fixup_revert+0x46>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state(fap_sec, &swap_state);
     f22:	4669      	mov	r1, sp
     f24:	4620      	mov	r0, r4
     f26:	f002 fd33 	bl	3990 <boot_read_swap_state>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
     f2a:	f89d 3000 	ldrb.w	r3, [sp]
     f2e:	2b03      	cmp	r3, #3
     f30:	d10d      	bne.n	f4e <fixup_revert+0x46>
        rc = swap_erase_trailer_sectors(state, fap_sec);
     f32:	4621      	mov	r1, r4
     f34:	4630      	mov	r0, r6
     f36:	f004 fb56 	bl	55e6 <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
     f3a:	4620      	mov	r0, r4
     f3c:	f005 fa86 	bl	644c <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
     f40:	4620      	mov	r0, r4
     f42:	68a9      	ldr	r1, [r5, #8]
     f44:	f004 fa5b 	bl	53fe <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
     f48:	4620      	mov	r0, r4
     f4a:	f002 fd01 	bl	3950 <boot_write_magic>
        assert(rc == 0);
    }
}
     f4e:	b002      	add	sp, #8
     f50:	bd70      	pop	{r4, r5, r6, pc}
     f52:	bf00      	nop
     f54:	04000100 	.word	0x04000100

00000f58 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
     f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f5c:	4605      	mov	r5, r0
     f5e:	b089      	sub	sp, #36	; 0x24
     f60:	460c      	mov	r4, r1
    const struct flash_area *fap_sec;
    int rc;

    BOOT_LOG_INF("Starting swap using move algorithm.");

    last_idx = find_last_idx(state, copy_size);
     f62:	4611      	mov	r1, r2
     f64:	f004 fc00 	bl	5768 <find_last_idx>
     f68:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     f6a:	9003      	str	r0, [sp, #12]
    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
     f6c:	4620      	mov	r0, r4
     f6e:	685e      	ldr	r6, [r3, #4]
     f70:	f004 faf8 	bl	5564 <boot_status_is_reset>
     f74:	b190      	cbz	r0, f9c <swap_run+0x44>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
     f76:	6de8      	ldr	r0, [r5, #92]	; 0x5c
     f78:	f004 fa0e 	bl	5398 <boot_trailer_sz>
        sz = 0;
     f7c:	2200      	movs	r2, #0
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
     f7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
     f80:	3b01      	subs	r3, #1

        while (1) {
            sz += sector_sz;
     f82:	4432      	add	r2, r6
            if  (sz >= trailer_sz) {
     f84:	4290      	cmp	r0, r2
     f86:	d901      	bls.n	f8c <swap_run+0x34>
                break;
            }
            first_trailer_idx--;
     f88:	3b01      	subs	r3, #1
            sz += sector_sz;
     f8a:	e7fa      	b.n	f82 <swap_run+0x2a>
        }

        if (last_idx >= first_trailer_idx) {
     f8c:	9a03      	ldr	r2, [sp, #12]
     f8e:	429a      	cmp	r2, r3
     f90:	d304      	bcc.n	f9c <swap_run+0x44>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
            BOOT_LOG_WRN("required %d bytes but only %d are available",
                         (last_idx + 1) * sector_sz,
                         first_trailer_idx * sector_sz);
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
     f92:	2301      	movs	r3, #1
     f94:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
     f96:	b009      	add	sp, #36	; 0x24
     f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
     f9c:	a906      	add	r1, sp, #24
     f9e:	2002      	movs	r0, #2
     fa0:	f000 fdbc 	bl	1b1c <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
     fa4:	a907      	add	r1, sp, #28
     fa6:	2008      	movs	r0, #8
     fa8:	f000 fdb8 	bl	1b1c <flash_area_open>
    fixup_revert(state, bs, fap_sec);
     fac:	4621      	mov	r1, r4
     fae:	4628      	mov	r0, r5
     fb0:	9a07      	ldr	r2, [sp, #28]
     fb2:	f7ff ffa9 	bl	f08 <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
     fb6:	7963      	ldrb	r3, [r4, #5]
     fb8:	2b01      	cmp	r3, #1
     fba:	d14b      	bne.n	1054 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x54>
    last_idx = find_last_idx(state, copy_size);
     fbc:	9f03      	ldr	r7, [sp, #12]
    BOOT_STATUS_ASSERT(rc == 0);
     fbe:	f8df b158 	ldr.w	fp, [pc, #344]	; 1118 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x118>
     fc2:	e041      	b.n	1048 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x48>
            if (idx <= (last_idx - bs->idx + 1)) {
     fc4:	6822      	ldr	r2, [r4, #0]
     fc6:	9903      	ldr	r1, [sp, #12]
     fc8:	f1c2 0301 	rsb	r3, r2, #1
     fcc:	440b      	add	r3, r1
     fce:	429f      	cmp	r7, r3
     fd0:	d839      	bhi.n	1046 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x46>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
     fd2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if (bs->idx == BOOT_STATUS_IDX_0) {
     fd4:	2a01      	cmp	r2, #1
	return fs->fs_off;
     fd6:	6819      	ldr	r1, [r3, #0]
     fd8:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
     fdc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
     fe0:	f853 3c08 	ldr.w	r3, [r3, #-8]
     fe4:	eba0 0901 	sub.w	r9, r0, r1
     fe8:	eba3 0a01 	sub.w	sl, r3, r1
     fec:	d111      	bne.n	1012 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x12>
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
     fee:	9b07      	ldr	r3, [sp, #28]
     ff0:	9304      	str	r3, [sp, #16]
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
     ff2:	68e3      	ldr	r3, [r4, #12]
     ff4:	2b02      	cmp	r3, #2
     ff6:	d008      	beq.n	100a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xa>
            rc = swap_erase_trailer_sectors(state, fap_pri);
     ff8:	4641      	mov	r1, r8
     ffa:	4628      	mov	r0, r5
     ffc:	f004 faf3 	bl	55e6 <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    1000:	4622      	mov	r2, r4
    1002:	4641      	mov	r1, r8
    1004:	4628      	mov	r0, r5
    1006:	f004 fb24 	bl	5652 <swap_status_init>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    100a:	4628      	mov	r0, r5
    100c:	9904      	ldr	r1, [sp, #16]
    100e:	f004 faea 	bl	55e6 <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    1012:	4632      	mov	r2, r6
    1014:	4649      	mov	r1, r9
    1016:	4640      	mov	r0, r8
    1018:	f004 fae3 	bl	55e2 <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    101c:	4653      	mov	r3, sl
    101e:	4642      	mov	r2, r8
    1020:	4641      	mov	r1, r8
    1022:	4628      	mov	r0, r5
    1024:	e9cd 9600 	strd	r9, r6, [sp]
    1028:	f7ff fd7c 	bl	b24 <boot_copy_region>
    rc = boot_write_status(state, bs);
    102c:	4621      	mov	r1, r4
    102e:	4628      	mov	r0, r5
    1030:	f004 faa5 	bl	557e <boot_write_status>
    bs->idx++;
    1034:	6823      	ldr	r3, [r4, #0]
    1036:	3301      	adds	r3, #1
    1038:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    103a:	b120      	cbz	r0, 1046 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x46>
    103c:	f8db 3000 	ldr.w	r3, [fp]
    1040:	3301      	adds	r3, #1
    1042:	f8cb 3000 	str.w	r3, [fp]
            idx--;
    1046:	3f01      	subs	r7, #1
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1048:	f8dd 8018 	ldr.w	r8, [sp, #24]
        while (idx > 0) {
    104c:	2f00      	cmp	r7, #0
    104e:	d1b9      	bne.n	fc4 <swap_run+0x6c>
        bs->idx = BOOT_STATUS_IDX_0;
    1050:	2301      	movs	r3, #1
    1052:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    1054:	2302      	movs	r3, #2
    idx = 1;
    1056:	2701      	movs	r7, #1
    bs->op = BOOT_STATUS_OP_SWAP;
    1058:	7163      	strb	r3, [r4, #5]
    while (idx <= last_idx) {
    105a:	9b03      	ldr	r3, [sp, #12]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    105c:	f8dd 9018 	ldr.w	r9, [sp, #24]
    while (idx <= last_idx) {
    1060:	42bb      	cmp	r3, r7
    1062:	d206      	bcs.n	1072 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x72>
    flash_area_close(fap_pri);
    1064:	4648      	mov	r0, r9
    1066:	f004 fd2c 	bl	5ac2 <flash_area_close>
    flash_area_close(fap_sec);
    106a:	9807      	ldr	r0, [sp, #28]
    106c:	f004 fd29 	bl	5ac2 <flash_area_close>
    1070:	e791      	b.n	f96 <swap_run+0x3e>
        if (idx >= bs->idx) {
    1072:	6823      	ldr	r3, [r4, #0]
    1074:	429f      	cmp	r7, r3
    1076:	d34d      	bcc.n	1114 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x114>
    1078:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    107a:	00fb      	lsls	r3, r7, #3
    107c:	f852 1037 	ldr.w	r1, [r2, r7, lsl #3]
    1080:	3b08      	subs	r3, #8
    1082:	f8d2 b000 	ldr.w	fp, [r2]
    1086:	9104      	str	r1, [sp, #16]
    1088:	58d1      	ldr	r1, [r2, r3]
    108a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    108c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    1090:	58d0      	ldr	r0, [r2, r3]
    1092:	6813      	ldr	r3, [r2, #0]
    1094:	eba0 0803 	sub.w	r8, r0, r3
    if (bs->state == BOOT_STATUS_STATE_0) {
    1098:	7923      	ldrb	r3, [r4, #4]
    109a:	2b01      	cmp	r3, #1
    109c:	d138      	bne.n	1110 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x110>
    109e:	eba1 010b 	sub.w	r1, r1, fp
        rc = boot_erase_region(fap_pri, pri_off, sz);
    10a2:	4632      	mov	r2, r6
    10a4:	4648      	mov	r0, r9
    10a6:	9105      	str	r1, [sp, #20]
    10a8:	f004 fa9b 	bl	55e2 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    10ac:	9905      	ldr	r1, [sp, #20]
    10ae:	4643      	mov	r3, r8
    10b0:	464a      	mov	r2, r9
    10b2:	9100      	str	r1, [sp, #0]
    10b4:	4628      	mov	r0, r5
    10b6:	4651      	mov	r1, sl
    10b8:	9601      	str	r6, [sp, #4]
    10ba:	f7ff fd33 	bl	b24 <boot_copy_region>
        rc = boot_write_status(state, bs);
    10be:	4621      	mov	r1, r4
    10c0:	4628      	mov	r0, r5
    10c2:	f004 fa5c 	bl	557e <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    10c6:	2302      	movs	r3, #2
    10c8:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    10ca:	b118      	cbz	r0, 10d4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xd4>
    10cc:	4a12      	ldr	r2, [pc, #72]	; (1118 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x118>)
    10ce:	6813      	ldr	r3, [r2, #0]
    10d0:	3301      	adds	r3, #1
    10d2:	6013      	str	r3, [r2, #0]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    10d4:	4632      	mov	r2, r6
    10d6:	4641      	mov	r1, r8
    10d8:	4650      	mov	r0, sl
    10da:	f004 fa82 	bl	55e2 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    10de:	9b04      	ldr	r3, [sp, #16]
    10e0:	4652      	mov	r2, sl
    10e2:	eba3 030b 	sub.w	r3, r3, fp
    10e6:	4649      	mov	r1, r9
    10e8:	4628      	mov	r0, r5
    10ea:	e9cd 8600 	strd	r8, r6, [sp]
    10ee:	f7ff fd19 	bl	b24 <boot_copy_region>
        rc = boot_write_status(state, bs);
    10f2:	4621      	mov	r1, r4
    10f4:	4628      	mov	r0, r5
    10f6:	f004 fa42 	bl	557e <boot_write_status>
        bs->idx++;
    10fa:	6823      	ldr	r3, [r4, #0]
    10fc:	3301      	adds	r3, #1
    10fe:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    1100:	2301      	movs	r3, #1
    1102:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1104:	b130      	cbz	r0, 1114 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x114>
    1106:	4a04      	ldr	r2, [pc, #16]	; (1118 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x118>)
    1108:	6813      	ldr	r3, [r2, #0]
    110a:	3301      	adds	r3, #1
    110c:	6013      	str	r3, [r2, #0]
    110e:	e001      	b.n	1114 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x114>
    if (bs->state == BOOT_STATUS_STATE_1) {
    1110:	2b02      	cmp	r3, #2
    1112:	d0df      	beq.n	10d4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xd4>
        idx++;
    1114:	3701      	adds	r7, #1
    1116:	e7a0      	b.n	105a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x5a>
    1118:	2000166c 	.word	0x2000166c

0000111c <cleanup_arm_nvic>:
    111c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    1120:	b672      	cpsid	i
    1122:	2300      	movs	r3, #0
	__ISB();
	__disable_irq();

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1124:	f04f 30ff 	mov.w	r0, #4294967295
    1128:	4a09      	ldr	r2, [pc, #36]	; (1150 <cleanup_arm_nvic+0x34>)
    112a:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    112e:	3301      	adds	r3, #1
    1130:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    1132:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1136:	d1f8      	bne.n	112a <cleanup_arm_nvic+0xe>
    1138:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    113a:	f04f 30ff 	mov.w	r0, #4294967295
    113e:	4a04      	ldr	r2, [pc, #16]	; (1150 <cleanup_arm_nvic+0x34>)
    1140:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1144:	3301      	adds	r3, #1
    1146:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1148:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    114c:	d1f8      	bne.n	1140 <cleanup_arm_nvic+0x24>
	}
}
    114e:	4770      	bx	lr
    1150:	e000e100 	.word	0xe000e100

00001154 <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    1154:	b538      	push	{r3, r4, r5, lr}
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1156:	2201      	movs	r2, #1
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1158:	f04f 34ff 	mov.w	r4, #4294967295
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    115c:	2500      	movs	r5, #0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    115e:	4b1a      	ldr	r3, [pc, #104]	; (11c8 <nrf_cleanup_peripheral+0x74>)
#if defined(NRF_UARTE0)
    nrf_uarte_disable(NRF_UARTE0);
    nrf_uarte_int_disable(NRF_UARTE0, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    1160:	4629      	mov	r1, r5
    1162:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    1164:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1168:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    116c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1170:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    1172:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1176:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    117a:	f5a3 4350 	sub.w	r3, r3, #53248	; 0xd000
    117e:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    1182:	2280      	movs	r2, #128	; 0x80
    p_reg->INTENCLR = mask;
    1184:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1188:	4810      	ldr	r0, [pc, #64]	; (11cc <nrf_cleanup_peripheral+0x78>)
    118a:	f004 fd85 	bl	5c98 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    118e:	2280      	movs	r2, #128	; 0x80
    1190:	4629      	mov	r1, r5
    1192:	480f      	ldr	r0, [pc, #60]	; (11d0 <nrf_cleanup_peripheral+0x7c>)
    1194:	f004 fd80 	bl	5c98 <memset>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1198:	4b0e      	ldr	r3, [pc, #56]	; (11d4 <nrf_cleanup_peripheral+0x80>)
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    119a:	2280      	movs	r2, #128	; 0x80
    119c:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    11a0:	4629      	mov	r1, r5
    p_reg->INTENCLR = mask;
    11a2:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    11a6:	480c      	ldr	r0, [pc, #48]	; (11d8 <nrf_cleanup_peripheral+0x84>)
    11a8:	f004 fd76 	bl	5c98 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    11ac:	2280      	movs	r2, #128	; 0x80
    11ae:	4629      	mov	r1, r5
    11b0:	480a      	ldr	r0, [pc, #40]	; (11dc <nrf_cleanup_peripheral+0x88>)
    11b2:	f004 fd71 	bl	5c98 <memset>
    return ((p_reg->CHEN & (DPPIC_CHEN_CH0_Enabled << (DPPIC_CHEN_CH0_Pos + channel))) != 0);
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable_all(NRF_DPPIC_Type * p_reg)
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
    11b6:	4b0a      	ldr	r3, [pc, #40]	; (11e0 <nrf_cleanup_peripheral+0x8c>)
    11b8:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    11bc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    11c0:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    11c4:	bd38      	pop	{r3, r4, r5, pc}
    11c6:	bf00      	nop
    11c8:	50014000 	.word	0x50014000
    11cc:	50008080 	.word	0x50008080
    11d0:	50008180 	.word	0x50008180
    11d4:	50009000 	.word	0x50009000
    11d8:	50009080 	.word	0x50009080
    11dc:	50009180 	.word	0x50009180
    11e0:	50017000 	.word	0x50017000

000011e4 <base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int base64_encode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    11e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    11e8:	9d07      	ldr	r5, [sp, #28]
	size_t i, n;
	int C1, C2, C3;
	uint8_t *p;

	if (slen == 0) {
    11ea:	b915      	cbnz	r5, 11f2 <base64_encode+0xe>
		*olen = 0;
    11ec:	6015      	str	r5, [r2, #0]
		return 0;
    11ee:	2000      	movs	r0, #0
    11f0:	e012      	b.n	1218 <base64_encode+0x34>
	}

	n = slen / 3 + (slen % 3 != 0);
    11f2:	2403      	movs	r4, #3
    11f4:	fbb5 f4f4 	udiv	r4, r5, r4
    11f8:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    11fc:	42bd      	cmp	r5, r7
    11fe:	bf18      	it	ne
    1200:	3401      	addne	r4, #1

	if (n > (BASE64_SIZE_T_MAX - 1) / 4) {
    1202:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    1206:	d209      	bcs.n	121c <base64_encode+0x38>
		*olen = BASE64_SIZE_T_MAX;
		return -ENOMEM;
	}

	n *= 4;
    1208:	00a4      	lsls	r4, r4, #2

	if ((dlen < n + 1) || (!dst)) {
    120a:	3401      	adds	r4, #1
    120c:	428c      	cmp	r4, r1
    120e:	d800      	bhi.n	1212 <base64_encode+0x2e>
    1210:	b938      	cbnz	r0, 1222 <base64_encode+0x3e>
		return -ENOMEM;
    1212:	f06f 000b 	mvn.w	r0, #11
		*olen = n + 1;
    1216:	6014      	str	r4, [r2, #0]

	*olen = p - dst;
	*p = 0U;

	return 0;
}
    1218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    121c:	f04f 34ff 	mov.w	r4, #4294967295
    1220:	e7f7      	b.n	1212 <base64_encode+0x2e>
	for (i = 0, p = dst; i < n; i += 3) {
    1222:	4604      	mov	r4, r0
    1224:	2100      	movs	r1, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1226:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 12dc <base64_encode+0xf8>
	for (i = 0, p = dst; i < n; i += 3) {
    122a:	42b9      	cmp	r1, r7
    122c:	f103 0c03 	add.w	ip, r3, #3
    1230:	f104 0604 	add.w	r6, r4, #4
    1234:	d32b      	bcc.n	128e <base64_encode+0xaa>
	if (i < slen) {
    1236:	42a9      	cmp	r1, r5
    1238:	4627      	mov	r7, r4
    123a:	d223      	bcs.n	1284 <base64_encode+0xa0>
		C2 = ((i + 1) < slen) ? *src++ : 0;
    123c:	f101 0c01 	add.w	ip, r1, #1
    1240:	45ac      	cmp	ip, r5
		C1 = *src++;
    1242:	781f      	ldrb	r7, [r3, #0]
		C2 = ((i + 1) < slen) ? *src++ : 0;
    1244:	bf28      	it	cs
    1246:	2300      	movcs	r3, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1248:	4924      	ldr	r1, [pc, #144]	; (12dc <base64_encode+0xf8>)
    124a:	ea4f 0ea7 	mov.w	lr, r7, asr #2
		C2 = ((i + 1) < slen) ? *src++ : 0;
    124e:	bf38      	it	cc
    1250:	785b      	ldrbcc	r3, [r3, #1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1252:	f811 e00e 	ldrb.w	lr, [r1, lr]
		if ((i + 1) < slen) {
    1256:	45ac      	cmp	ip, r5
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1258:	f884 e000 	strb.w	lr, [r4]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    125c:	eb01 1e13 	add.w	lr, r1, r3, lsr #4
			*p++ = '=';
    1260:	bf2e      	itee	cs
    1262:	233d      	movcs	r3, #61	; 0x3d
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    1264:	009b      	lslcc	r3, r3, #2
    1266:	f003 033c 	andcc.w	r3, r3, #60	; 0x3c
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    126a:	ea4f 1707 	mov.w	r7, r7, lsl #4
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    126e:	bf38      	it	cc
    1270:	5ccb      	ldrbcc	r3, [r1, r3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1272:	f007 0730 	and.w	r7, r7, #48	; 0x30
    1276:	f81e 7007 	ldrb.w	r7, [lr, r7]
    127a:	70a3      	strb	r3, [r4, #2]
		*p++ = '=';
    127c:	233d      	movs	r3, #61	; 0x3d
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    127e:	7067      	strb	r7, [r4, #1]
		*p++ = '=';
    1280:	4637      	mov	r7, r6
    1282:	70e3      	strb	r3, [r4, #3]
	*p = 0U;
    1284:	2300      	movs	r3, #0
	*olen = p - dst;
    1286:	1a38      	subs	r0, r7, r0
    1288:	6010      	str	r0, [r2, #0]
	*p = 0U;
    128a:	703b      	strb	r3, [r7, #0]
	return 0;
    128c:	e7af      	b.n	11ee <base64_encode+0xa>
		C1 = *src++;
    128e:	f81c 4c03 	ldrb.w	r4, [ip, #-3]
		C2 = *src++;
    1292:	f81c 3c02 	ldrb.w	r3, [ip, #-2]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1296:	ea4f 09a4 	mov.w	r9, r4, asr #2
    129a:	f81e 9009 	ldrb.w	r9, [lr, r9]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    129e:	0124      	lsls	r4, r4, #4
		C3 = *src++;
    12a0:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    12a4:	f004 0430 	and.w	r4, r4, #48	; 0x30
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    12a8:	f806 9c04 	strb.w	r9, [r6, #-4]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    12ac:	eb0e 1913 	add.w	r9, lr, r3, lsr #4
    12b0:	f819 4004 	ldrb.w	r4, [r9, r4]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    12b4:	009b      	lsls	r3, r3, #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    12b6:	f806 4c03 	strb.w	r4, [r6, #-3]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    12ba:	f003 033c 	and.w	r3, r3, #60	; 0x3c
    12be:	eb0e 1498 	add.w	r4, lr, r8, lsr #6
    12c2:	5ce3      	ldrb	r3, [r4, r3]
		*p++ = base64_enc_map[C3 & 0x3F];
    12c4:	f008 083f 	and.w	r8, r8, #63	; 0x3f
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    12c8:	f806 3c02 	strb.w	r3, [r6, #-2]
		*p++ = base64_enc_map[C3 & 0x3F];
    12cc:	f81e 3008 	ldrb.w	r3, [lr, r8]
	for (i = 0, p = dst; i < n; i += 3) {
    12d0:	4634      	mov	r4, r6
		*p++ = base64_enc_map[C3 & 0x3F];
    12d2:	f806 3c01 	strb.w	r3, [r6, #-1]
	for (i = 0, p = dst; i < n; i += 3) {
    12d6:	3103      	adds	r1, #3
    12d8:	4663      	mov	r3, ip
    12da:	e7a6      	b.n	122a <base64_encode+0x46>
    12dc:	00008b6e 	.word	0x00008b6e

000012e0 <base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int base64_decode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    12e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	size_t i, n;
	uint32_t j, x;
	uint8_t *p;

	/* First pass: check for validity and get output length */
	for (i = n = j = 0U; i < slen; i++) {
    12e4:	2700      	movs	r7, #0
    12e6:	463c      	mov	r4, r7
    12e8:	463d      	mov	r5, r7
{
    12ea:	f8dd e01c 	ldr.w	lr, [sp, #28]

		if (src[i] == '=' && ++j > 2) {
			return -EINVAL;
		}

		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    12ee:	f8df 8128 	ldr.w	r8, [pc, #296]	; 1418 <base64_decode+0x138>
	for (i = n = j = 0U; i < slen; i++) {
    12f2:	4575      	cmp	r5, lr
    12f4:	d31f      	bcc.n	1336 <base64_decode+0x56>
		}

		n++;
	}

	if (n == 0) {
    12f6:	bbe4      	cbnz	r4, 1372 <base64_decode+0x92>
		*olen = 0;
		return 0;
    12f8:	2000      	movs	r0, #0
		*olen = 0;
    12fa:	6014      	str	r4, [r2, #0]
	}

	*olen = p - dst;

	return 0;
}
    12fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			++i;
    1300:	3601      	adds	r6, #1
		while (i < slen && src[i] == ' ') {
    1302:	4576      	cmp	r6, lr
    1304:	d033      	beq.n	136e <base64_decode+0x8e>
    1306:	f813 c006 	ldrb.w	ip, [r3, r6]
    130a:	f1bc 0f20 	cmp.w	ip, #32
    130e:	d0f7      	beq.n	1300 <base64_decode+0x20>
		if ((slen - i) >= 2 && src[i] == '\r' && src[i + 1] == '\n') {
    1310:	ebae 0906 	sub.w	r9, lr, r6
    1314:	f1b9 0f01 	cmp.w	r9, #1
    1318:	eba6 0505 	sub.w	r5, r6, r5
    131c:	d00d      	beq.n	133a <base64_decode+0x5a>
    131e:	f1bc 0f0d 	cmp.w	ip, #13
    1322:	d10a      	bne.n	133a <base64_decode+0x5a>
    1324:	eb03 0906 	add.w	r9, r3, r6
    1328:	f899 9001 	ldrb.w	r9, [r9, #1]
    132c:	f1b9 0f0a 	cmp.w	r9, #10
    1330:	d16e      	bne.n	1410 <base64_decode+0x130>
	for (i = n = j = 0U; i < slen; i++) {
    1332:	1c75      	adds	r5, r6, #1
    1334:	e7dd      	b.n	12f2 <base64_decode+0x12>
    1336:	462e      	mov	r6, r5
    1338:	e7e3      	b.n	1302 <base64_decode+0x22>
		if (src[i] == '\n') {
    133a:	f1bc 0f0a 	cmp.w	ip, #10
    133e:	d0f8      	beq.n	1332 <base64_decode+0x52>
		if (x != 0U) {
    1340:	b92d      	cbnz	r5, 134e <base64_decode+0x6e>
		if (src[i] == '=' && ++j > 2) {
    1342:	f1bc 0f3d 	cmp.w	ip, #61	; 0x3d
    1346:	d105      	bne.n	1354 <base64_decode+0x74>
    1348:	3701      	adds	r7, #1
    134a:	2f02      	cmp	r7, #2
    134c:	d90d      	bls.n	136a <base64_decode+0x8a>
			return -EINVAL;
    134e:	f06f 0015 	mvn.w	r0, #21
    1352:	e7d3      	b.n	12fc <base64_decode+0x1c>
		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    1354:	f01c 0f80 	tst.w	ip, #128	; 0x80
    1358:	d1f9      	bne.n	134e <base64_decode+0x6e>
    135a:	f818 500c 	ldrb.w	r5, [r8, ip]
    135e:	2d7f      	cmp	r5, #127	; 0x7f
    1360:	d0f5      	beq.n	134e <base64_decode+0x6e>
		if (base64_dec_map[src[i]] < 64 && j != 0U) {
    1362:	2d3f      	cmp	r5, #63	; 0x3f
    1364:	d801      	bhi.n	136a <base64_decode+0x8a>
    1366:	2f00      	cmp	r7, #0
    1368:	d1f1      	bne.n	134e <base64_decode+0x6e>
		n++;
    136a:	3401      	adds	r4, #1
    136c:	e7e1      	b.n	1332 <base64_decode+0x52>
    136e:	4635      	mov	r5, r6
    1370:	e7c1      	b.n	12f6 <base64_decode+0x16>
	n = (6 * (n >> 3)) + ((6 * (n & 0x7) + 7) >> 3);
    1372:	f04f 0c06 	mov.w	ip, #6
    1376:	f004 0607 	and.w	r6, r4, #7
    137a:	08e4      	lsrs	r4, r4, #3
    137c:	fb0c f606 	mul.w	r6, ip, r6
    1380:	fb0c f404 	mul.w	r4, ip, r4
    1384:	3607      	adds	r6, #7
	n -= j;
    1386:	1be4      	subs	r4, r4, r7
    1388:	eb04 04d6 	add.w	r4, r4, r6, lsr #3
	if (dst == NULL || dlen < n) {
    138c:	b170      	cbz	r0, 13ac <base64_decode+0xcc>
    138e:	428c      	cmp	r4, r1
    1390:	d80c      	bhi.n	13ac <base64_decode+0xcc>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1392:	2700      	movs	r7, #0
	if (dst == NULL || dlen < n) {
    1394:	4601      	mov	r1, r0
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1396:	2603      	movs	r6, #3
    1398:	463c      	mov	r4, r7
		j -= (base64_dec_map[*src] == 64U);
    139a:	f8df e07c 	ldr.w	lr, [pc, #124]	; 1418 <base64_decode+0x138>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    139e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 141c <base64_decode+0x13c>
    13a2:	441d      	add	r5, r3
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    13a4:	429d      	cmp	r5, r3
    13a6:	d105      	bne.n	13b4 <base64_decode+0xd4>
	*olen = p - dst;
    13a8:	1a0c      	subs	r4, r1, r0
	return 0;
    13aa:	e7a5      	b.n	12f8 <base64_decode+0x18>
		return -ENOMEM;
    13ac:	f06f 000b 	mvn.w	r0, #11
		*olen = n;
    13b0:	6014      	str	r4, [r2, #0]
		return -ENOMEM;
    13b2:	e7a3      	b.n	12fc <base64_decode+0x1c>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    13b4:	f813 9b01 	ldrb.w	r9, [r3], #1
    13b8:	f1a9 0c0a 	sub.w	ip, r9, #10
    13bc:	fa5f fc8c 	uxtb.w	ip, ip
    13c0:	f1bc 0f16 	cmp.w	ip, #22
    13c4:	d804      	bhi.n	13d0 <base64_decode+0xf0>
    13c6:	fa48 fc0c 	asr.w	ip, r8, ip
    13ca:	f01c 0f01 	tst.w	ip, #1
    13ce:	d0e9      	beq.n	13a4 <base64_decode+0xc4>
		j -= (base64_dec_map[*src] == 64U);
    13d0:	f81e c009 	ldrb.w	ip, [lr, r9]
		if (++n == 4) {
    13d4:	3401      	adds	r4, #1
		j -= (base64_dec_map[*src] == 64U);
    13d6:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    13da:	bf08      	it	eq
    13dc:	3e01      	subeq	r6, #1
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    13de:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
		if (++n == 4) {
    13e2:	2c04      	cmp	r4, #4
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    13e4:	ea4c 1787 	orr.w	r7, ip, r7, lsl #6
		if (++n == 4) {
    13e8:	d1dc      	bne.n	13a4 <base64_decode+0xc4>
			if (j > 0) {
    13ea:	b17e      	cbz	r6, 140c <base64_decode+0x12c>
				*p++ = (unsigned char)(x >> 16);
    13ec:	0c3c      	lsrs	r4, r7, #16
			if (j > 1) {
    13ee:	2e01      	cmp	r6, #1
				*p++ = (unsigned char)(x >> 16);
    13f0:	700c      	strb	r4, [r1, #0]
			if (j > 1) {
    13f2:	d102      	bne.n	13fa <base64_decode+0x11a>
				*p++ = (unsigned char)(x >> 16);
    13f4:	3101      	adds	r1, #1
			n = 0;
    13f6:	2400      	movs	r4, #0
    13f8:	e7d4      	b.n	13a4 <base64_decode+0xc4>
			if (j > 2) {
    13fa:	2e02      	cmp	r6, #2
				*p++ = (unsigned char)(x >> 8);
    13fc:	ea4f 2417 	mov.w	r4, r7, lsr #8
    1400:	704c      	strb	r4, [r1, #1]
				*p++ = (unsigned char)(x);
    1402:	bf16      	itet	ne
    1404:	708f      	strbne	r7, [r1, #2]
				*p++ = (unsigned char)(x >> 8);
    1406:	3102      	addeq	r1, #2
				*p++ = (unsigned char)(x);
    1408:	3103      	addne	r1, #3
    140a:	e7f4      	b.n	13f6 <base64_decode+0x116>
			n = 0;
    140c:	4634      	mov	r4, r6
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    140e:	e7c9      	b.n	13a4 <base64_decode+0xc4>
		if (x != 0U) {
    1410:	2d00      	cmp	r5, #0
    1412:	d0a2      	beq.n	135a <base64_decode+0x7a>
    1414:	e79b      	b.n	134e <base64_decode+0x6e>
    1416:	bf00      	nop
    1418:	00008aee 	.word	0x00008aee
    141c:	ffbffff6 	.word	0xffbffff6

00001420 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    1420:	4b01      	ldr	r3, [pc, #4]	; (1428 <char_out+0x8>)
    1422:	681b      	ldr	r3, [r3, #0]
    1424:	4718      	bx	r3
    1426:	bf00      	nop
    1428:	2000000c 	.word	0x2000000c

0000142c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    142c:	b507      	push	{r0, r1, r2, lr}
    142e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1430:	2100      	movs	r1, #0
    1432:	4602      	mov	r2, r0
    1434:	9100      	str	r1, [sp, #0]
    1436:	4803      	ldr	r0, [pc, #12]	; (1444 <vprintk+0x18>)
    1438:	f000 f914 	bl	1664 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    143c:	b003      	add	sp, #12
    143e:	f85d fb04 	ldr.w	pc, [sp], #4
    1442:	bf00      	nop
    1444:	00001421 	.word	0x00001421

00001448 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    144c:	8b05      	ldrh	r5, [r0, #24]
{
    144e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1450:	0728      	lsls	r0, r5, #28
{
    1452:	4690      	mov	r8, r2
	if (processing) {
    1454:	d411      	bmi.n	147a <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    1456:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1458:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    145c:	f040 80cd 	bne.w	15fa <process_event+0x1b2>
			evt = process_recheck(mgr);
    1460:	4620      	mov	r0, r4
    1462:	f004 fa40 	bl	58e6 <process_recheck>
		}

		if (evt == EVT_NOP) {
    1466:	b178      	cbz	r0, 1488 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    1468:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    146a:	8b21      	ldrh	r1, [r4, #24]
    146c:	2804      	cmp	r0, #4
    146e:	d811      	bhi.n	1494 <process_event+0x4c>
    1470:	e8df f000 	tbb	[pc, r0]
    1474:	856d10c3 	.word	0x856d10c3
    1478:	95          	.byte	0x95
    1479:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    147a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    147c:	bf0c      	ite	eq
    147e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1482:	f045 0520 	orrne.w	r5, r5, #32
    1486:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1488:	f388 8811 	msr	BASEPRI, r8
    148c:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1494:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1498:	45aa      	cmp	sl, r5
    149a:	f000 80a6 	beq.w	15ea <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    149e:	2700      	movs	r7, #0
    14a0:	46b9      	mov	r9, r7
    14a2:	463e      	mov	r6, r7
    14a4:	68a3      	ldr	r3, [r4, #8]
    14a6:	2b00      	cmp	r3, #0
    14a8:	f000 80bd 	beq.w	1626 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    14ac:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    14b0:	8321      	strh	r1, [r4, #24]
    14b2:	f388 8811 	msr	BASEPRI, r8
    14b6:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    14ba:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    14bc:	2900      	cmp	r1, #0
    14be:	f000 80bb 	beq.w	1638 <process_event+0x1f0>
	return node->next;
    14c2:	680d      	ldr	r5, [r1, #0]
    14c4:	2900      	cmp	r1, #0
    14c6:	f000 80b7 	beq.w	1638 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    14ca:	4633      	mov	r3, r6
    14cc:	4652      	mov	r2, sl
    14ce:	4620      	mov	r0, r4
    14d0:	f8d1 8004 	ldr.w	r8, [r1, #4]
    14d4:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    14d6:	2d00      	cmp	r5, #0
    14d8:	d076      	beq.n	15c8 <process_event+0x180>
    14da:	682b      	ldr	r3, [r5, #0]
    14dc:	4629      	mov	r1, r5
    14de:	461d      	mov	r5, r3
    14e0:	e7f0      	b.n	14c4 <process_event+0x7c>
    14e2:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    14e6:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    14e8:	2a01      	cmp	r2, #1
    14ea:	d81b      	bhi.n	1524 <process_event+0xdc>
	list->head = NULL;
    14ec:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14ee:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    14f2:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    14f4:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14f6:	b289      	uxth	r1, r1
	list->tail = NULL;
    14f8:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    14fc:	d109      	bne.n	1512 <process_event+0xca>
    14fe:	463b      	mov	r3, r7
    1500:	e003      	b.n	150a <process_event+0xc2>
				mgr->refs += 1U;
    1502:	8b62      	ldrh	r2, [r4, #26]
    1504:	3201      	adds	r2, #1
    1506:	8362      	strh	r2, [r4, #26]
	return node->next;
    1508:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    150a:	2b00      	cmp	r3, #0
    150c:	d1f9      	bne.n	1502 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    150e:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    1512:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1514:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1516:	f004 f9e6 	bl	58e6 <process_recheck>
    151a:	2800      	cmp	r0, #0
    151c:	d07b      	beq.n	1616 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    151e:	f041 0120 	orr.w	r1, r1, #32
    1522:	e077      	b.n	1614 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1524:	2b04      	cmp	r3, #4
    1526:	d10a      	bne.n	153e <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1528:	f021 0107 	bic.w	r1, r1, #7
    152c:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    152e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1530:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1532:	f004 f9d8 	bl	58e6 <process_recheck>
    1536:	b110      	cbz	r0, 153e <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1538:	f041 0120 	orr.w	r1, r1, #32
    153c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    153e:	8b21      	ldrh	r1, [r4, #24]
    1540:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1544:	45aa      	cmp	sl, r5
    1546:	d050      	beq.n	15ea <process_event+0x1a2>
    1548:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    154a:	46b9      	mov	r9, r7
    154c:	e7aa      	b.n	14a4 <process_event+0x5c>
			transit = mgr->transitions->start;
    154e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1550:	f021 0107 	bic.w	r1, r1, #7
    1554:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1558:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    155a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    155e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1560:	d12d      	bne.n	15be <process_event+0x176>
		    || (transit != NULL)) {
    1562:	f1b9 0f00 	cmp.w	r9, #0
    1566:	d040      	beq.n	15ea <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1568:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    156c:	8321      	strh	r1, [r4, #24]
    156e:	f388 8811 	msr	BASEPRI, r8
    1572:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    1576:	4620      	mov	r0, r4
    1578:	4939      	ldr	r1, [pc, #228]	; (1660 <process_event+0x218>)
    157a:	47c8      	blx	r9
    157c:	e029      	b.n	15d2 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    157e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    1582:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1584:	f041 0104 	orr.w	r1, r1, #4
    1588:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    158a:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    158c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1590:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1592:	d0e6      	beq.n	1562 <process_event+0x11a>
    1594:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1596:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    159a:	463e      	mov	r6, r7
    159c:	e782      	b.n	14a4 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    159e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    15a2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15a4:	f041 0105 	orr.w	r1, r1, #5
    15a8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    15aa:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    15ac:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    15b0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    15b2:	d0d6      	beq.n	1562 <process_event+0x11a>
    15b4:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    15b6:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    15ba:	463e      	mov	r6, r7
    15bc:	e772      	b.n	14a4 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    15be:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    15c0:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    15c4:	463e      	mov	r6, r7
    15c6:	e76d      	b.n	14a4 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    15c8:	462b      	mov	r3, r5
    15ca:	e787      	b.n	14dc <process_event+0x94>
			if (transit != NULL) {
    15cc:	f1b9 0f00 	cmp.w	r9, #0
    15d0:	d1d1      	bne.n	1576 <process_event+0x12e>
	__asm__ volatile(
    15d2:	f04f 0320 	mov.w	r3, #32
    15d6:	f3ef 8811 	mrs	r8, BASEPRI
    15da:	f383 8812 	msr	BASEPRI_MAX, r3
    15de:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    15e2:	8b23      	ldrh	r3, [r4, #24]
    15e4:	f023 0308 	bic.w	r3, r3, #8
    15e8:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    15ea:	8b25      	ldrh	r5, [r4, #24]
    15ec:	06ea      	lsls	r2, r5, #27
    15ee:	d52e      	bpl.n	164e <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    15f0:	f025 0310 	bic.w	r3, r5, #16
    15f4:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    15f6:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    15fa:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    15fc:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    15fe:	2e00      	cmp	r6, #0
    1600:	f6bf af6f 	bge.w	14e2 <process_event+0x9a>
	list->head = NULL;
    1604:	2300      	movs	r3, #0
		*clients = mgr->clients;
    1606:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1608:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    160c:	f021 0107 	bic.w	r1, r1, #7
    1610:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1614:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1616:	8b21      	ldrh	r1, [r4, #24]
    1618:	f04f 0900 	mov.w	r9, #0
    161c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1620:	45aa      	cmp	sl, r5
    1622:	f47f af3f 	bne.w	14a4 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    1626:	2f00      	cmp	r7, #0
    1628:	d09b      	beq.n	1562 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    162a:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    162e:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1630:	f388 8811 	msr	BASEPRI, r8
    1634:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    1638:	2f00      	cmp	r7, #0
    163a:	d0c7      	beq.n	15cc <process_event+0x184>
	return node->next;
    163c:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    163e:	4639      	mov	r1, r7
    1640:	4633      	mov	r3, r6
    1642:	4652      	mov	r2, sl
    1644:	4620      	mov	r0, r4
    1646:	f004 f97a 	bl	593e <notify_one>
	list->head = node;
    164a:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    164c:	e7f4      	b.n	1638 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    164e:	06ab      	lsls	r3, r5, #26
    1650:	f57f af1a 	bpl.w	1488 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1654:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1658:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    165a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    165e:	e6ff      	b.n	1460 <process_event+0x18>
    1660:	0000596b 	.word	0x0000596b

00001664 <z_cbvprintf_impl>:
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fmt,
		     va_list ap, uint32_t flags)
{
    1664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1668:	4682      	mov	sl, r0
	size_t count = 0;
    166a:	f04f 0900 	mov.w	r9, #0
{
    166e:	b08d      	sub	sp, #52	; 0x34
    1670:	461d      	mov	r5, r3

	const bool tagged_ap = (flags & Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS)
			       == Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    1672:	1e53      	subs	r3, r2, #1
{
    1674:	9101      	str	r1, [sp, #4]
	fmt--;
    1676:	9303      	str	r3, [sp, #12]

start:
	while (*++fmt != '%') {
    1678:	9b03      	ldr	r3, [sp, #12]
    167a:	7858      	ldrb	r0, [r3, #1]
    167c:	1c5c      	adds	r4, r3, #1
    167e:	2825      	cmp	r0, #37	; 0x25
    1680:	d119      	bne.n	16b6 <z_cbvprintf_impl+0x52>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    1682:	2000      	movs	r0, #0
	precision = -1;
    1684:	f04f 38ff 	mov.w	r8, #4294967295

	for (fmt++ ; ; fmt++) {
    1688:	461e      	mov	r6, r3
	min_width = -1;
    168a:	4644      	mov	r4, r8
	length_mod = 0;
    168c:	4603      	mov	r3, r0
	for (fmt++ ; ; fmt++) {
    168e:	3602      	adds	r6, #2
	padding_mode = 0;
    1690:	9002      	str	r0, [sp, #8]
		switch (*fmt) {
    1692:	7831      	ldrb	r1, [r6, #0]
    1694:	9603      	str	r6, [sp, #12]
    1696:	2939      	cmp	r1, #57	; 0x39
    1698:	d855      	bhi.n	1746 <z_cbvprintf_impl+0xe2>
    169a:	291f      	cmp	r1, #31
    169c:	d814      	bhi.n	16c8 <z_cbvprintf_impl+0x64>
    169e:	2900      	cmp	r1, #0
    16a0:	f000 81f1 	beq.w	1a86 <z_cbvprintf_impl+0x422>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    16a4:	9901      	ldr	r1, [sp, #4]
    16a6:	2025      	movs	r0, #37	; 0x25
    16a8:	47d0      	blx	sl
			OUTC(*fmt);
    16aa:	9901      	ldr	r1, [sp, #4]
    16ac:	7830      	ldrb	r0, [r6, #0]
    16ae:	47d0      	blx	sl
    16b0:	f109 0902 	add.w	r9, r9, #2
			goto start;
    16b4:	e7e0      	b.n	1678 <z_cbvprintf_impl+0x14>
		if (*fmt == '\0') {
    16b6:	2800      	cmp	r0, #0
    16b8:	f000 81e5 	beq.w	1a86 <z_cbvprintf_impl+0x422>
		OUTC(*fmt);
    16bc:	9901      	ldr	r1, [sp, #4]
    16be:	47d0      	blx	sl
    16c0:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
    16c4:	9403      	str	r4, [sp, #12]
    16c6:	e7d7      	b.n	1678 <z_cbvprintf_impl+0x14>
		switch (*fmt) {
    16c8:	f1a1 0220 	sub.w	r2, r1, #32
    16cc:	2a19      	cmp	r2, #25
    16ce:	d8e9      	bhi.n	16a4 <z_cbvprintf_impl+0x40>
    16d0:	a701      	add	r7, pc, #4	; (adr r7, 16d8 <z_cbvprintf_impl+0x74>)
    16d2:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    16d6:	bf00      	nop
    16d8:	00001741 	.word	0x00001741
    16dc:	000016a5 	.word	0x000016a5
    16e0:	000016a5 	.word	0x000016a5
    16e4:	00001741 	.word	0x00001741
    16e8:	000016a5 	.word	0x000016a5
    16ec:	000017c1 	.word	0x000017c1
    16f0:	000016a5 	.word	0x000016a5
    16f4:	000016a5 	.word	0x000016a5
    16f8:	000016a5 	.word	0x000016a5
    16fc:	000016a5 	.word	0x000016a5
    1700:	0000180d 	.word	0x0000180d
    1704:	00001741 	.word	0x00001741
    1708:	000016a5 	.word	0x000016a5
    170c:	00001821 	.word	0x00001821
    1710:	000017cd 	.word	0x000017cd
    1714:	000016a5 	.word	0x000016a5
    1718:	000017db 	.word	0x000017db
    171c:	000017fb 	.word	0x000017fb
    1720:	000017fb 	.word	0x000017fb
    1724:	000017fb 	.word	0x000017fb
    1728:	000017fb 	.word	0x000017fb
    172c:	000017fb 	.word	0x000017fb
    1730:	000017fb 	.word	0x000017fb
    1734:	000017fb 	.word	0x000017fb
    1738:	000017fb 	.word	0x000017fb
    173c:	000017fb 	.word	0x000017fb
    1740:	4608      	mov	r0, r1
    1742:	3601      	adds	r6, #1
    1744:	e7a5      	b.n	1692 <z_cbvprintf_impl+0x2e>
    1746:	2958      	cmp	r1, #88	; 0x58
    1748:	f000 80ee 	beq.w	1928 <z_cbvprintf_impl+0x2c4>
    174c:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
    1750:	b2d7      	uxtb	r7, r2
    1752:	2f17      	cmp	r7, #23
    1754:	d8a6      	bhi.n	16a4 <z_cbvprintf_impl+0x40>
    1756:	2a17      	cmp	r2, #23
    1758:	d8a4      	bhi.n	16a4 <z_cbvprintf_impl+0x40>
    175a:	a701      	add	r7, pc, #4	; (adr r7, 1760 <z_cbvprintf_impl+0xfc>)
    175c:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    1760:	000019cf 	.word	0x000019cf
    1764:	00001847 	.word	0x00001847
    1768:	000016a5 	.word	0x000016a5
    176c:	000016a5 	.word	0x000016a5
    1770:	000016a5 	.word	0x000016a5
    1774:	00001827 	.word	0x00001827
    1778:	00001847 	.word	0x00001847
    177c:	000016a5 	.word	0x000016a5
    1780:	000016a5 	.word	0x000016a5
    1784:	00001827 	.word	0x00001827
    1788:	000016a5 	.word	0x000016a5
    178c:	000016a5 	.word	0x000016a5
    1790:	000016a5 	.word	0x000016a5
    1794:	00001903 	.word	0x00001903
    1798:	000016a5 	.word	0x000016a5
    179c:	000016a5 	.word	0x000016a5
    17a0:	000019a3 	.word	0x000019a3
    17a4:	000016a5 	.word	0x000016a5
    17a8:	00001847 	.word	0x00001847
    17ac:	000016a5 	.word	0x000016a5
    17b0:	000016a5 	.word	0x000016a5
    17b4:	00001903 	.word	0x00001903
    17b8:	000016a5 	.word	0x000016a5
    17bc:	00001827 	.word	0x00001827
			OUTC('%');
    17c0:	2025      	movs	r0, #37	; 0x25
    17c2:	9901      	ldr	r1, [sp, #4]
    17c4:	47d0      	blx	sl
    17c6:	f109 0901 	add.w	r9, r9, #1
			goto start;
    17ca:	e755      	b.n	1678 <z_cbvprintf_impl+0x14>
			padding_mode &= (char)~PAD_ZERO;
    17cc:	9a02      	ldr	r2, [sp, #8]
			precision = 0;
    17ce:	f04f 0800 	mov.w	r8, #0
			padding_mode &= (char)~PAD_ZERO;
    17d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    17d6:	9202      	str	r2, [sp, #8]
			continue;
    17d8:	e7b3      	b.n	1742 <z_cbvprintf_impl+0xde>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    17da:	2c00      	cmp	r4, #0
    17dc:	da0d      	bge.n	17fa <z_cbvprintf_impl+0x196>
    17de:	f1b8 0f00 	cmp.w	r8, #0
    17e2:	da0d      	bge.n	1800 <z_cbvprintf_impl+0x19c>
    17e4:	9a02      	ldr	r2, [sp, #8]
    17e6:	2a00      	cmp	r2, #0
    17e8:	f000 8145 	beq.w	1a76 <z_cbvprintf_impl+0x412>
				min_width = 10 * min_width + *fmt - '0';
    17ec:	220a      	movs	r2, #10
				if (min_width < 0) {
    17ee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
				min_width = 10 * min_width + *fmt - '0';
    17f2:	fb02 1404 	mla	r4, r2, r4, r1
    17f6:	3c30      	subs	r4, #48	; 0x30
    17f8:	e7a3      	b.n	1742 <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
    17fa:	f1b8 0f00 	cmp.w	r8, #0
    17fe:	dbf5      	blt.n	17ec <z_cbvprintf_impl+0x188>
				precision = 10 * precision + *fmt - '0';
    1800:	220a      	movs	r2, #10
    1802:	fb02 1208 	mla	r2, r2, r8, r1
    1806:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
    180a:	e79a      	b.n	1742 <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
    180c:	f1b8 0f00 	cmp.w	r8, #0
				precision = va_arg(ap, int);
    1810:	f855 2b04 	ldr.w	r2, [r5], #4
			if (precision >= 0) {
    1814:	f280 8131 	bge.w	1a7a <z_cbvprintf_impl+0x416>
				if (min_width < 0) {
    1818:	2a00      	cmp	r2, #0
    181a:	f280 8130 	bge.w	1a7e <z_cbvprintf_impl+0x41a>
					min_width = -min_width;
    181e:	4254      	negs	r4, r2
		switch (*fmt) {
    1820:	2202      	movs	r2, #2
				padding_mode = PAD_ZERO;
    1822:	9202      	str	r2, [sp, #8]
    1824:	e78d      	b.n	1742 <z_cbvprintf_impl+0xde>
			if (*fmt == 'h' && length_mod == 'h') {
    1826:	2968      	cmp	r1, #104	; 0x68
    1828:	d103      	bne.n	1832 <z_cbvprintf_impl+0x1ce>
    182a:	2b68      	cmp	r3, #104	; 0x68
    182c:	d106      	bne.n	183c <z_cbvprintf_impl+0x1d8>
				length_mod = 'H';
    182e:	2348      	movs	r3, #72	; 0x48
    1830:	e787      	b.n	1742 <z_cbvprintf_impl+0xde>
			} else if (*fmt == 'l' && length_mod == 'l') {
    1832:	296c      	cmp	r1, #108	; 0x6c
    1834:	d102      	bne.n	183c <z_cbvprintf_impl+0x1d8>
    1836:	2b6c      	cmp	r3, #108	; 0x6c
    1838:	f000 8123 	beq.w	1a82 <z_cbvprintf_impl+0x41e>
			} else if (length_mod == '\0') {
    183c:	2b00      	cmp	r3, #0
    183e:	f47f af31 	bne.w	16a4 <z_cbvprintf_impl+0x40>
		switch (*fmt) {
    1842:	460b      	mov	r3, r1
    1844:	e77d      	b.n	1742 <z_cbvprintf_impl+0xde>
			if (length_mod == 'z') {
    1846:	2b7a      	cmp	r3, #122	; 0x7a
    1848:	d106      	bne.n	1858 <z_cbvprintf_impl+0x1f4>
			} else if (*fmt == 'u') {
    184a:	2975      	cmp	r1, #117	; 0x75
				precision = va_arg(ap, int);
    184c:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
    1850:	d114      	bne.n	187c <z_cbvprintf_impl+0x218>
				d = va_arg(ap, unsigned int);
    1852:	f04f 0b00 	mov.w	fp, #0
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1856:	e00c      	b.n	1872 <z_cbvprintf_impl+0x20e>
			} else if (length_mod == 'l') {
    1858:	2b6c      	cmp	r3, #108	; 0x6c
    185a:	d0f6      	beq.n	184a <z_cbvprintf_impl+0x1e6>
			} else if (length_mod == 'L') {
    185c:	2b4c      	cmp	r3, #76	; 0x4c
    185e:	d1f4      	bne.n	184a <z_cbvprintf_impl+0x1e6>
					unsigned long long llu =
    1860:	3507      	adds	r5, #7
    1862:	f025 0307 	bic.w	r3, r5, #7
				if (*fmt == 'u') {
    1866:	2975      	cmp	r1, #117	; 0x75
					unsigned long long llu =
    1868:	f103 0508 	add.w	r5, r3, #8
    186c:	e9d3 6b00 	ldrd	r6, fp, [r3]
				if (*fmt == 'u') {
    1870:	d106      	bne.n	1880 <z_cbvprintf_impl+0x21c>
			} else if (special == ' ') {
    1872:	2820      	cmp	r0, #32
    1874:	d13e      	bne.n	18f4 <z_cbvprintf_impl+0x290>
				prefix = " ";
    1876:	4f86      	ldr	r7, [pc, #536]	; (1a90 <z_cbvprintf_impl+0x42c>)
				min_width--;
    1878:	3c01      	subs	r4, #1
    187a:	e009      	b.n	1890 <z_cbvprintf_impl+0x22c>
				d = va_arg(ap, int);
    187c:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1880:	f1bb 0f00 	cmp.w	fp, #0
    1884:	daf5      	bge.n	1872 <z_cbvprintf_impl+0x20e>
				d = -d;
    1886:	4276      	negs	r6, r6
				prefix = "-";
    1888:	4f82      	ldr	r7, [pc, #520]	; (1a94 <z_cbvprintf_impl+0x430>)
				d = -d;
    188a:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
    188e:	3c01      	subs	r4, #1
	int i = 0;
    1890:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    1894:	9305      	str	r3, [sp, #20]
    1896:	2300      	movs	r3, #0
    1898:	9304      	str	r3, [sp, #16]
		unsigned int c = num % base;
    189a:	4630      	mov	r0, r6
    189c:	4659      	mov	r1, fp
    189e:	220a      	movs	r2, #10
    18a0:	2300      	movs	r3, #0
    18a2:	f7fe fc4f 	bl	144 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    18a6:	9b04      	ldr	r3, [sp, #16]
    18a8:	3230      	adds	r2, #48	; 0x30
    18aa:	f103 3cff 	add.w	ip, r3, #4294967295
    18ae:	f8cd c010 	str.w	ip, [sp, #16]
    18b2:	f8dd c014 	ldr.w	ip, [sp, #20]
    18b6:	f80c 2d01 	strb.w	r2, [ip, #-1]!
    18ba:	f8cd c014 	str.w	ip, [sp, #20]
		num /= base;
    18be:	46b4      	mov	ip, r6
    18c0:	465a      	mov	r2, fp
	} while (num);
    18c2:	f1bc 0f0a 	cmp.w	ip, #10
    18c6:	f172 0200 	sbcs.w	r2, r2, #0
		num /= base;
    18ca:	4606      	mov	r6, r0
    18cc:	468b      	mov	fp, r1
	} while (num);
    18ce:	d2e4      	bcs.n	189a <z_cbvprintf_impl+0x236>
	return -i;
    18d0:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
    18d4:	3330      	adds	r3, #48	; 0x30
			data = buf + sizeof(buf) - data_len;
    18d6:	eb0d 0603 	add.w	r6, sp, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    18da:	f1b8 0f00 	cmp.w	r8, #0
			data = buf + sizeof(buf) - data_len;
    18de:	f1a6 0604 	sub.w	r6, r6, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    18e2:	da6d      	bge.n	19c0 <z_cbvprintf_impl+0x35c>
    18e4:	9b02      	ldr	r3, [sp, #8]
    18e6:	07d9      	lsls	r1, r3, #31
    18e8:	d47c      	bmi.n	19e4 <z_cbvprintf_impl+0x380>
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
    18ea:	eba8 030b 	sub.w	r3, r8, fp
		min_width -= data_len;
    18ee:	eba4 040b 	sub.w	r4, r4, fp
    18f2:	e013      	b.n	191c <z_cbvprintf_impl+0x2b8>
			} else if (special == '+') {
    18f4:	282b      	cmp	r0, #43	; 0x2b
				prefix = "+";
    18f6:	bf0a      	itet	eq
    18f8:	4f67      	ldreq	r7, [pc, #412]	; (1a98 <z_cbvprintf_impl+0x434>)
	prefix = "";
    18fa:	4f68      	ldrne	r7, [pc, #416]	; (1a9c <z_cbvprintf_impl+0x438>)
				min_width--;
    18fc:	f104 34ff 	addeq.w	r4, r4, #4294967295
    1900:	e7c6      	b.n	1890 <z_cbvprintf_impl+0x22c>
			if (*fmt == 'p') {
    1902:	2970      	cmp	r1, #112	; 0x70
    1904:	d10f      	bne.n	1926 <z_cbvprintf_impl+0x2c2>
				x = (uintptr_t)va_arg(ap, void *);
    1906:	f855 2b04 	ldr.w	r2, [r5], #4
    190a:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
    190c:	b9fa      	cbnz	r2, 194e <z_cbvprintf_impl+0x2ea>
		precision -= data_len;
    190e:	f06f 0304 	mvn.w	r3, #4
					data_len = 5;
    1912:	f04f 0b05 	mov.w	fp, #5
					data = "(nil)";
    1916:	4e62      	ldr	r6, [pc, #392]	; (1aa0 <z_cbvprintf_impl+0x43c>)
		min_width -= data_len;
    1918:	3c05      	subs	r4, #5
	prefix = "";
    191a:	4f60      	ldr	r7, [pc, #384]	; (1a9c <z_cbvprintf_impl+0x438>)
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    191c:	9a02      	ldr	r2, [sp, #8]
    191e:	0792      	lsls	r2, r2, #30
    1920:	d46f      	bmi.n	1a02 <z_cbvprintf_impl+0x39e>
    1922:	46a0      	mov	r8, r4
    1924:	e065      	b.n	19f2 <z_cbvprintf_impl+0x38e>
		switch (*fmt) {
    1926:	2178      	movs	r1, #120	; 0x78
			} else if (length_mod == 'l') {
    1928:	2b6c      	cmp	r3, #108	; 0x6c
    192a:	d103      	bne.n	1934 <z_cbvprintf_impl+0x2d0>
				x = va_arg(ap, unsigned int);
    192c:	2300      	movs	r3, #0
    192e:	f855 2b04 	ldr.w	r2, [r5], #4
    1932:	e008      	b.n	1946 <z_cbvprintf_impl+0x2e2>
			} else if (length_mod == 'L') {
    1934:	2b4c      	cmp	r3, #76	; 0x4c
    1936:	d1f9      	bne.n	192c <z_cbvprintf_impl+0x2c8>
				unsigned long long llx =
    1938:	3507      	adds	r5, #7
    193a:	f025 0307 	bic.w	r3, r5, #7
    193e:	461d      	mov	r5, r3
    1940:	685b      	ldr	r3, [r3, #4]
    1942:	f855 2b08 	ldr.w	r2, [r5], #8
			if (special == '#') {
    1946:	2823      	cmp	r0, #35	; 0x23
    1948:	d125      	bne.n	1996 <z_cbvprintf_impl+0x332>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    194a:	0688      	lsls	r0, r1, #26
    194c:	d521      	bpl.n	1992 <z_cbvprintf_impl+0x32e>
    194e:	4f55      	ldr	r7, [pc, #340]	; (1aa4 <z_cbvprintf_impl+0x440>)
				min_width -= 2;
    1950:	3c02      	subs	r4, #2
	int i = 0;
    1952:	2600      	movs	r6, #0
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1954:	f001 0160 	and.w	r1, r1, #96	; 0x60
    1958:	f1a1 0b39 	sub.w	fp, r1, #57	; 0x39
	int i = 0;
    195c:	f10d 0e2d 	add.w	lr, sp, #45	; 0x2d
		unsigned int c = num % base;
    1960:	f002 010f 	and.w	r1, r2, #15
		if (c >= 10) {
    1964:	2909      	cmp	r1, #9
			c += alpha;
    1966:	bf88      	it	hi
    1968:	4459      	addhi	r1, fp
		buftop[--i] = c + '0';
    196a:	3130      	adds	r1, #48	; 0x30
    196c:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	} while (num);
    1970:	2a10      	cmp	r2, #16
		num /= base;
    1972:	ea4f 1112 	mov.w	r1, r2, lsr #4
    1976:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    197a:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
    197e:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    1982:	f106 3cff 	add.w	ip, r6, #4294967295
	} while (num);
    1986:	d208      	bcs.n	199a <z_cbvprintf_impl+0x336>
	return -i;
    1988:	f1c6 0b01 	rsb	fp, r6, #1
			data = buf + sizeof(buf) - data_len;
    198c:	f106 0330 	add.w	r3, r6, #48	; 0x30
    1990:	e7a1      	b.n	18d6 <z_cbvprintf_impl+0x272>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1992:	4f45      	ldr	r7, [pc, #276]	; (1aa8 <z_cbvprintf_impl+0x444>)
    1994:	e7dc      	b.n	1950 <z_cbvprintf_impl+0x2ec>
	prefix = "";
    1996:	4f41      	ldr	r7, [pc, #260]	; (1a9c <z_cbvprintf_impl+0x438>)
    1998:	e7db      	b.n	1952 <z_cbvprintf_impl+0x2ee>
		buftop[--i] = c + '0';
    199a:	4666      	mov	r6, ip
		num /= base;
    199c:	460a      	mov	r2, r1
    199e:	4603      	mov	r3, r0
    19a0:	e7de      	b.n	1960 <z_cbvprintf_impl+0x2fc>
			data = va_arg(ap, char *);
    19a2:	f855 6b04 	ldr.w	r6, [r5], #4
			data_len = strlen(data);
    19a6:	4630      	mov	r0, r6
    19a8:	f004 f93d 	bl	5c26 <strlen>
			if (precision >= 0 && data_len > precision) {
    19ac:	f1b8 0f00 	cmp.w	r8, #0
			data_len = strlen(data);
    19b0:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
    19b2:	db02      	blt.n	19ba <z_cbvprintf_impl+0x356>
    19b4:	4540      	cmp	r0, r8
    19b6:	bfa8      	it	ge
    19b8:	46c3      	movge	fp, r8
			precision = 0;
    19ba:	f04f 0800 	mov.w	r8, #0
	prefix = "";
    19be:	4f37      	ldr	r7, [pc, #220]	; (1a9c <z_cbvprintf_impl+0x438>)
		precision -= data_len;
    19c0:	eba8 030b 	sub.w	r3, r8, fp
		if (precision > 0) {
    19c4:	2b00      	cmp	r3, #0
    19c6:	dd92      	ble.n	18ee <z_cbvprintf_impl+0x28a>
			min_width -= precision;
    19c8:	eba4 0408 	sub.w	r4, r4, r8
    19cc:	e7a6      	b.n	191c <z_cbvprintf_impl+0x2b8>
			buf[0] = c;
    19ce:	f855 3b04 	ldr.w	r3, [r5], #4
			data_len = 1;
    19d2:	f04f 0b01 	mov.w	fp, #1
			buf[0] = c;
    19d6:	f88d 3018 	strb.w	r3, [sp, #24]
		min_width -= data_len;
    19da:	3c01      	subs	r4, #1
		precision -= data_len;
    19dc:	f04f 33ff 	mov.w	r3, #4294967295
			data = buf;
    19e0:	ae06      	add	r6, sp, #24
    19e2:	e79a      	b.n	191a <z_cbvprintf_impl+0x2b6>
    19e4:	46a0      	mov	r8, r4
    19e6:	e7eb      	b.n	19c0 <z_cbvprintf_impl+0x35c>
    19e8:	9302      	str	r3, [sp, #8]
			while (--min_width >= 0) {
				OUTC(' ');
    19ea:	2020      	movs	r0, #32
    19ec:	9901      	ldr	r1, [sp, #4]
    19ee:	47d0      	blx	sl
    19f0:	9b02      	ldr	r3, [sp, #8]
			while (--min_width >= 0) {
    19f2:	f1b8 0801 	subs.w	r8, r8, #1
    19f6:	d5f7      	bpl.n	19e8 <z_cbvprintf_impl+0x384>
    19f8:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
    19fc:	3c01      	subs	r4, #1
    19fe:	4491      	add	r9, r2
    1a00:	1aa4      	subs	r4, r4, r2
    1a02:	46b8      	mov	r8, r7
    1a04:	e006      	b.n	1a14 <z_cbvprintf_impl+0x3b0>
    1a06:	9304      	str	r3, [sp, #16]
    1a08:	9202      	str	r2, [sp, #8]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    1a0a:	9901      	ldr	r1, [sp, #4]
    1a0c:	47d0      	blx	sl
    1a0e:	9a02      	ldr	r2, [sp, #8]
    1a10:	9b04      	ldr	r3, [sp, #16]
    1a12:	4690      	mov	r8, r2
		while (*prefix) {
    1a14:	4642      	mov	r2, r8
    1a16:	f812 0b01 	ldrb.w	r0, [r2], #1
    1a1a:	2800      	cmp	r0, #0
    1a1c:	d1f3      	bne.n	1a06 <z_cbvprintf_impl+0x3a2>
    1a1e:	461a      	mov	r2, r3
		}
		while (--precision >= 0) {
    1a20:	3a01      	subs	r2, #1
    1a22:	d515      	bpl.n	1a50 <z_cbvprintf_impl+0x3ec>
    1a24:	2b00      	cmp	r3, #0
    1a26:	bfac      	ite	ge
    1a28:	ebc7 0703 	rsbge	r7, r7, r3
    1a2c:	427f      	neglt	r7, r7
    1a2e:	465b      	mov	r3, fp
			OUTC('0');
		}
		while (--data_len >= 0) {
    1a30:	3b01      	subs	r3, #1
    1a32:	d515      	bpl.n	1a60 <z_cbvprintf_impl+0x3fc>
    1a34:	f1bb 0f00 	cmp.w	fp, #0
    1a38:	bfa8      	it	ge
    1a3a:	445f      	addge	r7, fp
    1a3c:	4626      	mov	r6, r4
    1a3e:	444f      	add	r7, r9
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    1a40:	3e01      	subs	r6, #1
    1a42:	d514      	bpl.n	1a6e <z_cbvprintf_impl+0x40a>
    1a44:	2c00      	cmp	r4, #0
    1a46:	bfa8      	it	ge
    1a48:	193f      	addge	r7, r7, r4
    1a4a:	eb07 0908 	add.w	r9, r7, r8
    1a4e:	e613      	b.n	1678 <z_cbvprintf_impl+0x14>
    1a50:	9304      	str	r3, [sp, #16]
    1a52:	9202      	str	r2, [sp, #8]
			OUTC('0');
    1a54:	2030      	movs	r0, #48	; 0x30
    1a56:	9901      	ldr	r1, [sp, #4]
    1a58:	47d0      	blx	sl
    1a5a:	9b04      	ldr	r3, [sp, #16]
    1a5c:	9a02      	ldr	r2, [sp, #8]
    1a5e:	e7df      	b.n	1a20 <z_cbvprintf_impl+0x3bc>
    1a60:	9302      	str	r3, [sp, #8]
			OUTC(*data++);
    1a62:	9901      	ldr	r1, [sp, #4]
    1a64:	f816 0b01 	ldrb.w	r0, [r6], #1
    1a68:	47d0      	blx	sl
    1a6a:	9b02      	ldr	r3, [sp, #8]
    1a6c:	e7e0      	b.n	1a30 <z_cbvprintf_impl+0x3cc>
			OUTC(' ');
    1a6e:	9901      	ldr	r1, [sp, #4]
    1a70:	2020      	movs	r0, #32
    1a72:	47d0      	blx	sl
    1a74:	e7e4      	b.n	1a40 <z_cbvprintf_impl+0x3dc>
				padding_mode = PAD_ZERO;
    1a76:	2201      	movs	r2, #1
    1a78:	e6d3      	b.n	1822 <z_cbvprintf_impl+0x1be>
				precision = va_arg(ap, int);
    1a7a:	4690      	mov	r8, r2
    1a7c:	e661      	b.n	1742 <z_cbvprintf_impl+0xde>
    1a7e:	4614      	mov	r4, r2
    1a80:	e65f      	b.n	1742 <z_cbvprintf_impl+0xde>
				length_mod = 'L';
    1a82:	234c      	movs	r3, #76	; 0x4c
    1a84:	e65d      	b.n	1742 <z_cbvprintf_impl+0xde>
		}

		goto start;
	}
}
    1a86:	4648      	mov	r0, r9
    1a88:	b00d      	add	sp, #52	; 0x34
    1a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a8e:	bf00      	nop
    1a90:	00008bc1 	.word	0x00008bc1
    1a94:	00008bbf 	.word	0x00008bbf
    1a98:	00008bc3 	.word	0x00008bc3
    1a9c:	00008d44 	.word	0x00008d44
    1aa0:	00008bcb 	.word	0x00008bcb
    1aa4:	00008bc5 	.word	0x00008bc5
    1aa8:	00008bc8 	.word	0x00008bc8

00001aac <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1aac:	4604      	mov	r4, r0
    1aae:	b508      	push	{r3, lr}
	__asm__ volatile(
    1ab0:	f04f 0220 	mov.w	r2, #32
    1ab4:	f3ef 8311 	mrs	r3, BASEPRI
    1ab8:	f382 8812 	msr	BASEPRI_MAX, r2
    1abc:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    1ac0:	f001 ff2e 	bl	3920 <sys_clock_disable>
	}

	sys_arch_reboot(type);
    1ac4:	4620      	mov	r0, r4
    1ac6:	f001 f81b 	bl	2b00 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1aca:	4803      	ldr	r0, [pc, #12]	; (1ad8 <sys_reboot+0x2c>)
    1acc:	f003 fefe 	bl	58cc <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1ad0:	f000 fdd4 	bl	267c <arch_cpu_idle>
    1ad4:	e7fc      	b.n	1ad0 <sys_reboot+0x24>
    1ad6:	bf00      	nop
    1ad8:	00008bd1 	.word	0x00008bd1

00001adc <nordicsemi_nrf91_init>:
    1adc:	f04f 0220 	mov.w	r2, #32
    1ae0:	f3ef 8311 	mrs	r3, BASEPRI
    1ae4:	f382 8812 	msr	BASEPRI_MAX, r2
    1ae8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1aec:	2101      	movs	r1, #1
    1aee:	4a04      	ldr	r2, [pc, #16]	; (1b00 <nordicsemi_nrf91_init+0x24>)
    1af0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    1af4:	f383 8811 	msr	BASEPRI, r3
    1af8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1afc:	2000      	movs	r0, #0
    1afe:	4770      	bx	lr
    1b00:	50039000 	.word	0x50039000

00001b04 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1b04:	b120      	cbz	r0, 1b10 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1b06:	4b03      	ldr	r3, [pc, #12]	; (1b14 <arch_busy_wait+0x10>)
    1b08:	0180      	lsls	r0, r0, #6
    1b0a:	f043 0301 	orr.w	r3, r3, #1
    1b0e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1b10:	4770      	bx	lr
    1b12:	bf00      	nop
    1b14:	000085e0 	.word	0x000085e0

00001b18 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1b18:	f002 bb52 	b.w	41c0 <SystemInit>

00001b1c <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
    1b1c:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
    1b1e:	4b11      	ldr	r3, [pc, #68]	; (1b64 <flash_area_open+0x48>)
{
    1b20:	460d      	mov	r5, r1
	if (flash_map == NULL) {
    1b22:	681c      	ldr	r4, [r3, #0]
    1b24:	b1dc      	cbz	r4, 1b5e <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1b26:	4b10      	ldr	r3, [pc, #64]	; (1b68 <flash_area_open+0x4c>)
    1b28:	6819      	ldr	r1, [r3, #0]
    1b2a:	2300      	movs	r3, #0
    1b2c:	428b      	cmp	r3, r1
    1b2e:	db02      	blt.n	1b36 <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    1b30:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    1b34:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    1b36:	4622      	mov	r2, r4
    1b38:	f812 6b10 	ldrb.w	r6, [r2], #16
    1b3c:	4286      	cmp	r6, r0
    1b3e:	d002      	beq.n	1b46 <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
    1b40:	4614      	mov	r4, r2
    1b42:	3301      	adds	r3, #1
    1b44:	e7f2      	b.n	1b2c <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1b46:	68e0      	ldr	r0, [r4, #12]
    1b48:	b910      	cbnz	r0, 1b50 <flash_area_open+0x34>
		return -ENODEV;
    1b4a:	f06f 0012 	mvn.w	r0, #18
    1b4e:	e7f1      	b.n	1b34 <flash_area_open+0x18>
    1b50:	f006 fb65 	bl	821e <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1b54:	2800      	cmp	r0, #0
    1b56:	d0f8      	beq.n	1b4a <flash_area_open+0x2e>
	return 0;
    1b58:	2000      	movs	r0, #0
	*fap = area;
    1b5a:	602c      	str	r4, [r5, #0]
	return 0;
    1b5c:	e7ea      	b.n	1b34 <flash_area_open+0x18>
		return -EACCES;
    1b5e:	f06f 000c 	mvn.w	r0, #12
    1b62:	e7e7      	b.n	1b34 <flash_area_open+0x18>
    1b64:	20000010 	.word	0x20000010
    1b68:	00008600 	.word	0x00008600

00001b6c <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1b6c:	b570      	push	{r4, r5, r6, lr}
    1b6e:	b088      	sub	sp, #32
    1b70:	4605      	mov	r5, r0
    1b72:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    1b74:	b2c0      	uxtb	r0, r0
    1b76:	4669      	mov	r1, sp
{
    1b78:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    1b7a:	f7ff ffcf 	bl	1b1c <flash_area_open>
	if (rc < 0 || fa == NULL) {
    1b7e:	2800      	cmp	r0, #0
    1b80:	db1b      	blt.n	1bba <flash_area_get_sectors+0x4e>
    1b82:	9800      	ldr	r0, [sp, #0]
    1b84:	b1c8      	cbz	r0, 1bba <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    1b86:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    1b88:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    1b8a:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1b8c:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
    1b8e:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    1b90:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    1b94:	2300      	movs	r3, #0
	cb_data->status = 0;
    1b96:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    1b9a:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
    1b9c:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
    1b9e:	f003 ff90 	bl	5ac2 <flash_area_close>
	if (flash_dev == NULL) {
    1ba2:	b16d      	cbz	r5, 1bc0 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    1ba4:	4628      	mov	r0, r5
    1ba6:	4908      	ldr	r1, [pc, #32]	; (1bc8 <flash_area_get_sectors+0x5c>)
    1ba8:	aa01      	add	r2, sp, #4
    1baa:	f004 f99a 	bl	5ee2 <flash_page_foreach>
	if (cb_data->status == 0) {
    1bae:	9807      	ldr	r0, [sp, #28]
    1bb0:	b908      	cbnz	r0, 1bb6 <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    1bb2:	9b05      	ldr	r3, [sp, #20]
    1bb4:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1bb6:	b008      	add	sp, #32
    1bb8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    1bba:	f06f 0015 	mvn.w	r0, #21
    1bbe:	e7fa      	b.n	1bb6 <flash_area_get_sectors+0x4a>
		return -ENODEV;
    1bc0:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1bc4:	e7f7      	b.n	1bb6 <flash_area_get_sectors+0x4a>
    1bc6:	bf00      	nop
    1bc8:	00005b5d 	.word	0x00005b5d

00001bcc <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1bcc:	4801      	ldr	r0, [pc, #4]	; (1bd4 <nrf_cc3xx_platform_abort_init+0x8>)
    1bce:	f003 b9a7 	b.w	4f20 <nrf_cc3xx_platform_set_abort>
    1bd2:	bf00      	nop
    1bd4:	000086d4 	.word	0x000086d4

00001bd8 <boot_uart_fifo_callback>:
	return boot_uart_fifo_init();
}

static void
boot_uart_fifo_callback(const struct device *dev, void *user_data)
{
    1bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	static struct line_input *cmd;
	uint8_t byte;
	int rx;

	uart_irq_update(uart_dev);
    1bda:	4e22      	ldr	r6, [pc, #136]	; (1c64 <boot_uart_fifo_callback+0x8c>)
    1bdc:	6830      	ldr	r0, [r6, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
    1bde:	6883      	ldr	r3, [r0, #8]
    1be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1be2:	b103      	cbz	r3, 1be6 <boot_uart_fifo_callback+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
    1be4:	4798      	blx	r3

	if (!uart_irq_rx_ready(uart_dev)) {
    1be6:	6830      	ldr	r0, [r6, #0]
	if (api->irq_rx_ready == NULL) {
    1be8:	6883      	ldr	r3, [r0, #8]
    1bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1bec:	2b00      	cmp	r3, #0
    1bee:	d131      	bne.n	1c54 <boot_uart_fifo_callback+0x7c>
		rx = uart_fifo_read(uart_dev, &byte, 1);
		if (rx != 1) {
			break;
		}

		if (!cmd) {
    1bf0:	4c1d      	ldr	r4, [pc, #116]	; (1c68 <boot_uart_fifo_callback+0x90>)
	return list->head;
    1bf2:	4d1e      	ldr	r5, [pc, #120]	; (1c6c <boot_uart_fifo_callback+0x94>)
		rx = uart_fifo_read(uart_dev, &byte, 1);
    1bf4:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_read == NULL) {
    1bf6:	6883      	ldr	r3, [r0, #8]
    1bf8:	699b      	ldr	r3, [r3, #24]
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	d02d      	beq.n	1c5a <boot_uart_fifo_callback+0x82>
	return api->fifo_read(dev, rx_data, size);
    1bfe:	2201      	movs	r2, #1
    1c00:	f10d 0107 	add.w	r1, sp, #7
    1c04:	4798      	blx	r3
		if (rx != 1) {
    1c06:	2801      	cmp	r0, #1
    1c08:	d127      	bne.n	1c5a <boot_uart_fifo_callback+0x82>
		if (!cmd) {
    1c0a:	6823      	ldr	r3, [r4, #0]
    1c0c:	b943      	cbnz	r3, 1c20 <boot_uart_fifo_callback+0x48>
    1c0e:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    1c10:	b31b      	cbz	r3, 1c5a <boot_uart_fifo_callback+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1c12:	6869      	ldr	r1, [r5, #4]
	return node->next;
    1c14:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1c16:	428b      	cmp	r3, r1
	list->head = node;
    1c18:	602a      	str	r2, [r5, #0]
	list->tail = node;
    1c1a:	bf08      	it	eq
    1c1c:	606a      	streq	r2, [r5, #4]
			if (!node) {
				BOOT_LOG_ERR("Not enough memory to store"
					     " incoming data!");
				return;
			}
			cmd = CONTAINER_OF(node, struct line_input, node);
    1c1e:	6023      	str	r3, [r4, #0]
		}

		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    1c20:	4a13      	ldr	r2, [pc, #76]	; (1c70 <boot_uart_fifo_callback+0x98>)
			cmd->line[cur++] = byte;
		}

		if (byte ==  '\n') {
    1c22:	f89d 0007 	ldrb.w	r0, [sp, #7]
		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    1c26:	8811      	ldrh	r1, [r2, #0]
    1c28:	297f      	cmp	r1, #127	; 0x7f
    1c2a:	d804      	bhi.n	1c36 <boot_uart_fifo_callback+0x5e>
			cmd->line[cur++] = byte;
    1c2c:	6823      	ldr	r3, [r4, #0]
    1c2e:	1c4f      	adds	r7, r1, #1
    1c30:	440b      	add	r3, r1
    1c32:	8017      	strh	r7, [r2, #0]
    1c34:	7218      	strb	r0, [r3, #8]
		if (byte ==  '\n') {
    1c36:	280a      	cmp	r0, #10
    1c38:	d1dc      	bne.n	1bf4 <boot_uart_fifo_callback+0x1c>
	parent->next = child;
    1c3a:	2000      	movs	r0, #0
			cmd->len = cur;
    1c3c:	6823      	ldr	r3, [r4, #0]
    1c3e:	8811      	ldrh	r1, [r2, #0]
    1c40:	6018      	str	r0, [r3, #0]
    1c42:	6059      	str	r1, [r3, #4]
	return list->tail;
    1c44:	490b      	ldr	r1, [pc, #44]	; (1c74 <boot_uart_fifo_callback+0x9c>)
    1c46:	684d      	ldr	r5, [r1, #4]
Z_GENLIST_APPEND(slist, snode)
    1c48:	b94d      	cbnz	r5, 1c5e <boot_uart_fifo_callback+0x86>
	list->head = node;
    1c4a:	e9c1 3300 	strd	r3, r3, [r1]
			sys_slist_append(&lines_queue, &cmd->node);
			cur = 0;
    1c4e:	8010      	strh	r0, [r2, #0]
			cmd = NULL;
    1c50:	6020      	str	r0, [r4, #0]
    1c52:	e7ce      	b.n	1bf2 <boot_uart_fifo_callback+0x1a>
	return api->irq_rx_ready(dev);
    1c54:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
    1c56:	2800      	cmp	r0, #0
    1c58:	d1ca      	bne.n	1bf0 <boot_uart_fifo_callback+0x18>
		}
	}
}
    1c5a:	b003      	add	sp, #12
    1c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	parent->next = child;
    1c5e:	602b      	str	r3, [r5, #0]
	list->tail = node;
    1c60:	604b      	str	r3, [r1, #4]
}
    1c62:	e7f4      	b.n	1c4e <boot_uart_fifo_callback+0x76>
    1c64:	20001ac8 	.word	0x20001ac8
    1c68:	20001670 	.word	0x20001670
    1c6c:	20001680 	.word	0x20001680
    1c70:	20001bd8 	.word	0x20001bd8
    1c74:	20001678 	.word	0x20001678

00001c78 <console_out>:
{
    1c78:	b510      	push	{r4, lr}
	uart_poll_out(uart_dev, c);
    1c7a:	4b04      	ldr	r3, [pc, #16]	; (1c8c <console_out+0x14>)
{
    1c7c:	4604      	mov	r4, r0
	uart_poll_out(uart_dev, c);
    1c7e:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    1c80:	6883      	ldr	r3, [r0, #8]
    1c82:	b2e1      	uxtb	r1, r4
    1c84:	685b      	ldr	r3, [r3, #4]
    1c86:	4798      	blx	r3
}
    1c88:	4620      	mov	r0, r4
    1c8a:	bd10      	pop	{r4, pc}
    1c8c:	20001ac8 	.word	0x20001ac8

00001c90 <console_read>:
{
    1c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c92:	4605      	mov	r5, r0
    1c94:	4616      	mov	r6, r2
    1c96:	4608      	mov	r0, r1
	__asm__ volatile(
    1c98:	f04f 0320 	mov.w	r3, #32
    1c9c:	f3ef 8711 	mrs	r7, BASEPRI
    1ca0:	f383 8812 	msr	BASEPRI_MAX, r3
    1ca4:	f3bf 8f6f 	isb	sy
	sys_snode_t *node;
	int key;

	key = irq_lock();
	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    1ca8:	491b      	ldr	r1, [pc, #108]	; (1d18 <console_read+0x88>)
    1caa:	680b      	ldr	r3, [r1, #0]
    1cac:	b14b      	cbz	r3, 1cc2 <console_read+0x32>
	return list->tail;
    1cae:	4c1b      	ldr	r4, [pc, #108]	; (1d1c <console_read+0x8c>)
		if (sys_slist_peek_tail(&avail_queue) != &cmd->node) {
    1cb0:	6862      	ldr	r2, [r4, #4]
    1cb2:	429a      	cmp	r2, r3
    1cb4:	d005      	beq.n	1cc2 <console_read+0x32>
	parent->next = child;
    1cb6:	2200      	movs	r2, #0
    1cb8:	601a      	str	r2, [r3, #0]
	return list->tail;
    1cba:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    1cbc:	b962      	cbnz	r2, 1cd8 <console_read+0x48>
	list->head = node;
    1cbe:	e9c4 3300 	strd	r3, r3, [r4]
	return list->head;
    1cc2:	4a17      	ldr	r2, [pc, #92]	; (1d20 <console_read+0x90>)
    1cc4:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_GET(slist, snode)
    1cc6:	b953      	cbnz	r3, 1cde <console_read+0x4e>
	__asm__ volatile(
    1cc8:	f387 8811 	msr	BASEPRI, r7
    1ccc:	f3bf 8f6f 	isb	sy
		return 0;
    1cd0:	4618      	mov	r0, r3

	node = sys_slist_get(&lines_queue);
	irq_unlock(key);

	if (node == NULL) {
		cmd = NULL;
    1cd2:	600b      	str	r3, [r1, #0]
		*newline = 0;
    1cd4:	6033      	str	r3, [r6, #0]
}
    1cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    1cd8:	6013      	str	r3, [r2, #0]
	list->tail = node;
    1cda:	6063      	str	r3, [r4, #4]
}
    1cdc:	e7f1      	b.n	1cc2 <console_read+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1cde:	f8d2 c004 	ldr.w	ip, [r2, #4]
	return node->next;
    1ce2:	681c      	ldr	r4, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1ce4:	4563      	cmp	r3, ip
	list->head = node;
    1ce6:	6014      	str	r4, [r2, #0]
	list->tail = node;
    1ce8:	bf08      	it	eq
    1cea:	6054      	streq	r4, [r2, #4]
    1cec:	f387 8811 	msr	BASEPRI, r7
    1cf0:	f3bf 8f6f 	isb	sy
		return 0;
	}

	cmd = CONTAINER_OF(node, struct line_input, node);
	*line = cmd->line;
	return cmd->len;
    1cf4:	685c      	ldr	r4, [r3, #4]
	cmd = CONTAINER_OF(node, struct line_input, node);
    1cf6:	600b      	str	r3, [r1, #0]
	if (len > str_size - 1) {
    1cf8:	42a0      	cmp	r0, r4
		len = str_size - 1;
    1cfa:	bfd8      	it	le
    1cfc:	f100 34ff 	addle.w	r4, r0, #4294967295
	*line = cmd->line;
    1d00:	f103 0108 	add.w	r1, r3, #8
	memcpy(str, line, len);
    1d04:	4622      	mov	r2, r4
    1d06:	4628      	mov	r0, r5
    1d08:	f003 ffbb 	bl	5c82 <memcpy>
	str[len] = '\0';
    1d0c:	2300      	movs	r3, #0
	return len + 1;
    1d0e:	1c60      	adds	r0, r4, #1
	str[len] = '\0';
    1d10:	552b      	strb	r3, [r5, r4]
	return len + 1;
    1d12:	2301      	movs	r3, #1
    1d14:	e7de      	b.n	1cd4 <console_read+0x44>
    1d16:	bf00      	nop
    1d18:	20001674 	.word	0x20001674
    1d1c:	20001680 	.word	0x20001680
    1d20:	20001678 	.word	0x20001678

00001d24 <boot_console_init>:
	list->head = NULL;
    1d24:	2300      	movs	r3, #0
{
    1d26:	b513      	push	{r0, r1, r4, lr}
	parent->next = child;
    1d28:	461c      	mov	r4, r3
	list->head = NULL;
    1d2a:	4920      	ldr	r1, [pc, #128]	; (1dac <boot_console_init+0x88>)
    1d2c:	4a20      	ldr	r2, [pc, #128]	; (1db0 <boot_console_init+0x8c>)
	list->tail = NULL;
    1d2e:	e9c1 3300 	strd	r3, r3, [r1]
    1d32:	e9c2 3300 	strd	r3, r3, [r2]
	for (i = 0; i < ARRAY_SIZE(line_bufs); i++) {
    1d36:	4a1f      	ldr	r2, [pc, #124]	; (1db4 <boot_console_init+0x90>)
	return list->tail;
    1d38:	6848      	ldr	r0, [r1, #4]
	parent->next = child;
    1d3a:	6014      	str	r4, [r2, #0]
Z_GENLIST_APPEND(slist, snode)
    1d3c:	bb20      	cbnz	r0, 1d88 <boot_console_init+0x64>
	list->head = node;
    1d3e:	e9c1 2200 	strd	r2, r2, [r1]
    1d42:	3301      	adds	r3, #1
    1d44:	2b08      	cmp	r3, #8
    1d46:	f102 0288 	add.w	r2, r2, #136	; 0x88
    1d4a:	d1f5      	bne.n	1d38 <boot_console_init+0x14>
{

#if defined(CONFIG_BOOT_SERIAL_UART)

#if DT_HAS_CHOSEN(zephyr_uart_mcumgr)
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_uart_mcumgr));
    1d4c:	4c1a      	ldr	r4, [pc, #104]	; (1db8 <boot_console_init+0x94>)
    1d4e:	481b      	ldr	r0, [pc, #108]	; (1dbc <boot_console_init+0x98>)
    1d50:	6020      	str	r0, [r4, #0]
    1d52:	f006 fa64 	bl	821e <z_device_is_ready>
#else
#error No serial recovery device selected
#endif


	if (!device_is_ready(uart_dev)) {
    1d56:	b328      	cbz	r0, 1da4 <boot_console_init+0x80>
	if (rc) {
		return (-1);
	}
#endif

	uart_irq_callback_set(uart_dev, boot_uart_fifo_callback);
    1d58:	6820      	ldr	r0, [r4, #0]
static inline int uart_irq_callback_user_data_set(const struct device *dev,
						  uart_irq_callback_user_data_t cb,
						  void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    1d5a:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    1d5c:	b123      	cbz	r3, 1d68 <boot_console_init+0x44>
    1d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1d60:	b113      	cbz	r3, 1d68 <boot_console_init+0x44>
		api->irq_callback_set(dev, cb, user_data);
    1d62:	2200      	movs	r2, #0
    1d64:	4916      	ldr	r1, [pc, #88]	; (1dc0 <boot_console_init+0x9c>)
    1d66:	4798      	blx	r3

	/* Drain the fifo */
	if (uart_irq_rx_ready(uart_dev)) {
    1d68:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_ready == NULL) {
    1d6a:	6883      	ldr	r3, [r0, #8]
    1d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1d6e:	b10b      	cbz	r3, 1d74 <boot_console_init+0x50>
	return api->irq_rx_ready(dev);
    1d70:	4798      	blx	r3
    1d72:	b160      	cbz	r0, 1d8e <boot_console_init+0x6a>
		uint8_t c;

		while (uart_fifo_read(uart_dev, &c, 1)) {
    1d74:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read == NULL) {
    1d76:	6883      	ldr	r3, [r0, #8]
    1d78:	699b      	ldr	r3, [r3, #24]
    1d7a:	2b00      	cmp	r3, #0
    1d7c:	d0fa      	beq.n	1d74 <boot_console_init+0x50>
	return api->fifo_read(dev, rx_data, size);
    1d7e:	2201      	movs	r2, #1
    1d80:	f10d 0107 	add.w	r1, sp, #7
    1d84:	4798      	blx	r3
    1d86:	e7f4      	b.n	1d72 <boot_console_init+0x4e>
	parent->next = child;
    1d88:	6002      	str	r2, [r0, #0]
	list->tail = node;
    1d8a:	604a      	str	r2, [r1, #4]
}
    1d8c:	e7d9      	b.n	1d42 <boot_console_init+0x1e>
			;
		}
	}

	cur = 0;
    1d8e:	2200      	movs	r2, #0
    1d90:	4b0c      	ldr	r3, [pc, #48]	; (1dc4 <boot_console_init+0xa0>)

	uart_irq_rx_enable(uart_dev);
    1d92:	6820      	ldr	r0, [r4, #0]
	cur = 0;
    1d94:	801a      	strh	r2, [r3, #0]
	if (api->irq_rx_enable != NULL) {
    1d96:	6883      	ldr	r3, [r0, #8]
    1d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1d9a:	b103      	cbz	r3, 1d9e <boot_console_init+0x7a>
		api->irq_rx_enable(dev);
    1d9c:	4798      	blx	r3

	return 0;
    1d9e:	2000      	movs	r0, #0
}
    1da0:	b002      	add	sp, #8
    1da2:	bd10      	pop	{r4, pc}
		return (-1);
    1da4:	f04f 30ff 	mov.w	r0, #4294967295
	return boot_uart_fifo_init();
    1da8:	e7fa      	b.n	1da0 <boot_console_init+0x7c>
    1daa:	bf00      	nop
    1dac:	20001680 	.word	0x20001680
    1db0:	20001678 	.word	0x20001678
    1db4:	20001688 	.word	0x20001688
    1db8:	20001ac8 	.word	0x20001ac8
    1dbc:	00008314 	.word	0x00008314
    1dc0:	00001bd9 	.word	0x00001bd9
    1dc4:	20001bd8 	.word	0x20001bd8

00001dc8 <boot_serial_output>:
{
    char *data;
    int len, out;
    uint16_t crc;
    uint16_t totlen;
    char pkt_cont[2] = { SHELL_NLIP_DATA_START1, SHELL_NLIP_DATA_START2 };
    1dc8:	f241 4304 	movw	r3, #5124	; 0x1404
{
    1dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1dd0:	b0ed      	sub	sp, #436	; 0x1b4
    char pkt_cont[2] = { SHELL_NLIP_DATA_START1, SHELL_NLIP_DATA_START2 };
    1dd2:	f8ad 3008 	strh.w	r3, [sp, #8]
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    1dd6:	f640 1306 	movw	r3, #2310	; 0x906

    data = bs_obuf;
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;

    bs_hdr->nh_op++;
    bs_hdr->nh_flags = 0;
    1dda:	2500      	movs	r5, #0
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    1ddc:	f8ad 300c 	strh.w	r3, [sp, #12]
    bs_hdr->nh_op++;
    1de0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 1ee8 <boot_serial_output+0x120>
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    1de4:	4b41      	ldr	r3, [pc, #260]	; (1eec <boot_serial_output+0x124>)
    bs_hdr->nh_op++;
    1de6:	f8d9 1000 	ldr.w	r1, [r9]
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    1dea:	681b      	ldr	r3, [r3, #0]
    1dec:	4e40      	ldr	r6, [pc, #256]	; (1ef0 <boot_serial_output+0x128>)
    bs_hdr->nh_len = htons(len);
    bs_hdr->nh_group = htons(bs_hdr->nh_group);

#ifdef __ZEPHYR__
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    1dee:	2208      	movs	r2, #8
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    1df0:	eba3 0806 	sub.w	r8, r3, r6
    bs_hdr->nh_op++;
    1df4:	780b      	ldrb	r3, [r1, #0]
    bs_hdr->nh_flags = 0;
    1df6:	704d      	strb	r5, [r1, #1]
    bs_hdr->nh_op++;
    1df8:	3301      	adds	r3, #1
    1dfa:	700b      	strb	r3, [r1, #0]
    bs_hdr->nh_len = htons(len);
    1dfc:	fa98 f398 	rev16.w	r3, r8
    1e00:	804b      	strh	r3, [r1, #2]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    1e02:	888b      	ldrh	r3, [r1, #4]
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    1e04:	4628      	mov	r0, r5
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    1e06:	ba5b      	rev16	r3, r3
    1e08:	808b      	strh	r3, [r1, #4]
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    1e0a:	f003 fe45 	bl	5a98 <crc16_itu_t>
    crc =  crc16_itu_t(crc, data, len);
    1e0e:	4631      	mov	r1, r6
    1e10:	4642      	mov	r2, r8
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    1e12:	f8ad 0010 	strh.w	r0, [sp, #16]
    crc =  crc16_itu_t(crc, data, len);
    1e16:	f003 fe3f 	bl	5a98 <crc16_itu_t>

    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    totlen = htons(totlen);

    memcpy(buf, &totlen, sizeof(totlen));
    totlen = sizeof(totlen);
    1e1a:	2702      	movs	r7, #2
    1e1c:	fa1f f488 	uxth.w	r4, r8
    crc = htons(crc);
    1e20:	ba40      	rev16	r0, r0
    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    1e22:	f104 030a 	add.w	r3, r4, #10
    totlen = htons(totlen);
    1e26:	ba5b      	rev16	r3, r3
    memcpy(buf, &totlen, sizeof(totlen));
    1e28:	2202      	movs	r2, #2
    crc = htons(crc);
    1e2a:	f8ad 0010 	strh.w	r0, [sp, #16]
    memcpy(buf, &totlen, sizeof(totlen));
    1e2e:	f10d 0112 	add.w	r1, sp, #18
    1e32:	a806      	add	r0, sp, #24
    totlen = htons(totlen);
    1e34:	f8ad 3012 	strh.w	r3, [sp, #18]
    memcpy(buf, &totlen, sizeof(totlen));
    1e38:	f003 ff23 	bl	5c82 <memcpy>
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    1e3c:	2208      	movs	r2, #8
    1e3e:	f8d9 1000 	ldr.w	r1, [r9]
    1e42:	f10d 001a 	add.w	r0, sp, #26
    totlen = sizeof(totlen);
    1e46:	f8ad 7012 	strh.w	r7, [sp, #18]
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    1e4a:	f003 ff1a 	bl	5c82 <memcpy>
    totlen += sizeof(*bs_hdr);
    1e4e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    1e52:	ab06      	add	r3, sp, #24
    totlen += sizeof(*bs_hdr);
    1e54:	3008      	adds	r0, #8
    1e56:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], data, len);
    1e58:	4631      	mov	r1, r6
    1e5a:	4642      	mov	r2, r8
    totlen += sizeof(*bs_hdr);
    1e5c:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    1e60:	4418      	add	r0, r3
    1e62:	f003 ff0e 	bl	5c82 <memcpy>
    totlen += len;
    1e66:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    1e6a:	463a      	mov	r2, r7
    totlen += len;
    1e6c:	441c      	add	r4, r3
    1e6e:	b2a0      	uxth	r0, r4
    totlen = enc_len;
#else
    totlen = base64_encode(buf, totlen, encoded_buf, 1);
#endif

    out = 0;
    1e70:	462c      	mov	r4, r5
    memcpy(&buf[totlen], &crc, sizeof(crc));
    1e72:	ab06      	add	r3, sp, #24
    totlen += len;
    1e74:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    1e78:	a904      	add	r1, sp, #16
    1e7a:	4418      	add	r0, r3
    1e7c:	f003 ff01 	bl	5c82 <memcpy>
    totlen += sizeof(crc);
    1e80:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    1e84:	21e9      	movs	r1, #233	; 0xe9
    totlen += sizeof(crc);
    1e86:	443b      	add	r3, r7
    1e88:	b29b      	uxth	r3, r3
    1e8a:	f8ad 3012 	strh.w	r3, [sp, #18]
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    1e8e:	9300      	str	r3, [sp, #0]
    1e90:	aa05      	add	r2, sp, #20
    1e92:	ab06      	add	r3, sp, #24
    1e94:	a831      	add	r0, sp, #196	; 0xc4
    1e96:	f7ff f9a5 	bl	11e4 <base64_encode>
    totlen = enc_len;
    1e9a:	9b05      	ldr	r3, [sp, #20]
    while (out < totlen) {
        if (out == 0) {
            boot_uf->write(pkt_start, sizeof(pkt_start));
    1e9c:	4e15      	ldr	r6, [pc, #84]	; (1ef4 <boot_serial_output+0x12c>)
        len = MIN(BOOT_SERIAL_FRAME_MTU, totlen - out);
        boot_uf->write(&encoded_buf[out], len);

        out += len;

        boot_uf->write("\n", 1);
    1e9e:	4f16      	ldr	r7, [pc, #88]	; (1ef8 <boot_serial_output+0x130>)
    totlen = enc_len;
    1ea0:	f8ad 3012 	strh.w	r3, [sp, #18]
    while (out < totlen) {
    1ea4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    1ea8:	42a3      	cmp	r3, r4
    1eaa:	dc02      	bgt.n	1eb2 <boot_serial_output+0xea>
    }

    BOOT_LOG_INF("TX");
}
    1eac:	b06d      	add	sp, #436	; 0x1b4
    1eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            boot_uf->write(pkt_start, sizeof(pkt_start));
    1eb2:	6833      	ldr	r3, [r6, #0]
    1eb4:	2102      	movs	r1, #2
    1eb6:	685b      	ldr	r3, [r3, #4]
        if (out == 0) {
    1eb8:	b9a4      	cbnz	r4, 1ee4 <boot_serial_output+0x11c>
            boot_uf->write(pkt_start, sizeof(pkt_start));
    1eba:	a803      	add	r0, sp, #12
            boot_uf->write(pkt_cont, sizeof(pkt_cont));
    1ebc:	4798      	blx	r3
        len = MIN(BOOT_SERIAL_FRAME_MTU, totlen - out);
    1ebe:	f8bd 5012 	ldrh.w	r5, [sp, #18]
        boot_uf->write(&encoded_buf[out], len);
    1ec2:	6833      	ldr	r3, [r6, #0]
        len = MIN(BOOT_SERIAL_FRAME_MTU, totlen - out);
    1ec4:	1b2d      	subs	r5, r5, r4
    1ec6:	2d7c      	cmp	r5, #124	; 0x7c
    1ec8:	bfa8      	it	ge
    1eca:	257c      	movge	r5, #124	; 0x7c
        boot_uf->write(&encoded_buf[out], len);
    1ecc:	aa31      	add	r2, sp, #196	; 0xc4
    1ece:	1910      	adds	r0, r2, r4
    1ed0:	4629      	mov	r1, r5
    1ed2:	685b      	ldr	r3, [r3, #4]
    1ed4:	4798      	blx	r3
        boot_uf->write("\n", 1);
    1ed6:	6833      	ldr	r3, [r6, #0]
    1ed8:	2101      	movs	r1, #1
    1eda:	4638      	mov	r0, r7
    1edc:	685b      	ldr	r3, [r3, #4]
        out += len;
    1ede:	442c      	add	r4, r5
        boot_uf->write("\n", 1);
    1ee0:	4798      	blx	r3
    1ee2:	e7df      	b.n	1ea4 <boot_serial_output+0xdc>
            boot_uf->write(pkt_cont, sizeof(pkt_cont));
    1ee4:	a802      	add	r0, sp, #8
    1ee6:	e7e9      	b.n	1ebc <boot_serial_output+0xf4>
    1ee8:	20001b10 	.word	0x20001b10
    1eec:	20001ae0 	.word	0x20001ae0
    1ef0:	200034da 	.word	0x200034da
    1ef4:	20001b14 	.word	0x20001b14
    1ef8:	00008d43 	.word	0x00008d43

00001efc <boot_serial_in_dec.constprop.0>:

/*
 * Returns 1 if full packet has been received.
 */
static int
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    1efc:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t crc;
    uint16_t len;

#ifdef __ZEPHYR__
    int err;
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    1efe:	680c      	ldr	r4, [r1, #0]
    1f00:	4f16      	ldr	r7, [pc, #88]	; (1f5c <boot_serial_in_dec.constprop.0+0x60>)
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    1f02:	b085      	sub	sp, #20
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    1f04:	3802      	subs	r0, #2
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    1f06:	460d      	mov	r5, r1
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    1f08:	f5c4 6180 	rsb	r1, r4, #1024	; 0x400
    1f0c:	9000      	str	r0, [sp, #0]
    1f0e:	4b14      	ldr	r3, [pc, #80]	; (1f60 <boot_serial_in_dec.constprop.0+0x64>)
    1f10:	1938      	adds	r0, r7, r4
    1f12:	aa03      	add	r2, sp, #12
    1f14:	3101      	adds	r1, #1
    1f16:	f7ff f9e3 	bl	12e0 <base64_decode>
    if (err) {
    1f1a:	4604      	mov	r4, r0
    1f1c:	b9d0      	cbnz	r0, 1f54 <boot_serial_in_dec.constprop.0+0x58>
    if (rc < 0) {
        return -1;
    }
#endif

    *out_off += rc;
    1f1e:	682b      	ldr	r3, [r5, #0]
    1f20:	9a03      	ldr	r2, [sp, #12]
    1f22:	4413      	add	r3, r2
    if (*out_off <= sizeof(uint16_t)) {
    1f24:	2b02      	cmp	r3, #2
    *out_off += rc;
    1f26:	602b      	str	r3, [r5, #0]
    if (*out_off <= sizeof(uint16_t)) {
    1f28:	d911      	bls.n	1f4e <boot_serial_in_dec.constprop.0+0x52>
        return 0;
    }

    len = ntohs(*(uint16_t *)out);
    1f2a:	883e      	ldrh	r6, [r7, #0]
    if (len != *out_off - sizeof(uint16_t)) {
    1f2c:	3b02      	subs	r3, #2
    1f2e:	ba76      	rev16	r6, r6
    1f30:	b2b6      	uxth	r6, r6
    1f32:	429e      	cmp	r6, r3
    1f34:	d10b      	bne.n	1f4e <boot_serial_in_dec.constprop.0+0x52>
        len = *out_off - sizeof(uint16_t);
    }

    out += sizeof(uint16_t);
#ifdef __ZEPHYR__
    crc = crc16_itu_t(CRC16_INITIAL_CRC, out, len);
    1f36:	4632      	mov	r2, r6
    1f38:	1cb9      	adds	r1, r7, #2
    1f3a:	f003 fdad 	bl	5a98 <crc16_itu_t>
#elif __ESPRESSIF__
    crc = ~esp_crc16_be(~CRC16_INITIAL_CRC, (uint8_t *)out, len);
#else
    crc = crc16_ccitt(CRC16_INITIAL_CRC, out, len);
#endif
    if (crc || len <= sizeof(crc)) {
    1f3e:	b930      	cbnz	r0, 1f4e <boot_serial_in_dec.constprop.0+0x52>
    1f40:	2e02      	cmp	r6, #2
    1f42:	d904      	bls.n	1f4e <boot_serial_in_dec.constprop.0+0x52>
        return 0;
    }
    *out_off -= sizeof(crc);
    1f44:	682b      	ldr	r3, [r5, #0]
    1f46:	1e9a      	subs	r2, r3, #2
    1f48:	602a      	str	r2, [r5, #0]
    out[*out_off] = '\0';
    1f4a:	54fc      	strb	r4, [r7, r3]

    return 1;
    1f4c:	2401      	movs	r4, #1
}
    1f4e:	4620      	mov	r0, r4
    1f50:	b005      	add	sp, #20
    1f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
    1f54:	f04f 34ff 	mov.w	r4, #4294967295
    1f58:	e7f9      	b.n	1f4e <boot_serial_in_dec.constprop.0+0x52>
    1f5a:	bf00      	nop
    1f5c:	2000357b 	.word	0x2000357b
    1f60:	2000397e 	.word	0x2000397e

00001f64 <zcbor_tstr_encode_ptr.constprop.0.isra.0>:
 */
static inline bool zcbor_bstr_encode_ptr(zcbor_state_t *state, uint8_t *ptr, size_t len)
{
	return zcbor_bstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
}
static inline bool zcbor_tstr_encode_ptr(zcbor_state_t *state, uint8_t *ptr, size_t len)
    1f64:	b507      	push	{r0, r1, r2, lr}
{
	return zcbor_tstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
    1f66:	e9cd 0100 	strd	r0, r1, [sp]
    1f6a:	4669      	mov	r1, sp
    1f6c:	4802      	ldr	r0, [pc, #8]	; (1f78 <zcbor_tstr_encode_ptr.constprop.0.isra.0+0x14>)
    1f6e:	f006 f942 	bl	81f6 <zcbor_tstr_encode>
}
    1f72:	b003      	add	sp, #12
    1f74:	f85d fb04 	ldr.w	pc, [sp], #4
    1f78:	20001ae0 	.word	0x20001ae0

00001f7c <bs_rc_rsp>:
{
    1f7c:	b538      	push	{r3, r4, r5, lr}
    1f7e:	4605      	mov	r5, r0
    zcbor_map_start_encode(cbor_state, 10);
    1f80:	4c0a      	ldr	r4, [pc, #40]	; (1fac <bs_rc_rsp+0x30>)
    1f82:	210a      	movs	r1, #10
    1f84:	4620      	mov	r0, r4
    1f86:	f006 f93d 	bl	8204 <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "rc");
    1f8a:	2102      	movs	r1, #2
    1f8c:	4808      	ldr	r0, [pc, #32]	; (1fb0 <bs_rc_rsp+0x34>)
    1f8e:	f7ff ffe9 	bl	1f64 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_int32_put(cbor_state, rc_code);
    1f92:	4629      	mov	r1, r5
    1f94:	4620      	mov	r0, r4
    1f96:	f006 f915 	bl	81c4 <zcbor_int32_put>
    zcbor_map_end_encode(cbor_state, 10);
    1f9a:	4620      	mov	r0, r4
    1f9c:	210a      	movs	r1, #10
    1f9e:	f006 f939 	bl	8214 <zcbor_map_end_encode>
}
    1fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    boot_serial_output();
    1fa6:	f7ff bf0f 	b.w	1dc8 <boot_serial_output>
    1faa:	bf00      	nop
    1fac:	20001ae0 	.word	0x20001ae0
    1fb0:	00008c0d 	.word	0x00008c0d

00001fb4 <reset_cbor_state>:
    zcbor_new_encode_state(cbor_state, 2, (uint8_t *)bs_obuf,
    1fb4:	2300      	movs	r3, #0
{
    1fb6:	b507      	push	{r0, r1, r2, lr}
    zcbor_new_encode_state(cbor_state, 2, (uint8_t *)bs_obuf,
    1fb8:	4a05      	ldr	r2, [pc, #20]	; (1fd0 <reset_cbor_state+0x1c>)
    1fba:	9300      	str	r3, [sp, #0]
    1fbc:	2102      	movs	r1, #2
    1fbe:	f102 03a0 	add.w	r3, r2, #160	; 0xa0
    1fc2:	4804      	ldr	r0, [pc, #16]	; (1fd4 <reset_cbor_state+0x20>)
    1fc4:	f006 f928 	bl	8218 <zcbor_new_encode_state>
}
    1fc8:	b003      	add	sp, #12
    1fca:	f85d fb04 	ldr.w	pc, [sp], #4
    1fce:	bf00      	nop
    1fd0:	200034da 	.word	0x200034da
    1fd4:	20001ae0 	.word	0x20001ae0

00001fd8 <boot_serial_input>:
{
    1fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len < sizeof(*hdr) ||
    1fdc:	2907      	cmp	r1, #7
{
    1fde:	4604      	mov	r4, r0
    1fe0:	b0b8      	sub	sp, #224	; 0xe0
    if (len < sizeof(*hdr) ||
    1fe2:	f240 80bf 	bls.w	2164 <FIH_LABEL_FIH_CALL_END_805+0xc2>
    1fe6:	7803      	ldrb	r3, [r0, #0]
    1fe8:	f013 06fd 	ands.w	r6, r3, #253	; 0xfd
    1fec:	f040 80ba 	bne.w	2164 <FIH_LABEL_FIH_CALL_END_805+0xc2>
      (ntohs(hdr->nh_len) < len - sizeof(*hdr))) {
    1ff0:	8843      	ldrh	r3, [r0, #2]
    1ff2:	f1a1 0508 	sub.w	r5, r1, #8
    1ff6:	ba5b      	rev16	r3, r3
    1ff8:	b29b      	uxth	r3, r3
      (hdr->nh_op != NMGR_OP_READ && hdr->nh_op != NMGR_OP_WRITE) ||
    1ffa:	42ab      	cmp	r3, r5
    1ffc:	f0c0 80b2 	bcc.w	2164 <FIH_LABEL_FIH_CALL_END_805+0xc2>
    bs_hdr = hdr;
    2000:	4b7e      	ldr	r3, [pc, #504]	; (21fc <FIH_LABEL_FIH_CALL_END_805+0x15a>)
    2002:	6018      	str	r0, [r3, #0]
    hdr->nh_group = ntohs(hdr->nh_group);
    2004:	8883      	ldrh	r3, [r0, #4]
    2006:	ba5b      	rev16	r3, r3
    2008:	8083      	strh	r3, [r0, #4]
    reset_cbor_state();
    200a:	f7ff ffd3 	bl	1fb4 <reset_cbor_state>
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    200e:	88a0      	ldrh	r0, [r4, #4]
    2010:	2801      	cmp	r0, #1
    2012:	f040 81ef 	bne.w	23f4 <FIH_LABEL_FIH_CALL_END_805+0x352>
        switch (hdr->nh_id) {
    2016:	79e7      	ldrb	r7, [r4, #7]
    2018:	b147      	cbz	r7, 202c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c>
    201a:	2f01      	cmp	r7, #1
    201c:	f000 80c2 	beq.w	21a4 <FIH_LABEL_FIH_CALL_END_805+0x102>
        bs_rc_rsp(MGMT_ERR_ENOTSUP);
    2020:	2008      	movs	r0, #8
}
    2022:	b038      	add	sp, #224	; 0xe0
    2024:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        bs_rc_rsp(MGMT_ERR_ENOTSUP);
    2028:	f7ff bfa8 	b.w	1f7c <bs_rc_rsp>
    zcbor_map_start_encode(cbor_state, 1);
    202c:	4601      	mov	r1, r0
    202e:	4874      	ldr	r0, [pc, #464]	; (2200 <FIH_LABEL_FIH_CALL_END_805+0x15e>)
    2030:	f006 f8e8 	bl	8204 <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "images");
    2034:	2106      	movs	r1, #6
    2036:	4873      	ldr	r0, [pc, #460]	; (2204 <FIH_LABEL_FIH_CALL_END_805+0x162>)
    2038:	f7ff ff94 	bl	1f64 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_list_start_encode(cbor_state, 5);
    203c:	2105      	movs	r1, #5
    203e:	4870      	ldr	r0, [pc, #448]	; (2200 <FIH_LABEL_FIH_CALL_END_805+0x15e>)
    2040:	f006 f8dc 	bl	81fc <zcbor_list_start_encode>
        for (slot = 0; slot < 2; slot++) {
    2044:	463d      	mov	r5, r7
            if (hdr.ih_magic == IMAGE_MAGIC)
    2046:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 2208 <FIH_LABEL_FIH_CALL_END_805+0x166>
            FIH_DECLARE(fih_rc, FIH_FAILURE);
    204a:	4f70      	ldr	r7, [pc, #448]	; (220c <FIH_LABEL_FIH_CALL_END_805+0x16a>)
            if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
    204c:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 2210 <FIH_LABEL_FIH_CALL_END_805+0x16e>
            area_id = flash_area_id_from_multi_image_slot(image_index, slot);
    2050:	4629      	mov	r1, r5
    2052:	2000      	movs	r0, #0
    2054:	f003 f8e2 	bl	521c <flash_area_id_from_multi_image_slot>
            if (flash_area_open(area_id, &fap)) {
    2058:	a908      	add	r1, sp, #32
    205a:	b2c0      	uxtb	r0, r0
    205c:	f7ff fd5e 	bl	1b1c <flash_area_open>
    2060:	4604      	mov	r4, r0
    2062:	2800      	cmp	r0, #0
    2064:	d173      	bne.n	214e <FIH_LABEL_FIH_CALL_END_805+0xac>
                flash_area_read(fap, 0, &hdr, sizeof(hdr));
    2066:	2320      	movs	r3, #32
    2068:	4601      	mov	r1, r0
    206a:	aa10      	add	r2, sp, #64	; 0x40
    206c:	9808      	ldr	r0, [sp, #32]
    206e:	f003 fd29 	bl	5ac4 <flash_area_read>
            if (hdr.ih_magic == IMAGE_MAGIC)
    2072:	9b10      	ldr	r3, [sp, #64]	; 0x40
            FIH_DECLARE(fih_rc, FIH_FAILURE);
    2074:	683e      	ldr	r6, [r7, #0]
            if (hdr.ih_magic == IMAGE_MAGIC)
    2076:	4543      	cmp	r3, r8
    2078:	d113      	bne.n	20a2 <FIH_LABEL_FIH_CALL_END_805>

0000207a <FIH_LABEL_FIH_CALL_START_775>:
                    FIH_CALL(bootutil_img_validate, fih_rc, NULL, 0, &hdr, fap, tmpbuf, sizeof(tmpbuf),
    207a:	f7fe fc79 	bl	970 <fih_cfi_get_and_increment>
    207e:	2340      	movs	r3, #64	; 0x40
    2080:	9301      	str	r3, [sp, #4]
    2082:	ab28      	add	r3, sp, #160	; 0xa0
    2084:	4682      	mov	sl, r0
    2086:	4621      	mov	r1, r4
    2088:	9300      	str	r3, [sp, #0]
    208a:	aa10      	add	r2, sp, #64	; 0x40
    208c:	9b08      	ldr	r3, [sp, #32]
    208e:	4620      	mov	r0, r4
    2090:	e9cd 4403 	strd	r4, r4, [sp, #12]
    2094:	9402      	str	r4, [sp, #8]
    2096:	f7fe fa41 	bl	51c <bootutil_img_validate>
    209a:	4606      	mov	r6, r0
    209c:	4650      	mov	r0, sl
    209e:	f7fe fc77 	bl	990 <fih_cfi_validate>

000020a2 <FIH_LABEL_FIH_CALL_END_805>:
    int rc;

    /* Manifest data is concatenated to the end of the image.
     * It is encoded in TLV format.
     */
    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    20a2:	2300      	movs	r3, #0
            rc = boot_serial_get_hash(&hdr, fap, hash);
    20a4:	9c08      	ldr	r4, [sp, #32]
    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    20a6:	9300      	str	r3, [sp, #0]
    20a8:	4622      	mov	r2, r4
    20aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    20ae:	a910      	add	r1, sp, #64	; 0x40
    20b0:	a80a      	add	r0, sp, #40	; 0x28
    20b2:	f003 f8d7 	bl	5264 <bootutil_tlv_iter_begin>
    if (rc) {
    20b6:	2800      	cmp	r0, #0
    20b8:	d059      	beq.n	216e <FIH_LABEL_FIH_CALL_END_805+0xcc>
        return -1;
    20ba:	f04f 34ff 	mov.w	r4, #4294967295
            flash_area_close(fap);
    20be:	9808      	ldr	r0, [sp, #32]
    20c0:	f003 fcff 	bl	5ac2 <flash_area_close>
            if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
    20c4:	f8d9 3000 	ldr.w	r3, [r9]
    20c8:	42b3      	cmp	r3, r6
    20ca:	d140      	bne.n	214e <FIH_LABEL_FIH_CALL_END_805+0xac>
            zcbor_map_start_encode(cbor_state, 20);
    20cc:	2114      	movs	r1, #20
    20ce:	484c      	ldr	r0, [pc, #304]	; (2200 <FIH_LABEL_FIH_CALL_END_805+0x15e>)
    20d0:	f006 f898 	bl	8204 <zcbor_map_start_encode>
            zcbor_tstr_put_lit_cast(cbor_state, "slot");
    20d4:	2104      	movs	r1, #4
    20d6:	484f      	ldr	r0, [pc, #316]	; (2214 <FIH_LABEL_FIH_CALL_END_805+0x172>)
    20d8:	f7ff ff44 	bl	1f64 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_uint32_put(cbor_state, slot);
    20dc:	4629      	mov	r1, r5
    20de:	4848      	ldr	r0, [pc, #288]	; (2200 <FIH_LABEL_FIH_CALL_END_805+0x15e>)
    20e0:	f006 f87a 	bl	81d8 <zcbor_uint32_put>
            if (rc == 0) {
    20e4:	b95c      	cbnz	r4, 20fe <FIH_LABEL_FIH_CALL_END_805+0x5c>
                zcbor_tstr_put_lit_cast(cbor_state, "hash");
    20e6:	2104      	movs	r1, #4
    20e8:	484b      	ldr	r0, [pc, #300]	; (2218 <FIH_LABEL_FIH_CALL_END_805+0x176>)
    20ea:	f7ff ff3b 	bl	1f64 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
	return zcbor_bstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
    20ee:	ab18      	add	r3, sp, #96	; 0x60
    20f0:	930a      	str	r3, [sp, #40]	; 0x28
    20f2:	2320      	movs	r3, #32
    20f4:	4842      	ldr	r0, [pc, #264]	; (2200 <FIH_LABEL_FIH_CALL_END_805+0x15e>)
    20f6:	a90a      	add	r1, sp, #40	; 0x28
    20f8:	930b      	str	r3, [sp, #44]	; 0x2c
    20fa:	f006 f879 	bl	81f0 <zcbor_bstr_encode>
            zcbor_tstr_put_lit_cast(cbor_state, "version");
    20fe:	2107      	movs	r1, #7
    2100:	4846      	ldr	r0, [pc, #280]	; (221c <FIH_LABEL_FIH_CALL_END_805+0x17a>)
    2102:	f7ff ff2f 	bl	1f64 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
   len = snprintf(dst, maxlen, "%hu.%hu.%hu", (uint16_t)ver->iv_major,
    2106:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
    210a:	2140      	movs	r1, #64	; 0x40
    210c:	9301      	str	r3, [sp, #4]
    210e:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
    2112:	4a43      	ldr	r2, [pc, #268]	; (2220 <FIH_LABEL_FIH_CALL_END_805+0x17e>)
    2114:	9300      	str	r3, [sp, #0]
    2116:	a828      	add	r0, sp, #160	; 0xa0
    2118:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
    211c:	f000 fd3a 	bl	2b94 <snprintf>
   if (ver->iv_build_num != 0 && len > 0 && len < maxlen) {
    2120:	9b16      	ldr	r3, [sp, #88]	; 0x58
    2122:	b14b      	cbz	r3, 2138 <FIH_LABEL_FIH_CALL_END_805+0x96>
    2124:	1e42      	subs	r2, r0, #1
    2126:	2a3e      	cmp	r2, #62	; 0x3e
    2128:	d806      	bhi.n	2138 <FIH_LABEL_FIH_CALL_END_805+0x96>
      snprintf(&dst[len], (maxlen - len), "%u", ver->iv_build_num);
    212a:	ac28      	add	r4, sp, #160	; 0xa0
    212c:	f1c0 0140 	rsb	r1, r0, #64	; 0x40
    2130:	4a3c      	ldr	r2, [pc, #240]	; (2224 <FIH_LABEL_FIH_CALL_END_805+0x182>)
    2132:	4420      	add	r0, r4
    2134:	f000 fd2e 	bl	2b94 <snprintf>
            zcbor_tstr_encode_ptr(cbor_state, tmpbuf, strlen((char *)tmpbuf));
    2138:	a828      	add	r0, sp, #160	; 0xa0
    213a:	f003 fd74 	bl	5c26 <strlen>
    213e:	4601      	mov	r1, r0
    2140:	a828      	add	r0, sp, #160	; 0xa0
    2142:	f7ff ff0f 	bl	1f64 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_map_end_encode(cbor_state, 20);
    2146:	2114      	movs	r1, #20
    2148:	482d      	ldr	r0, [pc, #180]	; (2200 <FIH_LABEL_FIH_CALL_END_805+0x15e>)
    214a:	f006 f863 	bl	8214 <zcbor_map_end_encode>
        for (slot = 0; slot < 2; slot++) {
    214e:	b165      	cbz	r5, 216a <FIH_LABEL_FIH_CALL_END_805+0xc8>
    zcbor_list_end_encode(cbor_state, 5);
    2150:	2105      	movs	r1, #5
    2152:	482b      	ldr	r0, [pc, #172]	; (2200 <FIH_LABEL_FIH_CALL_END_805+0x15e>)
    2154:	f006 f85a 	bl	820c <zcbor_list_end_encode>
    zcbor_map_end_encode(cbor_state, 1);
    2158:	2101      	movs	r1, #1
    215a:	4829      	ldr	r0, [pc, #164]	; (2200 <FIH_LABEL_FIH_CALL_END_805+0x15e>)
    215c:	f006 f85a 	bl	8214 <zcbor_map_end_encode>
    boot_serial_output();
    2160:	f7ff fe32 	bl	1dc8 <boot_serial_output>
}
    2164:	b038      	add	sp, #224	; 0xe0
    2166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        for (slot = 0; slot < 2; slot++) {
    216a:	2501      	movs	r5, #1
    216c:	e770      	b.n	2050 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x50>
    }

    /* Traverse through the TLV area to find the image hash TLV. */
    while (true) {
        rc = bootutil_tlv_iter_next(&it, &offset, &len, &type);
    216e:	f10d 031e 	add.w	r3, sp, #30
    2172:	aa07      	add	r2, sp, #28
    2174:	a909      	add	r1, sp, #36	; 0x24
    2176:	a80a      	add	r0, sp, #40	; 0x28
    2178:	f003 f8c2 	bl	5300 <bootutil_tlv_iter_next>
        if (rc < 0) {
            return -1;
        } else if (rc > 0) {
    217c:	2800      	cmp	r0, #0
    217e:	d19c      	bne.n	20ba <FIH_LABEL_FIH_CALL_END_805+0x18>
            break;
        }

        if (type == IMAGE_TLV_SHA256) {
    2180:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    2184:	2b10      	cmp	r3, #16
    2186:	d1f2      	bne.n	216e <FIH_LABEL_FIH_CALL_END_805+0xcc>
            /* Get the image's hash value from the manifest section. */
            if (len != 32) {
    2188:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    218c:	2b20      	cmp	r3, #32
    218e:	d194      	bne.n	20ba <FIH_LABEL_FIH_CALL_END_805+0x18>
                return -1;
            }

            rc = flash_area_read(fap, offset, hash, len);
    2190:	4620      	mov	r0, r4
    2192:	9909      	ldr	r1, [sp, #36]	; 0x24
    2194:	aa18      	add	r2, sp, #96	; 0x60
    2196:	f003 fc95 	bl	5ac4 <flash_area_read>
            if (rc) {
    219a:	1e04      	subs	r4, r0, #0
    219c:	bf18      	it	ne
    219e:	2401      	movne	r4, #1
    21a0:	4264      	negs	r4, r4
    21a2:	e78c      	b.n	20be <FIH_LABEL_FIH_CALL_END_805+0x1c>
    uint_fast8_t result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    21a4:	4629      	mov	r1, r5
    21a6:	ab10      	add	r3, sp, #64	; 0x40
    21a8:	aa18      	add	r2, sp, #96	; 0x60
    21aa:	f104 0008 	add.w	r0, r4, #8
    const struct flash_area *fap = NULL;
    21ae:	960a      	str	r6, [sp, #40]	; 0x28
    uint_fast8_t result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    21b0:	f000 fa1e 	bl	25f0 <cbor_decode_Upload>
    if ((result != ZCBOR_SUCCESS) || (len != decoded_len)) {
    21b4:	2800      	cmp	r0, #0
    21b6:	d03d      	beq.n	2234 <FIH_LABEL_FIH_CALL_END_805+0x192>
        rc = MGMT_ERR_EINVAL;
    21b8:	2403      	movs	r4, #3
    zcbor_map_start_encode(cbor_state, 10);
    21ba:	210a      	movs	r1, #10
    21bc:	4810      	ldr	r0, [pc, #64]	; (2200 <FIH_LABEL_FIH_CALL_END_805+0x15e>)
    21be:	f006 f821 	bl	8204 <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "rc");
    21c2:	2102      	movs	r1, #2
    21c4:	4818      	ldr	r0, [pc, #96]	; (2228 <FIH_LABEL_FIH_CALL_END_805+0x186>)
    21c6:	f7ff fecd 	bl	1f64 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_int32_put(cbor_state, rc);
    21ca:	4621      	mov	r1, r4
    21cc:	480c      	ldr	r0, [pc, #48]	; (2200 <FIH_LABEL_FIH_CALL_END_805+0x15e>)
    21ce:	f005 fff9 	bl	81c4 <zcbor_int32_put>
    if (rc == 0) {
    21d2:	b944      	cbnz	r4, 21e6 <FIH_LABEL_FIH_CALL_END_805+0x144>
        zcbor_tstr_put_lit_cast(cbor_state, "off");
    21d4:	2103      	movs	r1, #3
    21d6:	4815      	ldr	r0, [pc, #84]	; (222c <FIH_LABEL_FIH_CALL_END_805+0x18a>)
    21d8:	f7ff fec4 	bl	1f64 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
        zcbor_uint32_put(cbor_state, curr_off);
    21dc:	4b14      	ldr	r3, [pc, #80]	; (2230 <FIH_LABEL_FIH_CALL_END_805+0x18e>)
    21de:	4808      	ldr	r0, [pc, #32]	; (2200 <FIH_LABEL_FIH_CALL_END_805+0x15e>)
    21e0:	6819      	ldr	r1, [r3, #0]
    21e2:	f005 fff9 	bl	81d8 <zcbor_uint32_put>
    zcbor_map_end_encode(cbor_state, 10);
    21e6:	210a      	movs	r1, #10
    21e8:	4805      	ldr	r0, [pc, #20]	; (2200 <FIH_LABEL_FIH_CALL_END_805+0x15e>)
    21ea:	f006 f813 	bl	8214 <zcbor_map_end_encode>
    boot_serial_output();
    21ee:	f7ff fdeb 	bl	1dc8 <boot_serial_output>
    flash_area_close(fap);
    21f2:	980a      	ldr	r0, [sp, #40]	; 0x28
    21f4:	f003 fc65 	bl	5ac2 <flash_area_close>
}
    21f8:	e7b4      	b.n	2164 <FIH_LABEL_FIH_CALL_END_805+0xc2>
    21fa:	bf00      	nop
    21fc:	20001b10 	.word	0x20001b10
    2200:	20001ae0 	.word	0x20001ae0
    2204:	00008c10 	.word	0x00008c10
    2208:	96f3b83d 	.word	0x96f3b83d
    220c:	20000004 	.word	0x20000004
    2210:	20000008 	.word	0x20000008
    2214:	00008c17 	.word	0x00008c17
    2218:	00008c1c 	.word	0x00008c1c
    221c:	00008c21 	.word	0x00008c21
    2220:	00008c29 	.word	0x00008c29
    2224:	00008c35 	.word	0x00008c35
    2228:	00008c0d 	.word	0x00008c0d
    222c:	00008c38 	.word	0x00008c38
    2230:	20001adc 	.word	0x20001adc
    if ((result != ZCBOR_SUCCESS) || (len != decoded_len)) {
    2234:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2236:	429d      	cmp	r5, r3
    2238:	d1be      	bne.n	21b8 <FIH_LABEL_FIH_CALL_END_805+0x116>
    size_t img_size_tmp = SIZE_MAX;     /* Temp variable for image size */
    223a:	f04f 35ff 	mov.w	r5, #4294967295
    for (int i = 0; i < upload._Upload_members_count; i++) {
    223e:	4602      	mov	r2, r0
    size_t img_chunk_off = SIZE_MAX;    /* Offset of image chunk within image  */
    2240:	462c      	mov	r4, r5
    size_t img_chunk_len = 0;           /* Length of received image chunk */
    2242:	4680      	mov	r8, r0
    const uint8_t *img_chunk = NULL;    /* Pointer to buffer with received image chunk */
    2244:	4607      	mov	r7, r0
    2246:	9e27      	ldr	r6, [sp, #156]	; 0x9c
    2248:	ab18      	add	r3, sp, #96	; 0x60
    for (int i = 0; i < upload._Upload_members_count; i++) {
    224a:	42b2      	cmp	r2, r6
    224c:	d15a      	bne.n	2304 <FIH_LABEL_FIH_CALL_END_805+0x262>
    if (img_chunk_off == SIZE_MAX || img_chunk == NULL) {
    224e:	1c63      	adds	r3, r4, #1
    2250:	d0b2      	beq.n	21b8 <FIH_LABEL_FIH_CALL_END_805+0x116>
    2252:	2f00      	cmp	r7, #0
    2254:	d0b0      	beq.n	21b8 <FIH_LABEL_FIH_CALL_END_805+0x116>
    rc = flash_area_open(flash_area_id_from_multi_image_slot(img_num, 0), &fap);
    2256:	2100      	movs	r1, #0
    2258:	f002 ffe0 	bl	521c <flash_area_id_from_multi_image_slot>
    225c:	a90a      	add	r1, sp, #40	; 0x28
    225e:	b2c0      	uxtb	r0, r0
    2260:	f7ff fc5c 	bl	1b1c <flash_area_open>
    if (rc) {
    2264:	2800      	cmp	r0, #0
    2266:	d1a7      	bne.n	21b8 <FIH_LABEL_FIH_CALL_END_805+0x116>
    if (img_chunk_off == 0) {
    2268:	4e6d      	ldr	r6, [pc, #436]	; (2420 <FIH_LABEL_FIH_CALL_END_805+0x37e>)
    226a:	2c00      	cmp	r4, #0
    226c:	d15c      	bne.n	2328 <FIH_LABEL_FIH_CALL_END_805+0x286>
        const size_t area_size = flash_area_get_size(fap);
    226e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
        curr_off = 0;
    2272:	6034      	str	r4, [r6, #0]
        if (flash_area_get_sector(fap, boot_status_off(fap), &status_sector)) {
    2274:	4648      	mov	r0, r9
	return (uint32_t)fa->fa_size;
    2276:	f8d9 a008 	ldr.w	sl, [r9, #8]
    227a:	f003 f89f 	bl	53bc <boot_status_off>
    227e:	4a69      	ldr	r2, [pc, #420]	; (2424 <FIH_LABEL_FIH_CALL_END_805+0x382>)
    2280:	4601      	mov	r1, r0
    2282:	4648      	mov	r0, r9
    2284:	f002 ffd5 	bl	5232 <flash_area_get_sector>
    2288:	2800      	cmp	r0, #0
    228a:	f040 80b1 	bne.w	23f0 <FIH_LABEL_FIH_CALL_END_805+0x34e>
        if (img_size_tmp > area_size) {
    228e:	45aa      	cmp	sl, r5
    2290:	d392      	bcc.n	21b8 <FIH_LABEL_FIH_CALL_END_805+0x116>
        not_yet_erased = 0;
    2292:	4b65      	ldr	r3, [pc, #404]	; (2428 <FIH_LABEL_FIH_CALL_END_805+0x386>)
    2294:	601c      	str	r4, [r3, #0]
        img_size = img_size_tmp;
    2296:	4b65      	ldr	r3, [pc, #404]	; (242c <FIH_LABEL_FIH_CALL_END_805+0x38a>)
    2298:	601d      	str	r5, [r3, #0]
                                 curr_off + img_chunk_len - 1);
    229a:	6832      	ldr	r2, [r6, #0]
    not_yet_erased = erase_range(fap, not_yet_erased,
    229c:	4c62      	ldr	r4, [pc, #392]	; (2428 <FIH_LABEL_FIH_CALL_END_805+0x386>)
                                 curr_off + img_chunk_len - 1);
    229e:	3a01      	subs	r2, #1
    not_yet_erased = erase_range(fap, not_yet_erased,
    22a0:	6821      	ldr	r1, [r4, #0]
    22a2:	980a      	ldr	r0, [sp, #40]	; 0x28
    22a4:	4442      	add	r2, r8
    22a6:	f003 fc8e 	bl	5bc6 <erase_range>
    if (not_yet_erased < 0) {
    22aa:	2800      	cmp	r0, #0
    not_yet_erased = erase_range(fap, not_yet_erased,
    22ac:	6020      	str	r0, [r4, #0]
    if (not_yet_erased < 0) {
    22ae:	db83      	blt.n	21b8 <FIH_LABEL_FIH_CALL_END_805+0x116>
    rem_bytes = img_chunk_len % flash_area_align(fap);
    22b0:	980a      	ldr	r0, [sp, #40]	; 0x28
    22b2:	f003 fc45 	bl	5b40 <flash_area_align>
    22b6:	fbb8 f3f0 	udiv	r3, r8, r0
    22ba:	fb03 8010 	mls	r0, r3, r0, r8
    if (curr_off + img_chunk_len + rem_bytes < img_size) {
    22be:	6833      	ldr	r3, [r6, #0]
    img_chunk_len -= rem_bytes;
    22c0:	b2c5      	uxtb	r5, r0
    if (curr_off + img_chunk_len + rem_bytes < img_size) {
    22c2:	4443      	add	r3, r8
    img_chunk_len -= rem_bytes;
    22c4:	eba8 0505 	sub.w	r5, r8, r5
    if (curr_off + img_chunk_len + rem_bytes < img_size) {
    22c8:	f8df 8160 	ldr.w	r8, [pc, #352]	; 242c <FIH_LABEL_FIH_CALL_END_805+0x38a>
    22cc:	f8d8 2000 	ldr.w	r2, [r8]
    22d0:	4293      	cmp	r3, r2
    22d2:	bf38      	it	cc
    22d4:	2000      	movcc	r0, #0
    22d6:	fa5f f980 	uxtb.w	r9, r0
    if (flash_area_align(fap) > 1 &&
    22da:	980a      	ldr	r0, [sp, #40]	; 0x28
    22dc:	f003 fc30 	bl	5b40 <flash_area_align>
    22e0:	2801      	cmp	r0, #1
    22e2:	d905      	bls.n	22f0 <FIH_LABEL_FIH_CALL_END_805+0x24e>
        (((size_t)img_chunk) & (flash_area_align(fap) - 1)) != 0) {
    22e4:	980a      	ldr	r0, [sp, #40]	; 0x28
    22e6:	f003 fc2b 	bl	5b40 <flash_area_align>
    22ea:	3801      	subs	r0, #1
    if (flash_area_align(fap) > 1 &&
    22ec:	4207      	tst	r7, r0
    22ee:	d15f      	bne.n	23b0 <FIH_LABEL_FIH_CALL_END_805+0x30e>
        rc = flash_area_write(fap, curr_off, img_chunk, img_chunk_len);
    22f0:	462b      	mov	r3, r5
    22f2:	463a      	mov	r2, r7
    22f4:	6831      	ldr	r1, [r6, #0]
    22f6:	980a      	ldr	r0, [sp, #40]	; 0x28
    22f8:	f003 fbf9 	bl	5aee <flash_area_write>
    if (rc == 0 && rem_bytes) {
    22fc:	2800      	cmp	r0, #0
    22fe:	f47f af5b 	bne.w	21b8 <FIH_LABEL_FIH_CALL_END_805+0x116>
    2302:	e042      	b.n	238a <FIH_LABEL_FIH_CALL_END_805+0x2e8>
        switch(member->_Member_choice) {
    2304:	7a19      	ldrb	r1, [r3, #8]
    2306:	2903      	cmp	r1, #3
    2308:	d804      	bhi.n	2314 <FIH_LABEL_FIH_CALL_END_805+0x272>
    230a:	e8df f001 	tbb	[pc, r1]
    230e:	0602      	.short	0x0602
    2310:	0b09      	.short	0x0b09
                img_num = member->_Member_image;
    2312:	6818      	ldr	r0, [r3, #0]
    for (int i = 0; i < upload._Upload_members_count; i++) {
    2314:	3201      	adds	r2, #1
    2316:	330c      	adds	r3, #12
    2318:	e797      	b.n	224a <FIH_LABEL_FIH_CALL_END_805+0x1a8>
                img_chunk_len = member->_Member_data.len;
    231a:	e9d3 7800 	ldrd	r7, r8, [r3]
                break;
    231e:	e7f9      	b.n	2314 <FIH_LABEL_FIH_CALL_END_805+0x272>
                img_size_tmp = member->_Member_len;
    2320:	681d      	ldr	r5, [r3, #0]
                break;
    2322:	e7f7      	b.n	2314 <FIH_LABEL_FIH_CALL_END_805+0x272>
                img_chunk_off = member->_Member_off;
    2324:	681c      	ldr	r4, [r3, #0]
                break;
    2326:	e7f5      	b.n	2314 <FIH_LABEL_FIH_CALL_END_805+0x272>
    } else if (img_chunk_off != curr_off) {
    2328:	6833      	ldr	r3, [r6, #0]
    232a:	42a3      	cmp	r3, r4
    232c:	d001      	beq.n	2332 <FIH_LABEL_FIH_CALL_END_805+0x290>
            rc = MGMT_ERR_EUNKNOWN;
    232e:	2400      	movs	r4, #0
    2330:	e743      	b.n	21ba <FIH_LABEL_FIH_CALL_END_805+0x118>
    } else if (curr_off + img_chunk_len > img_size) {
    2332:	4b3e      	ldr	r3, [pc, #248]	; (242c <FIH_LABEL_FIH_CALL_END_805+0x38a>)
    2334:	4444      	add	r4, r8
    2336:	681b      	ldr	r3, [r3, #0]
    2338:	429c      	cmp	r4, r3
    233a:	d9ae      	bls.n	229a <FIH_LABEL_FIH_CALL_END_805+0x1f8>
    233c:	e73c      	b.n	21b8 <FIH_LABEL_FIH_CALL_END_805+0x116>
            if (write_size > img_chunk_len) {
    233e:	45aa      	cmp	sl, r5
            memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    2340:	980a      	ldr	r0, [sp, #40]	; 0x28
                write_size = img_chunk_len;
    2342:	bf88      	it	hi
    2344:	fa5f fa85 	uxtbhi.w	sl, r5
            memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    2348:	f003 fc01 	bl	5b4e <flash_area_erased_val>
    234c:	2240      	movs	r2, #64	; 0x40
    234e:	4601      	mov	r1, r0
    2350:	a828      	add	r0, sp, #160	; 0xa0
    2352:	f003 fca1 	bl	5c98 <memset>
            memcpy(wbs_aligned, img_chunk, write_size);
    2356:	4652      	mov	r2, sl
    2358:	4639      	mov	r1, r7
    235a:	a828      	add	r0, sp, #160	; 0xa0
    235c:	f003 fc91 	bl	5c82 <memcpy>
            rc = flash_area_write(fap, curr_off, wbs_aligned, write_size);
    2360:	4653      	mov	r3, sl
    2362:	6831      	ldr	r1, [r6, #0]
    2364:	980a      	ldr	r0, [sp, #40]	; 0x28
    2366:	aa28      	add	r2, sp, #160	; 0xa0
    2368:	f003 fbc1 	bl	5aee <flash_area_write>
            if (rc != 0) {
    236c:	4604      	mov	r4, r0
    236e:	2800      	cmp	r0, #0
    2370:	f47f af23 	bne.w	21ba <FIH_LABEL_FIH_CALL_END_805+0x118>
            curr_off += write_size;
    2374:	6833      	ldr	r3, [r6, #0]
            img_chunk += write_size;
    2376:	4457      	add	r7, sl
            curr_off += write_size;
    2378:	4453      	add	r3, sl
    237a:	6033      	str	r3, [r6, #0]
            img_chunk_len -= write_size;
    237c:	eba5 050a 	sub.w	r5, r5, sl
        while (img_chunk_len >= flash_area_align(fap)) {
    2380:	980a      	ldr	r0, [sp, #40]	; 0x28
    2382:	f003 fbdd 	bl	5b40 <flash_area_align>
    2386:	4285      	cmp	r5, r0
    2388:	d2d9      	bcs.n	233e <FIH_LABEL_FIH_CALL_END_805+0x29c>
    if (rc == 0 && rem_bytes) {
    238a:	f1b9 0f00 	cmp.w	r9, #0
    238e:	d112      	bne.n	23b6 <FIH_LABEL_FIH_CALL_END_805+0x314>
        curr_off += img_chunk_len + rem_bytes;
    2390:	6833      	ldr	r3, [r6, #0]
        if (curr_off == img_size) {
    2392:	f8d8 2000 	ldr.w	r2, [r8]
        curr_off += img_chunk_len + rem_bytes;
    2396:	444b      	add	r3, r9
    2398:	442b      	add	r3, r5
        if (curr_off == img_size) {
    239a:	4293      	cmp	r3, r2
        curr_off += img_chunk_len + rem_bytes;
    239c:	6033      	str	r3, [r6, #0]
        if (curr_off == img_size) {
    239e:	d1c6      	bne.n	232e <FIH_LABEL_FIH_CALL_END_805+0x28c>
	return fs->fs_off;
    23a0:	4b20      	ldr	r3, [pc, #128]	; (2424 <FIH_LABEL_FIH_CALL_END_805+0x382>)
            if (erase_range(fap, start, start) < 0) {
    23a2:	980a      	ldr	r0, [sp, #40]	; 0x28
    23a4:	681a      	ldr	r2, [r3, #0]
    23a6:	4611      	mov	r1, r2
    23a8:	f003 fc0d 	bl	5bc6 <erase_range>
    23ac:	0fc4      	lsrs	r4, r0, #31
    23ae:	e704      	b.n	21ba <FIH_LABEL_FIH_CALL_END_805+0x118>
        uint8_t write_size = MCUBOOT_SERIAL_UNALIGNED_BUFFER_SIZE;
    23b0:	f04f 0a40 	mov.w	sl, #64	; 0x40
    23b4:	e7e4      	b.n	2380 <FIH_LABEL_FIH_CALL_END_805+0x2de>
        memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    23b6:	980a      	ldr	r0, [sp, #40]	; 0x28
    23b8:	f003 fbc9 	bl	5b4e <flash_area_erased_val>
    23bc:	2208      	movs	r2, #8
    23be:	4601      	mov	r1, r0
    23c0:	a828      	add	r0, sp, #160	; 0xa0
    23c2:	f003 fc69 	bl	5c98 <memset>
        memcpy(wbs_aligned, img_chunk + img_chunk_len, rem_bytes);
    23c6:	464a      	mov	r2, r9
    23c8:	1979      	adds	r1, r7, r5
    23ca:	a828      	add	r0, sp, #160	; 0xa0
    23cc:	f003 fc59 	bl	5c82 <memcpy>
        rc = flash_area_write(fap, curr_off + img_chunk_len, wbs_aligned,
    23d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    23d2:	6831      	ldr	r1, [r6, #0]
    23d4:	4638      	mov	r0, r7
    23d6:	186c      	adds	r4, r5, r1
    23d8:	f003 fbb2 	bl	5b40 <flash_area_align>
    23dc:	4621      	mov	r1, r4
    23de:	4603      	mov	r3, r0
    23e0:	aa28      	add	r2, sp, #160	; 0xa0
    23e2:	4638      	mov	r0, r7
    23e4:	f003 fb83 	bl	5aee <flash_area_write>
    if (rc == 0) {
    23e8:	2800      	cmp	r0, #0
    23ea:	f47f aee5 	bne.w	21b8 <FIH_LABEL_FIH_CALL_END_805+0x116>
    23ee:	e7cf      	b.n	2390 <FIH_LABEL_FIH_CALL_END_805+0x2ee>
            rc = MGMT_ERR_EUNKNOWN;
    23f0:	2401      	movs	r4, #1
    23f2:	e6e2      	b.n	21ba <FIH_LABEL_FIH_CALL_END_805+0x118>
    } else if (hdr->nh_group == MGMT_GROUP_ID_DEFAULT) {
    23f4:	2800      	cmp	r0, #0
    23f6:	f47f ae13 	bne.w	2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>
        switch (hdr->nh_id) {
    23fa:	79e3      	ldrb	r3, [r4, #7]
    23fc:	2b01      	cmp	r3, #1
    23fe:	f43f ae10 	beq.w	2022 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x22>
    2402:	2b05      	cmp	r3, #5
    2404:	d003      	beq.n	240e <FIH_LABEL_FIH_CALL_END_805+0x36c>
    2406:	2b00      	cmp	r3, #0
    2408:	f47f ae0a 	bne.w	2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>
    240c:	e6aa      	b.n	2164 <FIH_LABEL_FIH_CALL_END_805+0xc2>
    bs_rc_rsp(rc);
    240e:	f7ff fdb5 	bl	1f7c <bs_rc_rsp>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    2412:	4807      	ldr	r0, [pc, #28]	; (2430 <FIH_LABEL_FIH_CALL_END_805+0x38e>)
    2414:	f005 ff28 	bl	8268 <z_impl_k_busy_wait>
        sys_reboot(SYS_REBOOT_COLD);
    2418:	2001      	movs	r0, #1
    241a:	f7ff fb47 	bl	1aac <sys_reboot>
    241e:	bf00      	nop
    2420:	20001adc 	.word	0x20001adc
    2424:	20001ad4 	.word	0x20001ad4
    2428:	20001ad0 	.word	0x20001ad0
    242c:	20001acc 	.word	0x20001acc
    2430:	0003d090 	.word	0x0003d090

00002434 <boot_serial_start>:
    bs_entry = true;
    2434:	2301      	movs	r3, #1
{
    2436:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    int dec_off = 0;
    243a:	2400      	movs	r4, #0
{
    243c:	4606      	mov	r6, r0
    bs_entry = true;
    243e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 24e0 <boot_serial_start+0xac>
    2442:	4d28      	ldr	r5, [pc, #160]	; (24e4 <boot_serial_start+0xb0>)
    2444:	f888 3000 	strb.w	r3, [r8]
    boot_uf = f;
    2448:	4b27      	ldr	r3, [pc, #156]	; (24e8 <boot_serial_start+0xb4>)
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    244a:	4f28      	ldr	r7, [pc, #160]	; (24ec <boot_serial_start+0xb8>)
    int dec_off = 0;
    244c:	9400      	str	r4, [sp, #0]
    boot_uf = f;
    244e:	6018      	str	r0, [r3, #0]
    while (timeout_in_ms > 0 || bs_entry) {
    2450:	f898 3000 	ldrb.w	r3, [r8]
    2454:	b913      	cbnz	r3, 245c <boot_serial_start+0x28>
}
    2456:	b002      	add	sp, #8
    2458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    245c:	f000 f90e 	bl	267c <arch_cpu_idle>
    2460:	4b23      	ldr	r3, [pc, #140]	; (24f0 <boot_serial_start+0xbc>)
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    2462:	f5c4 6180 	rsb	r1, r4, #1024	; 0x400
    2466:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    246a:	f8c3 5604 	str.w	r5, [r3, #1540]	; 0x604
    246e:	f8c3 5608 	str.w	r5, [r3, #1544]	; 0x608
    2472:	f8c3 560c 	str.w	r5, [r3, #1548]	; 0x60c
    2476:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
    247a:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
    247e:	f8c3 5618 	str.w	r5, [r3, #1560]	; 0x618
    2482:	f8c3 561c 	str.w	r5, [r3, #1564]	; 0x61c
    2486:	6833      	ldr	r3, [r6, #0]
    2488:	aa01      	add	r2, sp, #4
    248a:	3101      	adds	r1, #1
    248c:	1938      	adds	r0, r7, r4
    248e:	4798      	blx	r3
        if (rc <= 0 && !full_line) {
    2490:	2800      	cmp	r0, #0
    2492:	9b01      	ldr	r3, [sp, #4]
    2494:	dc01      	bgt.n	249a <boot_serial_start+0x66>
    2496:	2b00      	cmp	r3, #0
    2498:	d0da      	beq.n	2450 <boot_serial_start+0x1c>
        off += rc;
    249a:	4404      	add	r4, r0
        if (!full_line) {
    249c:	b92b      	cbnz	r3, 24aa <boot_serial_start+0x76>
            if (off == max_input) {
    249e:	f240 4301 	movw	r3, #1025	; 0x401
    24a2:	429c      	cmp	r4, r3
    24a4:	d1d4      	bne.n	2450 <boot_serial_start+0x1c>
                off = 0;
    24a6:	2400      	movs	r4, #0
    24a8:	e7d2      	b.n	2450 <boot_serial_start+0x1c>
        if (in_buf[0] == SHELL_NLIP_PKT_START1 &&
    24aa:	783b      	ldrb	r3, [r7, #0]
    24ac:	2b06      	cmp	r3, #6
    24ae:	d109      	bne.n	24c4 <boot_serial_start+0x90>
    24b0:	787b      	ldrb	r3, [r7, #1]
    24b2:	2b09      	cmp	r3, #9
    24b4:	d10b      	bne.n	24ce <boot_serial_start+0x9a>
            dec_off = 0;
    24b6:	2300      	movs	r3, #0
    24b8:	9300      	str	r3, [sp, #0]
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
    24ba:	4669      	mov	r1, sp
    24bc:	1ea0      	subs	r0, r4, #2
    24be:	f7ff fd1d 	bl	1efc <boot_serial_in_dec.constprop.0>
    24c2:	e004      	b.n	24ce <boot_serial_start+0x9a>
        } else if (in_buf[0] == SHELL_NLIP_DATA_START1 &&
    24c4:	2b04      	cmp	r3, #4
    24c6:	d102      	bne.n	24ce <boot_serial_start+0x9a>
    24c8:	787b      	ldrb	r3, [r7, #1]
    24ca:	2b14      	cmp	r3, #20
    24cc:	d0f5      	beq.n	24ba <boot_serial_start+0x86>
        if (rc == 1) {
    24ce:	2801      	cmp	r0, #1
    24d0:	d1e9      	bne.n	24a6 <boot_serial_start+0x72>
            boot_serial_input(&dec_buf[2], dec_off - 2);
    24d2:	9900      	ldr	r1, [sp, #0]
    24d4:	4807      	ldr	r0, [pc, #28]	; (24f4 <boot_serial_start+0xc0>)
    24d6:	3902      	subs	r1, #2
    24d8:	f7ff fd7e 	bl	1fd8 <boot_serial_input>
    24dc:	e7e3      	b.n	24a6 <boot_serial_start+0x72>
    24de:	bf00      	nop
    24e0:	2000357a 	.word	0x2000357a
    24e4:	6e524635 	.word	0x6e524635
    24e8:	20001b14 	.word	0x20001b14
    24ec:	2000397c 	.word	0x2000397c
    24f0:	50018000 	.word	0x50018000
    24f4:	2000357d 	.word	0x2000357d

000024f8 <decode_repeated_Upload_members>:
	return tmp_result;
}

static bool decode_repeated_Upload_members(
		zcbor_state_t *state, struct Upload_members *result)
{
    24f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    24fa:	4604      	mov	r4, r0
    24fc:	460d      	mov	r5, r1
	bool tmp_result = (((zcbor_union_start_code(state) && (int_res = (((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"image", tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    24fe:	f005 fc26 	bl	7d4e <zcbor_union_start_code>
    2502:	2800      	cmp	r0, #0
    2504:	d068      	beq.n	25d8 <decode_repeated_Upload_members+0xe0>
    2506:	4b35      	ldr	r3, [pc, #212]	; (25dc <decode_repeated_Upload_members+0xe4>)
    2508:	4669      	mov	r1, sp
    250a:	9300      	str	r3, [sp, #0]
    250c:	2305      	movs	r3, #5
    250e:	4620      	mov	r0, r4
    2510:	9301      	str	r3, [sp, #4]
    2512:	f005 fd87 	bl	8024 <zcbor_tstr_expect>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"sha", tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    2516:	b160      	cbz	r0, 2532 <decode_repeated_Upload_members+0x3a>
	&& (zcbor_int32_decode(state, (&(*result)._Member_image)))) && (((*result)._Member_choice = _Member_image) || 1))
    2518:	4629      	mov	r1, r5
    251a:	4620      	mov	r0, r4
    251c:	f005 fd7c 	bl	8018 <zcbor_int32_decode>
    2520:	b138      	cbz	r0, 2532 <decode_repeated_Upload_members+0x3a>
    2522:	2300      	movs	r3, #0
    2524:	722b      	strb	r3, [r5, #8]
	&& (zcbor_bstr_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), zcbor_union_end_code(state), int_res))));
    2526:	4620      	mov	r0, r4
    2528:	f005 fc18 	bl	7d5c <zcbor_union_end_code>
	bool tmp_result = (((zcbor_union_start_code(state) && (int_res = (((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"image", tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    252c:	2001      	movs	r0, #1

	if (!tmp_result)
		zcbor_trace();

	return tmp_result;
}
    252e:	b002      	add	sp, #8
    2530:	bd70      	pop	{r4, r5, r6, pc}
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"data", tmp_str.len = sizeof("data") - 1, &tmp_str)))))
    2532:	4620      	mov	r0, r4
    2534:	f005 fc0e 	bl	7d54 <zcbor_union_elem_code>
    2538:	b178      	cbz	r0, 255a <decode_repeated_Upload_members+0x62>
    253a:	4b29      	ldr	r3, [pc, #164]	; (25e0 <decode_repeated_Upload_members+0xe8>)
    253c:	4669      	mov	r1, sp
    253e:	9300      	str	r3, [sp, #0]
    2540:	2304      	movs	r3, #4
    2542:	4620      	mov	r0, r4
    2544:	9301      	str	r3, [sp, #4]
    2546:	f005 fd6d 	bl	8024 <zcbor_tstr_expect>
    254a:	b130      	cbz	r0, 255a <decode_repeated_Upload_members+0x62>
	&& (zcbor_bstr_decode(state, (&(*result)._Member_data)))) && (((*result)._Member_choice = _Member_data) || 1)))
    254c:	4629      	mov	r1, r5
    254e:	4620      	mov	r0, r4
    2550:	f005 fd65 	bl	801e <zcbor_bstr_decode>
    2554:	b108      	cbz	r0, 255a <decode_repeated_Upload_members+0x62>
    2556:	2301      	movs	r3, #1
    2558:	e7e4      	b.n	2524 <decode_repeated_Upload_members+0x2c>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"len", tmp_str.len = sizeof("len") - 1, &tmp_str)))))
    255a:	4620      	mov	r0, r4
    255c:	f005 fbfa 	bl	7d54 <zcbor_union_elem_code>
    2560:	b178      	cbz	r0, 2582 <decode_repeated_Upload_members+0x8a>
    2562:	4b20      	ldr	r3, [pc, #128]	; (25e4 <decode_repeated_Upload_members+0xec>)
    2564:	4669      	mov	r1, sp
    2566:	9300      	str	r3, [sp, #0]
    2568:	2303      	movs	r3, #3
    256a:	4620      	mov	r0, r4
    256c:	9301      	str	r3, [sp, #4]
    256e:	f005 fd59 	bl	8024 <zcbor_tstr_expect>
    2572:	b130      	cbz	r0, 2582 <decode_repeated_Upload_members+0x8a>
	&& (zcbor_int32_decode(state, (&(*result)._Member_len)))) && (((*result)._Member_choice = _Member_len) || 1)))
    2574:	4629      	mov	r1, r5
    2576:	4620      	mov	r0, r4
    2578:	f005 fd4e 	bl	8018 <zcbor_int32_decode>
    257c:	b108      	cbz	r0, 2582 <decode_repeated_Upload_members+0x8a>
    257e:	2302      	movs	r3, #2
    2580:	e7d0      	b.n	2524 <decode_repeated_Upload_members+0x2c>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"off", tmp_str.len = sizeof("off") - 1, &tmp_str)))))
    2582:	4620      	mov	r0, r4
    2584:	f005 fbe6 	bl	7d54 <zcbor_union_elem_code>
    2588:	b178      	cbz	r0, 25aa <decode_repeated_Upload_members+0xb2>
    258a:	2603      	movs	r6, #3
    258c:	4b16      	ldr	r3, [pc, #88]	; (25e8 <decode_repeated_Upload_members+0xf0>)
    258e:	4669      	mov	r1, sp
    2590:	4620      	mov	r0, r4
    2592:	9300      	str	r3, [sp, #0]
    2594:	9601      	str	r6, [sp, #4]
    2596:	f005 fd45 	bl	8024 <zcbor_tstr_expect>
    259a:	b130      	cbz	r0, 25aa <decode_repeated_Upload_members+0xb2>
	&& (zcbor_int32_decode(state, (&(*result)._Member_off)))) && (((*result)._Member_choice = _Member_off) || 1)))
    259c:	4629      	mov	r1, r5
    259e:	4620      	mov	r0, r4
    25a0:	f005 fd3a 	bl	8018 <zcbor_int32_decode>
    25a4:	b108      	cbz	r0, 25aa <decode_repeated_Upload_members+0xb2>
    25a6:	722e      	strb	r6, [r5, #8]
    25a8:	e7bd      	b.n	2526 <decode_repeated_Upload_members+0x2e>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"sha", tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    25aa:	4620      	mov	r0, r4
    25ac:	f005 fbd2 	bl	7d54 <zcbor_union_elem_code>
    25b0:	b178      	cbz	r0, 25d2 <decode_repeated_Upload_members+0xda>
    25b2:	4b0e      	ldr	r3, [pc, #56]	; (25ec <decode_repeated_Upload_members+0xf4>)
    25b4:	4669      	mov	r1, sp
    25b6:	9300      	str	r3, [sp, #0]
    25b8:	2303      	movs	r3, #3
    25ba:	4620      	mov	r0, r4
    25bc:	9301      	str	r3, [sp, #4]
    25be:	f005 fd31 	bl	8024 <zcbor_tstr_expect>
    25c2:	b130      	cbz	r0, 25d2 <decode_repeated_Upload_members+0xda>
	&& (zcbor_bstr_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), zcbor_union_end_code(state), int_res))));
    25c4:	4629      	mov	r1, r5
    25c6:	4620      	mov	r0, r4
    25c8:	f005 fd29 	bl	801e <zcbor_bstr_decode>
    25cc:	b108      	cbz	r0, 25d2 <decode_repeated_Upload_members+0xda>
    25ce:	2304      	movs	r3, #4
    25d0:	e7a8      	b.n	2524 <decode_repeated_Upload_members+0x2c>
    25d2:	4620      	mov	r0, r4
    25d4:	f005 fbc2 	bl	7d5c <zcbor_union_end_code>
	bool tmp_result = (((zcbor_union_start_code(state) && (int_res = (((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"image", tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    25d8:	2000      	movs	r0, #0
    25da:	e7a8      	b.n	252e <decode_repeated_Upload_members+0x36>
    25dc:	00008c3c 	.word	0x00008c3c
    25e0:	00008c42 	.word	0x00008c42
    25e4:	00008c47 	.word	0x00008c47
    25e8:	00008c38 	.word	0x00008c38
    25ec:	00008c4b 	.word	0x00008c4b

000025f0 <cbor_decode_Upload>:

int cbor_decode_Upload(
		const uint8_t *payload, size_t payload_len,
		struct Upload *result,
		size_t *payload_len_out)
{
    25f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	zcbor_state_t states[4];

	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    25f4:	f04f 0901 	mov.w	r9, #1
{
    25f8:	b09d      	sub	sp, #116	; 0x74
	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    25fa:	ac04      	add	r4, sp, #16
{
    25fc:	4607      	mov	r7, r0
    25fe:	460e      	mov	r6, r1
    2600:	4690      	mov	r8, r2
    2602:	461d      	mov	r5, r3
	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    2604:	4602      	mov	r2, r0
    2606:	460b      	mov	r3, r1
    2608:	4620      	mov	r0, r4
    260a:	2104      	movs	r1, #4
    260c:	f8cd 9000 	str.w	r9, [sp]
    2610:	f005 fba8 	bl	7d64 <zcbor_new_state>
	bool tmp_result = (((zcbor_map_start_decode(state) && ((zcbor_multi_decode(1, 5, &(*result)._Upload_members_count, (zcbor_decoder_t *)decode_repeated_Upload_members, state, (&(*result)._Upload_members), sizeof(struct Upload_members))) || (zcbor_list_map_end_force_decode(state), false)) && zcbor_map_end_decode(state))));
    2614:	4620      	mov	r0, r4
    2616:	f005 fd08 	bl	802a <zcbor_map_start_decode>
    261a:	b170      	cbz	r0, 263a <cbor_decode_Upload+0x4a>
    261c:	230c      	movs	r3, #12
    261e:	2105      	movs	r1, #5
    2620:	e9cd 8301 	strd	r8, r3, [sp, #4]
    2624:	4648      	mov	r0, r9
    2626:	4b11      	ldr	r3, [pc, #68]	; (266c <cbor_decode_Upload+0x7c>)
    2628:	9400      	str	r4, [sp, #0]
    262a:	f108 023c 	add.w	r2, r8, #60	; 0x3c
    262e:	f005 fd1d 	bl	806c <zcbor_multi_decode>
    2632:	b960      	cbnz	r0, 264e <cbor_decode_Upload+0x5e>
    2634:	4620      	mov	r0, r4
    2636:	f005 fd14 	bl	8062 <zcbor_list_map_end_force_decode>
/** Return the current error state, replacing it with SUCCESS. */
static inline int zcbor_pop_error(zcbor_state_t *state)
{
	int err = state->constant_state->error;

	state->constant_state->error = ZCBOR_SUCCESS;
    263a:	2200      	movs	r2, #0
	int err = state->constant_state->error;
    263c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    263e:	68d8      	ldr	r0, [r3, #12]
	state->constant_state->error = ZCBOR_SUCCESS;
    2640:	60da      	str	r2, [r3, #12]
				(size_t)states[0].payload - (size_t)payload);
	}

	if (!ret) {
		int status = zcbor_pop_error(states);
		return (status == ZCBOR_SUCCESS) ? ZCBOR_ERR_UNKNOWN : status;
    2642:	4290      	cmp	r0, r2
    2644:	bf08      	it	eq
    2646:	201f      	moveq	r0, #31
	}
	return ZCBOR_SUCCESS;
}
    2648:	b01d      	add	sp, #116	; 0x74
    264a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bool tmp_result = (((zcbor_map_start_decode(state) && ((zcbor_multi_decode(1, 5, &(*result)._Upload_members_count, (zcbor_decoder_t *)decode_repeated_Upload_members, state, (&(*result)._Upload_members), sizeof(struct Upload_members))) || (zcbor_list_map_end_force_decode(state), false)) && zcbor_map_end_decode(state))));
    264e:	4620      	mov	r0, r4
    2650:	f005 fd05 	bl	805e <zcbor_map_end_decode>
    2654:	2800      	cmp	r0, #0
    2656:	d0f0      	beq.n	263a <cbor_decode_Upload+0x4a>
	if (ret && (payload_len_out != NULL)) {
    2658:	b90d      	cbnz	r5, 265e <cbor_decode_Upload+0x6e>
	return ZCBOR_SUCCESS;
    265a:	2000      	movs	r0, #0
    265c:	e7f4      	b.n	2648 <cbor_decode_Upload+0x58>
		*payload_len_out = MIN(payload_len,
    265e:	9b04      	ldr	r3, [sp, #16]
    2660:	1bdb      	subs	r3, r3, r7
    2662:	42b3      	cmp	r3, r6
    2664:	bf94      	ite	ls
    2666:	602b      	strls	r3, [r5, #0]
    2668:	602e      	strhi	r6, [r5, #0]
    266a:	e7f6      	b.n	265a <cbor_decode_Upload+0x6a>
    266c:	000024f9 	.word	0x000024f9

00002670 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2670:	4901      	ldr	r1, [pc, #4]	; (2678 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2672:	2210      	movs	r2, #16
	str	r2, [r1]
    2674:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2676:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2678:	e000ed10 	.word	0xe000ed10

0000267c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    267c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    267e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2680:	f380 8811 	msr	BASEPRI, r0
	isb
    2684:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    2688:	f3bf 8f4f 	dsb	sy
    268c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    268e:	b662      	cpsie	i
	isb
    2690:	f3bf 8f6f 	isb	sy

	bx	lr
    2694:	4770      	bx	lr
    2696:	bf00      	nop

00002698 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2698:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    269a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    269c:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    26a0:	f3bf 8f4f 	dsb	sy
    26a4:	bf20      	wfe

	msr	BASEPRI, r0
    26a6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    26aa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    26ac:	4770      	bx	lr
    26ae:	bf00      	nop

000026b0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    26b0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    26b2:	2800      	cmp	r0, #0
    26b4:	db07      	blt.n	26c6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    26b6:	2301      	movs	r3, #1
    26b8:	0941      	lsrs	r1, r0, #5
    26ba:	4a03      	ldr	r2, [pc, #12]	; (26c8 <arch_irq_enable+0x18>)
    26bc:	f000 001f 	and.w	r0, r0, #31
    26c0:	4083      	lsls	r3, r0
    26c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    26c6:	4770      	bx	lr
    26c8:	e000e100 	.word	0xe000e100

000026cc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    26cc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    26ce:	2800      	cmp	r0, #0
    26d0:	db0c      	blt.n	26ec <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    26d2:	2201      	movs	r2, #1
    26d4:	4906      	ldr	r1, [pc, #24]	; (26f0 <arch_irq_disable+0x24>)
    26d6:	0943      	lsrs	r3, r0, #5
    26d8:	f000 001f 	and.w	r0, r0, #31
    26dc:	4082      	lsls	r2, r0
    26de:	3320      	adds	r3, #32
    26e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    26e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    26e8:	f3bf 8f6f 	isb	sy
}
    26ec:	4770      	bx	lr
    26ee:	bf00      	nop
    26f0:	e000e100 	.word	0xe000e100

000026f4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    26f4:	4b05      	ldr	r3, [pc, #20]	; (270c <arch_irq_is_enabled+0x18>)
    26f6:	0942      	lsrs	r2, r0, #5
    26f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    26fc:	2301      	movs	r3, #1
    26fe:	f000 001f 	and.w	r0, r0, #31
    2702:	fa03 f000 	lsl.w	r0, r3, r0
}
    2706:	4010      	ands	r0, r2
    2708:	4770      	bx	lr
    270a:	bf00      	nop
    270c:	e000e100 	.word	0xe000e100

00002710 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2710:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2712:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    2714:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2718:	bfac      	ite	ge
    271a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    271e:	4b06      	ldrlt	r3, [pc, #24]	; (2738 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2720:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2724:	b2c9      	uxtb	r1, r1
    2726:	bfab      	itete	ge
    2728:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    272c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2730:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2734:	5419      	strblt	r1, [r3, r0]
}
    2736:	4770      	bx	lr
    2738:	e000ed14 	.word	0xe000ed14

0000273c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    273c:	bf30      	wfi
    b z_SysNmiOnReset
    273e:	f7ff bffd 	b.w	273c <z_SysNmiOnReset>
    2742:	bf00      	nop

00002744 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2744:	4a0b      	ldr	r2, [pc, #44]	; (2774 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2746:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2748:	4b0b      	ldr	r3, [pc, #44]	; (2778 <z_arm_prep_c+0x34>)
    274a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    274e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2750:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2754:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2758:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    275c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2764:	f002 fa82 	bl	4c6c <z_bss_zero>
	z_data_copy();
    2768:	f002 fac4 	bl	4cf4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    276c:	f000 f98c 	bl	2a88 <z_arm_interrupt_init>
	z_cstart();
    2770:	f002 fa88 	bl	4c84 <z_cstart>
    2774:	00000000 	.word	0x00000000
    2778:	e000ed00 	.word	0xe000ed00

0000277c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    277c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2780:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2782:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2786:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    278a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    278c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2790:	2902      	cmp	r1, #2
    beq _oops
    2792:	d0ff      	beq.n	2794 <_oops>

00002794 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2794:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    2796:	f003 fa37 	bl	5c08 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    279a:	bd01      	pop	{r0, pc}

0000279c <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
    279c:	4604      	mov	r4, r0
    279e:	4608      	mov	r0, r1
    27a0:	4611      	mov	r1, r2
    27a2:	461a      	mov	r2, r3
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    27a4:	2300      	movs	r3, #0
    27a6:	f383 880b 	msr	PSPLIM, r3
	 */
	register void *p1_inreg __asm__("r0") = p1;
	register void *p2_inreg __asm__("r1") = p2;
	register void *p3_inreg __asm__("r2") = p3;

	__asm__ volatile (
    27aa:	4b0a      	ldr	r3, [pc, #40]	; (27d4 <loop+0x2>)
    27ac:	2520      	movs	r5, #32
    27ae:	f5a3 5620 	sub.w	r6, r3, #10240	; 0x2800
    27b2:	f386 880b 	msr	PSPLIM, r6
    27b6:	f383 8809 	msr	PSP, r3
    27ba:	b663      	cpsie	if
    27bc:	f04f 0300 	mov.w	r3, #0
    27c0:	f383 8811 	msr	BASEPRI, r3
    27c4:	f3bf 8f6f 	isb	sy
    27c8:	47a0      	blx	r4
    27ca:	f385 8811 	msr	BASEPRI, r5
    27ce:	f3bf 8f6f 	isb	sy

000027d2 <loop>:
    27d2:	e7fe      	b.n	27d2 <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    27d4:	20006dc8 	.word	0x20006dc8

000027d8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    27d8:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    27da:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    27de:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    27e2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    27e6:	4904      	ldr	r1, [pc, #16]	; (27f8 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    27e8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    27ea:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    27ec:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    27ee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    27f2:	4902      	ldr	r1, [pc, #8]	; (27fc <_isr_wrapper+0x24>)
	bx r1
    27f4:	4708      	bx	r1
    27f6:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    27f8:	00008344 	.word	0x00008344
	ldr r1, =z_arm_int_exit
    27fc:	00002801 	.word	0x00002801

00002800 <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2800:	4770      	bx	lr
    2802:	bf00      	nop

00002804 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2804:	4b15      	ldr	r3, [pc, #84]	; (285c <usage_fault.constprop.0+0x58>)
    2806:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    2808:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    280c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    280e:	bf14      	ite	ne
    2810:	201e      	movne	r0, #30
    2812:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    2814:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    2818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    281a:	bf18      	it	ne
    281c:	201f      	movne	r0, #31
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    281e:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
    2824:	bf18      	it	ne
    2826:	2002      	movne	r0, #2
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    2828:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    282c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    282e:	bf18      	it	ne
    2830:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    2832:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2836:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    2838:	bf18      	it	ne
    283a:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    283c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    2842:	bf18      	it	ne
    2844:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    2846:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    284a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	return reason;
}
    284c:	bf18      	it	ne
    284e:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2850:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    2854:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    2858:	629a      	str	r2, [r3, #40]	; 0x28
}
    285a:	4770      	bx	lr
    285c:	e000ed00 	.word	0xe000ed00

00002860 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2860:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2862:	4b19      	ldr	r3, [pc, #100]	; (28c8 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2864:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2866:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2868:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    286a:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    286e:	bf14      	ite	ne
    2870:	2017      	movne	r0, #23
    2872:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    2874:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2878:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    287a:	bf18      	it	ne
    287c:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    287e:	05a4      	lsls	r4, r4, #22
    2880:	d509      	bpl.n	2896 <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    2882:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2884:	6a98      	ldr	r0, [r3, #40]	; 0x28
    2886:	0400      	lsls	r0, r0, #16
    2888:	d504      	bpl.n	2894 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    288a:	b11a      	cbz	r2, 2894 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    288c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    288e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2892:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    2894:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2896:	4b0c      	ldr	r3, [pc, #48]	; (28c8 <bus_fault.constprop.0+0x68>)
    2898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    289a:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    289e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    28a0:	bf18      	it	ne
    28a2:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    28a4:	05d2      	lsls	r2, r2, #23
    28a6:	d40c      	bmi.n	28c2 <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    28a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    28aa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    28ae:	bf18      	it	ne
    28b0:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    28b2:	4a05      	ldr	r2, [pc, #20]	; (28c8 <bus_fault.constprop.0+0x68>)
    28b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    28b6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    28ba:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    28bc:	2300      	movs	r3, #0
    28be:	700b      	strb	r3, [r1, #0]
}
    28c0:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    28c2:	201b      	movs	r0, #27
    28c4:	e7f5      	b.n	28b2 <bus_fault.constprop.0+0x52>
    28c6:	bf00      	nop
    28c8:	e000ed00 	.word	0xe000ed00

000028cc <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    28cc:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    28ce:	4b1c      	ldr	r3, [pc, #112]	; (2940 <mem_manage_fault.constprop.0+0x74>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    28d0:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    28d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    28d4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    28d6:	f010 0f10 	tst.w	r0, #16
    28da:	bf14      	ite	ne
    28dc:	2011      	movne	r0, #17
    28de:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    28e0:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    28e4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    28e6:	bf18      	it	ne
    28e8:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    28ea:	07a4      	lsls	r4, r4, #30
    28ec:	d509      	bpl.n	2902 <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
    28ee:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    28f0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    28f2:	0600      	lsls	r0, r0, #24
    28f4:	d504      	bpl.n	2900 <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    28f6:	b11a      	cbz	r2, 2900 <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    28f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    28fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    28fe:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    2900:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2902:	4b0f      	ldr	r3, [pc, #60]	; (2940 <mem_manage_fault.constprop.0+0x74>)
    2904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    2906:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    290a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    290c:	bf18      	it	ne
    290e:	2014      	movne	r0, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    2910:	f012 0f20 	tst.w	r2, #32
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    2916:	bf18      	it	ne
    2918:	2015      	movne	r0, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    291a:	06d4      	lsls	r4, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    291c:	bf58      	it	pl
    291e:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2920:	4b07      	ldr	r3, [pc, #28]	; (2940 <mem_manage_fault.constprop.0+0x74>)
    2922:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2924:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    2926:	bf42      	ittt	mi
    2928:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    292a:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    292e:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2932:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2936:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2938:	2300      	movs	r3, #0
    293a:	700b      	strb	r3, [r1, #0]
}
    293c:	bd10      	pop	{r4, pc}
    293e:	bf00      	nop
    2940:	e000ed00 	.word	0xe000ed00

00002944 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2944:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2946:	4b44      	ldr	r3, [pc, #272]	; (2a58 <z_arm_fault+0x114>)
{
    2948:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    294a:	685b      	ldr	r3, [r3, #4]
    294c:	2500      	movs	r5, #0
{
    294e:	b08a      	sub	sp, #40	; 0x28
    2950:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2954:	f385 8811 	msr	BASEPRI, r5
    2958:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    295c:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    2960:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    2964:	d111      	bne.n	298a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2966:	f002 000c 	and.w	r0, r2, #12
    296a:	2808      	cmp	r0, #8
    296c:	d00d      	beq.n	298a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    296e:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    2970:	bf4c      	ite	mi
    2972:	460e      	movmi	r6, r1
			*nested_exc = true;
    2974:	2501      	movpl	r5, #1
	*recoverable = false;
    2976:	2200      	movs	r2, #0
	switch (fault) {
    2978:	3b03      	subs	r3, #3
	*recoverable = false;
    297a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    297e:	2b03      	cmp	r3, #3
    2980:	d805      	bhi.n	298e <z_arm_fault+0x4a>
    2982:	e8df f003 	tbb	[pc, r3]
    2986:	5c1e      	.short	0x5c1e
    2988:	5960      	.short	0x5960
		return NULL;
    298a:	462e      	mov	r6, r5
    298c:	e7f3      	b.n	2976 <z_arm_fault+0x32>
    298e:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2990:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2994:	b99b      	cbnz	r3, 29be <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2996:	2220      	movs	r2, #32
    2998:	4631      	mov	r1, r6
    299a:	a802      	add	r0, sp, #8
    299c:	f003 f971 	bl	5c82 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    29a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    29a2:	2d00      	cmp	r5, #0
    29a4:	d053      	beq.n	2a4e <z_arm_fault+0x10a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    29a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
    29aa:	b922      	cbnz	r2, 29b6 <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    29ac:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    29b0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    29b4:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    29b6:	4620      	mov	r0, r4
    29b8:	a902      	add	r1, sp, #8
    29ba:	f003 f923 	bl	5c04 <z_arm_fatal_error>
}
    29be:	b00a      	add	sp, #40	; 0x28
    29c0:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    29c2:	4b25      	ldr	r3, [pc, #148]	; (2a58 <z_arm_fault+0x114>)
    29c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    29c6:	0791      	lsls	r1, r2, #30
    29c8:	d4e1      	bmi.n	298e <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    29ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    29cc:	2a00      	cmp	r2, #0
    29ce:	dbde      	blt.n	298e <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    29d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    29d2:	0052      	lsls	r2, r2, #1
    29d4:	d5db      	bpl.n	298e <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    29d6:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    29d8:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    29da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    29de:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    29e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    29e4:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    29e8:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    29ea:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    29ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    29f2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    29f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    29f8:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    29fc:	f64d 7202 	movw	r2, #57090	; 0xdf02
    2a00:	4291      	cmp	r1, r2
    2a02:	d009      	beq.n	2a18 <z_arm_fault+0xd4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    2a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2a06:	b2d2      	uxtb	r2, r2
    2a08:	b142      	cbz	r2, 2a1c <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
    2a0a:	2001      	movs	r0, #1
    2a0c:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    2a10:	f7ff ff5c 	bl	28cc <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
    2a14:	4604      	mov	r4, r0
		break;
    2a16:	e7bb      	b.n	2990 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    2a18:	6834      	ldr	r4, [r6, #0]
    2a1a:	e7b9      	b.n	2990 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    2a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2a1e:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    2a22:	d005      	beq.n	2a30 <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
    2a24:	2001      	movs	r0, #1
    2a26:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    2a2a:	f7ff ff19 	bl	2860 <bus_fault.constprop.0>
    2a2e:	e7f1      	b.n	2a14 <z_arm_fault+0xd0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    2a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    2a36:	d3aa      	bcc.n	298e <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    2a38:	f7ff fee4 	bl	2804 <usage_fault.constprop.0>
    2a3c:	e7ea      	b.n	2a14 <z_arm_fault+0xd0>
		reason = mem_manage_fault(esf, 0, recoverable);
    2a3e:	2000      	movs	r0, #0
    2a40:	f10d 0107 	add.w	r1, sp, #7
    2a44:	e7e4      	b.n	2a10 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    2a46:	2000      	movs	r0, #0
    2a48:	f10d 0107 	add.w	r1, sp, #7
    2a4c:	e7ed      	b.n	2a2a <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2a4e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2a52:	f023 0301 	bic.w	r3, r3, #1
    2a56:	e7ad      	b.n	29b4 <z_arm_fault+0x70>
    2a58:	e000ed00 	.word	0xe000ed00

00002a5c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2a5c:	4b04      	ldr	r3, [pc, #16]	; (2a70 <z_arm_fault_init+0x14>)
    2a5e:	695a      	ldr	r2, [r3, #20]
    2a60:	f042 0210 	orr.w	r2, r2, #16
    2a64:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    2a66:	695a      	ldr	r2, [r3, #20]
    2a68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2a6c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    2a6e:	4770      	bx	lr
    2a70:	e000ed00 	.word	0xe000ed00

00002a74 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2a74:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2a78:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2a7c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2a7e:	4672      	mov	r2, lr
	bl z_arm_fault
    2a80:	f7ff ff60 	bl	2944 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2a84:	bd01      	pop	{r0, pc}
    2a86:	bf00      	nop

00002a88 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2a88:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a8a:	2120      	movs	r1, #32
    2a8c:	4803      	ldr	r0, [pc, #12]	; (2a9c <z_arm_interrupt_init+0x14>)
    2a8e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2a90:	3301      	adds	r3, #1
    2a92:	2b41      	cmp	r3, #65	; 0x41
    2a94:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2a98:	d1f9      	bne.n	2a8e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2a9a:	4770      	bx	lr
    2a9c:	e000e100 	.word	0xe000e100

00002aa0 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2aa0:	2000      	movs	r0, #0
    msr CONTROL, r0
    2aa2:	f380 8814 	msr	CONTROL, r0
    isb
    2aa6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    2aaa:	2000      	movs	r0, #0
    msr MSPLIM, r0
    2aac:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    2ab0:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2ab4:	f7ff f830 	bl	1b18 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2ab8:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2aba:	490e      	ldr	r1, [pc, #56]	; (2af4 <__start+0x54>)
    str r0, [r1]
    2abc:	6008      	str	r0, [r1, #0]
    dsb
    2abe:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2ac2:	480d      	ldr	r0, [pc, #52]	; (2af8 <__start+0x58>)
    msr msp, r0
    2ac4:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2ac8:	f000 f83e 	bl	2b48 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2acc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2ace:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2ad2:	480a      	ldr	r0, [pc, #40]	; (2afc <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2ad4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2ad8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2ada:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2ade:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2ae2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2ae4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2ae6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2aea:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2aee:	f7ff fe29 	bl	2744 <z_arm_prep_c>
    2af2:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    2af4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2af8:	20006dc8 	.word	0x20006dc8
    ldr r0, =z_interrupt_stacks
    2afc:	20003dc8 	.word	0x20003dc8

00002b00 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    2b00:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2b04:	4905      	ldr	r1, [pc, #20]	; (2b1c <sys_arch_reboot+0x1c>)
    2b06:	4b06      	ldr	r3, [pc, #24]	; (2b20 <sys_arch_reboot+0x20>)
    2b08:	68ca      	ldr	r2, [r1, #12]
    2b0a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2b0e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2b10:	60cb      	str	r3, [r1, #12]
    2b12:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2b16:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2b18:	e7fd      	b.n	2b16 <sys_arch_reboot+0x16>
    2b1a:	bf00      	nop
    2b1c:	e000ed00 	.word	0xe000ed00
    2b20:	05fa0004 	.word	0x05fa0004

00002b24 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    2b24:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    2b26:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2b28:	4906      	ldr	r1, [pc, #24]	; (2b44 <z_arm_clear_arm_mpu_config+0x20>)
    2b2a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    2b2e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    2b32:	4293      	cmp	r3, r2
    2b34:	db00      	blt.n	2b38 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2b36:	4770      	bx	lr
  mpu->RNR = rnr;
    2b38:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    2b3c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2b40:	3301      	adds	r3, #1
    2b42:	e7f6      	b.n	2b32 <z_arm_clear_arm_mpu_config+0xe>
    2b44:	e000ed00 	.word	0xe000ed00

00002b48 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2b48:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2b4a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2b4c:	2400      	movs	r4, #0
    2b4e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2b52:	f7ff ffe7 	bl	2b24 <z_arm_clear_arm_mpu_config>
    2b56:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2b58:	f04f 30ff 	mov.w	r0, #4294967295
    2b5c:	4a0c      	ldr	r2, [pc, #48]	; (2b90 <z_arm_init_arch_hw_at_boot+0x48>)
    2b5e:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2b62:	3301      	adds	r3, #1
    2b64:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    2b66:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2b6a:	d1f8      	bne.n	2b5e <z_arm_init_arch_hw_at_boot+0x16>
    2b6c:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2b6e:	f04f 30ff 	mov.w	r0, #4294967295
    2b72:	4a07      	ldr	r2, [pc, #28]	; (2b90 <z_arm_init_arch_hw_at_boot+0x48>)
    2b74:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2b78:	3301      	adds	r3, #1
    2b7a:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2b7c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2b80:	d1f8      	bne.n	2b74 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    2b82:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2b84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b88:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2b8c:	bd10      	pop	{r4, pc}
    2b8e:	bf00      	nop
    2b90:	e000e100 	.word	0xe000e100

00002b94 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    2b94:	b40c      	push	{r2, r3}
    2b96:	b510      	push	{r4, lr}
    2b98:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    2b9a:	b909      	cbnz	r1, 2ba0 <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    2b9c:	f10d 000b 	add.w	r0, sp, #11
    2ba0:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
    2ba2:	e9cd 0104 	strd	r0, r1, [sp, #16]

	va_start(vargs, format);
    2ba6:	ab09      	add	r3, sp, #36	; 0x24
    2ba8:	9a08      	ldr	r2, [sp, #32]
    2baa:	9400      	str	r4, [sp, #0]
    2bac:	a904      	add	r1, sp, #16
    2bae:	4805      	ldr	r0, [pc, #20]	; (2bc4 <snprintf+0x30>)
    2bb0:	9303      	str	r3, [sp, #12]
    2bb2:	f7fe fd57 	bl	1664 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
    2bb6:	9b04      	ldr	r3, [sp, #16]
    2bb8:	701c      	strb	r4, [r3, #0]
	return r;
}
    2bba:	b006      	add	sp, #24
    2bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2bc0:	b002      	add	sp, #8
    2bc2:	4770      	bx	lr
    2bc4:	00005cab 	.word	0x00005cab

00002bc8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2bc8:	4b08      	ldr	r3, [pc, #32]	; (2bec <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2bca:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2bcc:	1ac3      	subs	r3, r0, r3
{
    2bce:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2bd0:	4907      	ldr	r1, [pc, #28]	; (2bf0 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    2bd2:	109b      	asrs	r3, r3, #2
{
    2bd4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2bd6:	4359      	muls	r1, r3
    2bd8:	2240      	movs	r2, #64	; 0x40
    2bda:	4806      	ldr	r0, [pc, #24]	; (2bf4 <onoff_stop+0x2c>)
    2bdc:	f003 f88e 	bl	5cfc <stop>
	notify(mgr, res);
    2be0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2be2:	4601      	mov	r1, r0
	notify(mgr, res);
    2be4:	4620      	mov	r0, r4
}
    2be6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2bea:	4718      	bx	r3
    2bec:	20001b2c 	.word	0x20001b2c
    2bf0:	b6db6db7 	.word	0xb6db6db7
    2bf4:	000082cc 	.word	0x000082cc

00002bf8 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2bf8:	2340      	movs	r3, #64	; 0x40
{
    2bfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2bfc:	4c0b      	ldr	r4, [pc, #44]	; (2c2c <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2bfe:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    2c00:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2c02:	460b      	mov	r3, r1
{
    2c04:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2c06:	490a      	ldr	r1, [pc, #40]	; (2c30 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    2c08:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2c0a:	4361      	muls	r1, r4
{
    2c0c:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2c0e:	4a09      	ldr	r2, [pc, #36]	; (2c34 <onoff_start+0x3c>)
    2c10:	4809      	ldr	r0, [pc, #36]	; (2c38 <onoff_start+0x40>)
    2c12:	f003 f89f 	bl	5d54 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2c16:	1e01      	subs	r1, r0, #0
    2c18:	da05      	bge.n	2c26 <onoff_start+0x2e>
		notify(mgr, err);
    2c1a:	4630      	mov	r0, r6
    2c1c:	462b      	mov	r3, r5
	}
}
    2c1e:	b002      	add	sp, #8
    2c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    2c24:	4718      	bx	r3
}
    2c26:	b002      	add	sp, #8
    2c28:	bd70      	pop	{r4, r5, r6, pc}
    2c2a:	bf00      	nop
    2c2c:	20001b2c 	.word	0x20001b2c
    2c30:	b6db6db7 	.word	0xb6db6db7
    2c34:	00005dc5 	.word	0x00005dc5
    2c38:	000082cc 	.word	0x000082cc

00002c3c <generic_hfclk_stop>:
{
    2c3c:	b510      	push	{r4, lr}
	__asm__ volatile(
    2c3e:	f04f 0320 	mov.w	r3, #32
    2c42:	f3ef 8411 	mrs	r4, BASEPRI
    2c46:	f383 8812 	msr	BASEPRI_MAX, r3
    2c4a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    2c4e:	4a07      	ldr	r2, [pc, #28]	; (2c6c <generic_hfclk_stop+0x30>)
    2c50:	6813      	ldr	r3, [r2, #0]
    2c52:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    2c56:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    2c58:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    2c5a:	d402      	bmi.n	2c62 <generic_hfclk_stop+0x26>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2c5c:	2001      	movs	r0, #1
    2c5e:	f005 f818 	bl	7c92 <nrfx_clock_stop>
	__asm__ volatile(
    2c62:	f384 8811 	msr	BASEPRI, r4
    2c66:	f3bf 8f6f 	isb	sy
}
    2c6a:	bd10      	pop	{r4, pc}
    2c6c:	20001b7c 	.word	0x20001b7c

00002c70 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    2c70:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2c72:	2200      	movs	r2, #0
    2c74:	2101      	movs	r1, #1
{
    2c76:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2c78:	2005      	movs	r0, #5
    2c7a:	f7ff fd49 	bl	2710 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2c7e:	480f      	ldr	r0, [pc, #60]	; (2cbc <clk_init+0x4c>)
    2c80:	f001 fb98 	bl	43b4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2c84:	4b0e      	ldr	r3, [pc, #56]	; (2cc0 <clk_init+0x50>)
    2c86:	4298      	cmp	r0, r3
    2c88:	d115      	bne.n	2cb6 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2c8a:	f004 ffb4 	bl	7bf6 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    2c8e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2c90:	490c      	ldr	r1, [pc, #48]	; (2cc4 <clk_init+0x54>)
    2c92:	4630      	mov	r0, r6
    2c94:	f002 fe77 	bl	5986 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2c98:	2800      	cmp	r0, #0
    2c9a:	db0b      	blt.n	2cb4 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2c9c:	2501      	movs	r5, #1
    2c9e:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    2ca0:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2ca2:	4908      	ldr	r1, [pc, #32]	; (2cc4 <clk_init+0x54>)
    2ca4:	f104 001c 	add.w	r0, r4, #28
    2ca8:	f002 fe6d 	bl	5986 <onoff_manager_init>
		if (err < 0) {
    2cac:	2800      	cmp	r0, #0
    2cae:	db01      	blt.n	2cb4 <clk_init+0x44>
	}

	return 0;
    2cb0:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2cb2:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    2cb4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2cb6:	f06f 0004 	mvn.w	r0, #4
    2cba:	e7fb      	b.n	2cb4 <clk_init+0x44>
    2cbc:	00002cfd 	.word	0x00002cfd
    2cc0:	0bad0000 	.word	0x0bad0000
    2cc4:	000086dc 	.word	0x000086dc

00002cc8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2cc8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2cca:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    2ccc:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    2cce:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2cd0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2cd2:	4808      	ldr	r0, [pc, #32]	; (2cf4 <clkstarted_handle.constprop.0+0x2c>)
    2cd4:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    2cd6:	3340      	adds	r3, #64	; 0x40
    2cd8:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    2cda:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2cde:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2ce0:	f002 fff9 	bl	5cd6 <set_on_state>
	if (callback) {
    2ce4:	b12d      	cbz	r5, 2cf2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2ce6:	4632      	mov	r2, r6
    2ce8:	462b      	mov	r3, r5
}
    2cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2cee:	4802      	ldr	r0, [pc, #8]	; (2cf8 <clkstarted_handle.constprop.0+0x30>)
    2cf0:	4718      	bx	r3
}
    2cf2:	bd70      	pop	{r4, r5, r6, pc}
    2cf4:	20001b2c 	.word	0x20001b2c
    2cf8:	000082cc 	.word	0x000082cc

00002cfc <clock_event_handler>:
	switch (event) {
    2cfc:	b110      	cbz	r0, 2d04 <clock_event_handler+0x8>
    2cfe:	2801      	cmp	r0, #1
    2d00:	d004      	beq.n	2d0c <clock_event_handler+0x10>
    2d02:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2d04:	4b03      	ldr	r3, [pc, #12]	; (2d14 <clock_event_handler+0x18>)
    2d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2d08:	075b      	lsls	r3, r3, #29
    2d0a:	d101      	bne.n	2d10 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2d0c:	f7ff bfdc 	b.w	2cc8 <clkstarted_handle.constprop.0>
}
    2d10:	4770      	bx	lr
    2d12:	bf00      	nop
    2d14:	20001b2c 	.word	0x20001b2c

00002d18 <generic_hfclk_start>:
{
    2d18:	b508      	push	{r3, lr}
	__asm__ volatile(
    2d1a:	f04f 0320 	mov.w	r3, #32
    2d1e:	f3ef 8111 	mrs	r1, BASEPRI
    2d22:	f383 8812 	msr	BASEPRI_MAX, r3
    2d26:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2d2a:	4a12      	ldr	r2, [pc, #72]	; (2d74 <generic_hfclk_start+0x5c>)
    2d2c:	6813      	ldr	r3, [r2, #0]
    2d2e:	f043 0002 	orr.w	r0, r3, #2
    2d32:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2d34:	07da      	lsls	r2, r3, #31
    2d36:	d408      	bmi.n	2d4a <generic_hfclk_start+0x32>
	__asm__ volatile(
    2d38:	f381 8811 	msr	BASEPRI, r1
    2d3c:	f3bf 8f6f 	isb	sy
}
    2d40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2d44:	2001      	movs	r0, #1
    2d46:	f004 bf64 	b.w	7c12 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2d4a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d4e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2d52:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2d56:	07d3      	lsls	r3, r2, #31
    2d58:	d5ee      	bpl.n	2d38 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    2d5a:	4807      	ldr	r0, [pc, #28]	; (2d78 <generic_hfclk_start+0x60>)
    2d5c:	f002 ffbb 	bl	5cd6 <set_on_state>
    2d60:	f381 8811 	msr	BASEPRI, r1
    2d64:	f3bf 8f6f 	isb	sy
}
    2d68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2d6c:	2000      	movs	r0, #0
    2d6e:	f7ff bfab 	b.w	2cc8 <clkstarted_handle.constprop.0>
    2d72:	bf00      	nop
    2d74:	20001b7c 	.word	0x20001b7c
    2d78:	20001b6c 	.word	0x20001b6c

00002d7c <z_nrf_clock_control_lf_on>:
{
    2d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2d80:	2201      	movs	r2, #1
    2d82:	4607      	mov	r7, r0
    2d84:	4934      	ldr	r1, [pc, #208]	; (2e58 <z_nrf_clock_control_lf_on+0xdc>)
    2d86:	e8d1 3fef 	ldaex	r3, [r1]
    2d8a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    2d8e:	2800      	cmp	r0, #0
    2d90:	d1f9      	bne.n	2d86 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    2d92:	b933      	cbnz	r3, 2da2 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2d94:	4931      	ldr	r1, [pc, #196]	; (2e5c <z_nrf_clock_control_lf_on+0xe0>)
		err = onoff_request(mgr, &cli);
    2d96:	4832      	ldr	r0, [pc, #200]	; (2e60 <z_nrf_clock_control_lf_on+0xe4>)
    2d98:	604b      	str	r3, [r1, #4]
    2d9a:	60cb      	str	r3, [r1, #12]
    2d9c:	608a      	str	r2, [r1, #8]
    2d9e:	f002 fe05 	bl	59ac <onoff_request>
	switch (start_mode) {
    2da2:	1e7b      	subs	r3, r7, #1
    2da4:	2b01      	cmp	r3, #1
    2da6:	d82d      	bhi.n	2e04 <z_nrf_clock_control_lf_on+0x88>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2da8:	2f01      	cmp	r7, #1
    2daa:	d107      	bne.n	2dbc <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2dac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2db0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2db4:	f003 0303 	and.w	r3, r3, #3
    2db8:	2b02      	cmp	r3, #2
    2dba:	d023      	beq.n	2e04 <z_nrf_clock_control_lf_on+0x88>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2dbc:	f005 fa4e 	bl	825c <k_is_in_isr>
    2dc0:	4605      	mov	r5, r0
    2dc2:	bb08      	cbnz	r0, 2e08 <z_nrf_clock_control_lf_on+0x8c>
	return !z_sys_post_kernel;
    2dc4:	4b27      	ldr	r3, [pc, #156]	; (2e64 <z_nrf_clock_control_lf_on+0xe8>)
    2dc6:	781b      	ldrb	r3, [r3, #0]
    2dc8:	b1f3      	cbz	r3, 2e08 <z_nrf_clock_control_lf_on+0x8c>
    p_reg->INTENCLR = mask;
    2dca:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2dce:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    2dd0:	4606      	mov	r6, r0
    2dd2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2dd6:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2dda:	f04f 0800 	mov.w	r8, #0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2dde:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2e68 <z_nrf_clock_control_lf_on+0xec>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2de2:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2de6:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    2dea:	03d2      	lsls	r2, r2, #15
    2dec:	d516      	bpl.n	2e1c <z_nrf_clock_control_lf_on+0xa0>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2dee:	f003 0303 	and.w	r3, r3, #3
    2df2:	2b02      	cmp	r3, #2
    2df4:	d001      	beq.n	2dfa <z_nrf_clock_control_lf_on+0x7e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2df6:	2f01      	cmp	r7, #1
    2df8:	d110      	bne.n	2e1c <z_nrf_clock_control_lf_on+0xa0>
	if (isr_mode) {
    2dfa:	b33d      	cbz	r5, 2e4c <z_nrf_clock_control_lf_on+0xd0>
    2dfc:	f386 8811 	msr	BASEPRI, r6
    2e00:	f3bf 8f6f 	isb	sy
}
    2e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
    2e08:	f04f 0320 	mov.w	r3, #32
    2e0c:	f3ef 8611 	mrs	r6, BASEPRI
    2e10:	f383 8812 	msr	BASEPRI_MAX, r3
    2e14:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2e18:	2501      	movs	r5, #1
    2e1a:	e7dc      	b.n	2dd6 <z_nrf_clock_control_lf_on+0x5a>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2e1c:	4630      	mov	r0, r6
    2e1e:	f7ff fc3b 	bl	2698 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2e22:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2e26:	b2db      	uxtb	r3, r3
    2e28:	2b01      	cmp	r3, #1
    2e2a:	d1da      	bne.n	2de2 <z_nrf_clock_control_lf_on+0x66>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e2c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2e30:	2a00      	cmp	r2, #0
    2e32:	d0d6      	beq.n	2de2 <z_nrf_clock_control_lf_on+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e34:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2e38:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2e3c:	2202      	movs	r2, #2
    2e3e:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    2e42:	2220      	movs	r2, #32
    2e44:	f8c9 2180 	str.w	r2, [r9, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e48:	60a3      	str	r3, [r4, #8]
}
    2e4a:	e7ca      	b.n	2de2 <z_nrf_clock_control_lf_on+0x66>
    p_reg->INTENSET = mask;
    2e4c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2e50:	2202      	movs	r2, #2
    2e52:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2e56:	e7d5      	b.n	2e04 <z_nrf_clock_control_lf_on+0x88>
    2e58:	20001b28 	.word	0x20001b28
    2e5c:	20001b18 	.word	0x20001b18
    2e60:	20001b48 	.word	0x20001b48
    2e64:	20003dc1 	.word	0x20003dc1
    2e68:	e000e100 	.word	0xe000e100

00002e6c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    2e6c:	4b02      	ldr	r3, [pc, #8]	; (2e78 <flash_nrf_pages_layout+0xc>)
    2e6e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    2e70:	2301      	movs	r3, #1
    2e72:	6013      	str	r3, [r2, #0]
}
    2e74:	4770      	bx	lr
    2e76:	bf00      	nop
    2e78:	20001b80 	.word	0x20001b80

00002e7c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    2e7c:	4800      	ldr	r0, [pc, #0]	; (2e80 <flash_nrf_get_parameters+0x4>)
    2e7e:	4770      	bx	lr
    2e80:	00008730 	.word	0x00008730

00002e84 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    2e84:	b510      	push	{r4, lr}
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    2e86:	f004 ff0c 	bl	7ca2 <nrfx_nvmc_flash_page_count_get>
    2e8a:	4c03      	ldr	r4, [pc, #12]	; (2e98 <nrf_flash_init+0x14>)
    2e8c:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    2e8e:	f004 ff05 	bl	7c9c <nrfx_nvmc_flash_page_size_get>
    2e92:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    2e94:	2000      	movs	r0, #0
    2e96:	bd10      	pop	{r4, pc}
    2e98:	20001b80 	.word	0x20001b80

00002e9c <flash_nrf_write>:
{
    2e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e9e:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    2ea0:	4619      	mov	r1, r3
    2ea2:	4630      	mov	r0, r6
{
    2ea4:	4617      	mov	r7, r2
    2ea6:	461d      	mov	r5, r3
	if (is_regular_addr_valid(addr, len)) {
    2ea8:	f002 ff9b 	bl	5de2 <is_regular_addr_valid>
    2eac:	b1b8      	cbz	r0, 2ede <flash_nrf_write+0x42>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    2eae:	ea46 0405 	orr.w	r4, r6, r5
    2eb2:	f014 0403 	ands.w	r4, r4, #3
    2eb6:	d112      	bne.n	2ede <flash_nrf_write+0x42>
	if (!len) {
    2eb8:	b14d      	cbz	r5, 2ece <flash_nrf_write+0x32>
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    2eba:	192b      	adds	r3, r5, r4
    2ebc:	2b03      	cmp	r3, #3
    2ebe:	eba6 0004 	sub.w	r0, r6, r4
    2ec2:	d806      	bhi.n	2ed2 <flash_nrf_write+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    2ec4:	4a07      	ldr	r2, [pc, #28]	; (2ee4 <flash_nrf_write+0x48>)
    2ec6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    2eca:	07db      	lsls	r3, r3, #31
    2ecc:	d5fb      	bpl.n	2ec6 <flash_nrf_write+0x2a>
	return ret;
    2ece:	2000      	movs	r0, #0
}
    2ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
    2ed2:	1b3b      	subs	r3, r7, r4
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    2ed4:	6819      	ldr	r1, [r3, #0]
    2ed6:	f001 fe29 	bl	4b2c <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    2eda:	3c04      	subs	r4, #4
}
    2edc:	e7ed      	b.n	2eba <flash_nrf_write+0x1e>
		return -EINVAL;
    2ede:	f06f 0015 	mvn.w	r0, #21
    2ee2:	e7f5      	b.n	2ed0 <flash_nrf_write+0x34>
    2ee4:	50039000 	.word	0x50039000

00002ee8 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2ee8:	b530      	push	{r4, r5, lr}
	return port->config;
    2eea:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2eec:	f001 041f 	and.w	r4, r1, #31
    2ef0:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    2ef2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    2ef6:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2ef8:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2efc:	d105      	bne.n	2f0a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    2efe:	4620      	mov	r0, r4
    2f00:	f001 fcec 	bl	48dc <nrfx_gpiote_trigger_disable>

		return 0;
    2f04:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    2f06:	b005      	add	sp, #20
    2f08:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    2f0a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    2f0c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2f10:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2f14:	d114      	bne.n	2f40 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2f16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2f1a:	bf0c      	ite	eq
    2f1c:	2304      	moveq	r3, #4
    2f1e:	2305      	movne	r3, #5
    2f20:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2f24:	2300      	movs	r3, #0
    2f26:	4620      	mov	r0, r4
    2f28:	4619      	mov	r1, r3
    2f2a:	aa02      	add	r2, sp, #8
    2f2c:	f001 fb0c 	bl	4548 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2f30:	4b1c      	ldr	r3, [pc, #112]	; (2fa4 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    2f32:	4298      	cmp	r0, r3
    2f34:	d133      	bne.n	2f9e <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2f36:	2101      	movs	r1, #1
    2f38:	4620      	mov	r0, r4
    2f3a:	f001 fc8b 	bl	4854 <nrfx_gpiote_trigger_enable>
	return 0;
    2f3e:	e7e1      	b.n	2f04 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2f40:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    2f44:	d020      	beq.n	2f88 <gpio_nrfx_pin_interrupt_configure+0xa0>
    2f46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2f4a:	bf14      	ite	ne
    2f4c:	2301      	movne	r3, #1
    2f4e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2f50:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2f54:	6883      	ldr	r3, [r0, #8]
    2f56:	40cb      	lsrs	r3, r1
    2f58:	07d9      	lsls	r1, r3, #31
    2f5a:	d4e3      	bmi.n	2f24 <gpio_nrfx_pin_interrupt_configure+0x3c>
    2f5c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    2f60:	d1e0      	bne.n	2f24 <gpio_nrfx_pin_interrupt_configure+0x3c>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2f62:	4a11      	ldr	r2, [pc, #68]	; (2fa8 <gpio_nrfx_pin_interrupt_configure+0xc0>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2f64:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2f68:	3380      	adds	r3, #128	; 0x80
    2f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2f6e:	07db      	lsls	r3, r3, #31
    2f70:	d4d8      	bmi.n	2f24 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2f72:	f10d 0507 	add.w	r5, sp, #7
    2f76:	4629      	mov	r1, r5
    2f78:	4620      	mov	r0, r4
    2f7a:	f001 fc17 	bl	47ac <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2f7e:	4b0b      	ldr	r3, [pc, #44]	; (2fac <gpio_nrfx_pin_interrupt_configure+0xc4>)
    2f80:	4298      	cmp	r0, r3
    2f82:	d003      	beq.n	2f8c <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
    2f84:	9503      	str	r5, [sp, #12]
    2f86:	e7cd      	b.n	2f24 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2f88:	2303      	movs	r3, #3
    2f8a:	e7e1      	b.n	2f50 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    2f8c:	4628      	mov	r0, r5
    2f8e:	f001 fc5b 	bl	4848 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2f92:	4b04      	ldr	r3, [pc, #16]	; (2fa4 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    2f94:	4298      	cmp	r0, r3
    2f96:	d0f5      	beq.n	2f84 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    2f98:	f06f 000b 	mvn.w	r0, #11
    2f9c:	e7b3      	b.n	2f06 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    2f9e:	f06f 0015 	mvn.w	r0, #21
    2fa2:	e7b0      	b.n	2f06 <gpio_nrfx_pin_interrupt_configure+0x1e>
    2fa4:	0bad0000 	.word	0x0bad0000
    2fa8:	50842500 	.word	0x50842500
    2fac:	0bad0004 	.word	0x0bad0004

00002fb0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2fb0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2fb2:	f001 fc39 	bl	4828 <nrfx_gpiote_is_init>
    2fb6:	4604      	mov	r4, r0
    2fb8:	b968      	cbnz	r0, 2fd6 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2fba:	f001 fc0d 	bl	47d8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2fbe:	4b08      	ldr	r3, [pc, #32]	; (2fe0 <gpio_nrfx_init+0x30>)
    2fc0:	4298      	cmp	r0, r3
    2fc2:	d10a      	bne.n	2fda <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2fc4:	4621      	mov	r1, r4
    2fc6:	4807      	ldr	r0, [pc, #28]	; (2fe4 <gpio_nrfx_init+0x34>)
    2fc8:	f001 fbea 	bl	47a0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2fcc:	4622      	mov	r2, r4
    2fce:	2105      	movs	r1, #5
    2fd0:	200d      	movs	r0, #13
    2fd2:	f7ff fb9d 	bl	2710 <z_arm_irq_priority_set>
		return 0;
    2fd6:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2fd8:	bd10      	pop	{r4, pc}
		return -EIO;
    2fda:	f06f 0004 	mvn.w	r0, #4
    2fde:	e7fb      	b.n	2fd8 <gpio_nrfx_init+0x28>
    2fe0:	0bad0000 	.word	0x0bad0000
    2fe4:	00002fe9 	.word	0x00002fe9

00002fe8 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2fe8:	0943      	lsrs	r3, r0, #5
{
    2fea:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2fec:	d107      	bne.n	2ffe <nrfx_gpio_handler+0x16>
	return list->head;
    2fee:	4b0b      	ldr	r3, [pc, #44]	; (301c <nrfx_gpio_handler+0x34>)
    2ff0:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2ff2:	b121      	cbz	r1, 2ffe <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    2ff4:	2501      	movs	r5, #1
	return node->next;
    2ff6:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2ff8:	4e09      	ldr	r6, [pc, #36]	; (3020 <nrfx_gpio_handler+0x38>)
    2ffa:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2ffc:	b901      	cbnz	r1, 3000 <nrfx_gpio_handler+0x18>
}
    2ffe:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    3000:	688a      	ldr	r2, [r1, #8]
    3002:	402a      	ands	r2, r5
    3004:	d002      	beq.n	300c <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    3006:	4630      	mov	r0, r6
    3008:	684b      	ldr	r3, [r1, #4]
    300a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    300c:	b11c      	cbz	r4, 3016 <nrfx_gpio_handler+0x2e>
    300e:	6823      	ldr	r3, [r4, #0]
    3010:	4621      	mov	r1, r4
    3012:	461c      	mov	r4, r3
    3014:	e7f2      	b.n	2ffc <nrfx_gpio_handler+0x14>
    3016:	4623      	mov	r3, r4
    3018:	e7fa      	b.n	3010 <nrfx_gpio_handler+0x28>
    301a:	bf00      	nop
    301c:	20001b88 	.word	0x20001b88
    3020:	000082e4 	.word	0x000082e4

00003024 <gpio_nrfx_pin_configure>:
{
    3024:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    3028:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    302a:	f001 051f 	and.w	r5, r1, #31
    302e:	7b3b      	ldrb	r3, [r7, #12]
{
    3030:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3032:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    3036:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3038:	4628      	mov	r0, r5
    303a:	f10d 0103 	add.w	r1, sp, #3
    303e:	f001 fbb5 	bl	47ac <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    3042:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3046:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    3048:	d10b      	bne.n	3062 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    304a:	4628      	mov	r0, r5
    304c:	f001 fc6e 	bl	492c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    3050:	4b3c      	ldr	r3, [pc, #240]	; (3144 <gpio_nrfx_pin_configure+0x120>)
    3052:	4598      	cmp	r8, r3
    3054:	d103      	bne.n	305e <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    3056:	f89d 0003 	ldrb.w	r0, [sp, #3]
    305a:	f001 fbef 	bl	483c <nrfx_gpiote_channel_free>
		return 0;
    305e:	2000      	movs	r0, #0
    3060:	e00c      	b.n	307c <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3062:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3064:	4628      	mov	r0, r5
    3066:	4619      	mov	r1, r3
    3068:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    306a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    306e:	f001 fa6b 	bl	4548 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3072:	4b34      	ldr	r3, [pc, #208]	; (3144 <gpio_nrfx_pin_configure+0x120>)
    3074:	4298      	cmp	r0, r3
    3076:	d004      	beq.n	3082 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    3078:	f06f 0015 	mvn.w	r0, #21
}
    307c:	b004      	add	sp, #16
    307e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    3082:	4580      	cmp	r8, r0
    3084:	d103      	bne.n	308e <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    3086:	f89d 0003 	ldrb.w	r0, [sp, #3]
    308a:	f001 fbd7 	bl	483c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    308e:	03a3      	lsls	r3, r4, #14
    3090:	d549      	bpl.n	3126 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3092:	f240 3306 	movw	r3, #774	; 0x306
    3096:	4023      	ands	r3, r4
    3098:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    309c:	d019      	beq.n	30d2 <gpio_nrfx_pin_configure+0xae>
    309e:	d80c      	bhi.n	30ba <gpio_nrfx_pin_configure+0x96>
    30a0:	2b06      	cmp	r3, #6
    30a2:	d017      	beq.n	30d4 <gpio_nrfx_pin_configure+0xb0>
    30a4:	d804      	bhi.n	30b0 <gpio_nrfx_pin_configure+0x8c>
    30a6:	b1ab      	cbz	r3, 30d4 <gpio_nrfx_pin_configure+0xb0>
    30a8:	2b02      	cmp	r3, #2
    30aa:	d1e5      	bne.n	3078 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    30ac:	2304      	movs	r3, #4
    30ae:	e011      	b.n	30d4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    30b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    30b4:	d1e0      	bne.n	3078 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    30b6:	2301      	movs	r3, #1
    30b8:	e00c      	b.n	30d4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    30ba:	f240 2202 	movw	r2, #514	; 0x202
    30be:	4293      	cmp	r3, r2
    30c0:	d026      	beq.n	3110 <gpio_nrfx_pin_configure+0xec>
    30c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    30c6:	d025      	beq.n	3114 <gpio_nrfx_pin_configure+0xf0>
    30c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    30cc:	d1d4      	bne.n	3078 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    30ce:	2302      	movs	r3, #2
    30d0:	e000      	b.n	30d4 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    30d2:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    30d4:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    30d8:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    30dc:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    30e0:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    30e2:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    30e6:	bf4c      	ite	mi
    30e8:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    30ea:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    30ee:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    30f0:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    30f4:	d510      	bpl.n	3118 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    30f6:	2301      	movs	r3, #1
    30f8:	687a      	ldr	r2, [r7, #4]
    30fa:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    30fc:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    30fe:	2200      	movs	r2, #0
    3100:	4628      	mov	r0, r5
    3102:	a901      	add	r1, sp, #4
    3104:	f001 facc 	bl	46a0 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3108:	4b0e      	ldr	r3, [pc, #56]	; (3144 <gpio_nrfx_pin_configure+0x120>)
    310a:	4298      	cmp	r0, r3
    310c:	d0a7      	beq.n	305e <gpio_nrfx_pin_configure+0x3a>
    310e:	e7b3      	b.n	3078 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    3110:	2305      	movs	r3, #5
    3112:	e7df      	b.n	30d4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3114:	2303      	movs	r3, #3
    3116:	e7dd      	b.n	30d4 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3118:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    311a:	bf41      	itttt	mi
    311c:	2301      	movmi	r3, #1
    311e:	687a      	ldrmi	r2, [r7, #4]
    3120:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    3122:	60d3      	strmi	r3, [r2, #12]
}
    3124:	e7eb      	b.n	30fe <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    3126:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3128:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    312c:	bf4c      	ite	mi
    312e:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    3130:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3134:	461a      	mov	r2, r3
    3136:	4628      	mov	r0, r5
    3138:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    313a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    313e:	f001 fa03 	bl	4548 <nrfx_gpiote_input_configure>
    3142:	e7e1      	b.n	3108 <gpio_nrfx_pin_configure+0xe4>
    3144:	0bad0000 	.word	0x0bad0000

00003148 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    3148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    314c:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
    314e:	4e3f      	ldr	r6, [pc, #252]	; (324c <pinctrl_configure_pins+0x104>)
    3150:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    3154:	4281      	cmp	r1, r0
    3156:	d102      	bne.n	315e <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    3158:	2000      	movs	r0, #0
}
    315a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    315e:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    3160:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    3164:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
    3168:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    316a:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    316e:	bf08      	it	eq
    3170:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    3174:	2d19      	cmp	r5, #25
    3176:	d866      	bhi.n	3246 <pinctrl_configure_pins+0xfe>
    3178:	e8df f005 	tbb	[pc, r5]
    317c:	1e1b160d 	.word	0x1e1b160d
    3180:	651e2d21 	.word	0x651e2d21
    3184:	31656565 	.word	0x31656565
    3188:	65656551 	.word	0x65656551
    318c:	65656565 	.word	0x65656565
    3190:	5c546565 	.word	0x5c546565
    3194:	625f      	.short	0x625f
			NRF_PSEL_UART(reg, TXD) = pin;
    3196:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    319a:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    319e:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
    31a2:	60b5      	str	r5, [r6, #8]
}
    31a4:	2501      	movs	r5, #1
    31a6:	e002      	b.n	31ae <pinctrl_configure_pins+0x66>
			NRF_PSEL_UART(reg, RXD) = pin;
    31a8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    31ac:	2500      	movs	r5, #0
    31ae:	46ac      	mov	ip, r5
    31b0:	e01c      	b.n	31ec <pinctrl_configure_pins+0xa4>
			NRF_PSEL_UART(reg, RTS) = pin;
    31b2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    31b6:	e7f0      	b.n	319a <pinctrl_configure_pins+0x52>
			NRF_PSEL_UART(reg, CTS) = pin;
    31b8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    31bc:	e7f6      	b.n	31ac <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    31be:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    31c0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    31c4:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    31c8:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    31cc:	f8c6 c00c 	str.w	ip, [r6, #12]
}
    31d0:	f04f 0c01 	mov.w	ip, #1
    31d4:	e00a      	b.n	31ec <pinctrl_configure_pins+0xa4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    31d6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    31da:	2501      	movs	r5, #1
    31dc:	e7f2      	b.n	31c4 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    31de:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    31e2:	2c00      	cmp	r4, #0
    31e4:	d1e2      	bne.n	31ac <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    31e6:	2500      	movs	r5, #0
				drive = NRF_DRIVE_S0D1;
    31e8:	2406      	movs	r4, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    31ea:	46ac      	mov	ip, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    31ec:	f850 eb04 	ldr.w	lr, [r0], #4
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    31f0:	0224      	lsls	r4, r4, #8
    31f2:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    31f6:	f1b8 0f00 	cmp.w	r8, #0
    31fa:	bf1c      	itt	ne
    31fc:	f04f 0c00 	movne.w	ip, #0
    3200:	2501      	movne	r5, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3202:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
    3206:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    *p_pin = pin_number & 0x1F;
    320a:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    320e:	ea44 040c 	orr.w	r4, r4, ip
    3212:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    3216:	3380      	adds	r3, #128	; 0x80
    3218:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    321c:	e79a      	b.n	3154 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    321e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    3222:	e7de      	b.n	31e2 <pinctrl_configure_pins+0x9a>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    3224:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    3228:	6805      	ldr	r5, [r0, #0]
    322a:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
    322e:	2d00      	cmp	r5, #0
    3230:	d0d3      	beq.n	31da <pinctrl_configure_pins+0x92>
    3232:	e7b2      	b.n	319a <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    3234:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    3238:	e7f6      	b.n	3228 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    323a:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    323e:	e7f3      	b.n	3228 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    3240:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    3244:	e7f0      	b.n	3228 <pinctrl_configure_pins+0xe0>
		switch (NRF_GET_FUN(pins[i])) {
    3246:	f06f 0085 	mvn.w	r0, #133	; 0x85
    324a:	e786      	b.n	315a <pinctrl_configure_pins+0x12>
    324c:	50842500 	.word	0x50842500

00003250 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    3250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3252:	4604      	mov	r4, r0
    3254:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    3256:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3258:	f005 f800 	bl	825c <k_is_in_isr>
    325c:	b990      	cbnz	r0, 3284 <uarte_nrfx_poll_out+0x34>
	return !z_sys_post_kernel;
    325e:	4b1f      	ldr	r3, [pc, #124]	; (32dc <uarte_nrfx_poll_out+0x8c>)
    3260:	781b      	ldrb	r3, [r3, #0]
    3262:	b17b      	cbz	r3, 3284 <uarte_nrfx_poll_out+0x34>
{
    3264:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3266:	6860      	ldr	r0, [r4, #4]
    3268:	f002 ff96 	bl	6198 <is_tx_ready.isra.0>
    326c:	b9e0      	cbnz	r0, 32a8 <uarte_nrfx_poll_out+0x58>
    326e:	2001      	movs	r0, #1
    3270:	f004 fc65 	bl	7b3e <nrfx_busy_wait>
    3274:	3e01      	subs	r6, #1
    3276:	d1f6      	bne.n	3266 <uarte_nrfx_poll_out+0x16>
    3278:	e7f4      	b.n	3264 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    327a:	f381 8811 	msr	BASEPRI, r1
    327e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3282:	e7ef      	b.n	3264 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    3284:	f04f 0320 	mov.w	r3, #32
    3288:	f3ef 8111 	mrs	r1, BASEPRI
    328c:	f383 8812 	msr	BASEPRI_MAX, r3
    3290:	f3bf 8f6f 	isb	sy
	unsigned int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    3294:	6860      	ldr	r0, [r4, #4]
    3296:	460e      	mov	r6, r1
    3298:	f002 ff7e 	bl	6198 <is_tx_ready.isra.0>
    329c:	b990      	cbnz	r0, 32c4 <uarte_nrfx_poll_out+0x74>
	__asm__ volatile(
    329e:	f381 8811 	msr	BASEPRI, r1
    32a2:	f3bf 8f6f 	isb	sy
}
    32a6:	e7ed      	b.n	3284 <uarte_nrfx_poll_out+0x34>
	__asm__ volatile(
    32a8:	f04f 0320 	mov.w	r3, #32
    32ac:	f3ef 8111 	mrs	r1, BASEPRI
    32b0:	f383 8812 	msr	BASEPRI_MAX, r3
    32b4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    32b8:	6860      	ldr	r0, [r4, #4]
    32ba:	460e      	mov	r6, r1
    32bc:	f002 ff6c 	bl	6198 <is_tx_ready.isra.0>
    32c0:	2800      	cmp	r0, #0
    32c2:	d0da      	beq.n	327a <uarte_nrfx_poll_out+0x2a>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	*data->char_out = c;
    32c4:	697b      	ldr	r3, [r7, #20]
	tx_start(dev, data->char_out, 1);
    32c6:	2201      	movs	r2, #1
	*data->char_out = c;
    32c8:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
    32ca:	4620      	mov	r0, r4
    32cc:	6979      	ldr	r1, [r7, #20]
    32ce:	f002 fea3 	bl	6018 <tx_start>
	__asm__ volatile(
    32d2:	f386 8811 	msr	BASEPRI, r6
    32d6:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    32da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32dc:	20003dc1 	.word	0x20003dc1

000032e0 <uarte_nrfx_configure>:
{
    32e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
    32e2:	794b      	ldrb	r3, [r1, #5]
    32e4:	2b01      	cmp	r3, #1
    32e6:	d026      	beq.n	3336 <uarte_nrfx_configure+0x56>
    32e8:	2b03      	cmp	r3, #3
    32ea:	d121      	bne.n	3330 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    32ec:	2510      	movs	r5, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    32ee:	798b      	ldrb	r3, [r1, #6]
    32f0:	2b03      	cmp	r3, #3
    32f2:	d11d      	bne.n	3330 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    32f4:	79ce      	ldrb	r6, [r1, #7]
    32f6:	b10e      	cbz	r6, 32fc <uarte_nrfx_configure+0x1c>
    32f8:	2e01      	cmp	r6, #1
    32fa:	d119      	bne.n	3330 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
    32fc:	790a      	ldrb	r2, [r1, #4]
    32fe:	b112      	cbz	r2, 3306 <uarte_nrfx_configure+0x26>
    3300:	2a02      	cmp	r2, #2
    3302:	d115      	bne.n	3330 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3304:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3306:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3308:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    330a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    330e:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    3310:	d067      	beq.n	33e2 <uarte_nrfx_configure+0x102>
    3312:	d82d      	bhi.n	3370 <uarte_nrfx_configure+0x90>
    3314:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3318:	d066      	beq.n	33e8 <uarte_nrfx_configure+0x108>
    331a:	d816      	bhi.n	334a <uarte_nrfx_configure+0x6a>
    331c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3320:	d064      	beq.n	33ec <uarte_nrfx_configure+0x10c>
    3322:	d80a      	bhi.n	333a <uarte_nrfx_configure+0x5a>
    3324:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3328:	d063      	beq.n	33f2 <uarte_nrfx_configure+0x112>
    332a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    332e:	d063      	beq.n	33f8 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    3330:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3334:	e054      	b.n	33e0 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    3336:	2500      	movs	r5, #0
    3338:	e7d9      	b.n	32ee <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    333a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    333e:	d05e      	beq.n	33fe <uarte_nrfx_configure+0x11e>
    3340:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3344:	d1f4      	bne.n	3330 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3346:	4b38      	ldr	r3, [pc, #224]	; (3428 <uarte_nrfx_configure+0x148>)
    3348:	e03c      	b.n	33c4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    334a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    334e:	d059      	beq.n	3404 <uarte_nrfx_configure+0x124>
    3350:	d807      	bhi.n	3362 <uarte_nrfx_configure+0x82>
    3352:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3356:	d057      	beq.n	3408 <uarte_nrfx_configure+0x128>
    3358:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    335c:	d1e8      	bne.n	3330 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    335e:	4b33      	ldr	r3, [pc, #204]	; (342c <uarte_nrfx_configure+0x14c>)
    3360:	e030      	b.n	33c4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3362:	f647 2412 	movw	r4, #31250	; 0x7a12
    3366:	42a3      	cmp	r3, r4
    3368:	d1e2      	bne.n	3330 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    336a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    336e:	e029      	b.n	33c4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3370:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3374:	d04a      	beq.n	340c <uarte_nrfx_configure+0x12c>
    3376:	d813      	bhi.n	33a0 <uarte_nrfx_configure+0xc0>
    3378:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    337c:	d049      	beq.n	3412 <uarte_nrfx_configure+0x132>
    337e:	d809      	bhi.n	3394 <uarte_nrfx_configure+0xb4>
    3380:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    3384:	42a3      	cmp	r3, r4
    3386:	d046      	beq.n	3416 <uarte_nrfx_configure+0x136>
    3388:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    338c:	d1d0      	bne.n	3330 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    338e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3392:	e017      	b.n	33c4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3394:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3398:	d1ca      	bne.n	3330 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    339a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    339e:	e011      	b.n	33c4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    33a0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    33a4:	d03a      	beq.n	341c <uarte_nrfx_configure+0x13c>
    33a6:	d808      	bhi.n	33ba <uarte_nrfx_configure+0xda>
    33a8:	4c21      	ldr	r4, [pc, #132]	; (3430 <uarte_nrfx_configure+0x150>)
    33aa:	42a3      	cmp	r3, r4
    33ac:	d039      	beq.n	3422 <uarte_nrfx_configure+0x142>
    33ae:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    33b2:	d1bd      	bne.n	3330 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    33b4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    33b8:	e004      	b.n	33c4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    33ba:	4c1e      	ldr	r4, [pc, #120]	; (3434 <uarte_nrfx_configure+0x154>)
    33bc:	42a3      	cmp	r3, r4
    33be:	d1b7      	bne.n	3330 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    33c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    33c4:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    33c6:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    33ca:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    33cc:	4335      	orrs	r5, r6
    33ce:	681b      	ldr	r3, [r3, #0]
    33d0:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    33d2:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
    33d6:	1d23      	adds	r3, r4, #4
    33d8:	c903      	ldmia	r1, {r0, r1}
    33da:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    33de:	2000      	movs	r0, #0
}
    33e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    33e2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    33e6:	e7ed      	b.n	33c4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    33e8:	4b13      	ldr	r3, [pc, #76]	; (3438 <uarte_nrfx_configure+0x158>)
    33ea:	e7eb      	b.n	33c4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    33ec:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    33f0:	e7e8      	b.n	33c4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    33f2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    33f6:	e7e5      	b.n	33c4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    33f8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    33fc:	e7e2      	b.n	33c4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    33fe:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3402:	e7df      	b.n	33c4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3404:	4b0d      	ldr	r3, [pc, #52]	; (343c <uarte_nrfx_configure+0x15c>)
    3406:	e7dd      	b.n	33c4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3408:	4b0d      	ldr	r3, [pc, #52]	; (3440 <uarte_nrfx_configure+0x160>)
    340a:	e7db      	b.n	33c4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    340c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3410:	e7d8      	b.n	33c4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3412:	4b0c      	ldr	r3, [pc, #48]	; (3444 <uarte_nrfx_configure+0x164>)
    3414:	e7d6      	b.n	33c4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3416:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    341a:	e7d3      	b.n	33c4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    341c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3420:	e7d0      	b.n	33c4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3422:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3426:	e7cd      	b.n	33c4 <uarte_nrfx_configure+0xe4>
    3428:	0013b000 	.word	0x0013b000
    342c:	004ea000 	.word	0x004ea000
    3430:	0003d090 	.word	0x0003d090
    3434:	000f4240 	.word	0x000f4240
    3438:	00275000 	.word	0x00275000
    343c:	0075c000 	.word	0x0075c000
    3440:	003af000 	.word	0x003af000
    3444:	013a9000 	.word	0x013a9000

00003448 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    3448:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    344c:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    344e:	6847      	ldr	r7, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    3450:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    3452:	683c      	ldr	r4, [r7, #0]
static int uarte_instance_init(const struct device *dev,
    3454:	4680      	mov	r8, r0
    3456:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    345a:	6030      	str	r0, [r6, #0]

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    345c:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    3460:	aa01      	add	r2, sp, #4
    3462:	4648      	mov	r0, r9
    3464:	f002 fdb6 	bl	5fd4 <pinctrl_lookup_state>
	if (ret < 0) {
    3468:	1e05      	subs	r5, r0, #0
    346a:	db4d      	blt.n	3508 <uarte_instance_init.constprop.0+0xc0>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    346c:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    346e:	f8d9 2000 	ldr.w	r2, [r9]
    3472:	7919      	ldrb	r1, [r3, #4]
    3474:	6818      	ldr	r0, [r3, #0]
    3476:	f7ff fe67 	bl	3148 <pinctrl_configure_pins>
	if (err < 0) {
    347a:	1e05      	subs	r5, r0, #0
    347c:	db44      	blt.n	3508 <uarte_instance_init.constprop.0+0xc0>
		return err;
	}

	err = uarte_nrfx_configure(dev, &data->uart_config);
    347e:	4640      	mov	r0, r8
    3480:	1d31      	adds	r1, r6, #4
    3482:	f7ff ff2d 	bl	32e0 <uarte_nrfx_configure>
	if (err) {
    3486:	4605      	mov	r5, r0
    3488:	2800      	cmp	r0, #0
    348a:	d13d      	bne.n	3508 <uarte_instance_init.constprop.0+0xc0>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    348c:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    348e:	0799      	lsls	r1, r3, #30
    3490:	d513      	bpl.n	34ba <uarte_instance_init.constprop.0+0x72>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3492:	f106 001c 	add.w	r0, r6, #28
    3496:	f000 ffd1 	bl	443c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    349a:	4b1f      	ldr	r3, [pc, #124]	; (3518 <uarte_instance_init.constprop.0+0xd0>)
    349c:	4298      	cmp	r0, r3
    349e:	d137      	bne.n	3510 <uarte_instance_init.constprop.0+0xc8>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    34a0:	7f33      	ldrb	r3, [r6, #28]
    34a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    34a6:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    34aa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    34ae:	2301      	movs	r3, #1
    34b0:	7f32      	ldrb	r2, [r6, #28]
    34b2:	4093      	lsls	r3, r2
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    34b4:	4a19      	ldr	r2, [pc, #100]	; (351c <uarte_instance_init.constprop.0+0xd4>)
    34b6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    34ba:	2308      	movs	r3, #8
    34bc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    34c0:	7a3b      	ldrb	r3, [r7, #8]
    34c2:	b953      	cbnz	r3, 34da <uarte_instance_init.constprop.0+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34c4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    34c8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    34cc:	69b3      	ldr	r3, [r6, #24]
    34ce:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    34d2:	2301      	movs	r3, #1
    34d4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34d8:	6023      	str	r3, [r4, #0]
			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    34da:	687b      	ldr	r3, [r7, #4]
    34dc:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    34de:	bf5c      	itt	pl
    34e0:	f44f 7380 	movpl.w	r3, #256	; 0x100
    34e4:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    34e8:	687b      	ldr	r3, [r7, #4]
    34ea:	06db      	lsls	r3, r3, #27
    34ec:	bf44      	itt	mi
    34ee:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    34f2:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    34f6:	6973      	ldr	r3, [r6, #20]
    34f8:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    34fc:	2300      	movs	r3, #0
    34fe:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3502:	2301      	movs	r3, #1
    3504:	60a3      	str	r3, [r4, #8]
    3506:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    3508:	4628      	mov	r0, r5
    350a:	b003      	add	sp, #12
    350c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    3510:	f06f 0504 	mvn.w	r5, #4
    3514:	e7f8      	b.n	3508 <uarte_instance_init.constprop.0+0xc0>
    3516:	bf00      	nop
    3518:	0bad0000 	.word	0x0bad0000
    351c:	50017000 	.word	0x50017000

00003520 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3520:	2301      	movs	r3, #1
    3522:	4083      	lsls	r3, r0
{
    3524:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3526:	43dc      	mvns	r4, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3528:	4a0b      	ldr	r2, [pc, #44]	; (3558 <compare_int_lock+0x38>)
    352a:	e8d2 1fef 	ldaex	r1, [r2]
    352e:	ea01 0504 	and.w	r5, r1, r4
    3532:	e8c2 5fe6 	stlex	r6, r5, [r2]
    3536:	2e00      	cmp	r6, #0
    3538:	d1f7      	bne.n	352a <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    353a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    353e:	4082      	lsls	r2, r0
    3540:	4806      	ldr	r0, [pc, #24]	; (355c <compare_int_lock+0x3c>)
    3542:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3546:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    354a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    354e:	420b      	tst	r3, r1
}
    3550:	bf14      	ite	ne
    3552:	2001      	movne	r0, #1
    3554:	2000      	moveq	r0, #0
    3556:	bd70      	pop	{r4, r5, r6, pc}
    3558:	20001b98 	.word	0x20001b98
    355c:	50015000 	.word	0x50015000

00003560 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    3560:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    3562:	490e      	ldr	r1, [pc, #56]	; (359c <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    3564:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    3568:	e9d1 3400 	ldrd	r3, r4, [r1]
    356c:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    356e:	18c3      	adds	r3, r0, r3
    3570:	f144 0400 	adc.w	r4, r4, #0
    3574:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3578:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    357c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3580:	d209      	bcs.n	3596 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3582:	4b07      	ldr	r3, [pc, #28]	; (35a0 <sys_clock_timeout_handler+0x40>)
    3584:	681b      	ldr	r3, [r3, #0]
    3586:	0a1a      	lsrs	r2, r3, #8
    3588:	061b      	lsls	r3, r3, #24
    358a:	199c      	adds	r4, r3, r6
    358c:	4b05      	ldr	r3, [pc, #20]	; (35a4 <sys_clock_timeout_handler+0x44>)
    358e:	f142 0500 	adc.w	r5, r2, #0
    3592:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    3596:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    3598:	f001 bc0c 	b.w	4db4 <sys_clock_announce>
    359c:	20000170 	.word	0x20000170
    35a0:	20001b9c 	.word	0x20001b9c
    35a4:	20000178 	.word	0x20000178

000035a8 <compare_int_unlock>:
	if (key) {
    35a8:	b1d9      	cbz	r1, 35e2 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    35aa:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    35ac:	4a0d      	ldr	r2, [pc, #52]	; (35e4 <compare_int_unlock+0x3c>)
    35ae:	4083      	lsls	r3, r0
    35b0:	e8d2 cfef 	ldaex	ip, [r2]
    35b4:	ea4c 0c03 	orr.w	ip, ip, r3
    35b8:	e8c2 cfe1 	stlex	r1, ip, [r2]
    35bc:	2900      	cmp	r1, #0
    35be:	d1f7      	bne.n	35b0 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    35c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    35c4:	4a08      	ldr	r2, [pc, #32]	; (35e8 <compare_int_unlock+0x40>)
    35c6:	4083      	lsls	r3, r0
    35c8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    35cc:	4b07      	ldr	r3, [pc, #28]	; (35ec <compare_int_unlock+0x44>)
    35ce:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    35d2:	40c3      	lsrs	r3, r0
    35d4:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    35d6:	bf42      	ittt	mi
    35d8:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    35dc:	4b04      	ldrmi	r3, [pc, #16]	; (35f0 <compare_int_unlock+0x48>)
    35de:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    35e2:	4770      	bx	lr
    35e4:	20001b98 	.word	0x20001b98
    35e8:	50015000 	.word	0x50015000
    35ec:	20001b94 	.word	0x20001b94
    35f0:	e000e100 	.word	0xe000e100

000035f4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    35f4:	4b0d      	ldr	r3, [pc, #52]	; (362c <z_nrf_rtc_timer_read+0x38>)
    35f6:	6818      	ldr	r0, [r3, #0]
    35f8:	0a01      	lsrs	r1, r0, #8
    35fa:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    35fc:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3600:	4b0b      	ldr	r3, [pc, #44]	; (3630 <z_nrf_rtc_timer_read+0x3c>)
    3602:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3606:	1818      	adds	r0, r3, r0
    3608:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    360c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3610:	d20a      	bcs.n	3628 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3612:	4b08      	ldr	r3, [pc, #32]	; (3634 <z_nrf_rtc_timer_read+0x40>)
    3614:	e9d3 2300 	ldrd	r2, r3, [r3]
    3618:	4290      	cmp	r0, r2
    361a:	eb71 0303 	sbcs.w	r3, r1, r3
    361e:	d203      	bcs.n	3628 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3620:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3624:	f141 0100 	adc.w	r1, r1, #0
}
    3628:	4770      	bx	lr
    362a:	bf00      	nop
    362c:	20001b9c 	.word	0x20001b9c
    3630:	50015000 	.word	0x50015000
    3634:	20000178 	.word	0x20000178

00003638 <compare_set>:
{
    3638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    363c:	4616      	mov	r6, r2
    363e:	461f      	mov	r7, r3
    3640:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    3642:	f7ff ff6d 	bl	3520 <compare_int_lock>
    3646:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3648:	f7ff ffd4 	bl	35f4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    364c:	42b0      	cmp	r0, r6
    364e:	eb71 0307 	sbcs.w	r3, r1, r7
    3652:	d250      	bcs.n	36f6 <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    3654:	4b38      	ldr	r3, [pc, #224]	; (3738 <compare_set+0x100>)
    3656:	1a30      	subs	r0, r6, r0
    3658:	eb67 0101 	sbc.w	r1, r7, r1
    365c:	4298      	cmp	r0, r3
    365e:	f171 0100 	sbcs.w	r1, r1, #0
    3662:	d265      	bcs.n	3730 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
    3664:	4b35      	ldr	r3, [pc, #212]	; (373c <compare_set+0x104>)
    3666:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    366a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    366e:	429f      	cmp	r7, r3
    3670:	bf08      	it	eq
    3672:	4296      	cmpeq	r6, r2
    3674:	d049      	beq.n	370a <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3676:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENCLR = mask;
    367a:	4931      	ldr	r1, [pc, #196]	; (3740 <compare_set+0x108>)
    367c:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    3680:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    3682:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    3686:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    368a:	f002 fe4b 	bl	6324 <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    368e:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    3692:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3694:	f104 0550 	add.w	r5, r4, #80	; 0x50
    3698:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    369a:	b2ad      	uxth	r5, r5
    369c:	f105 2550 	add.w	r5, r5, #1342197760	; 0x50005000
    p_reg->CC[ch] = cc_val;
    36a0:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    36a4:	4a27      	ldr	r2, [pc, #156]	; (3744 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    36a6:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
    p_reg->CC[ch] = cc_val;
    36aa:	9301      	str	r3, [sp, #4]
    36ac:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    36b0:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    36b4:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
    36b8:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    36bc:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    36c0:	eba0 0008 	sub.w	r0, r0, r8
    36c4:	3803      	subs	r0, #3
    36c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    36ca:	4290      	cmp	r0, r2
    36cc:	d91d      	bls.n	370a <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    36ce:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    36d0:	b160      	cbz	r0, 36ec <compare_set+0xb4>
     return p_reg->COUNTER;
    36d2:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    36d6:	eba8 000b 	sub.w	r0, r8, fp
    36da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    36de:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    36e2:	d912      	bls.n	370a <compare_set+0xd2>
					event_clear(chan);
    36e4:	4620      	mov	r0, r4
    36e6:	f002 fe1d 	bl	6324 <event_clear>
    36ea:	4a16      	ldr	r2, [pc, #88]	; (3744 <compare_set+0x10c>)
			cc_val = now + cc_inc;
    36ec:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    36f0:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    36f4:	e7da      	b.n	36ac <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    36f6:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    36f8:	4a13      	ldr	r2, [pc, #76]	; (3748 <compare_set+0x110>)
    36fa:	40a3      	lsls	r3, r4
    36fc:	e8d2 0fef 	ldaex	r0, [r2]
    3700:	4318      	orrs	r0, r3
    3702:	e8c2 0fe1 	stlex	r1, r0, [r2]
    3706:	2900      	cmp	r1, #0
    3708:	d1f8      	bne.n	36fc <compare_set+0xc4>
	return ret;
    370a:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    370c:	490b      	ldr	r1, [pc, #44]	; (373c <compare_set+0x104>)
	cc_data[chan].callback = handler;
    370e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    3710:	0123      	lsls	r3, r4, #4
    3712:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    3716:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    3718:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    371c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    371e:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    3720:	4620      	mov	r0, r4
    3722:	9900      	ldr	r1, [sp, #0]
    3724:	f7ff ff40 	bl	35a8 <compare_int_unlock>
}
    3728:	4628      	mov	r0, r5
    372a:	b003      	add	sp, #12
    372c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    3730:	f06f 0515 	mvn.w	r5, #21
    3734:	e7f4      	b.n	3720 <compare_set+0xe8>
    3736:	bf00      	nop
    3738:	00800001 	.word	0x00800001
    373c:	20000160 	.word	0x20000160
    3740:	50015000 	.word	0x50015000
    3744:	007ffffd 	.word	0x007ffffd
    3748:	20001b94 	.word	0x20001b94

0000374c <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    374c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    374e:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3750:	f04f 30ff 	mov.w	r0, #4294967295
    3754:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->INTENCLR = mask;
    3758:	4c18      	ldr	r4, [pc, #96]	; (37bc <sys_clock_driver_init+0x70>)
    375a:	4b19      	ldr	r3, [pc, #100]	; (37c0 <sys_clock_driver_init+0x74>)
    p_reg->INTENSET = mask;
    375c:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
    375e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    3762:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    3766:	4b17      	ldr	r3, [pc, #92]	; (37c4 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    3768:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    376c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3774:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3778:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    377c:	4b12      	ldr	r3, [pc, #72]	; (37c8 <sys_clock_driver_init+0x7c>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    377e:	2101      	movs	r1, #1
    3780:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3784:	2015      	movs	r0, #21
    3786:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    378a:	462a      	mov	r2, r5
    378c:	f7fe ffc0 	bl	2710 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3790:	2015      	movs	r0, #21
    3792:	f7fe ff8d 	bl	26b0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3796:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3798:	4a0c      	ldr	r2, [pc, #48]	; (37cc <sys_clock_driver_init+0x80>)
    379a:	60a3      	str	r3, [r4, #8]
    379c:	6023      	str	r3, [r4, #0]
    379e:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    37a0:	4b0b      	ldr	r3, [pc, #44]	; (37d0 <sys_clock_driver_init+0x84>)
    37a2:	4a0c      	ldr	r2, [pc, #48]	; (37d4 <sys_clock_driver_init+0x88>)
    37a4:	9300      	str	r3, [sp, #0]
    37a6:	4628      	mov	r0, r5
    37a8:	2300      	movs	r3, #0
    37aa:	9501      	str	r5, [sp, #4]
    37ac:	f7ff ff44 	bl	3638 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    37b0:	4630      	mov	r0, r6
    37b2:	f7ff fae3 	bl	2d7c <z_nrf_clock_control_lf_on>

	return 0;
}
    37b6:	4628      	mov	r0, r5
    37b8:	b002      	add	sp, #8
    37ba:	bd70      	pop	{r4, r5, r6, pc}
    37bc:	50015000 	.word	0x50015000
    37c0:	000f0003 	.word	0x000f0003
    37c4:	20000160 	.word	0x20000160
    37c8:	e000e100 	.word	0xe000e100
    37cc:	20001b98 	.word	0x20001b98
    37d0:	00003561 	.word	0x00003561
    37d4:	007fffff 	.word	0x007fffff

000037d8 <rtc_nrf_isr>:
{
    37d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    37dc:	4b2e      	ldr	r3, [pc, #184]	; (3898 <rtc_nrf_isr+0xc0>)
    37de:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    37e2:	0790      	lsls	r0, r2, #30
    37e4:	d50b      	bpl.n	37fe <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    37e6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    37ea:	b142      	cbz	r2, 37fe <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    37ec:	2200      	movs	r2, #0
    37ee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    37f2:	4a2a      	ldr	r2, [pc, #168]	; (389c <rtc_nrf_isr+0xc4>)
    37f4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    37f8:	6813      	ldr	r3, [r2, #0]
    37fa:	3301      	adds	r3, #1
    37fc:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    37fe:	4a26      	ldr	r2, [pc, #152]	; (3898 <rtc_nrf_isr+0xc0>)
    3800:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3804:	03d9      	lsls	r1, r3, #15
    3806:	d527      	bpl.n	3858 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3808:	4b25      	ldr	r3, [pc, #148]	; (38a0 <rtc_nrf_isr+0xc8>)
    380a:	e8d3 1fef 	ldaex	r1, [r3]
    380e:	f021 0001 	bic.w	r0, r1, #1
    3812:	e8c3 0fe4 	stlex	r4, r0, [r3]
    3816:	2c00      	cmp	r4, #0
    3818:	d1f7      	bne.n	380a <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    381a:	07cb      	lsls	r3, r1, #31
    381c:	d402      	bmi.n	3824 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    381e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    3822:	b1cb      	cbz	r3, 3858 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3824:	2500      	movs	r5, #0
    3826:	4c1c      	ldr	r4, [pc, #112]	; (3898 <rtc_nrf_isr+0xc0>)
    3828:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    382c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    3830:	f7ff fee0 	bl	35f4 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3834:	f04f 0320 	mov.w	r3, #32
    3838:	f3ef 8211 	mrs	r2, BASEPRI
    383c:	f383 8812 	msr	BASEPRI_MAX, r3
    3840:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3844:	4b17      	ldr	r3, [pc, #92]	; (38a4 <rtc_nrf_isr+0xcc>)
    3846:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    384a:	42b0      	cmp	r0, r6
    384c:	41b9      	sbcs	r1, r7
    384e:	d206      	bcs.n	385e <rtc_nrf_isr+0x86>
	__asm__ volatile(
    3850:	f382 8811 	msr	BASEPRI, r2
    3854:	f3bf 8f6f 	isb	sy
}
    3858:	b003      	add	sp, #12
    385a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    385e:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
    3862:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3866:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
    386a:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    386c:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    3870:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3874:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3878:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    387c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3880:	f382 8811 	msr	BASEPRI, r2
    3884:	f3bf 8f6f 	isb	sy
		if (handler) {
    3888:	2900      	cmp	r1, #0
    388a:	d0e5      	beq.n	3858 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    388c:	9000      	str	r0, [sp, #0]
    388e:	4632      	mov	r2, r6
    3890:	463b      	mov	r3, r7
    3892:	4628      	mov	r0, r5
    3894:	4788      	blx	r1
    3896:	e7df      	b.n	3858 <rtc_nrf_isr+0x80>
    3898:	50015000 	.word	0x50015000
    389c:	20001b9c 	.word	0x20001b9c
    38a0:	20001b94 	.word	0x20001b94
    38a4:	20000160 	.word	0x20000160

000038a8 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    38a8:	1c43      	adds	r3, r0, #1
{
    38aa:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    38ac:	d021      	beq.n	38f2 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    38ae:	2801      	cmp	r0, #1
    38b0:	dd21      	ble.n	38f6 <sys_clock_set_timeout+0x4e>
    38b2:	4a12      	ldr	r2, [pc, #72]	; (38fc <sys_clock_set_timeout+0x54>)
    38b4:	4b12      	ldr	r3, [pc, #72]	; (3900 <sys_clock_set_timeout+0x58>)
    38b6:	4290      	cmp	r0, r2
    38b8:	bfd4      	ite	le
    38ba:	4604      	movle	r4, r0
    38bc:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    38be:	f7ff fe99 	bl	35f4 <z_nrf_rtc_timer_read>
    38c2:	4b10      	ldr	r3, [pc, #64]	; (3904 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    38c4:	490e      	ldr	r1, [pc, #56]	; (3900 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    38c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    38ca:	1a80      	subs	r0, r0, r2
		cyc = 0;
    38cc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    38d0:	bf28      	it	cs
    38d2:	2400      	movcs	r4, #0
	cyc += unannounced;
    38d4:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    38d6:	428c      	cmp	r4, r1
    38d8:	bf28      	it	cs
    38da:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    38dc:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    38de:	490a      	ldr	r1, [pc, #40]	; (3908 <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    38e0:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    38e2:	9001      	str	r0, [sp, #4]
    38e4:	9100      	str	r1, [sp, #0]
    38e6:	f143 0300 	adc.w	r3, r3, #0
    38ea:	f7ff fea5 	bl	3638 <compare_set>
}
    38ee:	b002      	add	sp, #8
    38f0:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    38f2:	4c03      	ldr	r4, [pc, #12]	; (3900 <sys_clock_set_timeout+0x58>)
    38f4:	e7e3      	b.n	38be <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    38f6:	2401      	movs	r4, #1
    38f8:	e7e1      	b.n	38be <sys_clock_set_timeout+0x16>
    38fa:	bf00      	nop
    38fc:	007ffffe 	.word	0x007ffffe
    3900:	007fffff 	.word	0x007fffff
    3904:	20000170 	.word	0x20000170
    3908:	00003561 	.word	0x00003561

0000390c <sys_clock_elapsed>:
{
    390c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    390e:	f7ff fe71 	bl	35f4 <z_nrf_rtc_timer_read>
    3912:	4b02      	ldr	r3, [pc, #8]	; (391c <sys_clock_elapsed+0x10>)
    3914:	681b      	ldr	r3, [r3, #0]
}
    3916:	1ac0      	subs	r0, r0, r3
    3918:	bd08      	pop	{r3, pc}
    391a:	bf00      	nop
    391c:	20000170 	.word	0x20000170

00003920 <sys_clock_disable>:
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3920:	2301      	movs	r3, #1
{
    3922:	b510      	push	{r4, lr}
    3924:	4c07      	ldr	r4, [pc, #28]	; (3944 <sys_clock_disable+0x24>)
	irq_disable(RTC_IRQn);
    3926:	2015      	movs	r0, #21
    3928:	6063      	str	r3, [r4, #4]
    392a:	f7fe fecf 	bl	26cc <arch_irq_disable>
    392e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->INTENCLR = mask;
    3932:	4b05      	ldr	r3, [pc, #20]	; (3948 <sys_clock_disable+0x28>)
    3934:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    3938:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    393c:	4b03      	ldr	r3, [pc, #12]	; (394c <sys_clock_disable+0x2c>)
    393e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    3942:	bd10      	pop	{r4, pc}
    3944:	50015000 	.word	0x50015000
    3948:	000f0003 	.word	0x000f0003
    394c:	e000e100 	.word	0xe000e100

00003950 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    3950:	b530      	push	{r4, r5, lr}
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    3952:	6881      	ldr	r1, [r0, #8]
    3954:	b085      	sub	sp, #20
    3956:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
    3958:	f021 0407 	bic.w	r4, r1, #7
{
    395c:	4605      	mov	r5, r0

    erased_val = flash_area_erased_val(fap);
    395e:	f002 f8f6 	bl	5b4e <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    3962:	2210      	movs	r2, #16
    erased_val = flash_area_erased_val(fap);
    3964:	4601      	mov	r1, r0
    memset(&magic[0], erased_val, sizeof(magic));
    3966:	4668      	mov	r0, sp
    3968:	f002 f996 	bl	5c98 <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
    396c:	2210      	movs	r2, #16
    396e:	4668      	mov	r0, sp
    3970:	4906      	ldr	r1, [pc, #24]	; (398c <boot_write_magic+0x3c>)
    3972:	f002 f986 	bl	5c82 <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
    3976:	2310      	movs	r3, #16
    3978:	466a      	mov	r2, sp
    397a:	4621      	mov	r1, r4
    397c:	4628      	mov	r0, r5
    397e:	f002 f8b6 	bl	5aee <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    3982:	3800      	subs	r0, #0
    3984:	bf18      	it	ne
    3986:	2001      	movne	r0, #1
    3988:	b005      	add	sp, #20
    398a:	bd30      	pop	{r4, r5, pc}
    398c:	000089c0 	.word	0x000089c0

00003990 <boot_read_swap_state>:
{
    3990:	b530      	push	{r4, r5, lr}
    3992:	460d      	mov	r5, r1
    3994:	6881      	ldr	r1, [r0, #8]
    3996:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    3998:	2310      	movs	r3, #16
    399a:	aa02      	add	r2, sp, #8
    399c:	3910      	subs	r1, #16
{
    399e:	4604      	mov	r4, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    39a0:	f002 f890 	bl	5ac4 <flash_area_read>
    if (rc < 0) {
    39a4:	2800      	cmp	r0, #0
    39a6:	da02      	bge.n	39ae <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    39a8:	2001      	movs	r0, #1
}
    39aa:	b007      	add	sp, #28
    39ac:	bd30      	pop	{r4, r5, pc}
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    39ae:	2210      	movs	r2, #16
    39b0:	4620      	mov	r0, r4
    39b2:	a902      	add	r1, sp, #8
    39b4:	f002 fce5 	bl	6382 <bootutil_buffer_is_erased>
    39b8:	2800      	cmp	r0, #0
    39ba:	d13a      	bne.n	3a32 <boot_read_swap_state+0xa2>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
    39bc:	2210      	movs	r2, #16
    39be:	491e      	ldr	r1, [pc, #120]	; (3a38 <boot_read_swap_state+0xa8>)
    39c0:	a802      	add	r0, sp, #8
    39c2:	f002 f937 	bl	5c34 <memcmp>
    return BOOT_MAGIC_BAD;
    39c6:	2800      	cmp	r0, #0
        state->magic = boot_magic_decode(magic);
    39c8:	bf0c      	ite	eq
    39ca:	2301      	moveq	r3, #1
    39cc:	2302      	movne	r3, #2
        state->magic = BOOT_MAGIC_UNSET;
    39ce:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
    39d0:	4620      	mov	r0, r4
    39d2:	f002 fcc2 	bl	635a <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    39d6:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    39d8:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    39da:	f10d 0207 	add.w	r2, sp, #7
    39de:	4620      	mov	r0, r4
    39e0:	f002 f870 	bl	5ac4 <flash_area_read>
    if (rc < 0) {
    39e4:	2800      	cmp	r0, #0
    39e6:	dbdf      	blt.n	39a8 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    39e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    39ec:	4620      	mov	r0, r4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    39ee:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    39f2:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    39f4:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    39f6:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    39f8:	2201      	movs	r2, #1
    39fa:	f10d 0107 	add.w	r1, sp, #7
    39fe:	f002 fcc0 	bl	6382 <bootutil_buffer_is_erased>
    3a02:	b910      	cbnz	r0, 3a0a <boot_read_swap_state+0x7a>
    3a04:	786b      	ldrb	r3, [r5, #1]
    3a06:	2b04      	cmp	r3, #4
    3a08:	d903      	bls.n	3a12 <boot_read_swap_state+0x82>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    3a0a:	2301      	movs	r3, #1
    3a0c:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    3a0e:	2300      	movs	r3, #0
    3a10:	712b      	strb	r3, [r5, #4]
}

static inline uint32_t
boot_image_ok_off(const struct flash_area *fap)
{
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    3a12:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    3a14:	4620      	mov	r0, r4
    3a16:	3a18      	subs	r2, #24
    3a18:	f022 0207 	bic.w	r2, r2, #7
    3a1c:	3a08      	subs	r2, #8
    3a1e:	1ca9      	adds	r1, r5, #2
    3a20:	f002 fcc2 	bl	63a8 <boot_read_flag>
    if (rc) {
    3a24:	2800      	cmp	r0, #0
    3a26:	d1bf      	bne.n	39a8 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    3a28:	4620      	mov	r0, r4
    3a2a:	1ce9      	adds	r1, r5, #3
    3a2c:	f002 fd15 	bl	645a <boot_read_image_ok>
    3a30:	e7bb      	b.n	39aa <boot_read_swap_state+0x1a>
    3a32:	2303      	movs	r3, #3
    3a34:	e7cb      	b.n	39ce <boot_read_swap_state+0x3e>
    3a36:	bf00      	nop
    3a38:	000089c0 	.word	0x000089c0

00003a3c <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    3a3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    3a3e:	2002      	movs	r0, #2
    3a40:	4669      	mov	r1, sp
    3a42:	f002 fd10 	bl	6466 <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    3a46:	bb98      	cbnz	r0, 3ab0 <boot_swap_type_multi+0x74>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    3a48:	2008      	movs	r0, #8
    3a4a:	a902      	add	r1, sp, #8
    3a4c:	f002 fd0b 	bl	6466 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc == BOOT_EFLASH) {
    3a50:	2801      	cmp	r0, #1
    3a52:	d12b      	bne.n	3aac <boot_swap_type_multi+0x70>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
                     "is unreachable. Treat it as empty", image_index);
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    3a54:	2303      	movs	r3, #3
    3a56:	f88d 3008 	strb.w	r3, [sp, #8]
        secondary_slot.swap_type = BOOT_SWAP_TYPE_NONE;
        secondary_slot.copy_done = BOOT_FLAG_UNSET;
        secondary_slot.image_ok = BOOT_FLAG_UNSET;
    3a5a:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
        table = boot_swap_tables + i;

        if (boot_magic_compatible_check(table->magic_primary_slot,
                                        primary_slot.magic) &&
            boot_magic_compatible_check(table->magic_secondary_slot,
    3a5e:	2400      	movs	r4, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    3a60:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    3a64:	f89d 6008 	ldrb.w	r6, [sp, #8]
    3a68:	4a18      	ldr	r2, [pc, #96]	; (3acc <boot_swap_type_multi+0x90>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    3a6a:	4629      	mov	r1, r5
    3a6c:	7810      	ldrb	r0, [r2, #0]
    3a6e:	f002 fc7a 	bl	6366 <boot_magic_compatible_check>
    3a72:	b318      	cbz	r0, 3abc <boot_swap_type_multi+0x80>
            boot_magic_compatible_check(table->magic_secondary_slot,
    3a74:	4631      	mov	r1, r6
    3a76:	7850      	ldrb	r0, [r2, #1]
    3a78:	f002 fc75 	bl	6366 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    3a7c:	b1f0      	cbz	r0, 3abc <boot_swap_type_multi+0x80>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3a7e:	7893      	ldrb	r3, [r2, #2]
                                        secondary_slot.magic) &&
    3a80:	2b04      	cmp	r3, #4
    3a82:	d003      	beq.n	3a8c <boot_swap_type_multi+0x50>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3a84:	f89d 1003 	ldrb.w	r1, [sp, #3]
    3a88:	4299      	cmp	r1, r3
    3a8a:	d117      	bne.n	3abc <boot_swap_type_multi+0x80>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3a8c:	78d3      	ldrb	r3, [r2, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    3a8e:	2b04      	cmp	r3, #4
    3a90:	d003      	beq.n	3a9a <boot_swap_type_multi+0x5e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3a92:	f89d 100b 	ldrb.w	r1, [sp, #11]
    3a96:	4299      	cmp	r1, r3
    3a98:	d110      	bne.n	3abc <boot_swap_type_multi+0x80>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    3a9a:	7913      	ldrb	r3, [r2, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    3a9c:	2b04      	cmp	r3, #4
    3a9e:	d109      	bne.n	3ab4 <boot_swap_type_multi+0x78>
            BOOT_LOG_INF("Swap type: %s",
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    3aa0:	7950      	ldrb	r0, [r2, #5]
    3aa2:	1e83      	subs	r3, r0, #2
    3aa4:	2b02      	cmp	r3, #2
    3aa6:	d803      	bhi.n	3ab0 <boot_swap_type_multi+0x74>
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    3aa8:	b004      	add	sp, #16
    3aaa:	bd70      	pop	{r4, r5, r6, pc}
    } else if (rc) {
    3aac:	2800      	cmp	r0, #0
    3aae:	d0d6      	beq.n	3a5e <boot_swap_type_multi+0x22>
        return BOOT_SWAP_TYPE_PANIC;
    3ab0:	20ff      	movs	r0, #255	; 0xff
    3ab2:	e7f9      	b.n	3aa8 <boot_swap_type_multi+0x6c>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    3ab4:	f89d 1002 	ldrb.w	r1, [sp, #2]
    3ab8:	4299      	cmp	r1, r3
    3aba:	d0f1      	beq.n	3aa0 <boot_swap_type_multi+0x64>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    3abc:	3401      	adds	r4, #1
    3abe:	2c03      	cmp	r4, #3
    3ac0:	f102 0206 	add.w	r2, r2, #6
    3ac4:	d1d1      	bne.n	3a6a <boot_swap_type_multi+0x2e>
    return BOOT_SWAP_TYPE_NONE;
    3ac6:	2001      	movs	r0, #1
    3ac8:	e7ee      	b.n	3aa8 <boot_swap_type_multi+0x6c>
    3aca:	bf00      	nop
    3acc:	00008cd1 	.word	0x00008cd1

00003ad0 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    3ad0:	6801      	ldr	r1, [r0, #0]
    3ad2:	4a0e      	ldr	r2, [pc, #56]	; (3b0c <verify_header+0x3c>)
{
    3ad4:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
    3ad6:	4291      	cmp	r1, r2
    3ad8:	d115      	bne.n	3b06 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    3ada:	69c1      	ldr	r1, [r0, #28]
    3adc:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    3ae0:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    3ae4:	4291      	cmp	r1, r2
    3ae6:	d10e      	bne.n	3b06 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    3ae8:	6882      	ldr	r2, [r0, #8]
    3aea:	2a01      	cmp	r2, #1
    3aec:	d80b      	bhi.n	3b06 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    3aee:	68c2      	ldr	r2, [r0, #12]
    3af0:	b112      	cbz	r2, 3af8 <verify_header+0x28>
    3af2:	6901      	ldr	r1, [r0, #16]
    3af4:	428a      	cmp	r2, r1
    3af6:	d006      	beq.n	3b06 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    3af8:	6958      	ldr	r0, [r3, #20]
    3afa:	b128      	cbz	r0, 3b08 <verify_header+0x38>
    3afc:	699b      	ldr	r3, [r3, #24]
    3afe:	1a1b      	subs	r3, r3, r0
    3b00:	4258      	negs	r0, r3
    3b02:	4158      	adcs	r0, r3
    3b04:	4770      	bx	lr
        return( 1 );
    3b06:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
    3b08:	4770      	bx	lr
    3b0a:	bf00      	nop
    3b0c:	ff00aa55 	.word	0xff00aa55

00003b10 <verify_chain>:

static int verify_chain( void )
{
    3b10:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    3b12:	4b0d      	ldr	r3, [pc, #52]	; (3b48 <verify_chain+0x38>)
    3b14:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    3b16:	b1a6      	cbz	r6, 3b42 <verify_chain+0x32>
    3b18:	4630      	mov	r0, r6
    3b1a:	f7ff ffd9 	bl	3ad0 <verify_header>
    3b1e:	4604      	mov	r4, r0
    3b20:	b978      	cbnz	r0, 3b42 <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    3b22:	68f3      	ldr	r3, [r6, #12]
    3b24:	b96b      	cbnz	r3, 3b42 <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
    3b26:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
    3b28:	b90d      	cbnz	r5, 3b2e <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    3b2a:	4620      	mov	r0, r4
    3b2c:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
    3b2e:	4628      	mov	r0, r5
    3b30:	f7ff ffce 	bl	3ad0 <verify_header>
    3b34:	b928      	cbnz	r0, 3b42 <verify_chain+0x32>
        if( cur->prev != prv )
    3b36:	68eb      	ldr	r3, [r5, #12]
    3b38:	42b3      	cmp	r3, r6
    3b3a:	d102      	bne.n	3b42 <verify_chain+0x32>
        cur = cur->next;
    3b3c:	462e      	mov	r6, r5
    3b3e:	692d      	ldr	r5, [r5, #16]
    3b40:	e7f2      	b.n	3b28 <verify_chain+0x18>
        return( 1 );
    3b42:	2401      	movs	r4, #1
    3b44:	e7f1      	b.n	3b2a <verify_chain+0x1a>
    3b46:	bf00      	nop
    3b48:	20001ba0 	.word	0x20001ba0

00003b4c <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
    3b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
    3b50:	4f3f      	ldr	r7, [pc, #252]	; (3c50 <buffer_alloc_calloc+0x104>)
    3b52:	683c      	ldr	r4, [r7, #0]
    3b54:	b1d4      	cbz	r4, 3b8c <buffer_alloc_calloc+0x40>
    3b56:	68bc      	ldr	r4, [r7, #8]
    3b58:	b1c4      	cbz	r4, 3b8c <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
    3b5a:	2800      	cmp	r0, #0
    3b5c:	d04a      	beq.n	3bf4 <buffer_alloc_calloc+0xa8>
    3b5e:	2900      	cmp	r1, #0
    3b60:	d048      	beq.n	3bf4 <buffer_alloc_calloc+0xa8>
    original_len = len = n * size;
    3b62:	fb01 f500 	mul.w	r5, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    3b66:	fbb5 f0f0 	udiv	r0, r5, r0
    3b6a:	4288      	cmp	r0, r1
    3b6c:	d142      	bne.n	3bf4 <buffer_alloc_calloc+0xa8>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3b6e:	1d28      	adds	r0, r5, #4
    3b70:	d840      	bhi.n	3bf4 <buffer_alloc_calloc+0xa8>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3b72:	07a9      	lsls	r1, r5, #30
    3b74:	d00d      	beq.n	3b92 <buffer_alloc_calloc+0x46>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3b76:	f025 0603 	bic.w	r6, r5, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3b7a:	3604      	adds	r6, #4
    memory_header *new, *cur = heap.first_free;
    3b7c:	68fc      	ldr	r4, [r7, #12]
    3b7e:	e003      	b.n	3b88 <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
    3b80:	6863      	ldr	r3, [r4, #4]
    3b82:	42b3      	cmp	r3, r6
    3b84:	d238      	bcs.n	3bf8 <buffer_alloc_calloc+0xac>
            break;

        cur = cur->next_free;
    3b86:	69a4      	ldr	r4, [r4, #24]
    while( cur != NULL )
    3b88:	2c00      	cmp	r4, #0
    3b8a:	d1f9      	bne.n	3b80 <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
    3b8c:	4620      	mov	r0, r4
    3b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3b92:	462e      	mov	r6, r5
    3b94:	e7f2      	b.n	3b7c <buffer_alloc_calloc+0x30>
            heap.first_free = cur->next_free;
    3b96:	60fb      	str	r3, [r7, #12]
    3b98:	e041      	b.n	3c1e <buffer_alloc_calloc+0xd2>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    3b9a:	f106 0120 	add.w	r1, r6, #32
    3b9e:	1863      	adds	r3, r4, r1
    new->size = cur->size - len - sizeof(memory_header);
    3ba0:	3a20      	subs	r2, #32
    3ba2:	605a      	str	r2, [r3, #4]
    new->alloc = 0;
    3ba4:	2200      	movs	r2, #0
    new->prev = cur;
    3ba6:	e9c3 2402 	strd	r2, r4, [r3, #8]
    new->magic1 = MAGIC1;
    3baa:	482a      	ldr	r0, [pc, #168]	; (3c54 <buffer_alloc_calloc+0x108>)
    new->next = cur->next;
    3bac:	6922      	ldr	r2, [r4, #16]
    3bae:	611a      	str	r2, [r3, #16]
    new->magic1 = MAGIC1;
    3bb0:	5060      	str	r0, [r4, r1]
    new->magic2 = MAGIC2;
    3bb2:	4929      	ldr	r1, [pc, #164]	; (3c58 <buffer_alloc_calloc+0x10c>)
    3bb4:	61d9      	str	r1, [r3, #28]
    if( new->next != NULL )
    3bb6:	b102      	cbz	r2, 3bba <buffer_alloc_calloc+0x6e>
        new->next->prev = new;
    3bb8:	60d3      	str	r3, [r2, #12]
    new->prev_free = cur->prev_free;
    3bba:	6962      	ldr	r2, [r4, #20]
    3bbc:	615a      	str	r2, [r3, #20]
    new->next_free = cur->next_free;
    3bbe:	69a1      	ldr	r1, [r4, #24]
    3bc0:	6199      	str	r1, [r3, #24]
    if( new->prev_free != NULL )
    3bc2:	b1aa      	cbz	r2, 3bf0 <buffer_alloc_calloc+0xa4>
        new->prev_free->next_free = new;
    3bc4:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    3bc6:	699a      	ldr	r2, [r3, #24]
    3bc8:	b102      	cbz	r2, 3bcc <buffer_alloc_calloc+0x80>
        new->next_free->prev_free = new;
    3bca:	6153      	str	r3, [r2, #20]
    cur->alloc = 1;
    3bcc:	f04f 0901 	mov.w	r9, #1
    cur->next = new;
    3bd0:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    3bd2:	2300      	movs	r3, #0
    cur->size = len;
    3bd4:	e9c4 6901 	strd	r6, r9, [r4, #4]
    cur->next_free = NULL;
    3bd8:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3bdc:	693b      	ldr	r3, [r7, #16]
    3bde:	07db      	lsls	r3, r3, #31
    3be0:	d52e      	bpl.n	3c40 <buffer_alloc_calloc+0xf4>
    3be2:	f7ff ff95 	bl	3b10 <verify_chain>
    3be6:	b358      	cbz	r0, 3c40 <buffer_alloc_calloc+0xf4>
        mbedtls_exit( 1 );
    3be8:	4b1c      	ldr	r3, [pc, #112]	; (3c5c <buffer_alloc_calloc+0x110>)
    3bea:	4648      	mov	r0, r9
    3bec:	681b      	ldr	r3, [r3, #0]
    3bee:	e026      	b.n	3c3e <buffer_alloc_calloc+0xf2>
        heap.first_free = new;
    3bf0:	60fb      	str	r3, [r7, #12]
    3bf2:	e7e8      	b.n	3bc6 <buffer_alloc_calloc+0x7a>
        return( NULL );
    3bf4:	2400      	movs	r4, #0
    3bf6:	e7c9      	b.n	3b8c <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
    3bf8:	68a3      	ldr	r3, [r4, #8]
    3bfa:	b11b      	cbz	r3, 3c04 <buffer_alloc_calloc+0xb8>
        mbedtls_exit( 1 );
    3bfc:	4b17      	ldr	r3, [pc, #92]	; (3c5c <buffer_alloc_calloc+0x110>)
    3bfe:	2001      	movs	r0, #1
    3c00:	681b      	ldr	r3, [r3, #0]
    3c02:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    3c04:	6862      	ldr	r2, [r4, #4]
    3c06:	f104 0820 	add.w	r8, r4, #32
    3c0a:	1b92      	subs	r2, r2, r6
    3c0c:	2a23      	cmp	r2, #35	; 0x23
    3c0e:	d8c4      	bhi.n	3b9a <buffer_alloc_calloc+0x4e>
        cur->alloc = 1;
    3c10:	2301      	movs	r3, #1
    3c12:	60a3      	str	r3, [r4, #8]
            cur->prev_free->next_free = cur->next_free;
    3c14:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
        if( cur->prev_free != NULL )
    3c18:	2a00      	cmp	r2, #0
    3c1a:	d0bc      	beq.n	3b96 <buffer_alloc_calloc+0x4a>
            cur->prev_free->next_free = cur->next_free;
    3c1c:	6193      	str	r3, [r2, #24]
        if( cur->next_free != NULL )
    3c1e:	69a3      	ldr	r3, [r4, #24]
    3c20:	b10b      	cbz	r3, 3c26 <buffer_alloc_calloc+0xda>
            cur->next_free->prev_free = cur->prev_free;
    3c22:	6962      	ldr	r2, [r4, #20]
    3c24:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    3c26:	2300      	movs	r3, #0
        cur->next_free = NULL;
    3c28:	e9c4 3305 	strd	r3, r3, [r4, #20]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3c2c:	693b      	ldr	r3, [r7, #16]
    3c2e:	07da      	lsls	r2, r3, #31
    3c30:	d506      	bpl.n	3c40 <buffer_alloc_calloc+0xf4>
    3c32:	f7ff ff6d 	bl	3b10 <verify_chain>
    3c36:	b118      	cbz	r0, 3c40 <buffer_alloc_calloc+0xf4>
            mbedtls_exit( 1 );
    3c38:	2001      	movs	r0, #1
    3c3a:	4b08      	ldr	r3, [pc, #32]	; (3c5c <buffer_alloc_calloc+0x110>)
    3c3c:	681b      	ldr	r3, [r3, #0]
        mbedtls_exit( 1 );
    3c3e:	4798      	blx	r3
    memset( ret, 0, original_len );
    3c40:	462a      	mov	r2, r5
    3c42:	2100      	movs	r1, #0
    3c44:	4640      	mov	r0, r8
    ret = (unsigned char *) cur + sizeof( memory_header );
    3c46:	4644      	mov	r4, r8
    memset( ret, 0, original_len );
    3c48:	f002 f826 	bl	5c98 <memset>
    return( ret );
    3c4c:	e79e      	b.n	3b8c <buffer_alloc_calloc+0x40>
    3c4e:	bf00      	nop
    3c50:	20001ba0 	.word	0x20001ba0
    3c54:	ff00aa55 	.word	0xff00aa55
    3c58:	ee119966 	.word	0xee119966
    3c5c:	2000007c 	.word	0x2000007c

00003c60 <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
    3c60:	b570      	push	{r4, r5, r6, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    3c62:	4605      	mov	r5, r0
    3c64:	2800      	cmp	r0, #0
    3c66:	f000 8088 	beq.w	3d7a <buffer_alloc_free+0x11a>
    3c6a:	4e44      	ldr	r6, [pc, #272]	; (3d7c <buffer_alloc_free+0x11c>)
    3c6c:	6833      	ldr	r3, [r6, #0]
    3c6e:	2b00      	cmp	r3, #0
    3c70:	f000 8083 	beq.w	3d7a <buffer_alloc_free+0x11a>
    3c74:	68b2      	ldr	r2, [r6, #8]
    3c76:	2a00      	cmp	r2, #0
    3c78:	d07f      	beq.n	3d7a <buffer_alloc_free+0x11a>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    3c7a:	4283      	cmp	r3, r0
    3c7c:	d803      	bhi.n	3c86 <buffer_alloc_free+0x26>
    3c7e:	6872      	ldr	r2, [r6, #4]
    3c80:	4413      	add	r3, r2
    3c82:	4298      	cmp	r0, r3
    3c84:	d303      	bcc.n	3c8e <buffer_alloc_free+0x2e>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    3c86:	4b3e      	ldr	r3, [pc, #248]	; (3d80 <buffer_alloc_free+0x120>)
    3c88:	2001      	movs	r0, #1
    3c8a:	681b      	ldr	r3, [r3, #0]
    3c8c:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    3c8e:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    3c92:	4620      	mov	r0, r4
    3c94:	f7ff ff1c 	bl	3ad0 <verify_header>
    3c98:	b118      	cbz	r0, 3ca2 <buffer_alloc_free+0x42>
        mbedtls_exit( 1 );
    3c9a:	4b39      	ldr	r3, [pc, #228]	; (3d80 <buffer_alloc_free+0x120>)
    3c9c:	2001      	movs	r0, #1
    3c9e:	681b      	ldr	r3, [r3, #0]
    3ca0:	4798      	blx	r3

    if( hdr->alloc != 1 )
    3ca2:	f855 3c18 	ldr.w	r3, [r5, #-24]
    3ca6:	2b01      	cmp	r3, #1
    3ca8:	d003      	beq.n	3cb2 <buffer_alloc_free+0x52>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    3caa:	4b35      	ldr	r3, [pc, #212]	; (3d80 <buffer_alloc_free+0x120>)
    3cac:	2001      	movs	r0, #1
    3cae:	681b      	ldr	r3, [r3, #0]
    3cb0:	4798      	blx	r3
    }

    hdr->alloc = 0;
    3cb2:	2300      	movs	r3, #0
    3cb4:	f845 3c18 	str.w	r3, [r5, #-24]
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    3cb8:	f855 3c14 	ldr.w	r3, [r5, #-20]
    3cbc:	b33b      	cbz	r3, 3d0e <buffer_alloc_free+0xae>
    3cbe:	689a      	ldr	r2, [r3, #8]
    3cc0:	bb2a      	cbnz	r2, 3d0e <buffer_alloc_free+0xae>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    3cc2:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    3cc6:	f102 0120 	add.w	r1, r2, #32
    3cca:	685a      	ldr	r2, [r3, #4]
    3ccc:	440a      	add	r2, r1
    3cce:	605a      	str	r2, [r3, #4]
        hdr->prev->next = hdr->next;
    3cd0:	e955 3205 	ldrd	r3, r2, [r5, #-20]
    3cd4:	611a      	str	r2, [r3, #16]
        old = hdr;
        hdr = hdr->prev;
    3cd6:	f855 5c14 	ldr.w	r5, [r5, #-20]

        if( hdr->next != NULL )
    3cda:	692b      	ldr	r3, [r5, #16]
    3cdc:	b103      	cbz	r3, 3ce0 <buffer_alloc_free+0x80>
            hdr->next->prev = hdr;
    3cde:	60dd      	str	r5, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    3ce0:	2220      	movs	r2, #32
    3ce2:	2100      	movs	r1, #0
    3ce4:	4620      	mov	r0, r4
    3ce6:	f001 ffd7 	bl	5c98 <memset>
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    3cea:	6928      	ldr	r0, [r5, #16]
    3cec:	b110      	cbz	r0, 3cf4 <buffer_alloc_free+0x94>
    3cee:	6883      	ldr	r3, [r0, #8]
    3cf0:	2b00      	cmp	r3, #0
    3cf2:	d02e      	beq.n	3d52 <buffer_alloc_free+0xf2>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    3cf4:	6933      	ldr	r3, [r6, #16]
    3cf6:	079b      	lsls	r3, r3, #30
    3cf8:	d53f      	bpl.n	3d7a <buffer_alloc_free+0x11a>
    3cfa:	f7ff ff09 	bl	3b10 <verify_chain>
    3cfe:	2800      	cmp	r0, #0
    3d00:	d03b      	beq.n	3d7a <buffer_alloc_free+0x11a>
        mbedtls_exit( 1 );
}
    3d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        mbedtls_exit( 1 );
    3d06:	4b1e      	ldr	r3, [pc, #120]	; (3d80 <buffer_alloc_free+0x120>)
    3d08:	2001      	movs	r0, #1
    3d0a:	681b      	ldr	r3, [r3, #0]
    3d0c:	4718      	bx	r3
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    3d0e:	f855 0c10 	ldr.w	r0, [r5, #-16]
    3d12:	2800      	cmp	r0, #0
    3d14:	d02a      	beq.n	3d6c <buffer_alloc_free+0x10c>
    3d16:	6883      	ldr	r3, [r0, #8]
    3d18:	bb43      	cbnz	r3, 3d6c <buffer_alloc_free+0x10c>
        hdr->size += sizeof(memory_header) + hdr->next->size;
    3d1a:	6842      	ldr	r2, [r0, #4]
    3d1c:	6863      	ldr	r3, [r4, #4]
    3d1e:	4413      	add	r3, r2
    3d20:	3320      	adds	r3, #32
    3d22:	6063      	str	r3, [r4, #4]
        hdr->next = hdr->next->next;
    3d24:	6903      	ldr	r3, [r0, #16]
    3d26:	6123      	str	r3, [r4, #16]
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    3d28:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    3d2c:	b99a      	cbnz	r2, 3d56 <buffer_alloc_free+0xf6>
    3d2e:	b9cb      	cbnz	r3, 3d64 <buffer_alloc_free+0x104>
        hdr->prev_free = old->prev_free;
    3d30:	6943      	ldr	r3, [r0, #20]
    3d32:	6163      	str	r3, [r4, #20]
        hdr->next_free = old->next_free;
    3d34:	6982      	ldr	r2, [r0, #24]
    3d36:	61a2      	str	r2, [r4, #24]
        if( hdr->prev_free != NULL )
    3d38:	b1b3      	cbz	r3, 3d68 <buffer_alloc_free+0x108>
            hdr->prev_free->next_free = hdr;
    3d3a:	619c      	str	r4, [r3, #24]
        if( hdr->next_free != NULL )
    3d3c:	69a3      	ldr	r3, [r4, #24]
    3d3e:	b103      	cbz	r3, 3d42 <buffer_alloc_free+0xe2>
            hdr->next_free->prev_free = hdr;
    3d40:	615c      	str	r4, [r3, #20]
        if( hdr->next != NULL )
    3d42:	6923      	ldr	r3, [r4, #16]
    3d44:	b103      	cbz	r3, 3d48 <buffer_alloc_free+0xe8>
            hdr->next->prev = hdr;
    3d46:	60dc      	str	r4, [r3, #12]
        memset( old, 0, sizeof(memory_header) );
    3d48:	2220      	movs	r2, #32
    3d4a:	2100      	movs	r1, #0
    3d4c:	f001 ffa4 	bl	5c98 <memset>
    if( old == NULL )
    3d50:	e7d0      	b.n	3cf4 <buffer_alloc_free+0x94>
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    3d52:	462c      	mov	r4, r5
    3d54:	e7e1      	b.n	3d1a <buffer_alloc_free+0xba>
                hdr->prev_free->next_free = hdr->next_free;
    3d56:	6193      	str	r3, [r2, #24]
            if( hdr->next_free != NULL )
    3d58:	69a3      	ldr	r3, [r4, #24]
    3d5a:	2b00      	cmp	r3, #0
    3d5c:	d0e8      	beq.n	3d30 <buffer_alloc_free+0xd0>
                hdr->next_free->prev_free = hdr->prev_free;
    3d5e:	6962      	ldr	r2, [r4, #20]
    3d60:	615a      	str	r2, [r3, #20]
    3d62:	e7e5      	b.n	3d30 <buffer_alloc_free+0xd0>
                heap.first_free = hdr->next_free;
    3d64:	60f3      	str	r3, [r6, #12]
    3d66:	e7f7      	b.n	3d58 <buffer_alloc_free+0xf8>
            heap.first_free = hdr;
    3d68:	60f4      	str	r4, [r6, #12]
    3d6a:	e7e7      	b.n	3d3c <buffer_alloc_free+0xdc>
        hdr->next_free = heap.first_free;
    3d6c:	68f3      	ldr	r3, [r6, #12]
    3d6e:	f845 3c08 	str.w	r3, [r5, #-8]
        if( heap.first_free != NULL )
    3d72:	b103      	cbz	r3, 3d76 <buffer_alloc_free+0x116>
            heap.first_free->prev_free = hdr;
    3d74:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
    3d76:	60f4      	str	r4, [r6, #12]
    3d78:	e7bc      	b.n	3cf4 <buffer_alloc_free+0x94>
}
    3d7a:	bd70      	pop	{r4, r5, r6, pc}
    3d7c:	20001ba0 	.word	0x20001ba0
    3d80:	2000007c 	.word	0x2000007c

00003d84 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    3d84:	b538      	push	{r3, r4, r5, lr}
    3d86:	460c      	mov	r4, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    3d88:	2214      	movs	r2, #20
    3d8a:	2100      	movs	r1, #0
{
    3d8c:	4605      	mov	r5, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    3d8e:	4813      	ldr	r0, [pc, #76]	; (3ddc <mbedtls_memory_buffer_alloc_init+0x58>)
    3d90:	f001 ff82 	bl	5c98 <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    3d94:	4912      	ldr	r1, [pc, #72]	; (3de0 <mbedtls_memory_buffer_alloc_init+0x5c>)
    3d96:	4813      	ldr	r0, [pc, #76]	; (3de4 <mbedtls_memory_buffer_alloc_init+0x60>)
    3d98:	f000 f834 	bl	3e04 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3d9c:	2c23      	cmp	r4, #35	; 0x23
    3d9e:	d91c      	bls.n	3dda <mbedtls_memory_buffer_alloc_init+0x56>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3da0:	f015 0303 	ands.w	r3, r5, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    3da4:	bf1f      	itttt	ne
    3da6:	3c04      	subne	r4, #4
    3da8:	18e4      	addne	r4, r4, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3daa:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    3dae:	18ed      	addne	r5, r5, r3
    }

    memset( buf, 0, len );
    3db0:	4622      	mov	r2, r4
    3db2:	2100      	movs	r1, #0
    3db4:	4628      	mov	r0, r5
    3db6:	f001 ff6f 	bl	5c98 <memset>

    heap.buf = buf;
    3dba:	4b08      	ldr	r3, [pc, #32]	; (3ddc <mbedtls_memory_buffer_alloc_init+0x58>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
    3dbc:	490a      	ldr	r1, [pc, #40]	; (3de8 <mbedtls_memory_buffer_alloc_init+0x64>)
    heap.len = len;
    3dbe:	e9c3 5400 	strd	r5, r4, [r3]
    heap.first->size = len - sizeof( memory_header );
    3dc2:	3c20      	subs	r4, #32
    heap.first = (memory_header *)buf;
    3dc4:	609d      	str	r5, [r3, #8]
    heap.first->size = len - sizeof( memory_header );
    3dc6:	606c      	str	r4, [r5, #4]
    heap.first->magic1 = MAGIC1;
    3dc8:	689a      	ldr	r2, [r3, #8]
    3dca:	6011      	str	r1, [r2, #0]
    heap.first->magic2 = MAGIC2;
    3dcc:	689a      	ldr	r2, [r3, #8]
    3dce:	f1a1 2110 	sub.w	r1, r1, #268439552	; 0x10001000
    3dd2:	f1a1 11ef 	sub.w	r1, r1, #15663343	; 0xef00ef
    3dd6:	61d1      	str	r1, [r2, #28]
    heap.first_free = heap.first;
    3dd8:	60da      	str	r2, [r3, #12]
}
    3dda:	bd38      	pop	{r3, r4, r5, pc}
    3ddc:	20001ba0 	.word	0x20001ba0
    3de0:	00003c61 	.word	0x00003c61
    3de4:	00003b4d 	.word	0x00003b4d
    3de8:	ff00aa55 	.word	0xff00aa55

00003dec <mbedtls_calloc>:
void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
    3dec:	4b01      	ldr	r3, [pc, #4]	; (3df4 <mbedtls_calloc+0x8>)
    3dee:	681b      	ldr	r3, [r3, #0]
    3df0:	4718      	bx	r3
    3df2:	bf00      	nop
    3df4:	20000084 	.word	0x20000084

00003df8 <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
    3df8:	4b01      	ldr	r3, [pc, #4]	; (3e00 <mbedtls_free+0x8>)
    3dfa:	681b      	ldr	r3, [r3, #0]
    3dfc:	4718      	bx	r3
    3dfe:	bf00      	nop
    3e00:	20000080 	.word	0x20000080

00003e04 <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    3e04:	4b02      	ldr	r3, [pc, #8]	; (3e10 <mbedtls_platform_set_calloc_free+0xc>)
    3e06:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    3e08:	4b02      	ldr	r3, [pc, #8]	; (3e14 <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
    3e0a:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
    3e0c:	6019      	str	r1, [r3, #0]
}
    3e0e:	4770      	bx	lr
    3e10:	20000084 	.word	0x20000084
    3e14:	20000080 	.word	0x20000080

00003e18 <rsa_check_context.constprop.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    3e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3e1a:	f100 0608 	add.w	r6, r0, #8
    3e1e:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    3e20:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3e22:	4630      	mov	r0, r6
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    3e24:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3e26:	f002 fc9c 	bl	6762 <mbedtls_mpi_size>
    3e2a:	4287      	cmp	r7, r0
    3e2c:	d14b      	bne.n	3ec6 <rsa_check_context.constprop.0+0xae>
    3e2e:	6863      	ldr	r3, [r4, #4]
    3e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3e34:	d847      	bhi.n	3ec6 <rsa_check_context.constprop.0+0xae>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    3e36:	2100      	movs	r1, #0
    3e38:	4630      	mov	r0, r6
    3e3a:	f002 fd8a 	bl	6952 <mbedtls_mpi_cmp_int>
    3e3e:	2800      	cmp	r0, #0
    3e40:	dd41      	ble.n	3ec6 <rsa_check_context.constprop.0+0xae>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    3e42:	2100      	movs	r1, #0
    3e44:	4630      	mov	r0, r6
    3e46:	f002 fc78 	bl	673a <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    3e4a:	b3e0      	cbz	r0, 3ec6 <rsa_check_context.constprop.0+0xae>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    3e4c:	b945      	cbnz	r5, 3e60 <rsa_check_context.constprop.0+0x48>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    3e4e:	4629      	mov	r1, r5
    3e50:	f104 0014 	add.w	r0, r4, #20

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    3e54:	f002 fd7d 	bl	6952 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3e58:	2800      	cmp	r0, #0
    3e5a:	dd34      	ble.n	3ec6 <rsa_check_context.constprop.0+0xae>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
    3e5c:	2000      	movs	r0, #0
}
    3e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    3e60:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    3e64:	2100      	movs	r1, #0
    3e66:	4628      	mov	r0, r5
    3e68:	f002 fd73 	bl	6952 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3e6c:	2800      	cmp	r0, #0
    3e6e:	dd2a      	ble.n	3ec6 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    3e70:	2100      	movs	r1, #0
    3e72:	4628      	mov	r0, r5
    3e74:	f002 fc61 	bl	673a <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    3e78:	b328      	cbz	r0, 3ec6 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    3e7a:	f104 0538 	add.w	r5, r4, #56	; 0x38
    3e7e:	2100      	movs	r1, #0
    3e80:	4628      	mov	r0, r5
    3e82:	f002 fd66 	bl	6952 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    3e86:	2800      	cmp	r0, #0
    3e88:	dd1d      	ble.n	3ec6 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    3e8a:	2100      	movs	r1, #0
    3e8c:	4628      	mov	r0, r5
    3e8e:	f002 fc54 	bl	673a <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    3e92:	b1c0      	cbz	r0, 3ec6 <rsa_check_context.constprop.0+0xae>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    3e94:	2100      	movs	r1, #0
    3e96:	f104 0014 	add.w	r0, r4, #20
    3e9a:	f002 fd5a 	bl	6952 <mbedtls_mpi_cmp_int>
    3e9e:	2800      	cmp	r0, #0
    3ea0:	dd11      	ble.n	3ec6 <rsa_check_context.constprop.0+0xae>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    3ea2:	2100      	movs	r1, #0
    3ea4:	f104 0044 	add.w	r0, r4, #68	; 0x44
    3ea8:	f002 fd53 	bl	6952 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3eac:	2800      	cmp	r0, #0
    3eae:	dd0a      	ble.n	3ec6 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    3eb0:	2100      	movs	r1, #0
    3eb2:	f104 0050 	add.w	r0, r4, #80	; 0x50
    3eb6:	f002 fd4c 	bl	6952 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    3eba:	2800      	cmp	r0, #0
    3ebc:	dd03      	ble.n	3ec6 <rsa_check_context.constprop.0+0xae>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    3ebe:	2100      	movs	r1, #0
    3ec0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    3ec4:	e7c6      	b.n	3e54 <rsa_check_context.constprop.0+0x3c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3ec6:	4801      	ldr	r0, [pc, #4]	; (3ecc <rsa_check_context.constprop.0+0xb4>)
    3ec8:	e7c9      	b.n	3e5e <rsa_check_context.constprop.0+0x46>
    3eca:	bf00      	nop
    3ecc:	ffffbf80 	.word	0xffffbf80

00003ed0 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    3ed0:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    3ed2:	2100      	movs	r1, #0
{
    3ed4:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    3ed6:	f7ff ff9f 	bl	3e18 <rsa_check_context.constprop.0>
    3eda:	4605      	mov	r5, r0
    3edc:	b110      	cbz	r0, 3ee4 <mbedtls_rsa_check_pubkey+0x14>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    3ede:	4d0e      	ldr	r5, [pc, #56]	; (3f18 <mbedtls_rsa_check_pubkey+0x48>)
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
    3ee0:	4628      	mov	r0, r5
    3ee2:	bd70      	pop	{r4, r5, r6, pc}
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    3ee4:	f104 0608 	add.w	r6, r4, #8
    3ee8:	4630      	mov	r0, r6
    3eea:	f002 fc36 	bl	675a <mbedtls_mpi_bitlen>
    3eee:	287f      	cmp	r0, #127	; 0x7f
    3ef0:	d9f5      	bls.n	3ede <mbedtls_rsa_check_pubkey+0xe>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    3ef2:	3414      	adds	r4, #20
    3ef4:	4629      	mov	r1, r5
    3ef6:	4620      	mov	r0, r4
    3ef8:	f002 fc1f 	bl	673a <mbedtls_mpi_get_bit>
    3efc:	2800      	cmp	r0, #0
    3efe:	d0ee      	beq.n	3ede <mbedtls_rsa_check_pubkey+0xe>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    3f00:	4620      	mov	r0, r4
    3f02:	f002 fc2a 	bl	675a <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    3f06:	2801      	cmp	r0, #1
    3f08:	d9e9      	bls.n	3ede <mbedtls_rsa_check_pubkey+0xe>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    3f0a:	4631      	mov	r1, r6
    3f0c:	4620      	mov	r0, r4
    3f0e:	f002 fcdf 	bl	68d0 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    3f12:	2800      	cmp	r0, #0
    3f14:	dbe4      	blt.n	3ee0 <mbedtls_rsa_check_pubkey+0x10>
    3f16:	e7e2      	b.n	3ede <mbedtls_rsa_check_pubkey+0xe>
    3f18:	ffffbe00 	.word	0xffffbe00

00003f1c <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    3f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f1e:	460c      	mov	r4, r1
    3f20:	b087      	sub	sp, #28
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    3f22:	2100      	movs	r1, #0
{
    3f24:	4605      	mov	r5, r0
    3f26:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    3f28:	f7ff ff76 	bl	3e18 <rsa_check_context.constprop.0>
    3f2c:	2800      	cmp	r0, #0
    3f2e:	d139      	bne.n	3fa4 <mbedtls_rsa_public+0x88>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    3f30:	a803      	add	r0, sp, #12
    3f32:	f002 fb5a 	bl	65ea <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    3f36:	4621      	mov	r1, r4
    3f38:	686a      	ldr	r2, [r5, #4]
    3f3a:	a803      	add	r0, sp, #12
    3f3c:	f002 fc17 	bl	676e <mbedtls_mpi_read_binary>
    3f40:	4604      	mov	r4, r0
    3f42:	b118      	cbz	r0, 3f4c <mbedtls_rsa_public+0x30>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    3f44:	a803      	add	r0, sp, #12
    3f46:	f002 fb56 	bl	65f6 <mbedtls_mpi_free>

    if( ret != 0 )
    3f4a:	e00c      	b.n	3f66 <mbedtls_rsa_public+0x4a>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    3f4c:	f105 0408 	add.w	r4, r5, #8
    3f50:	4621      	mov	r1, r4
    3f52:	a803      	add	r0, sp, #12
    3f54:	f002 fcbc 	bl	68d0 <mbedtls_mpi_cmp_mpi>
    3f58:	2800      	cmp	r0, #0
    3f5a:	db07      	blt.n	3f6c <mbedtls_rsa_public+0x50>
    mbedtls_mpi_free( &T );
    3f5c:	a803      	add	r0, sp, #12
    3f5e:	f002 fb4a 	bl	65f6 <mbedtls_mpi_free>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    3f62:	f06f 0403 	mvn.w	r4, #3
        ( *mbedtls_test_hook_error_add )( high, low, file, line );
#endif
    (void)file;
    (void)line;

    return( high + low );
    3f66:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
        return( MBEDTLS_ERROR_ADD( MBEDTLS_ERR_RSA_PUBLIC_FAILED, ret ) );
    3f6a:	e018      	b.n	3f9e <mbedtls_rsa_public+0x82>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    3f6c:	f105 0368 	add.w	r3, r5, #104	; 0x68
    3f70:	a903      	add	r1, sp, #12
    olen = ctx->len;
    3f72:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    3f74:	4608      	mov	r0, r1
    3f76:	9300      	str	r3, [sp, #0]
    3f78:	f105 0214 	add.w	r2, r5, #20
    3f7c:	4623      	mov	r3, r4
    3f7e:	f002 ffc2 	bl	6f06 <mbedtls_mpi_exp_mod>
    3f82:	4604      	mov	r4, r0
    3f84:	2800      	cmp	r0, #0
    3f86:	d1dd      	bne.n	3f44 <mbedtls_rsa_public+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    3f88:	463a      	mov	r2, r7
    3f8a:	4631      	mov	r1, r6
    3f8c:	a803      	add	r0, sp, #12
    3f8e:	f002 fc04 	bl	679a <mbedtls_mpi_write_binary>
    3f92:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
    3f94:	a803      	add	r0, sp, #12
    3f96:	f002 fb2e 	bl	65f6 <mbedtls_mpi_free>
    if( ret != 0 )
    3f9a:	2c00      	cmp	r4, #0
    3f9c:	d1e3      	bne.n	3f66 <mbedtls_rsa_public+0x4a>

    return( 0 );
}
    3f9e:	4620      	mov	r0, r4
    3fa0:	b007      	add	sp, #28
    3fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3fa4:	4c00      	ldr	r4, [pc, #0]	; (3fa8 <mbedtls_rsa_public+0x8c>)
    3fa6:	e7fa      	b.n	3f9e <mbedtls_rsa_public+0x82>
    3fa8:	ffffbf80 	.word	0xffffbf80

00003fac <mbedtls_sha256_starts>:
 * SHA-256 context setup
 */
int mbedtls_sha256_starts( mbedtls_sha256_context *ctx, int is224 )
{
#if defined(MBEDTLS_SHA224_C)
    if( is224 != 0 && is224 != 1 )
    3fac:	2901      	cmp	r1, #1
{
    3fae:	4603      	mov	r3, r0
    3fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( is224 != 0 && is224 != 1 )
    3fb4:	d843      	bhi.n	403e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3e>
#endif

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    if( is224 == 0 )
    3fb6:	4a23      	ldr	r2, [pc, #140]	; (4044 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44>)
    3fb8:	2900      	cmp	r1, #0
    3fba:	bf18      	it	ne
    3fbc:	4690      	movne	r8, r2
    3fbe:	4a22      	ldr	r2, [pc, #136]	; (4048 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x48>)
    3fc0:	4f22      	ldr	r7, [pc, #136]	; (404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>)
    3fc2:	bf18      	it	ne
    3fc4:	4696      	movne	lr, r2
    3fc6:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    3fca:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    3fce:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    3fd2:	bf18      	it	ne
    3fd4:	4694      	movne	ip, r2
    3fd6:	4a1e      	ldr	r2, [pc, #120]	; (4050 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x50>)
    3fd8:	481e      	ldr	r0, [pc, #120]	; (4054 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x54>)
    3fda:	bf18      	it	ne
    3fdc:	4617      	movne	r7, r2
    3fde:	4a1e      	ldr	r2, [pc, #120]	; (4058 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58>)
    3fe0:	4e1e      	ldr	r6, [pc, #120]	; (405c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c>)
    3fe2:	bf18      	it	ne
    3fe4:	4616      	movne	r6, r2
    3fe6:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    3fea:	bf08      	it	eq
    3fec:	4680      	moveq	r8, r0
    3fee:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    3ff2:	481b      	ldr	r0, [pc, #108]	; (4060 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60>)
    3ff4:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    3ff8:	bf08      	it	eq
    3ffa:	4686      	moveq	lr, r0
    3ffc:	4d19      	ldr	r5, [pc, #100]	; (4064 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x64>)
    3ffe:	481a      	ldr	r0, [pc, #104]	; (4068 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x68>)
    4000:	bf18      	it	ne
    4002:	4615      	movne	r5, r2
    4004:	4a19      	ldr	r2, [pc, #100]	; (406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>)
    4006:	bf08      	it	eq
    4008:	4684      	moveq	ip, r0
    400a:	4c19      	ldr	r4, [pc, #100]	; (4070 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x70>)
    400c:	4819      	ldr	r0, [pc, #100]	; (4074 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x74>)
    400e:	bf18      	it	ne
    4010:	4614      	movne	r4, r2
    4012:	f1a2 6211 	sub.w	r2, r2, #152043520	; 0x9100000
    4016:	f5a2 220c 	sub.w	r2, r2, #573440	; 0x8c000
    401a:	f2a2 228e 	subw	r2, r2, #654	; 0x28e
    401e:	bf18      	it	ne
    4020:	4602      	movne	r2, r0
    ctx->total[0] = 0;
    4022:	2000      	movs	r0, #0
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
    4024:	e9c3 8e02 	strd	r8, lr, [r3, #8]
    ctx->total[1] = 0;
    4028:	e9c3 0000 	strd	r0, r0, [r3]
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
    402c:	e9c3 c704 	strd	ip, r7, [r3, #16]
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
    4030:	e9c3 6506 	strd	r6, r5, [r3, #24]
        ctx->state[6] = 0x1F83D9AB;
        ctx->state[7] = 0x5BE0CD19;
    4034:	e9c3 4208 	strd	r4, r2, [r3, #32]
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
#endif
    }

    ctx->is224 = is224;
    4038:	6699      	str	r1, [r3, #104]	; 0x68

    return( 0 );
}
    403a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return MBEDTLS_ERR_SHA256_BAD_INPUT_DATA;
    403e:	f06f 0073 	mvn.w	r0, #115	; 0x73
    4042:	e7fa      	b.n	403a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a>
    4044:	c1059ed8 	.word	0xc1059ed8
    4048:	367cd507 	.word	0x367cd507
    404c:	a54ff53a 	.word	0xa54ff53a
    4050:	f70e5939 	.word	0xf70e5939
    4054:	6a09e667 	.word	0x6a09e667
    4058:	ffc00b31 	.word	0xffc00b31
    405c:	510e527f 	.word	0x510e527f
    4060:	bb67ae85 	.word	0xbb67ae85
    4064:	9b05688c 	.word	0x9b05688c
    4068:	3c6ef372 	.word	0x3c6ef372
    406c:	64f98fa7 	.word	0x64f98fa7
    4070:	1f83d9ab 	.word	0x1f83d9ab
    4074:	befa4fa4 	.word	0xbefa4fa4

00004078 <mbedtls_internal_sha256_process>:
 */
static
#endif
int mbedtls_internal_sha256_process_c( mbedtls_sha256_context *ctx,
                                const unsigned char data[SHA256_BLOCK_SIZE] )
{
    4078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    407c:	b0d1      	sub	sp, #324	; 0x144
    407e:	f50d 7b8e 	add.w	fp, sp, #284	; 0x11c
    4082:	465a      	mov	r2, fp
    4084:	1d03      	adds	r3, r0, #4
    4086:	9301      	str	r3, [sp, #4]
    4088:	f100 0324 	add.w	r3, r0, #36	; 0x24
    408c:	9303      	str	r3, [sp, #12]
    408e:	9b01      	ldr	r3, [sp, #4]
    } local;

    unsigned int i;

    for( i = 0; i < 8; i++ )
        local.A[i] = ctx->state[i];
    4090:	f853 0f04 	ldr.w	r0, [r3, #4]!
    4094:	f842 0f04 	str.w	r0, [r2, #4]!
    for( i = 0; i < 8; i++ )
    4098:	9803      	ldr	r0, [sp, #12]
    409a:	4298      	cmp	r0, r3
    409c:	d1f8      	bne.n	4090 <mbedtls_internal_sha256_process+0x18>
    409e:	e9dd 0748 	ldrd	r0, r7, [sp, #288]	; 0x120

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    40a2:	f04f 0900 	mov.w	r9, #0
    40a6:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    40a8:	ad4c      	add	r5, sp, #304	; 0x130
    40aa:	9302      	str	r3, [sp, #8]
    40ac:	e9dd e34a 	ldrd	lr, r3, [sp, #296]	; 0x128
    40b0:	9304      	str	r3, [sp, #16]
    40b2:	4b42      	ldr	r3, [pc, #264]	; (41bc <mbedtls_internal_sha256_process+0x144>)
    40b4:	aa06      	add	r2, sp, #24
    40b6:	9305      	str	r3, [sp, #20]
    40b8:	e895 1120 	ldmia.w	r5, {r5, r8, ip}
    {
        if( i < 16 )
    40bc:	f1b9 0f0f 	cmp.w	r9, #15
    40c0:	d863      	bhi.n	418a <mbedtls_internal_sha256_process+0x112>
            local.W[i] = MBEDTLS_GET_UINT32_BE( data, 4 * i );
    40c2:	784c      	ldrb	r4, [r1, #1]
    40c4:	780b      	ldrb	r3, [r1, #0]
    40c6:	0424      	lsls	r4, r4, #16
    40c8:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    40cc:	78cb      	ldrb	r3, [r1, #3]
    40ce:	4323      	orrs	r3, r4
    40d0:	788c      	ldrb	r4, [r1, #2]
    40d2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
        else
            R( i );

        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    40d6:	ea4f 2af5 	mov.w	sl, r5, ror #11
    40da:	ea8c 0408 	eor.w	r4, ip, r8
    40de:	9e05      	ldr	r6, [sp, #20]
    40e0:	ea8a 1ab5 	eor.w	sl, sl, r5, ror #6
    40e4:	402c      	ands	r4, r5
    40e6:	ea8a 6a75 	eor.w	sl, sl, r5, ror #25
    40ea:	ea84 040c 	eor.w	r4, r4, ip
    40ee:	4454      	add	r4, sl
    40f0:	f856 ab04 	ldr.w	sl, [r6], #4
    40f4:	6093      	str	r3, [r2, #8]
    40f6:	4454      	add	r4, sl
    40f8:	4423      	add	r3, r4
    40fa:	9c02      	ldr	r4, [sp, #8]
    40fc:	ea4f 3a70 	mov.w	sl, r0, ror #13
    4100:	4423      	add	r3, r4
    4102:	ea40 0407 	orr.w	r4, r0, r7
    4106:	9605      	str	r6, [sp, #20]
    4108:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
    410c:	ea04 040e 	and.w	r4, r4, lr
    4110:	ea00 0607 	and.w	r6, r0, r7
    4114:	ea8a 5ab0 	eor.w	sl, sl, r0, ror #22
    4118:	4334      	orrs	r4, r6
    411a:	4454      	add	r4, sl
    for( i = 0; i < 64; i++ )
    411c:	f109 0901 	add.w	r9, r9, #1
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    4120:	f8dd a010 	ldr.w	sl, [sp, #16]
    for( i = 0; i < 64; i++ )
    4124:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    4128:	449a      	add	sl, r3
    for( i = 0; i < 64; i++ )
    412a:	f102 0204 	add.w	r2, r2, #4
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    412e:	4423      	add	r3, r4
    for( i = 0; i < 64; i++ )
    4130:	f101 0104 	add.w	r1, r1, #4
    4134:	f8cd c008 	str.w	ip, [sp, #8]
    4138:	f8cd e010 	str.w	lr, [sp, #16]
    413c:	d11e      	bne.n	417c <mbedtls_internal_sha256_process+0x104>
    413e:	e9cd 3406 	strd	r3, r4, [sp, #24]
    4142:	e9cd 8c4e 	strd	r8, ip, [sp, #312]	; 0x138
    4146:	e9cd a54c 	strd	sl, r5, [sp, #304]	; 0x130
    414a:	e9cd 7e4a 	strd	r7, lr, [sp, #296]	; 0x128
    414e:	e9cd 3048 	strd	r3, r0, [sp, #288]	; 0x120
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += local.A[i];
    4152:	9a01      	ldr	r2, [sp, #4]
    4154:	f852 3f04 	ldr.w	r3, [r2, #4]!
    4158:	9201      	str	r2, [sp, #4]
    415a:	f85b 2f04 	ldr.w	r2, [fp, #4]!
    415e:	4413      	add	r3, r2
    4160:	9a01      	ldr	r2, [sp, #4]
    4162:	6013      	str	r3, [r2, #0]
    for( i = 0; i < 8; i++ )
    4164:	9b03      	ldr	r3, [sp, #12]
    4166:	4293      	cmp	r3, r2
    4168:	d1f3      	bne.n	4152 <mbedtls_internal_sha256_process+0xda>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    416a:	a806      	add	r0, sp, #24
    416c:	f44f 7194 	mov.w	r1, #296	; 0x128
    4170:	f000 fede 	bl	4f30 <mbedtls_platform_zeroize>

    return( 0 );
}
    4174:	2000      	movs	r0, #0
    4176:	b051      	add	sp, #324	; 0x144
    4178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    417c:	46be      	mov	lr, r7
    417e:	46c4      	mov	ip, r8
    4180:	4607      	mov	r7, r0
    4182:	46a8      	mov	r8, r5
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    4184:	4618      	mov	r0, r3
    4186:	4655      	mov	r5, sl
    4188:	e798      	b.n	40bc <mbedtls_internal_sha256_process+0x44>
            R( i );
    418a:	6813      	ldr	r3, [r2, #0]
    418c:	f852 4c38 	ldr.w	r4, [r2, #-56]
    4190:	ea4f 4af3 	mov.w	sl, r3, ror #19
    4194:	ea8a 4a73 	eor.w	sl, sl, r3, ror #17
    4198:	ea8a 2a93 	eor.w	sl, sl, r3, lsr #10
    419c:	f852 3c14 	ldr.w	r3, [r2, #-20]
    41a0:	f852 6c34 	ldr.w	r6, [r2, #-52]
    41a4:	4423      	add	r3, r4
    41a6:	f852 4c34 	ldr.w	r4, [r2, #-52]
    41aa:	4453      	add	r3, sl
    41ac:	ea4f 44b4 	mov.w	r4, r4, ror #18
    41b0:	ea84 14f6 	eor.w	r4, r4, r6, ror #7
    41b4:	ea84 04d6 	eor.w	r4, r4, r6, lsr #3
    41b8:	4423      	add	r3, r4
    41ba:	e78c      	b.n	40d6 <mbedtls_internal_sha256_process+0x5e>
    41bc:	00008820 	.word	0x00008820

000041c0 <SystemInit>:
         || defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul))) & 0x00000FFFul;
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul))) & 0x00000FFFul;
    41c0:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    41c4:	b508      	push	{r3, lr}
    41c6:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    41ca:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    41ce:	f3bf 8f4f 	dsb	sy
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul))) & 0x00000FFFul;
    41d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
                }
            }
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    41d6:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    41d8:	bf01      	itttt	eq
    41da:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    41de:	2200      	moveq	r2, #0
    41e0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    41e4:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }
        
        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    41e8:	f003 fc96 	bl	7b18 <nrf91_errata_14>
    41ec:	b128      	cbz	r0, 41fa <SystemInit+0x3a>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    41ee:	2201      	movs	r2, #1
    41f0:	4b4e      	ldr	r3, [pc, #312]	; (432c <SystemInit+0x16c>)
    41f2:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    41f6:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
         || defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul))) & 0x00000FFFul;
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul))) & 0x00000FFFul;
    41fa:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    41fe:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4202:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
    4206:	f3bf 8f4f 	dsb	sy
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul))) & 0x00000FFFul;
    420a:	f3c3 030b 	ubfx	r3, r3, #0, #12
                }
            }
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    420e:	2b09      	cmp	r3, #9
    4210:	d105      	bne.n	421e <SystemInit+0x5e>
            {
                switch(var2)
    4212:	2a01      	cmp	r2, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    4214:	bf1e      	ittt	ne
    4216:	2201      	movne	r2, #1
    4218:	4b44      	ldrne	r3, [pc, #272]	; (432c <SystemInit+0x16c>)
    421a:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    421e:	f003 fc7b 	bl	7b18 <nrf91_errata_14>
    4222:	b118      	cbz	r0, 422c <SystemInit+0x6c>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    4224:	220e      	movs	r2, #14
    4226:	4b42      	ldr	r3, [pc, #264]	; (4330 <SystemInit+0x170>)
    4228:	f8c3 2ee4 	str.w	r2, [r3, #3812]	; 0xee4
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul))) & 0x00000FFFul;
    422c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    4230:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4234:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
    4238:	f3bf 8f4f 	dsb	sy
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul))) & 0x00000FFFul;
    423c:	f3c3 030b 	ubfx	r3, r3, #0, #12
            if (var1 == 0x09)
    4240:	2b09      	cmp	r3, #9
    4242:	d106      	bne.n	4252 <SystemInit+0x92>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    4244:	2200      	movs	r2, #0
    4246:	4b39      	ldr	r3, [pc, #228]	; (432c <SystemInit+0x16c>)
    4248:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    424c:	2201      	movs	r2, #1
    424e:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
{
    4252:	2200      	movs	r2, #0
    4254:	00d3      	lsls	r3, r2, #3
        #endif

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
            
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    4256:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }
    #endif
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
    425a:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    425e:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    4262:	3101      	adds	r1, #1
    4264:	d008      	beq.n	4278 <SystemInit+0xb8>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    4266:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    426a:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    426c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    4270:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    4274:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    4276:	d1ed      	bne.n	4254 <SystemInit+0x94>
            uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    4278:	4b2e      	ldr	r3, [pc, #184]	; (4334 <SystemInit+0x174>)
    427a:	69da      	ldr	r2, [r3, #28]
    427c:	f3bf 8f4f 	dsb	sy
            if ((HFXOSRC_readout & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    4280:	07d1      	lsls	r1, r2, #31
    4282:	d545      	bpl.n	4310 <SystemInit+0x150>
    4284:	f3bf 8f4f 	dsb	sy
                while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4288:	4b2b      	ldr	r3, [pc, #172]	; (4338 <SystemInit+0x178>)
    428a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    428e:	2a01      	cmp	r2, #1
    4290:	d1fb      	bne.n	428a <SystemInit+0xca>
                NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    4292:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4296:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    429a:	2a01      	cmp	r2, #1
    429c:	d1fb      	bne.n	4296 <SystemInit+0xd6>
            uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    429e:	4b25      	ldr	r3, [pc, #148]	; (4334 <SystemInit+0x174>)
    42a0:	69da      	ldr	r2, [r3, #28]
    42a2:	f3bf 8f4f 	dsb	sy
            if ((HFXOSRC_readout & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    42a6:	07d2      	lsls	r2, r2, #31
    42a8:	d50a      	bpl.n	42c0 <SystemInit+0x100>
                    uicr_erased_value = NRF_UICR_S->HFXOSRC;
    42aa:	69da      	ldr	r2, [r3, #28]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    42ac:	f022 0201 	bic.w	r2, r2, #1
                    NRF_UICR_S->HFXOSRC = uicr_new_value;
    42b0:	61da      	str	r2, [r3, #28]
    42b2:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    42b6:	4a20      	ldr	r2, [pc, #128]	; (4338 <SystemInit+0x178>)
    42b8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    42bc:	2b01      	cmp	r3, #1
    42be:	d1fb      	bne.n	42b8 <SystemInit+0xf8>
        uint32_t val = *word;
    42c0:	4a1c      	ldr	r2, [pc, #112]	; (4334 <SystemInit+0x174>)
    42c2:	6a13      	ldr	r3, [r2, #32]
    42c4:	f3bf 8f4f 	dsb	sy
            if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    42c8:	3301      	adds	r3, #1
    42ca:	d10c      	bne.n	42e6 <SystemInit+0x126>
                    uicr_erased_value = NRF_UICR_S->HFXOCNT;
    42cc:	6a13      	ldr	r3, [r2, #32]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    42ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    42d2:	f043 0320 	orr.w	r3, r3, #32
                    NRF_UICR_S->HFXOCNT = uicr_new_value;
    42d6:	6213      	str	r3, [r2, #32]
    42d8:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    42dc:	4a16      	ldr	r2, [pc, #88]	; (4338 <SystemInit+0x178>)
    42de:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    42e2:	2b01      	cmp	r3, #1
    42e4:	d1fb      	bne.n	42de <SystemInit+0x11e>
                NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    42e6:	2200      	movs	r2, #0
    42e8:	4b13      	ldr	r3, [pc, #76]	; (4338 <SystemInit+0x178>)
    42ea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    42ee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    42f2:	2a01      	cmp	r2, #1
    42f4:	d1fb      	bne.n	42ee <SystemInit+0x12e>
    42f6:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    42fa:	4910      	ldr	r1, [pc, #64]	; (433c <SystemInit+0x17c>)
    42fc:	4b10      	ldr	r3, [pc, #64]	; (4340 <SystemInit+0x180>)
    42fe:	68ca      	ldr	r2, [r1, #12]
    4300:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4304:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4306:	60cb      	str	r3, [r1, #12]
    4308:	f3bf 8f4f 	dsb	sy
    __NOP();
    430c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    430e:	e7fd      	b.n	430c <SystemInit+0x14c>
        uint32_t val = *word;
    4310:	6a1b      	ldr	r3, [r3, #32]
    4312:	f3bf 8f4f 	dsb	sy
            if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    4316:	3301      	adds	r3, #1
    4318:	d0b4      	beq.n	4284 <SystemInit+0xc4>
        SCB->NSACR |= (3UL << 10);
    431a:	4a08      	ldr	r2, [pc, #32]	; (433c <SystemInit+0x17c>)
    431c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    4320:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    4324:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
    4328:	bd08      	pop	{r3, pc}
    432a:	bf00      	nop
    432c:	50004000 	.word	0x50004000
    4330:	5003a000 	.word	0x5003a000
    4334:	00ff8000 	.word	0x00ff8000
    4338:	50039000 	.word	0x50039000
    433c:	e000ed00 	.word	0xe000ed00
    4340:	05fa0004 	.word	0x05fa0004

00004344 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4344:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4346:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4348:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    434a:	fab2 f382 	clz	r3, r2
    434e:	f1c3 031f 	rsb	r3, r3, #31
    4352:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4354:	fa05 f403 	lsl.w	r4, r5, r3
    4358:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    435c:	e8d0 6fef 	ldaex	r6, [r0]
    4360:	4296      	cmp	r6, r2
    4362:	d104      	bne.n	436e <nrfx_flag32_alloc+0x2a>
    4364:	e8c0 4fec 	stlex	ip, r4, [r0]
    4368:	f1bc 0f00 	cmp.w	ip, #0
    436c:	d1f6      	bne.n	435c <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    436e:	d1eb      	bne.n	4348 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    4370:	4801      	ldr	r0, [pc, #4]	; (4378 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    4372:	700b      	strb	r3, [r1, #0]
}
    4374:	bd70      	pop	{r4, r5, r6, pc}
    4376:	bf00      	nop
    4378:	0bad0000 	.word	0x0bad0000

0000437c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    437c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    437e:	6803      	ldr	r3, [r0, #0]
    4380:	40cb      	lsrs	r3, r1
    4382:	07db      	lsls	r3, r3, #31
    4384:	d410      	bmi.n	43a8 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    4386:	2301      	movs	r3, #1
    4388:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    438a:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    438c:	ea43 0102 	orr.w	r1, r3, r2
    4390:	e8d0 4fef 	ldaex	r4, [r0]
    4394:	4294      	cmp	r4, r2
    4396:	d104      	bne.n	43a2 <nrfx_flag32_free+0x26>
    4398:	e8c0 1fec 	stlex	ip, r1, [r0]
    439c:	f1bc 0f00 	cmp.w	ip, #0
    43a0:	d1f6      	bne.n	4390 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    43a2:	d1f2      	bne.n	438a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    43a4:	4801      	ldr	r0, [pc, #4]	; (43ac <nrfx_flag32_free+0x30>)
}
    43a6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    43a8:	4801      	ldr	r0, [pc, #4]	; (43b0 <nrfx_flag32_free+0x34>)
    43aa:	e7fc      	b.n	43a6 <nrfx_flag32_free+0x2a>
    43ac:	0bad0000 	.word	0x0bad0000
    43b0:	0bad0004 	.word	0x0bad0004

000043b4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    43b4:	4b04      	ldr	r3, [pc, #16]	; (43c8 <nrfx_clock_init+0x14>)
    43b6:	791a      	ldrb	r2, [r3, #4]
    43b8:	b922      	cbnz	r2, 43c4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    43ba:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    43bc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    43be:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    43c0:	4802      	ldr	r0, [pc, #8]	; (43cc <nrfx_clock_init+0x18>)
    43c2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    43c4:	4802      	ldr	r0, [pc, #8]	; (43d0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    43c6:	4770      	bx	lr
    43c8:	20001bb4 	.word	0x20001bb4
    43cc:	0bad0000 	.word	0x0bad0000
    43d0:	0bad000c 	.word	0x0bad000c

000043d4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    43d4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    43d8:	b510      	push	{r4, lr}
    43da:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    43de:	b152      	cbz	r2, 43f6 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43e0:	2000      	movs	r0, #0
    43e2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    43e6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    43ea:	2201      	movs	r2, #1
    43ec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    43f0:	4b11      	ldr	r3, [pc, #68]	; (4438 <nrfx_power_clock_irq_handler+0x64>)
    43f2:	681b      	ldr	r3, [r3, #0]
    43f4:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    43f6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    43fa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    43fe:	b18a      	cbz	r2, 4424 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4400:	2200      	movs	r2, #0
    4402:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4406:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    440a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    440e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4412:	f002 0203 	and.w	r2, r2, #3
    4416:	2a01      	cmp	r2, #1
    4418:	f04f 0102 	mov.w	r1, #2
    441c:	d103      	bne.n	4426 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    441e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4422:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4424:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    4426:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    442a:	4b03      	ldr	r3, [pc, #12]	; (4438 <nrfx_power_clock_irq_handler+0x64>)
    442c:	2001      	movs	r0, #1
}
    442e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4432:	681b      	ldr	r3, [r3, #0]
    4434:	4718      	bx	r3
    4436:	bf00      	nop
    4438:	20001bb4 	.word	0x20001bb4

0000443c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    443c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    443e:	4801      	ldr	r0, [pc, #4]	; (4444 <nrfx_dppi_channel_alloc+0x8>)
    4440:	f7ff bf80 	b.w	4344 <nrfx_flag32_alloc>
    4444:	20000088 	.word	0x20000088

00004448 <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4448:	4a06      	ldr	r2, [pc, #24]	; (4464 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    444a:	f000 001f 	and.w	r0, r0, #31
    444e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4452:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    cnf &= ~to_update;
    4456:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    445a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    445e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4462:	4770      	bx	lr
    4464:	50842500 	.word	0x50842500

00004468 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4468:	4b03      	ldr	r3, [pc, #12]	; (4478 <pin_in_use_by_te+0x10>)
    446a:	3008      	adds	r0, #8
    446c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4470:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4474:	4770      	bx	lr
    4476:	bf00      	nop
    4478:	2000008c 	.word	0x2000008c

0000447c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    447c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    447e:	4c0d      	ldr	r4, [pc, #52]	; (44b4 <call_handler+0x38>)
    4480:	f100 0308 	add.w	r3, r0, #8
    4484:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    4488:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    448a:	05da      	lsls	r2, r3, #23
{
    448c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    448e:	d507      	bpl.n	44a0 <call_handler+0x24>
    4490:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4494:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4498:	6852      	ldr	r2, [r2, #4]
    449a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    449e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    44a0:	68a3      	ldr	r3, [r4, #8]
    44a2:	b12b      	cbz	r3, 44b0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    44a4:	4631      	mov	r1, r6
    44a6:	4628      	mov	r0, r5
    44a8:	68e2      	ldr	r2, [r4, #12]
    }
}
    44aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    44ae:	4718      	bx	r3
}
    44b0:	bd70      	pop	{r4, r5, r6, pc}
    44b2:	bf00      	nop
    44b4:	2000008c 	.word	0x2000008c

000044b8 <release_handler>:
{
    44b8:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    44ba:	4a12      	ldr	r2, [pc, #72]	; (4504 <release_handler+0x4c>)
    44bc:	3008      	adds	r0, #8
    44be:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    44c2:	05d9      	lsls	r1, r3, #23
    44c4:	d51b      	bpl.n	44fe <release_handler+0x46>
    44c6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    44ca:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    44ce:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    44d2:	2000      	movs	r0, #0
    44d4:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    44d8:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    44dc:	f413 7f80 	tst.w	r3, #256	; 0x100
    44e0:	d003      	beq.n	44ea <release_handler+0x32>
    44e2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    44e6:	4299      	cmp	r1, r3
    44e8:	d009      	beq.n	44fe <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    44ea:	3001      	adds	r0, #1
    44ec:	2820      	cmp	r0, #32
    44ee:	d1f3      	bne.n	44d8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    44f0:	2300      	movs	r3, #0
    44f2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    44f6:	4804      	ldr	r0, [pc, #16]	; (4508 <release_handler+0x50>)
}
    44f8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    44fa:	f7ff bf3f 	b.w	437c <nrfx_flag32_free>
}
    44fe:	bc10      	pop	{r4}
    4500:	4770      	bx	lr
    4502:	bf00      	nop
    4504:	2000008c 	.word	0x2000008c
    4508:	200000e0 	.word	0x200000e0

0000450c <pin_handler_trigger_uninit>:
{
    450c:	b538      	push	{r3, r4, r5, lr}
    450e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4510:	f7ff ffaa 	bl	4468 <pin_in_use_by_te>
    4514:	4c0b      	ldr	r4, [pc, #44]	; (4544 <pin_handler_trigger_uninit+0x38>)
    4516:	f102 0508 	add.w	r5, r2, #8
    451a:	b160      	cbz	r0, 4536 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    451c:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    451e:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4522:	0b5b      	lsrs	r3, r3, #13
    4524:	009b      	lsls	r3, r3, #2
    4526:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    452a:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    452e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
    4532:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    4536:	4610      	mov	r0, r2
    4538:	f7ff ffbe 	bl	44b8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    453c:	2300      	movs	r3, #0
    453e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4542:	bd38      	pop	{r3, r4, r5, pc}
    4544:	2000008c 	.word	0x2000008c

00004548 <nrfx_gpiote_input_configure>:
{
    4548:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    454c:	4604      	mov	r4, r0
    454e:	461d      	mov	r5, r3
    if (p_input_config)
    4550:	b309      	cbz	r1, 4596 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4552:	4f4e      	ldr	r7, [pc, #312]	; (468c <nrfx_gpiote_input_configure+0x144>)
    4554:	f100 0808 	add.w	r8, r0, #8
    4558:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    455c:	07b3      	lsls	r3, r6, #30
    455e:	d506      	bpl.n	456e <nrfx_gpiote_input_configure+0x26>
    4560:	f7ff ff82 	bl	4468 <pin_in_use_by_te>
    4564:	b118      	cbz	r0, 456e <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    4566:	484a      	ldr	r0, [pc, #296]	; (4690 <nrfx_gpiote_input_configure+0x148>)
}
    4568:	b002      	add	sp, #8
    456a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
    456e:	4849      	ldr	r0, [pc, #292]	; (4694 <nrfx_gpiote_input_configure+0x14c>)
    *p_pin = pin_number & 0x1F;
    4570:	f004 031f 	and.w	r3, r4, #31
    4574:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4578:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    457c:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    457e:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4582:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4586:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    458a:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
    458e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    4592:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
    4596:	b19a      	cbz	r2, 45c0 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4598:	4e3c      	ldr	r6, [pc, #240]	; (468c <nrfx_gpiote_input_configure+0x144>)
    459a:	f104 0708 	add.w	r7, r4, #8
    459e:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    45a2:	7813      	ldrb	r3, [r2, #0]
        if (pin_is_output(pin))
    45a4:	f011 0f02 	tst.w	r1, #2
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    45a8:	6850      	ldr	r0, [r2, #4]
        if (pin_is_output(pin))
    45aa:	d00c      	beq.n	45c6 <nrfx_gpiote_input_configure+0x7e>
            if (use_evt)
    45ac:	2800      	cmp	r0, #0
    45ae:	d1da      	bne.n	4566 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    45b0:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
    45b4:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    45b8:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
    45bc:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    45c0:	bbd5      	cbnz	r5, 4638 <nrfx_gpiote_input_configure+0xf0>
        err = NRFX_SUCCESS;
    45c2:	4835      	ldr	r0, [pc, #212]	; (4698 <nrfx_gpiote_input_configure+0x150>)
    45c4:	e7d0      	b.n	4568 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    45c6:	f021 0120 	bic.w	r1, r1, #32
    45ca:	04c9      	lsls	r1, r1, #19
    45cc:	0cc9      	lsrs	r1, r1, #19
    45ce:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    45d2:	2800      	cmp	r0, #0
    45d4:	d0ec      	beq.n	45b0 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    45d6:	2b03      	cmp	r3, #3
    45d8:	d8c5      	bhi.n	4566 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    45da:	6852      	ldr	r2, [r2, #4]
    45dc:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    45e0:	4662      	mov	r2, ip
    45e2:	0092      	lsls	r2, r2, #2
    45e4:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    45e8:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    45ec:	b923      	cbnz	r3, 45f8 <nrfx_gpiote_input_configure+0xb0>
    p_reg->CONFIG[idx] = 0;
    45ee:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    45f2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
    45f6:	e7db      	b.n	45b0 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    45f8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    45fc:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    4600:	f020 0003 	bic.w	r0, r0, #3
    4604:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4608:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    460c:	f041 0120 	orr.w	r1, r1, #32
    4610:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    4614:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    4618:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    461c:	0220      	lsls	r0, r4, #8
    461e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4622:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    4626:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    462a:	ea40 000e 	orr.w	r0, r0, lr
    462e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    4632:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    4636:	e7bb      	b.n	45b0 <nrfx_gpiote_input_configure+0x68>
    release_handler(pin);
    4638:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    463a:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    463e:	f7ff ff3b 	bl	44b8 <release_handler>
    if (!handler)
    4642:	2e00      	cmp	r6, #0
    4644:	d0bd      	beq.n	45c2 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4646:	4d11      	ldr	r5, [pc, #68]	; (468c <nrfx_gpiote_input_configure+0x144>)
    4648:	e9d5 2300 	ldrd	r2, r3, [r5]
    464c:	4296      	cmp	r6, r2
    464e:	d101      	bne.n	4654 <nrfx_gpiote_input_configure+0x10c>
    4650:	429f      	cmp	r7, r3
    4652:	d018      	beq.n	4686 <nrfx_gpiote_input_configure+0x13e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4654:	4811      	ldr	r0, [pc, #68]	; (469c <nrfx_gpiote_input_configure+0x154>)
    4656:	f10d 0107 	add.w	r1, sp, #7
    465a:	f7ff fe73 	bl	4344 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    465e:	4b0e      	ldr	r3, [pc, #56]	; (4698 <nrfx_gpiote_input_configure+0x150>)
    4660:	4298      	cmp	r0, r3
    4662:	d181      	bne.n	4568 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    4664:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
    4668:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    466c:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    466e:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4670:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    4674:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4678:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    467c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4680:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    4684:	e79d      	b.n	45c2 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4686:	2200      	movs	r2, #0
    4688:	e7ee      	b.n	4668 <nrfx_gpiote_input_configure+0x120>
    468a:	bf00      	nop
    468c:	2000008c 	.word	0x2000008c
    4690:	0bad0004 	.word	0x0bad0004
    4694:	50842500 	.word	0x50842500
    4698:	0bad0000 	.word	0x0bad0000
    469c:	200000e0 	.word	0x200000e0

000046a0 <nrfx_gpiote_output_configure>:
{
    46a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46a2:	4604      	mov	r4, r0
    if (p_config)
    46a4:	b379      	cbz	r1, 4706 <nrfx_gpiote_output_configure+0x66>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    46a6:	4e3a      	ldr	r6, [pc, #232]	; (4790 <nrfx_gpiote_output_configure+0xf0>)
    46a8:	f100 0708 	add.w	r7, r0, #8
    46ac:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    46b0:	07ab      	lsls	r3, r5, #30
    46b2:	d404      	bmi.n	46be <nrfx_gpiote_output_configure+0x1e>
    46b4:	f7ff fed8 	bl	4468 <pin_in_use_by_te>
    46b8:	b108      	cbz	r0, 46be <nrfx_gpiote_output_configure+0x1e>
{
    46ba:	4836      	ldr	r0, [pc, #216]	; (4794 <nrfx_gpiote_output_configure+0xf4>)
}
    46bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    46be:	f015 0f1c 	tst.w	r5, #28
    46c2:	784b      	ldrb	r3, [r1, #1]
    46c4:	d122      	bne.n	470c <nrfx_gpiote_output_configure+0x6c>
    *p_pin = pin_number & 0x1F;
    46c6:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    46ca:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 4798 <nrfx_gpiote_output_configure+0xf8>
    46ce:	f100 0e80 	add.w	lr, r0, #128	; 0x80
    46d2:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    46d6:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    46da:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    46dc:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    46e0:	7809      	ldrb	r1, [r1, #0]
    46e2:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    cnf &= ~to_update;
    46e6:	f02c 0c07 	bic.w	ip, ip, #7
    46ea:	ea43 030c 	orr.w	r3, r3, ip
    46ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    46f2:	4929      	ldr	r1, [pc, #164]	; (4798 <nrfx_gpiote_output_configure+0xf8>)
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    46f4:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
    46f8:	3080      	adds	r0, #128	; 0x80
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    46fa:	f045 0503 	orr.w	r5, r5, #3
    46fe:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    4702:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    4706:	b922      	cbnz	r2, 4712 <nrfx_gpiote_output_configure+0x72>
    return NRFX_SUCCESS;
    4708:	4824      	ldr	r0, [pc, #144]	; (479c <nrfx_gpiote_output_configure+0xfc>)
    470a:	e7d7      	b.n	46bc <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    470c:	2b01      	cmp	r3, #1
    470e:	d1da      	bne.n	46c6 <nrfx_gpiote_output_configure+0x26>
    4710:	e7d3      	b.n	46ba <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4712:	4e1f      	ldr	r6, [pc, #124]	; (4790 <nrfx_gpiote_output_configure+0xf0>)
    4714:	f104 0708 	add.w	r7, r4, #8
    4718:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    471c:	0783      	lsls	r3, r0, #30
    471e:	d5cc      	bpl.n	46ba <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    4720:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    4724:	2300      	movs	r3, #0
    4726:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4728:	f020 0020 	bic.w	r0, r0, #32
    472c:	0089      	lsls	r1, r1, #2
    472e:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    4732:	04c0      	lsls	r0, r0, #19
    4734:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    4738:	0cc0      	lsrs	r0, r0, #19
    473a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    473e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    4742:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4746:	7855      	ldrb	r5, [r2, #1]
    4748:	2d00      	cmp	r5, #0
    474a:	d0dd      	beq.n	4708 <nrfx_gpiote_output_configure+0x68>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    474c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    4750:	7892      	ldrb	r2, [r2, #2]
    4752:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    4756:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    475a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    475e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4762:	0223      	lsls	r3, r4, #8
    4764:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4768:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    476a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    476e:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4772:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4774:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4776:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    477a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    477e:	4313      	orrs	r3, r2
    4780:	f040 0020 	orr.w	r0, r0, #32
    4784:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4788:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    478c:	e7bc      	b.n	4708 <nrfx_gpiote_output_configure+0x68>
    478e:	bf00      	nop
    4790:	2000008c 	.word	0x2000008c
    4794:	0bad0004 	.word	0x0bad0004
    4798:	50842500 	.word	0x50842500
    479c:	0bad0000 	.word	0x0bad0000

000047a0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    47a0:	4b01      	ldr	r3, [pc, #4]	; (47a8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    47a2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    47a6:	4770      	bx	lr
    47a8:	2000008c 	.word	0x2000008c

000047ac <nrfx_gpiote_channel_get>:
{
    47ac:	b508      	push	{r3, lr}
    47ae:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    47b0:	f7ff fe5a 	bl	4468 <pin_in_use_by_te>
    47b4:	b138      	cbz	r0, 47c6 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    47b6:	4b05      	ldr	r3, [pc, #20]	; (47cc <nrfx_gpiote_channel_get+0x20>)
    47b8:	3208      	adds	r2, #8
    47ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    47be:	4804      	ldr	r0, [pc, #16]	; (47d0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    47c0:	0b5b      	lsrs	r3, r3, #13
    47c2:	700b      	strb	r3, [r1, #0]
}
    47c4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    47c6:	4803      	ldr	r0, [pc, #12]	; (47d4 <nrfx_gpiote_channel_get+0x28>)
    47c8:	e7fc      	b.n	47c4 <nrfx_gpiote_channel_get+0x18>
    47ca:	bf00      	nop
    47cc:	2000008c 	.word	0x2000008c
    47d0:	0bad0000 	.word	0x0bad0000
    47d4:	0bad0004 	.word	0x0bad0004

000047d8 <nrfx_gpiote_init>:
{
    47d8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    47da:	4c0f      	ldr	r4, [pc, #60]	; (4818 <nrfx_gpiote_init+0x40>)
    47dc:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    47e0:	b9bd      	cbnz	r5, 4812 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    47e2:	2240      	movs	r2, #64	; 0x40
    47e4:	4629      	mov	r1, r5
    47e6:	f104 0010 	add.w	r0, r4, #16
    47ea:	f001 fa55 	bl	5c98 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    47ee:	200d      	movs	r0, #13
    47f0:	f7fd ff5e 	bl	26b0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    47f4:	4b09      	ldr	r3, [pc, #36]	; (481c <nrfx_gpiote_init+0x44>)
    return err_code;
    47f6:	480a      	ldr	r0, [pc, #40]	; (4820 <nrfx_gpiote_init+0x48>)
    47f8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    47fc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4800:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4804:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4808:	2301      	movs	r3, #1
    480a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    480e:	6563      	str	r3, [r4, #84]	; 0x54
}
    4810:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4812:	4804      	ldr	r0, [pc, #16]	; (4824 <nrfx_gpiote_init+0x4c>)
    4814:	e7fc      	b.n	4810 <nrfx_gpiote_init+0x38>
    4816:	bf00      	nop
    4818:	2000008c 	.word	0x2000008c
    481c:	5000d000 	.word	0x5000d000
    4820:	0bad0000 	.word	0x0bad0000
    4824:	0bad0005 	.word	0x0bad0005

00004828 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4828:	4b03      	ldr	r3, [pc, #12]	; (4838 <nrfx_gpiote_is_init+0x10>)
    482a:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    482e:	3800      	subs	r0, #0
    4830:	bf18      	it	ne
    4832:	2001      	movne	r0, #1
    4834:	4770      	bx	lr
    4836:	bf00      	nop
    4838:	2000008c 	.word	0x2000008c

0000483c <nrfx_gpiote_channel_free>:
{
    483c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    483e:	4801      	ldr	r0, [pc, #4]	; (4844 <nrfx_gpiote_channel_free+0x8>)
    4840:	f7ff bd9c 	b.w	437c <nrfx_flag32_free>
    4844:	200000dc 	.word	0x200000dc

00004848 <nrfx_gpiote_channel_alloc>:
{
    4848:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    484a:	4801      	ldr	r0, [pc, #4]	; (4850 <nrfx_gpiote_channel_alloc+0x8>)
    484c:	f7ff bd7a 	b.w	4344 <nrfx_flag32_alloc>
    4850:	200000dc 	.word	0x200000dc

00004854 <nrfx_gpiote_trigger_enable>:
{
    4854:	4602      	mov	r2, r0
    4856:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4858:	f7ff fe06 	bl	4468 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    485c:	4b1c      	ldr	r3, [pc, #112]	; (48d0 <nrfx_gpiote_trigger_enable+0x7c>)
    485e:	f102 0408 	add.w	r4, r2, #8
    4862:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4866:	b1e0      	cbz	r0, 48a2 <nrfx_gpiote_trigger_enable+0x4e>
    4868:	f013 0402 	ands.w	r4, r3, #2
    486c:	d119      	bne.n	48a2 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    486e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4870:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    4872:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    4876:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    487a:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    487e:	6004      	str	r4, [r0, #0]
    4880:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    4884:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4886:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    488a:	f040 0001 	orr.w	r0, r0, #1
    488e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    4892:	b129      	cbz	r1, 48a0 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4894:	2201      	movs	r2, #1
    4896:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    489a:	4a0e      	ldr	r2, [pc, #56]	; (48d4 <nrfx_gpiote_trigger_enable+0x80>)
    489c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    48a0:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    48a2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    48a6:	2b04      	cmp	r3, #4
    48a8:	d00e      	beq.n	48c8 <nrfx_gpiote_trigger_enable+0x74>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    48aa:	2b05      	cmp	r3, #5
    48ac:	d00e      	beq.n	48cc <nrfx_gpiote_trigger_enable+0x78>
    return p_reg->IN;
    48ae:	4b0a      	ldr	r3, [pc, #40]	; (48d8 <nrfx_gpiote_trigger_enable+0x84>)
    48b0:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
    48b2:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    48b6:	40d9      	lsrs	r1, r3
    48b8:	f001 0101 	and.w	r1, r1, #1
    48bc:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    48be:	4610      	mov	r0, r2
}
    48c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    48c4:	f7ff bdc0 	b.w	4448 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    48c8:	2103      	movs	r1, #3
    48ca:	e7f8      	b.n	48be <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    48cc:	2102      	movs	r1, #2
    48ce:	e7f6      	b.n	48be <nrfx_gpiote_trigger_enable+0x6a>
    48d0:	2000008c 	.word	0x2000008c
    48d4:	5000d000 	.word	0x5000d000
    48d8:	50842500 	.word	0x50842500

000048dc <nrfx_gpiote_trigger_disable>:
{
    48dc:	b508      	push	{r3, lr}
    48de:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    48e0:	f7ff fdc2 	bl	4468 <pin_in_use_by_te>
    48e4:	b1c0      	cbz	r0, 4918 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    48e6:	4b0f      	ldr	r3, [pc, #60]	; (4924 <nrfx_gpiote_trigger_disable+0x48>)
    48e8:	f102 0108 	add.w	r1, r2, #8
    48ec:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    48f0:	0799      	lsls	r1, r3, #30
    48f2:	d411      	bmi.n	4918 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    48f4:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    48f6:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    48f8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    48fa:	490b      	ldr	r1, [pc, #44]	; (4928 <nrfx_gpiote_trigger_disable+0x4c>)
    48fc:	009b      	lsls	r3, r3, #2
    48fe:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4902:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4906:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    490a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    490e:	f022 0203 	bic.w	r2, r2, #3
    4912:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4916:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4918:	2100      	movs	r1, #0
}
    491a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    491e:	4610      	mov	r0, r2
    4920:	f7ff bd92 	b.w	4448 <nrf_gpio_cfg_sense_set>
    4924:	2000008c 	.word	0x2000008c
    4928:	5000d000 	.word	0x5000d000

0000492c <nrfx_gpiote_pin_uninit>:
{
    492c:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    492e:	4b0c      	ldr	r3, [pc, #48]	; (4960 <nrfx_gpiote_pin_uninit+0x34>)
    4930:	f100 0208 	add.w	r2, r0, #8
    4934:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    4938:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    493a:	07db      	lsls	r3, r3, #31
    493c:	d50d      	bpl.n	495a <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
    493e:	f7ff ffcd 	bl	48dc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4942:	4620      	mov	r0, r4
    4944:	f7ff fde2 	bl	450c <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    4948:	2202      	movs	r2, #2
    494a:	4b06      	ldr	r3, [pc, #24]	; (4964 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
    494c:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    4950:	3480      	adds	r4, #128	; 0x80
    4952:	4805      	ldr	r0, [pc, #20]	; (4968 <nrfx_gpiote_pin_uninit+0x3c>)
    4954:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
    4958:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    495a:	4804      	ldr	r0, [pc, #16]	; (496c <nrfx_gpiote_pin_uninit+0x40>)
    495c:	e7fc      	b.n	4958 <nrfx_gpiote_pin_uninit+0x2c>
    495e:	bf00      	nop
    4960:	2000008c 	.word	0x2000008c
    4964:	50842500 	.word	0x50842500
    4968:	0bad0000 	.word	0x0bad0000
    496c:	0bad0004 	.word	0x0bad0004

00004970 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    4974:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4976:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4978:	462c      	mov	r4, r5
{
    497a:	4b4d      	ldr	r3, [pc, #308]	; (4ab0 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    497c:	484d      	ldr	r0, [pc, #308]	; (4ab4 <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    497e:	494e      	ldr	r1, [pc, #312]	; (4ab8 <nrfx_gpiote_irq_handler+0x148>)
{
    4980:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4982:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4984:	b136      	cbz	r6, 4994 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4986:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    498a:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    498c:	bf1e      	ittt	ne
    498e:	601c      	strne	r4, [r3, #0]
    4990:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4992:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4994:	3304      	adds	r3, #4
    4996:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4998:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    499c:	d1f1      	bne.n	4982 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    499e:	4f45      	ldr	r7, [pc, #276]	; (4ab4 <nrfx_gpiote_irq_handler+0x144>)
    49a0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    49a4:	b193      	cbz	r3, 49cc <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
    49a6:	4e45      	ldr	r6, [pc, #276]	; (4abc <nrfx_gpiote_irq_handler+0x14c>)
    49a8:	6a33      	ldr	r3, [r6, #32]
    49aa:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    49ac:	6233      	str	r3, [r6, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    49ae:	f04f 0a01 	mov.w	sl, #1
    49b2:	f10d 090c 	add.w	r9, sp, #12
            while (latch[i])
    49b6:	9803      	ldr	r0, [sp, #12]
    49b8:	b970      	cbnz	r0, 49d8 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    49ba:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
    49be:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    49c2:	6a33      	ldr	r3, [r6, #32]
    49c4:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    49c6:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
    49c8:	2b00      	cmp	r3, #0
    49ca:	d1f0      	bne.n	49ae <nrfx_gpiote_irq_handler+0x3e>
        mask &= ~NRFX_BIT(ch);
    49cc:	2401      	movs	r4, #1
    while (mask)
    49ce:	2d00      	cmp	r5, #0
    49d0:	d156      	bne.n	4a80 <nrfx_gpiote_irq_handler+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    49d2:	b005      	add	sp, #20
    49d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    49d8:	fa90 fba0 	rbit	fp, r0
    49dc:	fabb fb8b 	clz	fp, fp
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    49e0:	4a37      	ldr	r2, [pc, #220]	; (4ac0 <nrfx_gpiote_irq_handler+0x150>)
    49e2:	f10b 0308 	add.w	r3, fp, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    49e6:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
    49ea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    49ee:	f00b 0407 	and.w	r4, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    49f2:	f819 300c 	ldrb.w	r3, [r9, ip]
    49f6:	fa0a f404 	lsl.w	r4, sl, r4
    49fa:	ea23 0304 	bic.w	r3, r3, r4
    49fe:	f809 300c 	strb.w	r3, [r9, ip]
    4a02:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4a06:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    4a0a:	f3c1 0282 	ubfx	r2, r1, #2, #3
    if (is_level(trigger))
    4a0e:	06c9      	lsls	r1, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4a10:	4690      	mov	r8, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4a12:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
    4a16:	d518      	bpl.n	4a4a <nrfx_gpiote_irq_handler+0xda>
        call_handler(pin, trigger);
    4a18:	4611      	mov	r1, r2
    4a1a:	4658      	mov	r0, fp
    4a1c:	9301      	str	r3, [sp, #4]
    4a1e:	f7ff fd2d 	bl	447c <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4a22:	9b01      	ldr	r3, [sp, #4]
    4a24:	b2e4      	uxtb	r4, r4
    4a26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4a2a:	f3c3 4301 	ubfx	r3, r3, #16, #2
    4a2e:	429c      	cmp	r4, r3
    4a30:	d107      	bne.n	4a42 <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4a32:	2100      	movs	r1, #0
    4a34:	4658      	mov	r0, fp
    4a36:	f7ff fd07 	bl	4448 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4a3a:	4621      	mov	r1, r4
    4a3c:	4658      	mov	r0, fp
    4a3e:	f7ff fd03 	bl	4448 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    4a42:	fa0a f00b 	lsl.w	r0, sl, fp
    4a46:	6230      	str	r0, [r6, #32]
}
    4a48:	e7b5      	b.n	49b6 <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4a4a:	2c02      	cmp	r4, #2
    4a4c:	d10c      	bne.n	4a68 <nrfx_gpiote_irq_handler+0xf8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4a4e:	2103      	movs	r1, #3
    4a50:	4658      	mov	r0, fp
    4a52:	f7ff fcf9 	bl	4448 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4a56:	f008 0305 	and.w	r3, r8, #5
    4a5a:	2b01      	cmp	r3, #1
    4a5c:	d1f1      	bne.n	4a42 <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
    4a5e:	4641      	mov	r1, r8
    4a60:	4658      	mov	r0, fp
    4a62:	f7ff fd0b 	bl	447c <call_handler>
    4a66:	e7ec      	b.n	4a42 <nrfx_gpiote_irq_handler+0xd2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4a68:	2102      	movs	r1, #2
    4a6a:	4658      	mov	r0, fp
    4a6c:	9201      	str	r2, [sp, #4]
    4a6e:	f7ff fceb 	bl	4448 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4a72:	9a01      	ldr	r2, [sp, #4]
    4a74:	2a03      	cmp	r2, #3
    4a76:	d0f2      	beq.n	4a5e <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4a78:	2c03      	cmp	r4, #3
    4a7a:	d1e2      	bne.n	4a42 <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4a7c:	428a      	cmp	r2, r1
    4a7e:	e7ed      	b.n	4a5c <nrfx_gpiote_irq_handler+0xec>
        uint32_t ch = NRF_CTZ(mask);
    4a80:	fa95 f3a5 	rbit	r3, r5
    4a84:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4a88:	fa04 f203 	lsl.w	r2, r4, r3
    4a8c:	009b      	lsls	r3, r3, #2
    4a8e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4a92:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4a96:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4a9a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4a9e:	f3c0 2004 	ubfx	r0, r0, #8, #5
    4aa2:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    4aa6:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4aaa:	f7ff fce7 	bl	447c <call_handler>
    4aae:	e78e      	b.n	49ce <nrfx_gpiote_irq_handler+0x5e>
    4ab0:	5000d100 	.word	0x5000d100
    4ab4:	5000d000 	.word	0x5000d000
    4ab8:	5000d120 	.word	0x5000d120
    4abc:	50842500 	.word	0x50842500
    4ac0:	2000008c 	.word	0x2000008c

00004ac4 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    4ac4:	2200      	movs	r2, #0
    4ac6:	4b03      	ldr	r3, [pc, #12]	; (4ad4 <nvmc_readonly_mode_set+0x10>)
    4ac8:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    4acc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    4ad0:	4770      	bx	lr
    4ad2:	bf00      	nop
    4ad4:	50039000 	.word	0x50039000

00004ad8 <nvmc_word_write>:
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    4ad8:	4a04      	ldr	r2, [pc, #16]	; (4aec <nvmc_word_write+0x14>)
    4ada:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF91_SERIES)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    4ade:	07db      	lsls	r3, r3, #31
    4ae0:	d5fb      	bpl.n	4ada <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
    4ae2:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4ae4:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    4ae8:	4770      	bx	lr
    4aea:	bf00      	nop
    4aec:	50039000 	.word	0x50039000

00004af0 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    4af0:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    4af2:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    4af6:	b983      	cbnz	r3, 4b1a <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    4af8:	2202      	movs	r2, #2
    4afa:	4b09      	ldr	r3, [pc, #36]	; (4b20 <nrfx_nvmc_page_erase+0x30>)
    4afc:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    4b00:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF53_SERIES) || defined(NRF91_SERIES)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    4b04:	f04f 32ff 	mov.w	r2, #4294967295
    4b08:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    4b0a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    4b0e:	07d2      	lsls	r2, r2, #31
    4b10:	d5fb      	bpl.n	4b0a <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    4b12:	f7ff ffd7 	bl	4ac4 <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    4b16:	4803      	ldr	r0, [pc, #12]	; (4b24 <nrfx_nvmc_page_erase+0x34>)
}
    4b18:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    4b1a:	4803      	ldr	r0, [pc, #12]	; (4b28 <nrfx_nvmc_page_erase+0x38>)
    4b1c:	e7fc      	b.n	4b18 <nrfx_nvmc_page_erase+0x28>
    4b1e:	bf00      	nop
    4b20:	50039000 	.word	0x50039000
    4b24:	0bad0000 	.word	0x0bad0000
    4b28:	0bad000a 	.word	0x0bad000a

00004b2c <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    4b2c:	2201      	movs	r2, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    4b2e:	b508      	push	{r3, lr}
    4b30:	4b05      	ldr	r3, [pc, #20]	; (4b48 <nrfx_nvmc_word_write+0x1c>)
    4b32:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    4b36:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    4b3a:	f7ff ffcd 	bl	4ad8 <nvmc_word_write>

    nvmc_readonly_mode_set();
}
    4b3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nvmc_readonly_mode_set();
    4b42:	f7ff bfbf 	b.w	4ac4 <nvmc_readonly_mode_set>
    4b46:	bf00      	nop
    4b48:	50039000 	.word	0x50039000

00004b4c <get_result_len>:
	return true;
}


static uint_fast32_t get_result_len(const void *const input, uint_fast32_t max_result_len)
{
    4b4c:	4603      	mov	r3, r0
    4b4e:	4608      	mov	r0, r1
	uint8_t *u8_result  = (uint8_t *)input;
	uint_fast32_t len = max_result_len;

	for (; len > 0; len--) {
    4b50:	b900      	cbnz	r0, 4b54 <get_result_len+0x8>
    4b52:	4770      	bx	lr
#ifdef CONFIG_BIG_ENDIAN
		if (u8_result[max_result_len - len] != 0) {
#else
		if (u8_result[len - 1] != 0) {
    4b54:	1e42      	subs	r2, r0, #1
    4b56:	5c99      	ldrb	r1, [r3, r2]
    4b58:	b909      	cbnz	r1, 4b5e <get_result_len+0x12>
	for (; len > 0; len--) {
    4b5a:	4610      	mov	r0, r2
    4b5c:	e7f8      	b.n	4b50 <get_result_len+0x4>
			break;
		}
	}

	/* Round up to nearest power of 2. */
	return len <= 2 ? len : (uint8_t)(1 << log2ceil(len));
    4b5e:	2802      	cmp	r0, #2
    4b60:	d907      	bls.n	4b72 <get_result_len+0x26>
	switch(val) {
    4b62:	3802      	subs	r0, #2
    4b64:	2806      	cmp	r0, #6
    4b66:	bf96      	itet	ls
    4b68:	4b02      	ldrls	r3, [pc, #8]	; (4b74 <get_result_len+0x28>)
	return len <= 2 ? len : (uint8_t)(1 << log2ceil(len));
    4b6a:	2300      	movhi	r3, #0
    4b6c:	5c1b      	ldrbls	r3, [r3, r0]
    4b6e:	2001      	movs	r0, #1
    4b70:	4098      	lsls	r0, r3
}
    4b72:	4770      	bx	lr
    4b74:	00008d0d 	.word	0x00008d0d

00004b78 <value_encode_len>:
{
    4b78:	b570      	push	{r4, r5, r6, lr}
    4b7a:	461c      	mov	r4, r3

static uint_fast32_t get_encoded_len(const void *const result, uint_fast32_t result_len)
{
	const uint8_t *u8_result  = (const uint8_t *)result;

	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
    4b7c:	2c01      	cmp	r4, #1
{
    4b7e:	4605      	mov	r5, r0
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    4b80:	6803      	ldr	r3, [r0, #0]
{
    4b82:	4616      	mov	r6, r2
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    4b84:	68c0      	ldr	r0, [r0, #12]
	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
    4b86:	d116      	bne.n	4bb6 <value_encode_len+0x3e>
    4b88:	7812      	ldrb	r2, [r2, #0]
    4b8a:	2a17      	cmp	r2, #23
    4b8c:	d904      	bls.n	4b98 <value_encode_len+0x20>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    4b8e:	3302      	adds	r3, #2
    4b90:	4298      	cmp	r0, r3
    4b92:	d314      	bcc.n	4bbe <value_encode_len+0x46>
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    4b94:	2300      	movs	r3, #0
    4b96:	e021      	b.n	4bdc <value_encode_len+0x64>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    4b98:	3301      	adds	r3, #1
    4b9a:	4298      	cmp	r0, r3
    4b9c:	d30f      	bcc.n	4bbe <value_encode_len+0x46>
		return 0;
    4b9e:	2400      	movs	r4, #0
	if (!encode_header_byte(state, major_type,
    4ba0:	4628      	mov	r0, r5
    4ba2:	f003 fa8f 	bl	80c4 <encode_header_byte>
    4ba6:	b160      	cbz	r0, 4bc2 <value_encode_len+0x4a>
    4ba8:	4434      	add	r4, r6
	for (; encoded_len > 0; encoded_len--) {
    4baa:	42b4      	cmp	r4, r6
    4bac:	d119      	bne.n	4be2 <value_encode_len+0x6a>
	state->elem_count++;
    4bae:	68ab      	ldr	r3, [r5, #8]
    4bb0:	3301      	adds	r3, #1
    4bb2:	60ab      	str	r3, [r5, #8]
	return true;
    4bb4:	e006      	b.n	4bc4 <value_encode_len+0x4c>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    4bb6:	1c62      	adds	r2, r4, #1
    4bb8:	4413      	add	r3, r2
    4bba:	4298      	cmp	r0, r3
    4bbc:	d206      	bcs.n	4bcc <value_encode_len+0x54>
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
    4bbe:	696b      	ldr	r3, [r5, #20]
{
#ifdef ZCBOR_STOP_ON_ERROR
	if (zcbor_check_error(state))
#endif
	{
		if (state->constant_state) {
    4bc0:	b90b      	cbnz	r3, 4bc6 <value_encode_len+0x4e>
    4bc2:	2000      	movs	r0, #0
}
    4bc4:	bd70      	pop	{r4, r5, r6, pc}
			state->constant_state->error = err;
    4bc6:	2208      	movs	r2, #8
    4bc8:	60da      	str	r2, [r3, #12]
    4bca:	e7fa      	b.n	4bc2 <value_encode_len+0x4a>
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    4bcc:	b90c      	cbnz	r4, 4bd2 <value_encode_len+0x5a>
	if (!encode_header_byte(state, major_type,
    4bce:	7832      	ldrb	r2, [r6, #0]
    4bd0:	e7e6      	b.n	4ba0 <value_encode_len+0x28>
	switch(val) {
    4bd2:	1ea3      	subs	r3, r4, #2
    4bd4:	2b06      	cmp	r3, #6
    4bd6:	d8dd      	bhi.n	4b94 <value_encode_len+0x1c>
    4bd8:	4a05      	ldr	r2, [pc, #20]	; (4bf0 <value_encode_len+0x78>)
    4bda:	5cd3      	ldrb	r3, [r2, r3]
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    4bdc:	3318      	adds	r3, #24
    4bde:	b2da      	uxtb	r2, r3
    4be0:	e7de      	b.n	4ba0 <value_encode_len+0x28>
		*(state->payload_mut++) = u8_result[encoded_len - 1];
    4be2:	682b      	ldr	r3, [r5, #0]
    4be4:	1c5a      	adds	r2, r3, #1
    4be6:	602a      	str	r2, [r5, #0]
    4be8:	f814 2d01 	ldrb.w	r2, [r4, #-1]!
    4bec:	701a      	strb	r2, [r3, #0]
	for (; encoded_len > 0; encoded_len--) {
    4bee:	e7dc      	b.n	4baa <value_encode_len+0x32>
    4bf0:	00008d0d 	.word	0x00008d0d

00004bf4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4bf4:	4b10      	ldr	r3, [pc, #64]	; (4c38 <z_sys_init_run_level+0x44>)
{
    4bf6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4bf8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4bfc:	3001      	adds	r0, #1
    4bfe:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4c02:	42a6      	cmp	r6, r4
    4c04:	d800      	bhi.n	4c08 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    4c06:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    4c08:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    4c0c:	b18d      	cbz	r5, 4c32 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    4c0e:	4628      	mov	r0, r5
    4c10:	4798      	blx	r3
			if (rc != 0) {
    4c12:	b138      	cbz	r0, 4c24 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4c14:	2800      	cmp	r0, #0
    4c16:	bfb8      	it	lt
    4c18:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    4c1a:	28ff      	cmp	r0, #255	; 0xff
    4c1c:	bfa8      	it	ge
    4c1e:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    4c20:	68eb      	ldr	r3, [r5, #12]
    4c22:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4c24:	68ea      	ldr	r2, [r5, #12]
    4c26:	7853      	ldrb	r3, [r2, #1]
    4c28:	f043 0301 	orr.w	r3, r3, #1
    4c2c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4c2e:	3408      	adds	r4, #8
    4c30:	e7e7      	b.n	4c02 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    4c32:	4798      	blx	r3
    4c34:	e7fb      	b.n	4c2e <z_sys_init_run_level+0x3a>
    4c36:	bf00      	nop
    4c38:	00008920 	.word	0x00008920

00004c3c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4c3c:	2201      	movs	r2, #1
{
    4c3e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    4c40:	4b08      	ldr	r3, [pc, #32]	; (4c64 <bg_thread_main+0x28>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    4c42:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    4c44:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    4c46:	f7ff ffd5 	bl	4bf4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4c4a:	f000 f91b 	bl	4e84 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    4c4e:	2004      	movs	r0, #4
    4c50:	f7ff ffd0 	bl	4bf4 <z_sys_init_run_level>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    4c54:	f7fb fbde 	bl	414 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4c58:	4a03      	ldr	r2, [pc, #12]	; (4c68 <bg_thread_main+0x2c>)
    4c5a:	7b13      	ldrb	r3, [r2, #12]
    4c5c:	f023 0301 	bic.w	r3, r3, #1
    4c60:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4c62:	bd08      	pop	{r3, pc}
    4c64:	20003dc1 	.word	0x20003dc1
    4c68:	20000180 	.word	0x20000180

00004c6c <z_bss_zero>:
{
    4c6c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    4c6e:	4803      	ldr	r0, [pc, #12]	; (4c7c <z_bss_zero+0x10>)
    4c70:	4a03      	ldr	r2, [pc, #12]	; (4c80 <z_bss_zero+0x14>)
    4c72:	2100      	movs	r1, #0
    4c74:	1a12      	subs	r2, r2, r0
    4c76:	f003 faed 	bl	8254 <z_early_memset>
}
    4c7a:	bd08      	pop	{r3, pc}
    4c7c:	20000160 	.word	0x20000160
    4c80:	20003dc4 	.word	0x20003dc4

00004c84 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    4c84:	b508      	push	{r3, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    4c86:	2000      	movs	r0, #0
    4c88:	f7ff ffb4 	bl	4bf4 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    4c8c:	4b16      	ldr	r3, [pc, #88]	; (4ce8 <z_cstart+0x64>)
	uint32_t msp =
    4c8e:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4c92:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    4c96:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4c9a:	2500      	movs	r5, #0
    4c9c:	23e0      	movs	r3, #224	; 0xe0
    4c9e:	4c13      	ldr	r4, [pc, #76]	; (4cec <z_cstart+0x68>)
    4ca0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    4ca4:	77e5      	strb	r5, [r4, #31]
    4ca6:	7625      	strb	r5, [r4, #24]
    4ca8:	7665      	strb	r5, [r4, #25]
    4caa:	76a5      	strb	r5, [r4, #26]
    4cac:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4cb2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4cb6:	6263      	str	r3, [r4, #36]	; 0x24
    4cb8:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4cbc:	f7fd fece 	bl	2a5c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4cc0:	f7fd fcd6 	bl	2670 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4cc4:	f04f 33ff 	mov.w	r3, #4294967295
    4cc8:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4cca:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4ccc:	f003 faa6 	bl	821c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    4cd0:	2001      	movs	r0, #1
    4cd2:	f7ff ff8f 	bl	4bf4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    4cd6:	2002      	movs	r0, #2
    4cd8:	f7ff ff8c 	bl	4bf4 <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
    4cdc:	462b      	mov	r3, r5
    4cde:	462a      	mov	r2, r5
    4ce0:	4629      	mov	r1, r5
    4ce2:	4803      	ldr	r0, [pc, #12]	; (4cf0 <z_cstart+0x6c>)
    4ce4:	f7fd fd5a 	bl	279c <z_arm_switch_to_main_no_multithreading>
    4ce8:	20003dc8 	.word	0x20003dc8
    4cec:	e000ed00 	.word	0xe000ed00
    4cf0:	00004c3d 	.word	0x00004c3d

00004cf4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4cf4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    4cf6:	4806      	ldr	r0, [pc, #24]	; (4d10 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    4cf8:	4a06      	ldr	r2, [pc, #24]	; (4d14 <z_data_copy+0x20>)
    4cfa:	4907      	ldr	r1, [pc, #28]	; (4d18 <z_data_copy+0x24>)
    4cfc:	1a12      	subs	r2, r2, r0
    4cfe:	f003 faab 	bl	8258 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4d02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4d06:	4a05      	ldr	r2, [pc, #20]	; (4d1c <z_data_copy+0x28>)
    4d08:	4905      	ldr	r1, [pc, #20]	; (4d20 <z_data_copy+0x2c>)
    4d0a:	4806      	ldr	r0, [pc, #24]	; (4d24 <z_data_copy+0x30>)
    4d0c:	f003 baa4 	b.w	8258 <z_early_memcpy>
    4d10:	20000000 	.word	0x20000000
    4d14:	2000015a 	.word	0x2000015a
    4d18:	00008d48 	.word	0x00008d48
    4d1c:	00000000 	.word	0x00000000
    4d20:	00008d48 	.word	0x00008d48
    4d24:	20000000 	.word	0x20000000

00004d28 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4d28:	4b03      	ldr	r3, [pc, #12]	; (4d38 <elapsed+0x10>)
    4d2a:	681b      	ldr	r3, [r3, #0]
    4d2c:	b90b      	cbnz	r3, 4d32 <elapsed+0xa>
    4d2e:	f7fe bded 	b.w	390c <sys_clock_elapsed>
}
    4d32:	2000      	movs	r0, #0
    4d34:	4770      	bx	lr
    4d36:	bf00      	nop
    4d38:	20001bbc 	.word	0x20001bbc

00004d3c <next_timeout>:

static int32_t next_timeout(void)
{
    4d3c:	b510      	push	{r4, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4d3e:	4b0e      	ldr	r3, [pc, #56]	; (4d78 <next_timeout+0x3c>)
    4d40:	681c      	ldr	r4, [r3, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d42:	429c      	cmp	r4, r3
    4d44:	d104      	bne.n	4d50 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    4d46:	f7ff ffef 	bl	4d28 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    4d4a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    4d4e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    4d50:	f7ff ffea 	bl	4d28 <elapsed>
	if ((to == NULL) ||
    4d54:	2c00      	cmp	r4, #0
    4d56:	d0f8      	beq.n	4d4a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    4d58:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    4d5c:	1a1b      	subs	r3, r3, r0
    4d5e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    4d62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4d66:	f172 0100 	sbcs.w	r1, r2, #0
    4d6a:	daee      	bge.n	4d4a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    4d6c:	2a00      	cmp	r2, #0
    4d6e:	bfac      	ite	ge
    4d70:	4618      	movge	r0, r3
    4d72:	2000      	movlt	r0, #0
	return ret;
    4d74:	e7eb      	b.n	4d4e <next_timeout+0x12>
    4d76:	bf00      	nop
    4d78:	200000e8 	.word	0x200000e8

00004d7c <remove_timeout>:
{
    4d7c:	b530      	push	{r4, r5, lr}
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4d7e:	b170      	cbz	r0, 4d9e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    4d80:	4b0b      	ldr	r3, [pc, #44]	; (4db0 <remove_timeout+0x34>)
    4d82:	685b      	ldr	r3, [r3, #4]
    4d84:	4298      	cmp	r0, r3
    4d86:	d00a      	beq.n	4d9e <remove_timeout+0x22>
    4d88:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    4d8a:	b143      	cbz	r3, 4d9e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    4d8c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4d90:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    4d94:	1912      	adds	r2, r2, r4
    4d96:	eb41 0105 	adc.w	r1, r1, r5
    4d9a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    4d9e:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    4da2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4da4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4da6:	2300      	movs	r3, #0
	node->prev = NULL;
    4da8:	e9c0 3300 	strd	r3, r3, [r0]
}
    4dac:	bd30      	pop	{r4, r5, pc}
    4dae:	bf00      	nop
    4db0:	200000e8 	.word	0x200000e8

00004db4 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    4db4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    4db8:	f04f 0320 	mov.w	r3, #32
    4dbc:	f3ef 8c11 	mrs	ip, BASEPRI
    4dc0:	f383 8812 	msr	BASEPRI_MAX, r3
    4dc4:	f3bf 8f6f 	isb	sy
	return list->head == list;
    4dc8:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 4e78 <sys_clock_announce+0xc4>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    4dcc:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 4e7c <sys_clock_announce+0xc8>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
    4dd0:	2400      	movs	r4, #0
	announce_remaining = ticks;
    4dd2:	f8c9 0000 	str.w	r0, [r9]
    4dd6:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    4dda:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ddc:	4550      	cmp	r0, sl
    4dde:	bf08      	it	eq
    4de0:	2000      	moveq	r0, #0
		curr_tick += dt;
    4de2:	4f27      	ldr	r7, [pc, #156]	; (4e80 <sys_clock_announce+0xcc>)
    4de4:	46e0      	mov	r8, ip
    4de6:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    4dea:	f8d9 3000 	ldr.w	r3, [r9]
    4dee:	b380      	cbz	r0, 4e52 <sys_clock_announce+0x9e>
    4df0:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    4df4:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    4df8:	42b3      	cmp	r3, r6
    4dfa:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    4dfe:	da05      	bge.n	4e0c <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    4e00:	1af6      	subs	r6, r6, r3
    4e02:	eb6c 040e 	sbc.w	r4, ip, lr
    4e06:	e9c0 6404 	strd	r6, r4, [r0, #16]
    4e0a:	e022      	b.n	4e52 <sys_clock_announce+0x9e>
		curr_tick += dt;
    4e0c:	18b2      	adds	r2, r6, r2
    4e0e:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    4e12:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    4e16:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    4e1a:	f7ff ffaf 	bl	4d7c <remove_timeout>
	__asm__ volatile(
    4e1e:	f388 8811 	msr	BASEPRI, r8
    4e22:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4e26:	6883      	ldr	r3, [r0, #8]
    4e28:	4798      	blx	r3
	__asm__ volatile(
    4e2a:	f04f 0320 	mov.w	r3, #32
    4e2e:	f3ef 8811 	mrs	r8, BASEPRI
    4e32:	f383 8812 	msr	BASEPRI_MAX, r3
    4e36:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    4e3a:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    4e3e:	f8da 0000 	ldr.w	r0, [sl]
    4e42:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4e44:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    4e46:	46c4      	mov	ip, r8
    4e48:	f8c9 3000 	str.w	r3, [r9]
    4e4c:	d1ca      	bne.n	4de4 <sys_clock_announce+0x30>
		curr_tick += dt;
    4e4e:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    4e52:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    4e54:	189a      	adds	r2, r3, r2
    4e56:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
    4e5a:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    4e5e:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    4e62:	f7ff ff6b 	bl	4d3c <next_timeout>
    4e66:	4621      	mov	r1, r4
    4e68:	f7fe fd1e 	bl	38a8 <sys_clock_set_timeout>
	__asm__ volatile(
    4e6c:	f388 8811 	msr	BASEPRI, r8
    4e70:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    4e74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e78:	200000e8 	.word	0x200000e8
    4e7c:	20001bbc 	.word	0x20001bbc
    4e80:	20000200 	.word	0x20000200

00004e84 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    4e84:	4801      	ldr	r0, [pc, #4]	; (4e8c <boot_banner+0x8>)
    4e86:	f000 bd21 	b.w	58cc <printk>
    4e8a:	bf00      	nop
    4e8c:	00008d17 	.word	0x00008d17

00004e90 <nrf_cc3xx_platform_init_no_rng>:
    4e90:	b510      	push	{r4, lr}
    4e92:	4c0a      	ldr	r4, [pc, #40]	; (4ebc <nrf_cc3xx_platform_init_no_rng+0x2c>)
    4e94:	6823      	ldr	r3, [r4, #0]
    4e96:	b11b      	cbz	r3, 4ea0 <nrf_cc3xx_platform_init_no_rng+0x10>
    4e98:	2301      	movs	r3, #1
    4e9a:	6023      	str	r3, [r4, #0]
    4e9c:	2000      	movs	r0, #0
    4e9e:	bd10      	pop	{r4, pc}
    4ea0:	f000 f850 	bl	4f44 <CC_LibInitNoRng>
    4ea4:	2800      	cmp	r0, #0
    4ea6:	d0f7      	beq.n	4e98 <nrf_cc3xx_platform_init_no_rng+0x8>
    4ea8:	3801      	subs	r0, #1
    4eaa:	2806      	cmp	r0, #6
    4eac:	d803      	bhi.n	4eb6 <nrf_cc3xx_platform_init_no_rng+0x26>
    4eae:	4b04      	ldr	r3, [pc, #16]	; (4ec0 <nrf_cc3xx_platform_init_no_rng+0x30>)
    4eb0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4eb4:	bd10      	pop	{r4, pc}
    4eb6:	4803      	ldr	r0, [pc, #12]	; (4ec4 <nrf_cc3xx_platform_init_no_rng+0x34>)
    4eb8:	bd10      	pop	{r4, pc}
    4eba:	bf00      	nop
    4ebc:	20001bc0 	.word	0x20001bc0
    4ec0:	00008938 	.word	0x00008938
    4ec4:	ffff8ffe 	.word	0xffff8ffe

00004ec8 <nrf_cc3xx_platform_abort>:
    4ec8:	f3bf 8f4f 	dsb	sy
    4ecc:	4905      	ldr	r1, [pc, #20]	; (4ee4 <nrf_cc3xx_platform_abort+0x1c>)
    4ece:	4b06      	ldr	r3, [pc, #24]	; (4ee8 <nrf_cc3xx_platform_abort+0x20>)
    4ed0:	68ca      	ldr	r2, [r1, #12]
    4ed2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4ed6:	4313      	orrs	r3, r2
    4ed8:	60cb      	str	r3, [r1, #12]
    4eda:	f3bf 8f4f 	dsb	sy
    4ede:	bf00      	nop
    4ee0:	e7fd      	b.n	4ede <nrf_cc3xx_platform_abort+0x16>
    4ee2:	bf00      	nop
    4ee4:	e000ed00 	.word	0xe000ed00
    4ee8:	05fa0004 	.word	0x05fa0004

00004eec <CC_PalAbort>:
    4eec:	b430      	push	{r4, r5}
    4eee:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    4ef2:	2500      	movs	r5, #0
    4ef4:	4b07      	ldr	r3, [pc, #28]	; (4f14 <CC_PalAbort+0x28>)
    4ef6:	4c08      	ldr	r4, [pc, #32]	; (4f18 <CC_PalAbort+0x2c>)
    4ef8:	4908      	ldr	r1, [pc, #32]	; (4f1c <CC_PalAbort+0x30>)
    4efa:	6849      	ldr	r1, [r1, #4]
    4efc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    4f00:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    4f04:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    4f08:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    4f0c:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    4f10:	bc30      	pop	{r4, r5}
    4f12:	4708      	bx	r1
    4f14:	50841000 	.word	0x50841000
    4f18:	50840000 	.word	0x50840000
    4f1c:	200000f0 	.word	0x200000f0

00004f20 <nrf_cc3xx_platform_set_abort>:
    4f20:	4b02      	ldr	r3, [pc, #8]	; (4f2c <nrf_cc3xx_platform_set_abort+0xc>)
    4f22:	e9d0 1200 	ldrd	r1, r2, [r0]
    4f26:	e9c3 1200 	strd	r1, r2, [r3]
    4f2a:	4770      	bx	lr
    4f2c:	200000f0 	.word	0x200000f0

00004f30 <mbedtls_platform_zeroize>:
    4f30:	b138      	cbz	r0, 4f42 <mbedtls_platform_zeroize+0x12>
    4f32:	b131      	cbz	r1, 4f42 <mbedtls_platform_zeroize+0x12>
    4f34:	2200      	movs	r2, #0
    4f36:	4401      	add	r1, r0
    4f38:	4603      	mov	r3, r0
    4f3a:	3001      	adds	r0, #1
    4f3c:	4288      	cmp	r0, r1
    4f3e:	701a      	strb	r2, [r3, #0]
    4f40:	d1fa      	bne.n	4f38 <mbedtls_platform_zeroize+0x8>
    4f42:	4770      	bx	lr

00004f44 <CC_LibInitNoRng>:
    4f44:	b538      	push	{r3, r4, r5, lr}
    4f46:	f000 f82f 	bl	4fa8 <CC_HalInit>
    4f4a:	b120      	cbz	r0, 4f56 <CC_LibInitNoRng+0x12>
    4f4c:	2403      	movs	r4, #3
    4f4e:	f000 f863 	bl	5018 <CC_PalTerminate>
    4f52:	4620      	mov	r0, r4
    4f54:	bd38      	pop	{r3, r4, r5, pc}
    4f56:	f000 f831 	bl	4fbc <CC_PalInit>
    4f5a:	b998      	cbnz	r0, 4f84 <CC_LibInitNoRng+0x40>
    4f5c:	f000 f8ac 	bl	50b8 <CC_PalPowerSaveModeSelect>
    4f60:	b998      	cbnz	r0, 4f8a <CC_LibInitNoRng+0x46>
    4f62:	4d0f      	ldr	r5, [pc, #60]	; (4fa0 <CC_LibInitNoRng+0x5c>)
    4f64:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    4f68:	0e1b      	lsrs	r3, r3, #24
    4f6a:	2bf0      	cmp	r3, #240	; 0xf0
    4f6c:	d108      	bne.n	4f80 <CC_LibInitNoRng+0x3c>
    4f6e:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    4f72:	4b0c      	ldr	r3, [pc, #48]	; (4fa4 <CC_LibInitNoRng+0x60>)
    4f74:	429a      	cmp	r2, r3
    4f76:	d00a      	beq.n	4f8e <CC_LibInitNoRng+0x4a>
    4f78:	2407      	movs	r4, #7
    4f7a:	f000 f817 	bl	4fac <CC_HalTerminate>
    4f7e:	e7e6      	b.n	4f4e <CC_LibInitNoRng+0xa>
    4f80:	2406      	movs	r4, #6
    4f82:	e7fa      	b.n	4f7a <CC_LibInitNoRng+0x36>
    4f84:	2404      	movs	r4, #4
    4f86:	4620      	mov	r0, r4
    4f88:	bd38      	pop	{r3, r4, r5, pc}
    4f8a:	2400      	movs	r4, #0
    4f8c:	e7f5      	b.n	4f7a <CC_LibInitNoRng+0x36>
    4f8e:	2001      	movs	r0, #1
    4f90:	f000 f892 	bl	50b8 <CC_PalPowerSaveModeSelect>
    4f94:	4604      	mov	r4, r0
    4f96:	2800      	cmp	r0, #0
    4f98:	d1f7      	bne.n	4f8a <CC_LibInitNoRng+0x46>
    4f9a:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    4f9e:	e7d8      	b.n	4f52 <CC_LibInitNoRng+0xe>
    4fa0:	50841000 	.word	0x50841000
    4fa4:	20e00000 	.word	0x20e00000

00004fa8 <CC_HalInit>:
    4fa8:	2000      	movs	r0, #0
    4faa:	4770      	bx	lr

00004fac <CC_HalTerminate>:
    4fac:	2000      	movs	r0, #0
    4fae:	4770      	bx	lr

00004fb0 <CC_HalMaskInterrupt>:
    4fb0:	4b01      	ldr	r3, [pc, #4]	; (4fb8 <CC_HalMaskInterrupt+0x8>)
    4fb2:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    4fb6:	4770      	bx	lr
    4fb8:	50841000 	.word	0x50841000

00004fbc <CC_PalInit>:
    4fbc:	b510      	push	{r4, lr}
    4fbe:	4811      	ldr	r0, [pc, #68]	; (5004 <CC_PalInit+0x48>)
    4fc0:	f000 f848 	bl	5054 <CC_PalMutexCreate>
    4fc4:	b100      	cbz	r0, 4fc8 <CC_PalInit+0xc>
    4fc6:	bd10      	pop	{r4, pc}
    4fc8:	480f      	ldr	r0, [pc, #60]	; (5008 <CC_PalInit+0x4c>)
    4fca:	f000 f843 	bl	5054 <CC_PalMutexCreate>
    4fce:	2800      	cmp	r0, #0
    4fd0:	d1f9      	bne.n	4fc6 <CC_PalInit+0xa>
    4fd2:	4c0e      	ldr	r4, [pc, #56]	; (500c <CC_PalInit+0x50>)
    4fd4:	4620      	mov	r0, r4
    4fd6:	f000 f83d 	bl	5054 <CC_PalMutexCreate>
    4fda:	2800      	cmp	r0, #0
    4fdc:	d1f3      	bne.n	4fc6 <CC_PalInit+0xa>
    4fde:	4b0c      	ldr	r3, [pc, #48]	; (5010 <CC_PalInit+0x54>)
    4fe0:	480c      	ldr	r0, [pc, #48]	; (5014 <CC_PalInit+0x58>)
    4fe2:	601c      	str	r4, [r3, #0]
    4fe4:	f000 f836 	bl	5054 <CC_PalMutexCreate>
    4fe8:	4601      	mov	r1, r0
    4fea:	2800      	cmp	r0, #0
    4fec:	d1eb      	bne.n	4fc6 <CC_PalInit+0xa>
    4fee:	f000 f82d 	bl	504c <CC_PalDmaInit>
    4ff2:	4604      	mov	r4, r0
    4ff4:	b108      	cbz	r0, 4ffa <CC_PalInit+0x3e>
    4ff6:	4620      	mov	r0, r4
    4ff8:	bd10      	pop	{r4, pc}
    4ffa:	f000 f83f 	bl	507c <CC_PalPowerSaveModeInit>
    4ffe:	4620      	mov	r0, r4
    5000:	e7fa      	b.n	4ff8 <CC_PalInit+0x3c>
    5002:	bf00      	nop
    5004:	20000108 	.word	0x20000108
    5008:	20000104 	.word	0x20000104
    500c:	20000100 	.word	0x20000100
    5010:	200000f8 	.word	0x200000f8
    5014:	200000fc 	.word	0x200000fc

00005018 <CC_PalTerminate>:
    5018:	b508      	push	{r3, lr}
    501a:	4808      	ldr	r0, [pc, #32]	; (503c <CC_PalTerminate+0x24>)
    501c:	f000 f824 	bl	5068 <CC_PalMutexDestroy>
    5020:	4807      	ldr	r0, [pc, #28]	; (5040 <CC_PalTerminate+0x28>)
    5022:	f000 f821 	bl	5068 <CC_PalMutexDestroy>
    5026:	4807      	ldr	r0, [pc, #28]	; (5044 <CC_PalTerminate+0x2c>)
    5028:	f000 f81e 	bl	5068 <CC_PalMutexDestroy>
    502c:	4806      	ldr	r0, [pc, #24]	; (5048 <CC_PalTerminate+0x30>)
    502e:	f000 f81b 	bl	5068 <CC_PalMutexDestroy>
    5032:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5036:	f000 b80b 	b.w	5050 <CC_PalDmaTerminate>
    503a:	bf00      	nop
    503c:	20000108 	.word	0x20000108
    5040:	20000104 	.word	0x20000104
    5044:	20000100 	.word	0x20000100
    5048:	200000fc 	.word	0x200000fc

0000504c <CC_PalDmaInit>:
    504c:	2000      	movs	r0, #0
    504e:	4770      	bx	lr

00005050 <CC_PalDmaTerminate>:
    5050:	4770      	bx	lr
    5052:	bf00      	nop

00005054 <CC_PalMutexCreate>:
    5054:	b508      	push	{r3, lr}
    5056:	4b03      	ldr	r3, [pc, #12]	; (5064 <CC_PalMutexCreate+0x10>)
    5058:	6802      	ldr	r2, [r0, #0]
    505a:	681b      	ldr	r3, [r3, #0]
    505c:	6810      	ldr	r0, [r2, #0]
    505e:	4798      	blx	r3
    5060:	2000      	movs	r0, #0
    5062:	bd08      	pop	{r3, pc}
    5064:	20000120 	.word	0x20000120

00005068 <CC_PalMutexDestroy>:
    5068:	b508      	push	{r3, lr}
    506a:	4b03      	ldr	r3, [pc, #12]	; (5078 <CC_PalMutexDestroy+0x10>)
    506c:	6802      	ldr	r2, [r0, #0]
    506e:	685b      	ldr	r3, [r3, #4]
    5070:	6810      	ldr	r0, [r2, #0]
    5072:	4798      	blx	r3
    5074:	2000      	movs	r0, #0
    5076:	bd08      	pop	{r3, pc}
    5078:	20000120 	.word	0x20000120

0000507c <CC_PalPowerSaveModeInit>:
    507c:	b570      	push	{r4, r5, r6, lr}
    507e:	4c09      	ldr	r4, [pc, #36]	; (50a4 <CC_PalPowerSaveModeInit+0x28>)
    5080:	4d09      	ldr	r5, [pc, #36]	; (50a8 <CC_PalPowerSaveModeInit+0x2c>)
    5082:	6920      	ldr	r0, [r4, #16]
    5084:	68ab      	ldr	r3, [r5, #8]
    5086:	4798      	blx	r3
    5088:	b118      	cbz	r0, 5092 <CC_PalPowerSaveModeInit+0x16>
    508a:	4b08      	ldr	r3, [pc, #32]	; (50ac <CC_PalPowerSaveModeInit+0x30>)
    508c:	4808      	ldr	r0, [pc, #32]	; (50b0 <CC_PalPowerSaveModeInit+0x34>)
    508e:	685b      	ldr	r3, [r3, #4]
    5090:	4798      	blx	r3
    5092:	2100      	movs	r1, #0
    5094:	4a07      	ldr	r2, [pc, #28]	; (50b4 <CC_PalPowerSaveModeInit+0x38>)
    5096:	68eb      	ldr	r3, [r5, #12]
    5098:	6011      	str	r1, [r2, #0]
    509a:	6920      	ldr	r0, [r4, #16]
    509c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    50a0:	4718      	bx	r3
    50a2:	bf00      	nop
    50a4:	2000010c 	.word	0x2000010c
    50a8:	20000120 	.word	0x20000120
    50ac:	200000f0 	.word	0x200000f0
    50b0:	00008954 	.word	0x00008954
    50b4:	20001bc4 	.word	0x20001bc4

000050b8 <CC_PalPowerSaveModeSelect>:
    50b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50ba:	4d1a      	ldr	r5, [pc, #104]	; (5124 <CC_PalPowerSaveModeSelect+0x6c>)
    50bc:	4e1a      	ldr	r6, [pc, #104]	; (5128 <CC_PalPowerSaveModeSelect+0x70>)
    50be:	4604      	mov	r4, r0
    50c0:	68b2      	ldr	r2, [r6, #8]
    50c2:	6928      	ldr	r0, [r5, #16]
    50c4:	4790      	blx	r2
    50c6:	b9e8      	cbnz	r0, 5104 <CC_PalPowerSaveModeSelect+0x4c>
    50c8:	4f18      	ldr	r7, [pc, #96]	; (512c <CC_PalPowerSaveModeSelect+0x74>)
    50ca:	683b      	ldr	r3, [r7, #0]
    50cc:	b14c      	cbz	r4, 50e2 <CC_PalPowerSaveModeSelect+0x2a>
    50ce:	b1a3      	cbz	r3, 50fa <CC_PalPowerSaveModeSelect+0x42>
    50d0:	2b01      	cmp	r3, #1
    50d2:	d019      	beq.n	5108 <CC_PalPowerSaveModeSelect+0x50>
    50d4:	3b01      	subs	r3, #1
    50d6:	603b      	str	r3, [r7, #0]
    50d8:	6928      	ldr	r0, [r5, #16]
    50da:	68f3      	ldr	r3, [r6, #12]
    50dc:	4798      	blx	r3
    50de:	2000      	movs	r0, #0
    50e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50e2:	b943      	cbnz	r3, 50f6 <CC_PalPowerSaveModeSelect+0x3e>
    50e4:	2101      	movs	r1, #1
    50e6:	4a12      	ldr	r2, [pc, #72]	; (5130 <CC_PalPowerSaveModeSelect+0x78>)
    50e8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    50ec:	4911      	ldr	r1, [pc, #68]	; (5134 <CC_PalPowerSaveModeSelect+0x7c>)
    50ee:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    50f2:	2a00      	cmp	r2, #0
    50f4:	d1fb      	bne.n	50ee <CC_PalPowerSaveModeSelect+0x36>
    50f6:	3301      	adds	r3, #1
    50f8:	603b      	str	r3, [r7, #0]
    50fa:	68f3      	ldr	r3, [r6, #12]
    50fc:	6928      	ldr	r0, [r5, #16]
    50fe:	4798      	blx	r3
    5100:	2000      	movs	r0, #0
    5102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5104:	480c      	ldr	r0, [pc, #48]	; (5138 <CC_PalPowerSaveModeSelect+0x80>)
    5106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5108:	4a0a      	ldr	r2, [pc, #40]	; (5134 <CC_PalPowerSaveModeSelect+0x7c>)
    510a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    510e:	2b00      	cmp	r3, #0
    5110:	d1fb      	bne.n	510a <CC_PalPowerSaveModeSelect+0x52>
    5112:	4a07      	ldr	r2, [pc, #28]	; (5130 <CC_PalPowerSaveModeSelect+0x78>)
    5114:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    5118:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    511c:	f7ff ff48 	bl	4fb0 <CC_HalMaskInterrupt>
    5120:	683b      	ldr	r3, [r7, #0]
    5122:	e7d7      	b.n	50d4 <CC_PalPowerSaveModeSelect+0x1c>
    5124:	2000010c 	.word	0x2000010c
    5128:	20000120 	.word	0x20000120
    512c:	20001bc4 	.word	0x20001bc4
    5130:	50840000 	.word	0x50840000
    5134:	50841000 	.word	0x50841000
    5138:	ffff8fe9 	.word	0xffff8fe9

0000513c <mutex_free>:
    513c:	b510      	push	{r4, lr}
    513e:	4604      	mov	r4, r0
    5140:	b150      	cbz	r0, 5158 <mutex_free+0x1c>
    5142:	6863      	ldr	r3, [r4, #4]
    5144:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    5148:	d005      	beq.n	5156 <mutex_free+0x1a>
    514a:	4a06      	ldr	r2, [pc, #24]	; (5164 <mutex_free+0x28>)
    514c:	4293      	cmp	r3, r2
    514e:	d002      	beq.n	5156 <mutex_free+0x1a>
    5150:	2300      	movs	r3, #0
    5152:	6062      	str	r2, [r4, #4]
    5154:	6023      	str	r3, [r4, #0]
    5156:	bd10      	pop	{r4, pc}
    5158:	4b03      	ldr	r3, [pc, #12]	; (5168 <mutex_free+0x2c>)
    515a:	4804      	ldr	r0, [pc, #16]	; (516c <mutex_free+0x30>)
    515c:	685b      	ldr	r3, [r3, #4]
    515e:	4798      	blx	r3
    5160:	e7ef      	b.n	5142 <mutex_free+0x6>
    5162:	bf00      	nop
    5164:	a95c5f2c 	.word	0xa95c5f2c
    5168:	200000f0 	.word	0x200000f0
    516c:	00008974 	.word	0x00008974

00005170 <mutex_lock>:
    5170:	b1c8      	cbz	r0, 51a6 <mutex_lock+0x36>
    5172:	6843      	ldr	r3, [r0, #4]
    5174:	4a0d      	ldr	r2, [pc, #52]	; (51ac <mutex_lock+0x3c>)
    5176:	4293      	cmp	r3, r2
    5178:	d013      	beq.n	51a2 <mutex_lock+0x32>
    517a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    517e:	d00e      	beq.n	519e <mutex_lock+0x2e>
    5180:	2301      	movs	r3, #1
    5182:	e850 2f00 	ldrex	r2, [r0]
    5186:	4619      	mov	r1, r3
    5188:	e840 1c00 	strex	ip, r1, [r0]
    518c:	f09c 0f00 	teq	ip, #0
    5190:	d1f7      	bne.n	5182 <mutex_lock+0x12>
    5192:	2a01      	cmp	r2, #1
    5194:	d0f5      	beq.n	5182 <mutex_lock+0x12>
    5196:	f3bf 8f5f 	dmb	sy
    519a:	2000      	movs	r0, #0
    519c:	4770      	bx	lr
    519e:	4804      	ldr	r0, [pc, #16]	; (51b0 <mutex_lock+0x40>)
    51a0:	4770      	bx	lr
    51a2:	4804      	ldr	r0, [pc, #16]	; (51b4 <mutex_lock+0x44>)
    51a4:	4770      	bx	lr
    51a6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    51aa:	4770      	bx	lr
    51ac:	a95c5f2c 	.word	0xa95c5f2c
    51b0:	ffff8fe9 	.word	0xffff8fe9
    51b4:	ffff8fea 	.word	0xffff8fea

000051b8 <mutex_unlock>:
    51b8:	4603      	mov	r3, r0
    51ba:	b180      	cbz	r0, 51de <mutex_unlock+0x26>
    51bc:	6842      	ldr	r2, [r0, #4]
    51be:	4909      	ldr	r1, [pc, #36]	; (51e4 <mutex_unlock+0x2c>)
    51c0:	428a      	cmp	r2, r1
    51c2:	d00a      	beq.n	51da <mutex_unlock+0x22>
    51c4:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    51c8:	d005      	beq.n	51d6 <mutex_unlock+0x1e>
    51ca:	f3bf 8f5f 	dmb	sy
    51ce:	2200      	movs	r2, #0
    51d0:	4610      	mov	r0, r2
    51d2:	601a      	str	r2, [r3, #0]
    51d4:	4770      	bx	lr
    51d6:	4804      	ldr	r0, [pc, #16]	; (51e8 <mutex_unlock+0x30>)
    51d8:	4770      	bx	lr
    51da:	4804      	ldr	r0, [pc, #16]	; (51ec <mutex_unlock+0x34>)
    51dc:	4770      	bx	lr
    51de:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    51e2:	4770      	bx	lr
    51e4:	a95c5f2c 	.word	0xa95c5f2c
    51e8:	ffff8fe9 	.word	0xffff8fe9
    51ec:	ffff8fea 	.word	0xffff8fea

000051f0 <mutex_init>:
    51f0:	b510      	push	{r4, lr}
    51f2:	4604      	mov	r4, r0
    51f4:	b120      	cbz	r0, 5200 <mutex_init+0x10>
    51f6:	2300      	movs	r3, #0
    51f8:	4a03      	ldr	r2, [pc, #12]	; (5208 <mutex_init+0x18>)
    51fa:	6023      	str	r3, [r4, #0]
    51fc:	6062      	str	r2, [r4, #4]
    51fe:	bd10      	pop	{r4, pc}
    5200:	4802      	ldr	r0, [pc, #8]	; (520c <mutex_init+0x1c>)
    5202:	f7ff fe73 	bl	4eec <CC_PalAbort>
    5206:	e7f6      	b.n	51f6 <mutex_init+0x6>
    5208:	3a00003a 	.word	0x3a00003a
    520c:	0000899c 	.word	0x0000899c

00005210 <flash_device_base>:

static const struct device *flash_dev = DEVICE_DT_GET(FLASH_DEVICE_NODE);

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    if (fd_id != FLASH_DEVICE_ID) {
    5210:	b908      	cbnz	r0, 5216 <flash_device_base+0x6>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
    }
    *ret = FLASH_DEVICE_BASE;
    5212:	6008      	str	r0, [r1, #0]
    return 0;
    5214:	4770      	bx	lr
        return -EINVAL;
    5216:	f06f 0015 	mvn.w	r0, #21
}
    521a:	4770      	bx	lr

0000521c <flash_area_id_from_multi_image_slot>:
 * MCUBoot uses continuous numbering for the primary slot, the secondary slot,
 * and the scratch while zephyr might number it differently.
 */
int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    521c:	b129      	cbz	r1, 522a <flash_area_id_from_multi_image_slot+0xe>
#if defined(CONFIG_BOOT_SWAP_USING_SCRATCH)
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }

    return -EINVAL; /* flash_area_open will fail on that */
    521e:	2901      	cmp	r1, #1
    5220:	bf0c      	ite	eq
    5222:	2008      	moveq	r0, #8
    5224:	f06f 0015 	mvnne.w	r0, #21
    5228:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    522a:	2002      	movs	r0, #2
}
    522c:	4770      	bx	lr

0000522e <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    522e:	2000      	movs	r0, #0
    5230:	4770      	bx	lr

00005232 <flash_area_get_sector>:
    return ERASED_VAL;
}

int flash_area_get_sector(const struct flash_area *fap, off_t off,
                          struct flash_sector *fsp)
{
    5232:	b530      	push	{r4, r5, lr}
    struct flash_pages_info fpi;
    int rc;

    if (off >= fap->fa_size) {
    5234:	6883      	ldr	r3, [r0, #8]
{
    5236:	4604      	mov	r4, r0
    if (off >= fap->fa_size) {
    5238:	428b      	cmp	r3, r1
{
    523a:	4615      	mov	r5, r2
    523c:	b085      	sub	sp, #20
    if (off >= fap->fa_size) {
    523e:	d90e      	bls.n	525e <flash_area_get_sector+0x2c>
        return -ERANGE;
    }

    rc = flash_get_page_info_by_offs(fap->fa_dev, fap->fa_off + off,
    5240:	6863      	ldr	r3, [r4, #4]
    5242:	68c0      	ldr	r0, [r0, #12]
    5244:	4419      	add	r1, r3
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    5246:	aa01      	add	r2, sp, #4
    5248:	f000 fe47 	bl	5eda <z_impl_flash_get_page_info_by_offs>
            &fpi);

    if (rc == 0) {
    524c:	b928      	cbnz	r0, 525a <flash_area_get_sector+0x28>
        fsp->fs_off = fpi.start_offset - fap->fa_off;
    524e:	6862      	ldr	r2, [r4, #4]
    5250:	9b01      	ldr	r3, [sp, #4]
    5252:	1a9b      	subs	r3, r3, r2
    5254:	602b      	str	r3, [r5, #0]
        fsp->fs_size = fpi.size;
    5256:	9b02      	ldr	r3, [sp, #8]
    5258:	606b      	str	r3, [r5, #4]
    }

    return rc;
}
    525a:	b005      	add	sp, #20
    525c:	bd30      	pop	{r4, r5, pc}
        return -ERANGE;
    525e:	f06f 0021 	mvn.w	r0, #33	; 0x21
    5262:	e7fa      	b.n	525a <flash_area_get_sector+0x28>

00005264 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    5264:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5268:	460e      	mov	r6, r1
    526a:	4617      	mov	r7, r2
    526c:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    526e:	4604      	mov	r4, r0
    5270:	b928      	cbnz	r0, 527e <bootutil_tlv_iter_begin+0x1a>
        return -1;
    5272:	f04f 38ff 	mov.w	r8, #4294967295
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    5276:	4640      	mov	r0, r8
    5278:	b003      	add	sp, #12
    527a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    527e:	2900      	cmp	r1, #0
    5280:	d0f7      	beq.n	5272 <bootutil_tlv_iter_begin+0xe>
    5282:	2a00      	cmp	r2, #0
    5284:	d0f5      	beq.n	5272 <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    5286:	68cb      	ldr	r3, [r1, #12]
    5288:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    528a:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    528c:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    528e:	2304      	movs	r3, #4
    5290:	4629      	mov	r1, r5
    5292:	eb0d 0203 	add.w	r2, sp, r3
    5296:	f000 fc15 	bl	5ac4 <flash_area_read>
    529a:	4680      	mov	r8, r0
    529c:	2800      	cmp	r0, #0
    529e:	d1e8      	bne.n	5272 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    52a0:	f646 1208 	movw	r2, #26888	; 0x6908
    52a4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    52a8:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    52aa:	4291      	cmp	r1, r2
    52ac:	d125      	bne.n	52fa <bootutil_tlv_iter_begin+0x96>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    52ae:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    52b2:	4299      	cmp	r1, r3
    52b4:	d1dd      	bne.n	5272 <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    52b6:	2304      	movs	r3, #4
    52b8:	4638      	mov	r0, r7
    52ba:	eb0d 0203 	add.w	r2, sp, r3
    52be:	4429      	add	r1, r5
    52c0:	f000 fc00 	bl	5ac4 <flash_area_read>
    52c4:	2800      	cmp	r0, #0
    52c6:	d1d4      	bne.n	5272 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    52c8:	f646 1307 	movw	r3, #26887	; 0x6907
    52cc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    52d0:	429a      	cmp	r2, r3
    52d2:	d1ce      	bne.n	5272 <bootutil_tlv_iter_begin+0xe>
    it->fap = fap;
    52d4:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot = prot;
    52d8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->type = type;
    52dc:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot = prot;
    52e0:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    52e2:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    52e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    52e8:	442b      	add	r3, r5
    52ea:	60e3      	str	r3, [r4, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    52ec:	8973      	ldrh	r3, [r6, #10]
    52ee:	4413      	add	r3, r2
    52f0:	442b      	add	r3, r5
    it->tlv_off = off_ + sizeof(info);
    52f2:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    52f4:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    52f6:	6125      	str	r5, [r4, #16]
    return 0;
    52f8:	e7bd      	b.n	5276 <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    52fa:	2b00      	cmp	r3, #0
    52fc:	d0e4      	beq.n	52c8 <bootutil_tlv_iter_begin+0x64>
    52fe:	e7b8      	b.n	5272 <bootutil_tlv_iter_begin+0xe>

00005300 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    5300:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5304:	460e      	mov	r6, r1
    5306:	4617      	mov	r7, r2
    5308:	461d      	mov	r5, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    530a:	4604      	mov	r4, r0
    530c:	b920      	cbnz	r0, 5318 <bootutil_tlv_iter_next+0x18>
        return -1;
    530e:	f04f 30ff 	mov.w	r0, #4294967295

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    5312:	b002      	add	sp, #8
    5314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    5318:	6803      	ldr	r3, [r0, #0]
    531a:	2b00      	cmp	r3, #0
    531c:	d0f7      	beq.n	530e <bootutil_tlv_iter_next+0xe>
    531e:	6843      	ldr	r3, [r0, #4]
    5320:	2b00      	cmp	r3, #0
    5322:	d0f4      	beq.n	530e <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5324:	f64f 78ff 	movw	r8, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    5328:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    532c:	429a      	cmp	r2, r3
    532e:	d216      	bcs.n	535e <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    5330:	6823      	ldr	r3, [r4, #0]
    5332:	895b      	ldrh	r3, [r3, #10]
    5334:	b123      	cbz	r3, 5340 <bootutil_tlv_iter_next+0x40>
    5336:	68e3      	ldr	r3, [r4, #12]
    5338:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    533a:	bf04      	itt	eq
    533c:	3304      	addeq	r3, #4
    533e:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    5340:	2304      	movs	r3, #4
    5342:	6921      	ldr	r1, [r4, #16]
    5344:	6860      	ldr	r0, [r4, #4]
    5346:	eb0d 0203 	add.w	r2, sp, r3
    534a:	f000 fbbb 	bl	5ac4 <flash_area_read>
        if (rc) {
    534e:	2800      	cmp	r0, #0
    5350:	d1dd      	bne.n	530e <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    5352:	7aa3      	ldrb	r3, [r4, #10]
    5354:	b12b      	cbz	r3, 5362 <bootutil_tlv_iter_next+0x62>
    5356:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
    535a:	429a      	cmp	r2, r3
    535c:	d301      	bcc.n	5362 <bootutil_tlv_iter_next+0x62>
            return 1;
    535e:	2001      	movs	r0, #1
    5360:	e7d7      	b.n	5312 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5362:	8923      	ldrh	r3, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    5364:	f8bd 1006 	ldrh.w	r1, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5368:	4543      	cmp	r3, r8
    536a:	f101 0204 	add.w	r2, r1, #4
    536e:	d003      	beq.n	5378 <bootutil_tlv_iter_next+0x78>
    5370:	f8bd c004 	ldrh.w	ip, [sp, #4]
    5374:	459c      	cmp	ip, r3
    5376:	d10b      	bne.n	5390 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    5378:	b115      	cbz	r5, 5380 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    537a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    537e:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    5380:	6923      	ldr	r3, [r4, #16]
    5382:	3304      	adds	r3, #4
    5384:	6033      	str	r3, [r6, #0]
            *len = tlv.it_len;
    5386:	8039      	strh	r1, [r7, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    5388:	6923      	ldr	r3, [r4, #16]
    538a:	4413      	add	r3, r2
    538c:	6123      	str	r3, [r4, #16]
            return 0;
    538e:	e7c0      	b.n	5312 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    5390:	6923      	ldr	r3, [r4, #16]
    5392:	4413      	add	r3, r2
    5394:	6123      	str	r3, [r4, #16]
    5396:	e7c7      	b.n	5328 <bootutil_tlv_iter_next+0x28>

00005398 <boot_trailer_sz>:
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    5398:	f44f 7340 	mov.w	r3, #768	; 0x300
    539c:	4358      	muls	r0, r3
}
    539e:	3030      	adds	r0, #48	; 0x30
    53a0:	4770      	bx	lr

000053a2 <boot_status_entries>:
	return fa->fa_id;
    53a2:	780b      	ldrb	r3, [r1, #0]
    if (flash_area_get_id(fap) == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    53a4:	2b02      	cmp	r3, #2
    53a6:	d006      	beq.n	53b6 <boot_status_entries+0x14>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    53a8:	2b08      	cmp	r3, #8
    53aa:	bf14      	ite	ne
    53ac:	f04f 30ff 	movne.w	r0, #4294967295
    53b0:	f44f 7040 	moveq.w	r0, #768	; 0x300
    53b4:	4770      	bx	lr
    53b6:	f44f 7040 	mov.w	r0, #768	; 0x300
}
    53ba:	4770      	bx	lr

000053bc <boot_status_off>:
{
    53bc:	b510      	push	{r4, lr}
    53be:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    53c0:	f000 fbbe 	bl	5b40 <flash_area_align>
}
    53c4:	f44f 7240 	mov.w	r2, #768	; 0x300
    return flash_area_get_size(fap) - off_from_end;
    53c8:	68a3      	ldr	r3, [r4, #8]
    53ca:	3b30      	subs	r3, #48	; 0x30
}
    53cc:	fb02 3010 	mls	r0, r2, r0, r3
    53d0:	bd10      	pop	{r4, pc}

000053d2 <boot_read_swap_size>:

int
boot_read_swap_size(const struct flash_area *fap, uint32_t *swap_size)
{
    53d2:	b570      	push	{r4, r5, r6, lr}
    53d4:	460d      	mov	r5, r1
    53d6:	4604      	mov	r4, r0
}

static inline uint32_t
boot_swap_size_off(const struct flash_area *fap)
{
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    53d8:	f000 ffbf 	bl	635a <boot_swap_info_off>
    uint32_t off;
    int rc;

    off = boot_swap_size_off(fap);
    rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    53dc:	462a      	mov	r2, r5
    53de:	f1a0 0108 	sub.w	r1, r0, #8
    53e2:	2304      	movs	r3, #4
    53e4:	4620      	mov	r0, r4

    return rc;
}
    53e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    53ea:	f000 bb6b 	b.w	5ac4 <flash_area_read>

000053ee <boot_write_copy_done>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    53ee:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    53f0:	2201      	movs	r2, #1
    53f2:	3918      	subs	r1, #24
    53f4:	f021 0107 	bic.w	r1, r1, #7
    53f8:	3908      	subs	r1, #8
    53fa:	f001 b81d 	b.w	6438 <boot_write_trailer_flag>

000053fe <boot_write_swap_size>:
}

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    53fe:	b513      	push	{r0, r1, r4, lr}
    5400:	4604      	mov	r4, r0
    5402:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    5404:	f000 ffa9 	bl	635a <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)flash_area_get_off(fap) + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    5408:	2304      	movs	r3, #4
    540a:	f1a0 0108 	sub.w	r1, r0, #8
    540e:	eb0d 0203 	add.w	r2, sp, r3
    5412:	4620      	mov	r0, r4
    5414:	f000 ffe4 	bl	63e0 <boot_write_trailer>
}
    5418:	b002      	add	sp, #8
    541a:	bd10      	pop	{r4, pc}

0000541c <bootutil_max_image_size>:
    return 0;
}
#endif

uint32_t bootutil_max_image_size(const struct flash_area *fap)
{
    541c:	b513      	push	{r0, r1, r4, lr}
    541e:	4604      	mov	r4, r0
#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SINGLE_APPLICATION_SLOT)
    return boot_status_off(fap);
#elif defined(MCUBOOT_SWAP_USING_MOVE)
    struct flash_sector sector;
    /* get the last sector offset */
    int rc = flash_area_get_sector(fap, boot_status_off(fap), &sector);
    5420:	f7ff ffcc 	bl	53bc <boot_status_off>
    5424:	466a      	mov	r2, sp
    5426:	4601      	mov	r1, r0
    5428:	4620      	mov	r0, r4
    542a:	f7ff ff02 	bl	5232 <flash_area_get_sector>
    if (rc) {
    542e:	b910      	cbnz	r0, 5436 <bootutil_max_image_size+0x1a>
	return fs->fs_off;
    5430:	9800      	ldr	r0, [sp, #0]
#elif defined(MCUBOOT_DIRECT_XIP)
    return boot_swap_info_off(fap);
#elif defined(MCUBOOT_RAM_LOAD)
    return boot_swap_info_off(fap);
#endif
}
    5432:	b002      	add	sp, #8
    5434:	bd10      	pop	{r4, pc}
        return 0; /* Returning of zero here should cause any check which uses
    5436:	2000      	movs	r0, #0
    5438:	e7fb      	b.n	5432 <bootutil_max_image_size+0x16>

0000543a <fih_panic_loop>:
 */
__attribute__((used))
__attribute__((noinline))
void fih_panic_loop(void)
{
    __asm volatile ("b fih_panic_loop");
    543a:	f7ff bffe 	b.w	543a <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    543e:	f7ff bffc 	b.w	543a <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    5442:	f7ff bffa 	b.w	543a <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    5446:	f7ff bff8 	b.w	543a <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    544a:	f7ff bff6 	b.w	543a <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    544e:	f7ff bff4 	b.w	543a <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    5452:	f7ff bff2 	b.w	543a <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    5456:	f7ff bff0 	b.w	543a <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    545a:	f7ff bfee 	b.w	543a <fih_panic_loop>
}
    545e:	4770      	bx	lr

00005460 <boot_read_image_headers>:
{
    5460:	b570      	push	{r4, r5, r6, lr}
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5462:	4613      	mov	r3, r2
{
    5464:	460e      	mov	r6, r1
    5466:	4615      	mov	r5, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5468:	2100      	movs	r1, #0
    546a:	4602      	mov	r2, r0
{
    546c:	4604      	mov	r4, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    546e:	f7fb fce5 	bl	e3c <boot_read_image_header>
        if (rc != 0) {
    5472:	b950      	cbnz	r0, 548a <boot_read_image_headers+0x2a>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5474:	462b      	mov	r3, r5
    5476:	2101      	movs	r1, #1
    5478:	4620      	mov	r0, r4
    547a:	f104 022c 	add.w	r2, r4, #44	; 0x2c
    547e:	f7fb fcdd 	bl	e3c <boot_read_image_header>
        if (rc != 0) {
    5482:	b110      	cbz	r0, 548a <boot_read_image_headers+0x2a>
                return 0;
    5484:	2e00      	cmp	r6, #0
    5486:	bf08      	it	eq
    5488:	2000      	moveq	r0, #0
}
    548a:	bd70      	pop	{r4, r5, r6, pc}

0000548c <boot_read_image_size.constprop.0.isra.0>:
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    548c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    548e:	4604      	mov	r4, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5490:	2000      	movs	r0, #0
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    5492:	460d      	mov	r5, r1
    5494:	4616      	mov	r6, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5496:	f7ff fec1 	bl	521c <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    549a:	4669      	mov	r1, sp
    549c:	b2c0      	uxtb	r0, r0
    549e:	f7fc fb3d 	bl	1b1c <flash_area_open>
    if (rc != 0) {
    54a2:	bb30      	cbnz	r0, 54f2 <boot_read_image_size.constprop.0.isra.0+0x66>
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    54a4:	232c      	movs	r3, #44	; 0x2c
    54a6:	fb03 4405 	mla	r4, r3, r5, r4
    54aa:	68e3      	ldr	r3, [r4, #12]
    54ac:	8925      	ldrh	r5, [r4, #8]
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    54ae:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    54b0:	441d      	add	r5, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    54b2:	2304      	movs	r3, #4
    54b4:	4629      	mov	r1, r5
    54b6:	eb0d 0203 	add.w	r2, sp, r3
    54ba:	f000 fb03 	bl	5ac4 <flash_area_read>
    54be:	b9c0      	cbnz	r0, 54f2 <boot_read_image_size.constprop.0.isra.0+0x66>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    54c0:	f646 1308 	movw	r3, #26888	; 0x6908
    54c4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    54c8:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    54ca:	429a      	cmp	r2, r3
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    54cc:	9800      	ldr	r0, [sp, #0]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    54ce:	d115      	bne.n	54fc <boot_read_image_size.constprop.0.isra.0+0x70>
        if (protect_tlv_size != info.it_tlv_tot) {
    54d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    54d4:	429c      	cmp	r4, r3
    54d6:	d10c      	bne.n	54f2 <boot_read_image_size.constprop.0.isra.0+0x66>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    54d8:	2304      	movs	r3, #4
    54da:	1961      	adds	r1, r4, r5
    54dc:	eb0d 0203 	add.w	r2, sp, r3
    54e0:	f000 faf0 	bl	5ac4 <flash_area_read>
    54e4:	b928      	cbnz	r0, 54f2 <boot_read_image_size.constprop.0.isra.0+0x66>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    54e6:	f646 1307 	movw	r3, #26887	; 0x6907
    54ea:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    54ee:	429a      	cmp	r2, r3
    54f0:	d007      	beq.n	5502 <boot_read_image_size.constprop.0.isra.0+0x76>
    flash_area_close(fap);
    54f2:	9800      	ldr	r0, [sp, #0]
    54f4:	f000 fae5 	bl	5ac2 <flash_area_close>
}
    54f8:	b002      	add	sp, #8
    54fa:	bd70      	pop	{r4, r5, r6, pc}
    } else if (protect_tlv_size != 0) {
    54fc:	2c00      	cmp	r4, #0
    54fe:	d0f2      	beq.n	54e6 <boot_read_image_size.constprop.0.isra.0+0x5a>
    5500:	e7f7      	b.n	54f2 <boot_read_image_size.constprop.0.isra.0+0x66>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    5502:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5506:	4421      	add	r1, r4
    5508:	4429      	add	r1, r5
    550a:	6031      	str	r1, [r6, #0]
    rc = 0;
    550c:	e7f1      	b.n	54f2 <boot_read_image_size.constprop.0.isra.0+0x66>

0000550e <boot_read_sectors>:
{
    550e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5510:	f44f 7580 	mov.w	r5, #256	; 0x100
{
    5514:	4604      	mov	r4, r0
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5516:	6a42      	ldr	r2, [r0, #36]	; 0x24
    5518:	a901      	add	r1, sp, #4
    551a:	2002      	movs	r0, #2
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    551c:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    551e:	f7fc fb25 	bl	1b6c <flash_area_get_sectors>
    if (rc != 0) {
    5522:	b958      	cbnz	r0, 553c <boot_read_sectors+0x2e>
    *out_num_sectors = num_sectors;
    5524:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5526:	2008      	movs	r0, #8
    5528:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    552a:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    552c:	a901      	add	r1, sp, #4
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    552e:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5530:	f7fc fb1c 	bl	1b6c <flash_area_get_sectors>
    if (rc != 0) {
    5534:	4605      	mov	r5, r0
    5536:	b128      	cbz	r0, 5544 <boot_read_sectors+0x36>
        return BOOT_EFLASH_SEC;
    5538:	2509      	movs	r5, #9
    553a:	e000      	b.n	553e <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    553c:	2501      	movs	r5, #1
}
    553e:	4628      	mov	r0, r5
    5540:	b003      	add	sp, #12
    5542:	bd30      	pop	{r4, r5, pc}
    *out_num_sectors = num_sectors;
    5544:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5546:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    5548:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    554a:	f000 faf9 	bl	5b40 <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    554e:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    5550:	e7f5      	b.n	553e <boot_read_sectors+0x30>

00005552 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    5552:	2301      	movs	r3, #1
    5554:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    5556:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    555a:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    555c:	2300      	movs	r3, #0
    bs->source = 0;
    555e:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    5562:	4770      	bx	lr

00005564 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    5564:	7943      	ldrb	r3, [r0, #5]
    5566:	2b01      	cmp	r3, #1
    5568:	d107      	bne.n	557a <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    556a:	6803      	ldr	r3, [r0, #0]
    556c:	2b01      	cmp	r3, #1
    556e:	d104      	bne.n	557a <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    5570:	7900      	ldrb	r0, [r0, #4]
    5572:	1e43      	subs	r3, r0, #1
    5574:	4258      	negs	r0, r3
    5576:	4158      	adcs	r0, r3
    5578:	4770      	bx	lr
    557a:	2000      	movs	r0, #0
}
    557c:	4770      	bx	lr

0000557e <boot_write_status>:
{
    557e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5580:	4606      	mov	r6, r0
    5582:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    5584:	2002      	movs	r0, #2
    5586:	a901      	add	r1, sp, #4
    5588:	f7fc fac8 	bl	1b1c <flash_area_open>
    if (rc != 0) {
    558c:	bb38      	cbnz	r0, 55de <boot_write_status+0x60>
    off = boot_status_off(fap) +
    558e:	9801      	ldr	r0, [sp, #4]
    5590:	f7ff ff14 	bl	53bc <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5594:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    5596:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5598:	4628      	mov	r0, r5
    559a:	f000 f93d 	bl	5818 <boot_status_internal_off>
    off = boot_status_off(fap) +
    559e:	4404      	add	r4, r0
    align = flash_area_align(fap);
    55a0:	9801      	ldr	r0, [sp, #4]
    55a2:	f000 facd 	bl	5b40 <flash_area_align>
    55a6:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    55a8:	9801      	ldr	r0, [sp, #4]
    55aa:	f000 fad0 	bl	5b4e <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    55ae:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    55b0:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    55b2:	eb0d 0002 	add.w	r0, sp, r2
    55b6:	f000 fb6f 	bl	5c98 <memset>
    buf[0] = bs->state;
    55ba:	792b      	ldrb	r3, [r5, #4]
    rc = flash_area_write(fap, off, buf, align);
    55bc:	4621      	mov	r1, r4
    buf[0] = bs->state;
    55be:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    55c2:	9801      	ldr	r0, [sp, #4]
    55c4:	4633      	mov	r3, r6
    55c6:	aa02      	add	r2, sp, #8
    55c8:	f000 fa91 	bl	5aee <flash_area_write>
    if (rc != 0) {
    55cc:	1e04      	subs	r4, r0, #0
    flash_area_close(fap);
    55ce:	9801      	ldr	r0, [sp, #4]
    if (rc != 0) {
    55d0:	bf18      	it	ne
    55d2:	2401      	movne	r4, #1
    flash_area_close(fap);
    55d4:	f000 fa75 	bl	5ac2 <flash_area_close>
}
    55d8:	4620      	mov	r0, r4
    55da:	b004      	add	sp, #16
    55dc:	bd70      	pop	{r4, r5, r6, pc}
        return BOOT_EFLASH;
    55de:	2401      	movs	r4, #1
    55e0:	e7fa      	b.n	55d8 <boot_write_status+0x5a>

000055e2 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    55e2:	f000 ba99 	b.w	5b18 <flash_area_erase>

000055e6 <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    55e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    55ea:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", flash_area_get_id(fap));

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    55ec:	2100      	movs	r1, #0
{
    55ee:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    55f0:	4608      	mov	r0, r1
    55f2:	f7ff fe13 	bl	521c <flash_area_id_from_multi_image_slot>
    55f6:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    55f8:	2101      	movs	r1, #1
    55fa:	2000      	movs	r0, #0
    55fc:	f7ff fe0e 	bl	521c <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (flash_area_get_id(fap) == fa_id_primary) {
    5600:	7833      	ldrb	r3, [r6, #0]
    5602:	429c      	cmp	r4, r3
    5604:	d021      	beq.n	564a <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (flash_area_get_id(fap) == fa_id_secondary) {
    5606:	4298      	cmp	r0, r3
    5608:	d121      	bne.n	564e <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    560a:	2501      	movs	r5, #1
    return BOOT_IMG(state, slot).num_sectors;
    560c:	232c      	movs	r3, #44	; 0x2c
    560e:	fb03 7505 	mla	r5, r3, r5, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5612:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    5614:	6aac      	ldr	r4, [r5, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5616:	f7ff febf 	bl	5398 <boot_trailer_sz>
    total_sz = 0;
    561a:	f04f 0800 	mov.w	r8, #0
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    561e:	4607      	mov	r7, r0
    sector = boot_img_num_sectors(state, slot) - 1;
    5620:	3c01      	subs	r4, #1
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    5622:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    5624:	4630      	mov	r0, r6
    5626:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    562a:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
	return fs->fs_size;
    562e:	f8d2 9004 	ldr.w	r9, [r2, #4]
    5632:	681b      	ldr	r3, [r3, #0]
    5634:	464a      	mov	r2, r9
    5636:	1ac9      	subs	r1, r1, r3
        assert(rc == 0);

        sector--;
        total_sz += sz;
    5638:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    563a:	f7ff ffd2 	bl	55e2 <boot_erase_region>
    } while (total_sz < trailer_sz);
    563e:	45b8      	cmp	r8, r7
        sector--;
    5640:	f104 34ff 	add.w	r4, r4, #4294967295
    } while (total_sz < trailer_sz);
    5644:	d3ed      	bcc.n	5622 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    5646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    564a:	2500      	movs	r5, #0
    564c:	e7de      	b.n	560c <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    564e:	2001      	movs	r0, #1
    5650:	e7f9      	b.n	5646 <swap_erase_trailer_sectors+0x60>

00005652 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    5652:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5654:	4615      	mov	r5, r2
    5656:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", flash_area_get_id(fap));

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    5658:	2008      	movs	r0, #8
    565a:	4669      	mov	r1, sp
    565c:	f000 ff03 	bl	6466 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    5660:	79e9      	ldrb	r1, [r5, #7]
    5662:	2901      	cmp	r1, #1
    5664:	d003      	beq.n	566e <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    5666:	2200      	movs	r2, #0
    5668:	4620      	mov	r0, r4
    566a:	f000 ff10 	bl	648e <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    566e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5672:	2b01      	cmp	r3, #1
    5674:	d102      	bne.n	567c <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    5676:	4620      	mov	r0, r4
    5678:	f000 fee8 	bl	644c <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    567c:	68a9      	ldr	r1, [r5, #8]
    567e:	4620      	mov	r0, r4
    5680:	f7ff febd 	bl	53fe <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    5684:	4620      	mov	r0, r4
    5686:	f7fe f963 	bl	3950 <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    568a:	2000      	movs	r0, #0
    568c:	b003      	add	sp, #12
    568e:	bd30      	pop	{r4, r5, pc}

00005690 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    5690:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5692:	460d      	mov	r5, r1
    5694:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    5696:	f000 f8fb 	bl	5890 <swap_status_source>
    569a:	4604      	mov	r4, r0
    569c:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    569e:	b350      	cbz	r0, 56f6 <swap_read_status+0x66>
    56a0:	2802      	cmp	r0, #2
    56a2:	d12d      	bne.n	5700 <swap_read_status+0x70>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    56a4:	a901      	add	r1, sp, #4
    56a6:	f7fc fa39 	bl	1b1c <flash_area_open>
    if (rc != 0) {
    56aa:	bb58      	cbnz	r0, 5704 <swap_read_status+0x74>
        return BOOT_EFLASH;
    }

    rc = swap_read_status_bytes(fap, state, bs);
    56ac:	462a      	mov	r2, r5
    56ae:	4631      	mov	r1, r6
    56b0:	9801      	ldr	r0, [sp, #4]
    56b2:	f000 f863 	bl	577c <swap_read_status_bytes>
    if (rc == 0) {
    56b6:	4604      	mov	r4, r0
    56b8:	b9d0      	cbnz	r0, 56f0 <swap_read_status+0x60>
        off = boot_swap_info_off(fap);
    56ba:	9801      	ldr	r0, [sp, #4]
    56bc:	f000 fe4d 	bl	635a <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    56c0:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    56c2:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    56c4:	f10d 0203 	add.w	r2, sp, #3
    56c8:	9801      	ldr	r0, [sp, #4]
    56ca:	f000 f9fb 	bl	5ac4 <flash_area_read>
        if (rc != 0) {
    56ce:	4604      	mov	r4, r0
    56d0:	b9a0      	cbnz	r0, 56fc <swap_read_status+0x6c>
            rc = BOOT_EFLASH;
            goto done;
        }

        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    56d2:	2201      	movs	r2, #1
    56d4:	9801      	ldr	r0, [sp, #4]
    56d6:	f10d 0103 	add.w	r1, sp, #3
    56da:	f000 fe52 	bl	6382 <bootutil_buffer_is_erased>
    56de:	b110      	cbz	r0, 56e6 <swap_read_status+0x56>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    56e0:	2301      	movs	r3, #1
    56e2:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
        }

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    56e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    56ea:	f003 030f 	and.w	r3, r3, #15
    56ee:	71eb      	strb	r3, [r5, #7]
    }

done:
    flash_area_close(fap);
    56f0:	9801      	ldr	r0, [sp, #4]
    56f2:	f000 f9e6 	bl	5ac2 <flash_area_close>

    return rc;
}
    56f6:	4620      	mov	r0, r4
    56f8:	b002      	add	sp, #8
    56fa:	bd70      	pop	{r4, r5, r6, pc}
            rc = BOOT_EFLASH;
    56fc:	2401      	movs	r4, #1
    56fe:	e7f7      	b.n	56f0 <swap_read_status+0x60>
    switch (bs->source) {
    5700:	2407      	movs	r4, #7
    5702:	e7f8      	b.n	56f6 <swap_read_status+0x66>
        return BOOT_EFLASH;
    5704:	2401      	movs	r4, #1
    5706:	e7f6      	b.n	56f6 <swap_read_status+0x66>

00005708 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    5708:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    570a:	2002      	movs	r0, #2
    570c:	a901      	add	r1, sp, #4
    570e:	f7fc fa05 	bl	1b1c <flash_area_open>
            &fap);
    if (rc != 0) {
    5712:	b948      	cbnz	r0, 5728 <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    5714:	9801      	ldr	r0, [sp, #4]
    5716:	f7ff fe6a 	bl	53ee <boot_write_copy_done>
    571a:	4604      	mov	r4, r0
    flash_area_close(fap);
    571c:	9801      	ldr	r0, [sp, #4]
    571e:	f000 f9d0 	bl	5ac2 <flash_area_close>
    return rc;
}
    5722:	4620      	mov	r0, r4
    5724:	b002      	add	sp, #8
    5726:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    5728:	2401      	movs	r4, #1
    572a:	e7fa      	b.n	5722 <swap_set_copy_done+0x1a>

0000572c <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    572c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    572e:	2002      	movs	r0, #2
    5730:	a901      	add	r1, sp, #4
    5732:	f7fc f9f3 	bl	1b1c <flash_area_open>
            &fap);
    if (rc != 0) {
    5736:	b9a8      	cbnz	r0, 5764 <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    5738:	9801      	ldr	r0, [sp, #4]
    573a:	a902      	add	r1, sp, #8
    573c:	f7fe f928 	bl	3990 <boot_read_swap_state>
    if (rc != 0) {
    5740:	4604      	mov	r4, r0
    5742:	b968      	cbnz	r0, 5760 <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    5744:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5748:	2b03      	cmp	r3, #3
    574a:	d103      	bne.n	5754 <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    574c:	9801      	ldr	r0, [sp, #4]
    574e:	f000 fe7d 	bl	644c <boot_write_image_ok>
    5752:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    5754:	9801      	ldr	r0, [sp, #4]
    5756:	f000 f9b4 	bl	5ac2 <flash_area_close>
    return rc;
}
    575a:	4620      	mov	r0, r4
    575c:	b004      	add	sp, #16
    575e:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    5760:	2401      	movs	r4, #1
    5762:	e7f7      	b.n	5754 <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    5764:	2401      	movs	r4, #1
    5766:	e7f8      	b.n	575a <swap_set_image_ok+0x2e>

00005768 <find_last_idx>:
    5768:	6a43      	ldr	r3, [r0, #36]	; 0x24
    last_idx = 0;
    576a:	2000      	movs	r0, #0
    576c:	685a      	ldr	r2, [r3, #4]
    sz = 0;
    576e:	4603      	mov	r3, r0
        sz += sector_sz;
    5770:	4413      	add	r3, r2
        if (sz >= swap_size) {
    5772:	428b      	cmp	r3, r1
        last_idx++;
    5774:	f100 0001 	add.w	r0, r0, #1
        if (sz >= swap_size) {
    5778:	d3fa      	bcc.n	5770 <find_last_idx+0x8>
}
    577a:	4770      	bx	lr

0000577c <swap_read_status_bytes>:
{
    577c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    5780:	4607      	mov	r7, r0
    5782:	460c      	mov	r4, r1
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    5784:	4601      	mov	r1, r0
    5786:	2000      	movs	r0, #0
{
    5788:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    578a:	f7ff fe0a 	bl	53a2 <boot_status_entries>
    if (max_entries < 0) {
    578e:	1e05      	subs	r5, r0, #0
    5790:	db3e      	blt.n	5810 <swap_read_status_bytes+0x94>
    off = boot_status_off(fap);
    5792:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
    5794:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
    5796:	f7ff fe11 	bl	53bc <boot_status_off>
    for (i = max_entries; i > 0; i--) {
    579a:	fa5f f984 	uxtb.w	r9, r4
    found_idx = -1;
    579e:	f04f 34ff 	mov.w	r4, #4294967295
    57a2:	1e6b      	subs	r3, r5, #1
    57a4:	fb09 0803 	mla	r8, r9, r3, r0
    for (i = max_entries; i > 0; i--) {
    57a8:	b965      	cbnz	r5, 57c4 <swap_read_status_bytes+0x48>
    if (found_idx == -1) {
    57aa:	1c63      	adds	r3, r4, #1
    57ac:	d006      	beq.n	57bc <swap_read_status_bytes+0x40>
    } else if (found_idx < move_entries) {
    57ae:	2cff      	cmp	r4, #255	; 0xff
    57b0:	dc22      	bgt.n	57f8 <swap_read_status_bytes+0x7c>
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
    57b2:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
    57b6:	3401      	adds	r4, #1
    57b8:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
    57ba:	80b3      	strh	r3, [r6, #4]
}
    57bc:	4628      	mov	r0, r5
    57be:	b002      	add	sp, #8
    57c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
    57c4:	2301      	movs	r3, #1
    57c6:	4641      	mov	r1, r8
    57c8:	4638      	mov	r0, r7
    57ca:	f10d 0207 	add.w	r2, sp, #7
    57ce:	f000 f979 	bl	5ac4 <flash_area_read>
        if (rc < 0) {
    57d2:	2800      	cmp	r0, #0
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
    57d4:	f105 3aff 	add.w	sl, r5, #4294967295
        if (rc < 0) {
    57d8:	db1c      	blt.n	5814 <swap_read_status_bytes+0x98>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
    57da:	2201      	movs	r2, #1
    57dc:	4638      	mov	r0, r7
    57de:	f10d 0107 	add.w	r1, sp, #7
    57e2:	f000 fdce 	bl	6382 <bootutil_buffer_is_erased>
    57e6:	b918      	cbnz	r0, 57f0 <swap_read_status_bytes+0x74>
            if (found_idx == -1) {
    57e8:	f1b4 3fff 	cmp.w	r4, #4294967295
    57ec:	bf08      	it	eq
    57ee:	462c      	moveq	r4, r5
    57f0:	4655      	mov	r5, sl
    57f2:	eba8 0809 	sub.w	r8, r8, r9
    57f6:	e7d7      	b.n	57a8 <swap_read_status_bytes+0x2c>
        bs->op = BOOT_STATUS_OP_SWAP;
    57f8:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    57fa:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
        bs->op = BOOT_STATUS_OP_SWAP;
    57fe:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    5800:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    5802:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    5806:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    5808:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    580a:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    580c:	7134      	strb	r4, [r6, #4]
    580e:	e7d5      	b.n	57bc <swap_read_status_bytes+0x40>
        return BOOT_EBADARGS;
    5810:	2507      	movs	r5, #7
    5812:	e7d3      	b.n	57bc <swap_read_status_bytes+0x40>
            return BOOT_EFLASH;
    5814:	2501      	movs	r5, #1
    5816:	e7d1      	b.n	57bc <swap_read_status_bytes+0x40>

00005818 <boot_status_internal_off>:
{
    5818:	b510      	push	{r4, lr}
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    581a:	7943      	ldrb	r3, [r0, #5]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    581c:	7902      	ldrb	r2, [r0, #4]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    581e:	2b01      	cmp	r3, #1
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    5820:	bf06      	itte	eq
    5822:	2300      	moveq	r3, #0
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5824:	460c      	moveq	r4, r1
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    5826:	020b      	lslne	r3, r1, #8
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    5828:	f102 32ff 	add.w	r2, r2, #4294967295
    off = ((bs->op == BOOT_STATUS_OP_MOVE) ?
    582c:	fb01 3302 	mla	r3, r1, r2, r3
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5830:	6802      	ldr	r2, [r0, #0]
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5832:	bf18      	it	ne
    5834:	004c      	lslne	r4, r1, #1
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5836:	3a01      	subs	r2, #1
}
    5838:	fb04 3002 	mla	r0, r4, r2, r3
    583c:	bd10      	pop	{r4, pc}

0000583e <boot_slots_compatible>:
{
    583e:	b530      	push	{r4, r5, lr}
    return BOOT_IMG(state, slot).num_sectors;
    5840:	6a81      	ldr	r1, [r0, #40]	; 0x28
    5842:	6d42      	ldr	r2, [r0, #84]	; 0x54
    if ((num_sectors_pri != num_sectors_sec) &&
    5844:	428a      	cmp	r2, r1
    5846:	d002      	beq.n	584e <boot_slots_compatible+0x10>
            (num_sectors_pri != (num_sectors_sec + 1))) {
    5848:	1c53      	adds	r3, r2, #1
    if ((num_sectors_pri != num_sectors_sec) &&
    584a:	428b      	cmp	r3, r1
    584c:	d11c      	bne.n	5888 <boot_slots_compatible+0x4a>
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
    584e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    5852:	d819      	bhi.n	5888 <boot_slots_compatible+0x4a>
    for (i = 0; i < num_sectors_sec; i++) {
    5854:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
    5856:	461c      	mov	r4, r3
    for (i = 0; i < num_sectors_sec; i++) {
    5858:	429a      	cmp	r2, r3
    585a:	d109      	bne.n	5870 <boot_slots_compatible+0x32>
    if (num_sectors_pri > num_sectors_sec) {
    585c:	4291      	cmp	r1, r2
    585e:	d915      	bls.n	588c <boot_slots_compatible+0x4e>
    5860:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5862:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
    5866:	6858      	ldr	r0, [r3, #4]
    5868:	1b03      	subs	r3, r0, r4
    586a:	4258      	negs	r0, r3
    586c:	4158      	adcs	r0, r3
}
    586e:	bd30      	pop	{r4, r5, pc}
    5870:	6a44      	ldr	r4, [r0, #36]	; 0x24
    5872:	6d05      	ldr	r5, [r0, #80]	; 0x50
    5874:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    5878:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    587c:	6864      	ldr	r4, [r4, #4]
        if (sector_sz_pri != sector_sz_sec) {
    587e:	686d      	ldr	r5, [r5, #4]
    5880:	42ac      	cmp	r4, r5
    5882:	d101      	bne.n	5888 <boot_slots_compatible+0x4a>
    for (i = 0; i < num_sectors_sec; i++) {
    5884:	3301      	adds	r3, #1
    5886:	e7e7      	b.n	5858 <boot_slots_compatible+0x1a>
        return 0;
    5888:	2000      	movs	r0, #0
    588a:	e7f0      	b.n	586e <boot_slots_compatible+0x30>
    return 1;
    588c:	2001      	movs	r0, #1
    588e:	e7ee      	b.n	586e <boot_slots_compatible+0x30>

00005890 <swap_status_source>:
{
    5890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5892:	2002      	movs	r0, #2
    5894:	4669      	mov	r1, sp
    5896:	f000 fde6 	bl	6466 <boot_read_swap_state_by_id>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    589a:	2008      	movs	r0, #8
    589c:	a902      	add	r1, sp, #8
    589e:	f000 fde2 	bl	6466 <boot_read_swap_state_by_id>
    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    58a2:	f89d 3000 	ldrb.w	r3, [sp]
    58a6:	2b01      	cmp	r3, #1
    58a8:	d10c      	bne.n	58c4 <swap_status_source+0x34>
    58aa:	f89d 3002 	ldrb.w	r3, [sp, #2]
    58ae:	2b03      	cmp	r3, #3
    58b0:	d108      	bne.n	58c4 <swap_status_source+0x34>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
    58b2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    58b6:	3801      	subs	r0, #1
    58b8:	bf18      	it	ne
    58ba:	2001      	movne	r0, #1
    58bc:	0040      	lsls	r0, r0, #1
}
    58be:	b005      	add	sp, #20
    58c0:	f85d fb04 	ldr.w	pc, [sp], #4
    return BOOT_STATUS_SOURCE_NONE;
    58c4:	2000      	movs	r0, #0
    58c6:	e7fa      	b.n	58be <swap_status_source+0x2e>

000058c8 <arch_printk_char_out>:
}
    58c8:	2000      	movs	r0, #0
    58ca:	4770      	bx	lr

000058cc <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    58cc:	b40f      	push	{r0, r1, r2, r3}
    58ce:	b507      	push	{r0, r1, r2, lr}
    58d0:	a904      	add	r1, sp, #16
    58d2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    58d6:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    58d8:	f7fb fda8 	bl	142c <vprintk>

	va_end(ap);
}
    58dc:	b003      	add	sp, #12
    58de:	f85d eb04 	ldr.w	lr, [sp], #4
    58e2:	b004      	add	sp, #16
    58e4:	4770      	bx	lr

000058e6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    58e6:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    58e8:	f013 0307 	ands.w	r3, r3, #7
    58ec:	d105      	bne.n	58fa <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    58ee:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    58f0:	2b00      	cmp	r3, #0
    58f2:	bf0c      	ite	eq
    58f4:	2000      	moveq	r0, #0
    58f6:	2003      	movne	r0, #3
    58f8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    58fa:	2b02      	cmp	r3, #2
    58fc:	d105      	bne.n	590a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    58fe:	8b40      	ldrh	r0, [r0, #26]
    5900:	fab0 f080 	clz	r0, r0
    5904:	0940      	lsrs	r0, r0, #5
    5906:	0080      	lsls	r0, r0, #2
    5908:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    590a:	2b01      	cmp	r3, #1
    590c:	d105      	bne.n	591a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    590e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    5910:	2b00      	cmp	r3, #0
    5912:	bf0c      	ite	eq
    5914:	2000      	moveq	r0, #0
    5916:	2005      	movne	r0, #5
    5918:	4770      	bx	lr
	int evt = EVT_NOP;
    591a:	2000      	movs	r0, #0
}
    591c:	4770      	bx	lr

0000591e <validate_args>:
{
    591e:	b510      	push	{r4, lr}
    5920:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5922:	b100      	cbz	r0, 5926 <validate_args+0x8>
    5924:	b911      	cbnz	r1, 592c <validate_args+0xe>
		return -EINVAL;
    5926:	f06f 0015 	mvn.w	r0, #21
}
    592a:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    592c:	1d08      	adds	r0, r1, #4
    592e:	f000 f895 	bl	5a5c <sys_notify_validate>
	if ((rv == 0)
    5932:	2800      	cmp	r0, #0
    5934:	d1f9      	bne.n	592a <validate_args+0xc>
	    && ((cli->notify.flags
    5936:	68a3      	ldr	r3, [r4, #8]
    5938:	2b03      	cmp	r3, #3
    593a:	d9f6      	bls.n	592a <validate_args+0xc>
    593c:	e7f3      	b.n	5926 <validate_args+0x8>

0000593e <notify_one>:
{
    593e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5942:	460d      	mov	r5, r1
    5944:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5946:	4619      	mov	r1, r3
    5948:	1d28      	adds	r0, r5, #4
{
    594a:	4690      	mov	r8, r2
    594c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    594e:	f000 f896 	bl	5a7e <sys_notify_finalize>
	if (cb) {
    5952:	4604      	mov	r4, r0
    5954:	b138      	cbz	r0, 5966 <notify_one+0x28>
		cb(mgr, cli, state, res);
    5956:	4633      	mov	r3, r6
    5958:	4642      	mov	r2, r8
    595a:	4629      	mov	r1, r5
    595c:	4638      	mov	r0, r7
    595e:	46a4      	mov	ip, r4
}
    5960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    5964:	4760      	bx	ip
}
    5966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000596a <transition_complete>:
{
    596a:	b410      	push	{r4}
	__asm__ volatile(
    596c:	f04f 0420 	mov.w	r4, #32
    5970:	f3ef 8211 	mrs	r2, BASEPRI
    5974:	f384 8812 	msr	BASEPRI_MAX, r4
    5978:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    597c:	6141      	str	r1, [r0, #20]
}
    597e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    5980:	2101      	movs	r1, #1
    5982:	f7fb bd61 	b.w	1448 <process_event>

00005986 <onoff_manager_init>:
{
    5986:	b538      	push	{r3, r4, r5, lr}
    5988:	460c      	mov	r4, r1
	if ((mgr == NULL)
    598a:	4605      	mov	r5, r0
    598c:	b158      	cbz	r0, 59a6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    598e:	b151      	cbz	r1, 59a6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    5990:	680b      	ldr	r3, [r1, #0]
    5992:	b143      	cbz	r3, 59a6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    5994:	684b      	ldr	r3, [r1, #4]
    5996:	b133      	cbz	r3, 59a6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5998:	221c      	movs	r2, #28
    599a:	2100      	movs	r1, #0
    599c:	f000 f97c 	bl	5c98 <memset>
	return 0;
    59a0:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    59a2:	612c      	str	r4, [r5, #16]
}
    59a4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    59a6:	f06f 0015 	mvn.w	r0, #21
    59aa:	e7fb      	b.n	59a4 <onoff_manager_init+0x1e>

000059ac <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    59ac:	b570      	push	{r4, r5, r6, lr}
    59ae:	4605      	mov	r5, r0
    59b0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    59b2:	f7ff ffb4 	bl	591e <validate_args>

	if (rv < 0) {
    59b6:	1e04      	subs	r4, r0, #0
    59b8:	db15      	blt.n	59e6 <onoff_request+0x3a>
    59ba:	f04f 0320 	mov.w	r3, #32
    59be:	f3ef 8211 	mrs	r2, BASEPRI
    59c2:	f383 8812 	msr	BASEPRI_MAX, r3
    59c6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    59ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
    59ce:	8b6b      	ldrh	r3, [r5, #26]
    59d0:	8b2c      	ldrh	r4, [r5, #24]
    59d2:	428b      	cmp	r3, r1
    59d4:	f004 0407 	and.w	r4, r4, #7
    59d8:	d107      	bne.n	59ea <onoff_request+0x3e>
	__asm__ volatile(
    59da:	f382 8811 	msr	BASEPRI, r2
    59de:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    59e2:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    59e6:	4620      	mov	r0, r4
    59e8:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    59ea:	2c02      	cmp	r4, #2
    59ec:	d10c      	bne.n	5a08 <onoff_request+0x5c>
		mgr->refs += 1U;
    59ee:	3301      	adds	r3, #1
    59f0:	836b      	strh	r3, [r5, #26]
    59f2:	f382 8811 	msr	BASEPRI, r2
    59f6:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    59fa:	2300      	movs	r3, #0
    59fc:	4622      	mov	r2, r4
    59fe:	4631      	mov	r1, r6
    5a00:	4628      	mov	r0, r5
    5a02:	f7ff ff9c 	bl	593e <notify_one>
    5a06:	e7ee      	b.n	59e6 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    5a08:	2c06      	cmp	r4, #6
    5a0a:	d814      	bhi.n	5a36 <onoff_request+0x8a>
    5a0c:	e8df f004 	tbb	[pc, r4]
    5a10:	13131304 	.word	0x13131304
    5a14:	1a04      	.short	0x1a04
    5a16:	04          	.byte	0x04
    5a17:	00          	.byte	0x00
	parent->next = child;
    5a18:	2300      	movs	r3, #0
    5a1a:	6033      	str	r3, [r6, #0]
	return list->tail;
    5a1c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    5a1e:	b93b      	cbnz	r3, 5a30 <onoff_request+0x84>
	list->head = node;
    5a20:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    5a24:	b9ac      	cbnz	r4, 5a52 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    5a26:	2102      	movs	r1, #2
    5a28:	4628      	mov	r0, r5
    5a2a:	f7fb fd0d 	bl	1448 <process_event>
    5a2e:	e7da      	b.n	59e6 <onoff_request+0x3a>
	parent->next = child;
    5a30:	601e      	str	r6, [r3, #0]
	list->tail = node;
    5a32:	606e      	str	r6, [r5, #4]
}
    5a34:	e7f6      	b.n	5a24 <onoff_request+0x78>
    5a36:	f382 8811 	msr	BASEPRI, r2
    5a3a:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    5a3e:	f06f 0404 	mvn.w	r4, #4
    5a42:	e7d0      	b.n	59e6 <onoff_request+0x3a>
    5a44:	f382 8811 	msr	BASEPRI, r2
    5a48:	f3bf 8f6f 	isb	sy
    5a4c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5a50:	e7c9      	b.n	59e6 <onoff_request+0x3a>
    5a52:	f382 8811 	msr	BASEPRI, r2
    5a56:	f3bf 8f6f 	isb	sy
		if (notify) {
    5a5a:	e7c4      	b.n	59e6 <onoff_request+0x3a>

00005a5c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5a5c:	4603      	mov	r3, r0
    5a5e:	b158      	cbz	r0, 5a78 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5a60:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5a62:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5a66:	2a01      	cmp	r2, #1
    5a68:	d003      	beq.n	5a72 <sys_notify_validate+0x16>
    5a6a:	2a03      	cmp	r2, #3
    5a6c:	d104      	bne.n	5a78 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5a6e:	6802      	ldr	r2, [r0, #0]
    5a70:	b112      	cbz	r2, 5a78 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5a72:	2000      	movs	r0, #0
    5a74:	6098      	str	r0, [r3, #8]
    5a76:	4770      	bx	lr
    5a78:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5a7c:	4770      	bx	lr

00005a7e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5a7e:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    5a80:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    5a82:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    5a86:	2a03      	cmp	r2, #3
    5a88:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    5a8c:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    5a8e:	bf14      	ite	ne
    5a90:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5a92:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5a94:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5a96:	4770      	bx	lr

00005a98 <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
    5a98:	440a      	add	r2, r1
    5a9a:	428a      	cmp	r2, r1
    5a9c:	d100      	bne.n	5aa0 <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
    5a9e:	4770      	bx	lr
		seed ^= *src++;
    5aa0:	f811 3b01 	ldrb.w	r3, [r1], #1
    5aa4:	ba40      	rev16	r0, r0
    5aa6:	b280      	uxth	r0, r0
    5aa8:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
    5aaa:	f3c0 1303 	ubfx	r3, r0, #4, #4
    5aae:	4043      	eors	r3, r0
		seed ^= seed << 12U;
    5ab0:	0318      	lsls	r0, r3, #12
    5ab2:	b280      	uxth	r0, r0
    5ab4:	4043      	eors	r3, r0
		seed ^= (seed & 0xffU) << 5U;
    5ab6:	0158      	lsls	r0, r3, #5
    5ab8:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
    5abc:	4058      	eors	r0, r3
	for (; len > 0; len--) {
    5abe:	e7ec      	b.n	5a9a <crc16_itu_t+0x2>

00005ac0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5ac0:	4770      	bx	lr

00005ac2 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    5ac2:	4770      	bx	lr

00005ac4 <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    5ac4:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    5ac6:	b430      	push	{r4, r5}
    5ac8:	4604      	mov	r4, r0
    5aca:	4618      	mov	r0, r3
    5acc:	db0b      	blt.n	5ae6 <flash_area_read+0x22>
    5ace:	68a5      	ldr	r5, [r4, #8]
    5ad0:	4408      	add	r0, r1
    5ad2:	42a8      	cmp	r0, r5
    5ad4:	d807      	bhi.n	5ae6 <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
    5ad6:	68e0      	ldr	r0, [r4, #12]
    5ad8:	6864      	ldr	r4, [r4, #4]
    5ada:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    5adc:	6884      	ldr	r4, [r0, #8]
    5ade:	6824      	ldr	r4, [r4, #0]
    5ae0:	46a4      	mov	ip, r4
}
    5ae2:	bc30      	pop	{r4, r5}
    5ae4:	4760      	bx	ip
    5ae6:	f06f 0015 	mvn.w	r0, #21
    5aea:	bc30      	pop	{r4, r5}
    5aec:	4770      	bx	lr

00005aee <flash_area_write>:
    5aee:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    5af0:	b430      	push	{r4, r5}
    5af2:	4604      	mov	r4, r0
    5af4:	4618      	mov	r0, r3
    5af6:	db0b      	blt.n	5b10 <flash_area_write+0x22>
    5af8:	68a5      	ldr	r5, [r4, #8]
    5afa:	4408      	add	r0, r1
    5afc:	42a8      	cmp	r0, r5
    5afe:	d807      	bhi.n	5b10 <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
    5b00:	68e0      	ldr	r0, [r4, #12]
    5b02:	6864      	ldr	r4, [r4, #4]
    5b04:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->write(dev, offset, data, len);
    5b06:	6884      	ldr	r4, [r0, #8]
    5b08:	6864      	ldr	r4, [r4, #4]
    5b0a:	46a4      	mov	ip, r4
}
    5b0c:	bc30      	pop	{r4, r5}
    5b0e:	4760      	bx	ip
    5b10:	f06f 0015 	mvn.w	r0, #21
    5b14:	bc30      	pop	{r4, r5}
    5b16:	4770      	bx	lr

00005b18 <flash_area_erase>:
    5b18:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    5b1a:	4603      	mov	r3, r0
    5b1c:	b410      	push	{r4}
    5b1e:	4610      	mov	r0, r2
    5b20:	db0a      	blt.n	5b38 <flash_area_erase+0x20>
    5b22:	689c      	ldr	r4, [r3, #8]
    5b24:	4408      	add	r0, r1
    5b26:	42a0      	cmp	r0, r4
    5b28:	d806      	bhi.n	5b38 <flash_area_erase+0x20>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
    5b2a:	68d8      	ldr	r0, [r3, #12]
    5b2c:	685b      	ldr	r3, [r3, #4]
    5b2e:	4419      	add	r1, r3
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    5b30:	6883      	ldr	r3, [r0, #8]
}
    5b32:	bc10      	pop	{r4}
    5b34:	689b      	ldr	r3, [r3, #8]
    5b36:	4718      	bx	r3
    5b38:	f06f 0015 	mvn.w	r0, #21
    5b3c:	bc10      	pop	{r4}
    5b3e:	4770      	bx	lr

00005b40 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    5b40:	b508      	push	{r3, lr}
	return flash_get_write_block_size(fa->fa_dev);
    5b42:	68c0      	ldr	r0, [r0, #12]
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    5b44:	6883      	ldr	r3, [r0, #8]
    5b46:	68db      	ldr	r3, [r3, #12]
    5b48:	4798      	blx	r3
}
    5b4a:	6800      	ldr	r0, [r0, #0]
    5b4c:	bd08      	pop	{r3, pc}

00005b4e <flash_area_erased_val>:
{
	return fa->fa_dev;
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    5b4e:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(fa->fa_dev);
    5b50:	68c0      	ldr	r0, [r0, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    5b52:	6883      	ldr	r3, [r0, #8]
    5b54:	68db      	ldr	r3, [r3, #12]
    5b56:	4798      	blx	r3

	return param->erase_value;
}
    5b58:	7900      	ldrb	r0, [r0, #4]
    5b5a:	bd08      	pop	{r3, pc}

00005b5c <get_sectors_cb>:
{
    5b5c:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    5b5e:	684c      	ldr	r4, [r1, #4]
    5b60:	6803      	ldr	r3, [r0, #0]
    5b62:	42a3      	cmp	r3, r4
    5b64:	d201      	bcs.n	5b6a <get_sectors_cb+0xe>
		*bail_value = true;
    5b66:	2001      	movs	r0, #1
}
    5b68:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    5b6a:	688a      	ldr	r2, [r1, #8]
    5b6c:	4422      	add	r2, r4
    5b6e:	4293      	cmp	r3, r2
    5b70:	d301      	bcc.n	5b76 <get_sectors_cb+0x1a>
		*bail_value = false;
    5b72:	2000      	movs	r0, #0
    5b74:	e7f8      	b.n	5b68 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
    5b76:	694e      	ldr	r6, [r1, #20]
    5b78:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
    5b7c:	42b5      	cmp	r5, r6
    5b7e:	d303      	bcc.n	5b88 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
    5b80:	f06f 030b 	mvn.w	r3, #11
    5b84:	618b      	str	r3, [r1, #24]
		return true;
    5b86:	e7f4      	b.n	5b72 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    5b88:	1b1b      	subs	r3, r3, r4
    5b8a:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    5b8e:	6843      	ldr	r3, [r0, #4]
    5b90:	6908      	ldr	r0, [r1, #16]
    5b92:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    5b96:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
    5b98:	690b      	ldr	r3, [r1, #16]
    5b9a:	3301      	adds	r3, #1
    5b9c:	610b      	str	r3, [r1, #16]
	return true;
    5b9e:	e7e2      	b.n	5b66 <get_sectors_cb+0xa>

00005ba0 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    5ba0:	2000      	movs	r0, #0
{
    5ba2:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    5ba4:	f7fb ff82 	bl	1aac <sys_reboot>

00005ba8 <nrf_cc3xx_platform_mutex_init>:
/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
	// No thread-safe mutexes are required
}
    5ba8:	4770      	bx	lr

00005baa <console_write>:
{
    5baa:	b570      	push	{r4, r5, r6, lr}
    5bac:	4606      	mov	r6, r0
    5bae:	460d      	mov	r5, r1
	for (i = 0; i < cnt; i++) {
    5bb0:	2400      	movs	r4, #0
    5bb2:	42ac      	cmp	r4, r5
    5bb4:	db00      	blt.n	5bb8 <console_write+0xe>
}
    5bb6:	bd70      	pop	{r4, r5, r6, pc}
		if (console_out((int)str[i]) == EOF) {
    5bb8:	5d30      	ldrb	r0, [r6, r4]
    5bba:	f7fc f85d 	bl	1c78 <console_out>
    5bbe:	3001      	adds	r0, #1
    5bc0:	d0f9      	beq.n	5bb6 <console_write+0xc>
	for (i = 0; i < cnt; i++) {
    5bc2:	3401      	adds	r4, #1
    5bc4:	e7f5      	b.n	5bb2 <console_write+0x8>

00005bc6 <erase_range>:
{
    5bc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (end >= flash_area_get_size(fap)) {
    5bc8:	6883      	ldr	r3, [r0, #8]
{
    5bca:	460c      	mov	r4, r1
    if (end >= flash_area_get_size(fap)) {
    5bcc:	429a      	cmp	r2, r3
{
    5bce:	4606      	mov	r6, r0
    5bd0:	4611      	mov	r1, r2
    if (end >= flash_area_get_size(fap)) {
    5bd2:	d304      	bcc.n	5bde <erase_range+0x18>
        return -EINVAL;
    5bd4:	f06f 0415 	mvn.w	r4, #21
}
    5bd8:	4620      	mov	r0, r4
    5bda:	b002      	add	sp, #8
    5bdc:	bd70      	pop	{r4, r5, r6, pc}
    if (end < start) {
    5bde:	4294      	cmp	r4, r2
    5be0:	dcfa      	bgt.n	5bd8 <erase_range+0x12>
    if (flash_area_get_sector(fap, end, &sect)) {
    5be2:	466a      	mov	r2, sp
    5be4:	f7ff fb25 	bl	5232 <flash_area_get_sector>
    5be8:	2800      	cmp	r0, #0
    5bea:	d1f3      	bne.n	5bd4 <erase_range+0xe>
    size = flash_sector_get_off(&sect) + flash_sector_get_size(&sect) - start;
    5bec:	e9dd 5300 	ldrd	r5, r3, [sp]
    5bf0:	441d      	add	r5, r3
    rc = flash_area_erase(fap, start, size);
    5bf2:	4621      	mov	r1, r4
    5bf4:	4630      	mov	r0, r6
    5bf6:	1b2a      	subs	r2, r5, r4
    5bf8:	f7ff ff8e 	bl	5b18 <flash_area_erase>
    if (rc != 0) {
    5bfc:	2800      	cmp	r0, #0
    5bfe:	d1e9      	bne.n	5bd4 <erase_range+0xe>
    return start + size;
    5c00:	462c      	mov	r4, r5
    5c02:	e7e9      	b.n	5bd8 <erase_range+0x12>

00005c04 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    5c04:	f002 bb16 	b.w	8234 <z_fatal_error>

00005c08 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    5c08:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    5c0a:	6800      	ldr	r0, [r0, #0]
    5c0c:	f002 bb12 	b.w	8234 <z_fatal_error>

00005c10 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5c10:	2100      	movs	r1, #0
    5c12:	2001      	movs	r0, #1
    5c14:	f7ff bff6 	b.w	5c04 <z_arm_fatal_error>

00005c18 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    5c18:	b508      	push	{r3, lr}
	handler();
    5c1a:	f7fc fd8f 	bl	273c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    5c1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    5c22:	f7fc bded 	b.w	2800 <z_arm_exc_exit>

00005c26 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    5c26:	4603      	mov	r3, r0
	size_t n = 0;
    5c28:	2000      	movs	r0, #0

	while (*s != '\0') {
    5c2a:	5c1a      	ldrb	r2, [r3, r0]
    5c2c:	b902      	cbnz	r2, 5c30 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    5c2e:	4770      	bx	lr
		n++;
    5c30:	3001      	adds	r0, #1
    5c32:	e7fa      	b.n	5c2a <strlen+0x4>

00005c34 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    5c34:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    5c36:	b15a      	cbz	r2, 5c50 <memcmp+0x1c>
    5c38:	3901      	subs	r1, #1
    5c3a:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    5c3c:	f810 2b01 	ldrb.w	r2, [r0], #1
    5c40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    5c44:	42a0      	cmp	r0, r4
    5c46:	d001      	beq.n	5c4c <memcmp+0x18>
    5c48:	429a      	cmp	r2, r3
    5c4a:	d0f7      	beq.n	5c3c <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    5c4c:	1ad0      	subs	r0, r2, r3
}
    5c4e:	bd10      	pop	{r4, pc}
		return 0;
    5c50:	4610      	mov	r0, r2
    5c52:	e7fc      	b.n	5c4e <memcmp+0x1a>

00005c54 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    5c54:	1a43      	subs	r3, r0, r1
    5c56:	4293      	cmp	r3, r2
{
    5c58:	b510      	push	{r4, lr}
    5c5a:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    5c5e:	d308      	bcc.n	5c72 <memmove+0x1e>
	char *dest = d;
    5c60:	4602      	mov	r2, r0
    5c62:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    5c64:	429a      	cmp	r2, r3
    5c66:	d00b      	beq.n	5c80 <memmove+0x2c>
			*dest = *src;
    5c68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    5c6c:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    5c70:	e7f8      	b.n	5c64 <memmove+0x10>
    5c72:	440a      	add	r2, r1
			dest[n] = src[n];
    5c74:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    5c78:	428a      	cmp	r2, r1
			dest[n] = src[n];
    5c7a:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    5c7e:	d1f9      	bne.n	5c74 <memmove+0x20>
		}
	}

	return d;
}
    5c80:	bd10      	pop	{r4, pc}

00005c82 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    5c82:	b510      	push	{r4, lr}
    5c84:	1e43      	subs	r3, r0, #1
    5c86:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    5c88:	4291      	cmp	r1, r2
    5c8a:	d100      	bne.n	5c8e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    5c8c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    5c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
    5c92:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    5c96:	e7f7      	b.n	5c88 <memcpy+0x6>

00005c98 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    5c98:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    5c9a:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    5c9c:	4402      	add	r2, r0
    5c9e:	4293      	cmp	r3, r2
    5ca0:	d100      	bne.n	5ca4 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    5ca2:	4770      	bx	lr
		*(d_byte++) = c_byte;
    5ca4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5ca8:	e7f9      	b.n	5c9e <memset+0x6>

00005caa <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    5caa:	684b      	ldr	r3, [r1, #4]
    5cac:	2b01      	cmp	r3, #1
    5cae:	dd07      	ble.n	5cc0 <sprintf_out+0x16>
		*(p->ptr) = c;
    5cb0:	680b      	ldr	r3, [r1, #0]
    5cb2:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    5cb4:	680b      	ldr	r3, [r1, #0]
    5cb6:	3301      	adds	r3, #1
    5cb8:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    5cba:	684b      	ldr	r3, [r1, #4]
    5cbc:	3b01      	subs	r3, #1
    5cbe:	604b      	str	r3, [r1, #4]
}
    5cc0:	2000      	movs	r0, #0
    5cc2:	4770      	bx	lr

00005cc4 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5cc4:	220c      	movs	r2, #12
    5cc6:	6903      	ldr	r3, [r0, #16]
    5cc8:	b2c9      	uxtb	r1, r1
    5cca:	fb01 3302 	mla	r3, r1, r2, r3
    5cce:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    5cd0:	f000 0007 	and.w	r0, r0, #7
    5cd4:	4770      	bx	lr

00005cd6 <set_on_state>:
	__asm__ volatile(
    5cd6:	f04f 0320 	mov.w	r3, #32
    5cda:	f3ef 8211 	mrs	r2, BASEPRI
    5cde:	f383 8812 	msr	BASEPRI_MAX, r3
    5ce2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5ce6:	6803      	ldr	r3, [r0, #0]
    5ce8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5cec:	f043 0302 	orr.w	r3, r3, #2
    5cf0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5cf2:	f382 8811 	msr	BASEPRI, r2
    5cf6:	f3bf 8f6f 	isb	sy
}
    5cfa:	4770      	bx	lr

00005cfc <stop>:
{
    5cfc:	b570      	push	{r4, r5, r6, lr}
    5cfe:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    5d00:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    5d02:	f04f 0420 	mov.w	r4, #32
    5d06:	f3ef 8511 	mrs	r5, BASEPRI
    5d0a:	f384 8812 	msr	BASEPRI_MAX, r4
    5d0e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5d12:	260c      	movs	r6, #12
    5d14:	fb06 3401 	mla	r4, r6, r1, r3
    5d18:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5d1a:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    5d1e:	d008      	beq.n	5d32 <stop+0x36>
    5d20:	42a2      	cmp	r2, r4
    5d22:	d006      	beq.n	5d32 <stop+0x36>
	__asm__ volatile(
    5d24:	f385 8811 	msr	BASEPRI, r5
    5d28:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    5d2c:	f04f 30ff 	mov.w	r0, #4294967295
}
    5d30:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    5d32:	2201      	movs	r2, #1
    5d34:	4371      	muls	r1, r6
    5d36:	440b      	add	r3, r1
    5d38:	641a      	str	r2, [r3, #64]	; 0x40
    5d3a:	f385 8811 	msr	BASEPRI, r5
    5d3e:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    5d42:	6843      	ldr	r3, [r0, #4]
    5d44:	440b      	add	r3, r1
    5d46:	685b      	ldr	r3, [r3, #4]
    5d48:	4798      	blx	r3
	return 0;
    5d4a:	2000      	movs	r0, #0
    5d4c:	e7f0      	b.n	5d30 <stop+0x34>

00005d4e <api_stop>:
	return stop(dev, subsys, CTX_API);
    5d4e:	2280      	movs	r2, #128	; 0x80
    5d50:	f7ff bfd4 	b.w	5cfc <stop>

00005d54 <async_start>:
{
    5d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d56:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    5d58:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    5d5a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    5d5c:	f04f 0520 	mov.w	r5, #32
    5d60:	f3ef 8611 	mrs	r6, BASEPRI
    5d64:	f385 8812 	msr	BASEPRI_MAX, r5
    5d68:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5d6c:	250c      	movs	r5, #12
    5d6e:	4369      	muls	r1, r5
    5d70:	440c      	add	r4, r1
    5d72:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5d74:	f005 0c07 	and.w	ip, r5, #7
    5d78:	f1bc 0f01 	cmp.w	ip, #1
    5d7c:	d10b      	bne.n	5d96 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5d7e:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    5d80:	f386 8811 	msr	BASEPRI, r6
    5d84:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    5d88:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    5d8c:	6843      	ldr	r3, [r0, #4]
    5d8e:	585b      	ldr	r3, [r3, r1]
    5d90:	4798      	blx	r3
	return 0;
    5d92:	2000      	movs	r0, #0
}
    5d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    5d96:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    5d9a:	42af      	cmp	r7, r5
    5d9c:	f386 8811 	msr	BASEPRI, r6
    5da0:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    5da4:	bf0c      	ite	eq
    5da6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    5daa:	f04f 30ff 	movne.w	r0, #4294967295
    5dae:	e7f1      	b.n	5d94 <async_start+0x40>

00005db0 <api_start>:
{
    5db0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    5db2:	2480      	movs	r4, #128	; 0x80
    5db4:	9400      	str	r4, [sp, #0]
    5db6:	f7ff ffcd 	bl	5d54 <async_start>
}
    5dba:	b002      	add	sp, #8
    5dbc:	bd10      	pop	{r4, pc}

00005dbe <api_blocking_start>:
}
    5dbe:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5dc2:	4770      	bx	lr

00005dc4 <onoff_started_callback>:
{
    5dc4:	b410      	push	{r4}
	notify(mgr, 0);
    5dc6:	241c      	movs	r4, #28
	return &data->mgr[type];
    5dc8:	6900      	ldr	r0, [r0, #16]
    5dca:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    5dcc:	fb03 0004 	mla	r0, r3, r4, r0
    5dd0:	2100      	movs	r1, #0
}
    5dd2:	bc10      	pop	{r4}
	notify(mgr, 0);
    5dd4:	4710      	bx	r2

00005dd6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5dd6:	2000      	movs	r0, #0
    5dd8:	f001 bf1b 	b.w	7c12 <nrfx_clock_start>

00005ddc <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5ddc:	2000      	movs	r0, #0
    5dde:	f001 bf58 	b.w	7c92 <nrfx_clock_stop>

00005de2 <is_regular_addr_valid>:
{
    5de2:	b538      	push	{r3, r4, r5, lr}
    5de4:	4605      	mov	r5, r0
    5de6:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
    5de8:	f001 ff55 	bl	7c96 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
    5dec:	2d00      	cmp	r5, #0
    5dee:	db07      	blt.n	5e00 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
    5df0:	42a8      	cmp	r0, r5
    5df2:	d905      	bls.n	5e00 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
    5df4:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
    5df6:	4284      	cmp	r4, r0
    5df8:	bf8c      	ite	hi
    5dfa:	2000      	movhi	r0, #0
    5dfc:	2001      	movls	r0, #1
}
    5dfe:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
    5e00:	2000      	movs	r0, #0
    5e02:	e7fc      	b.n	5dfe <is_regular_addr_valid+0x1c>

00005e04 <flash_nrf_erase>:
{
    5e04:	b570      	push	{r4, r5, r6, lr}
    5e06:	460c      	mov	r4, r1
    5e08:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5e0a:	f001 ff47 	bl	7c9c <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    5e0e:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5e10:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
    5e12:	4620      	mov	r0, r4
    5e14:	f7ff ffe5 	bl	5de2 <is_regular_addr_valid>
    5e18:	b1b8      	cbz	r0, 5e4a <flash_nrf_erase+0x46>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    5e1a:	fbb4 f3f6 	udiv	r3, r4, r6
    5e1e:	fb06 4313 	mls	r3, r6, r3, r4
    5e22:	b993      	cbnz	r3, 5e4a <flash_nrf_erase+0x46>
    5e24:	fbb5 f3f6 	udiv	r3, r5, r6
    5e28:	fb06 5313 	mls	r3, r6, r3, r5
    5e2c:	b96b      	cbnz	r3, 5e4a <flash_nrf_erase+0x46>
		if (!n_pages) {
    5e2e:	42ae      	cmp	r6, r5
    5e30:	d901      	bls.n	5e36 <flash_nrf_erase+0x32>
			return 0;
    5e32:	2000      	movs	r0, #0
}
    5e34:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5e36:	f001 ff31 	bl	7c9c <nrfx_nvmc_flash_page_size_get>
    5e3a:	4606      	mov	r6, r0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    5e3c:	4620      	mov	r0, r4
    5e3e:	f7fe fe57 	bl	4af0 <nrfx_nvmc_page_erase>
	} while (e_ctx->len > 0);
    5e42:	1bad      	subs	r5, r5, r6
    5e44:	4434      	add	r4, r6
    5e46:	d1f9      	bne.n	5e3c <flash_nrf_erase+0x38>
    5e48:	e7f3      	b.n	5e32 <flash_nrf_erase+0x2e>
			return -EINVAL;
    5e4a:	f06f 0015 	mvn.w	r0, #21
    5e4e:	e7f1      	b.n	5e34 <flash_nrf_erase+0x30>

00005e50 <flash_nrf_read>:
{
    5e50:	b570      	push	{r4, r5, r6, lr}
    5e52:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    5e54:	4619      	mov	r1, r3
    5e56:	4628      	mov	r0, r5
{
    5e58:	4616      	mov	r6, r2
    5e5a:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    5e5c:	f7ff ffc1 	bl	5de2 <is_regular_addr_valid>
    5e60:	b138      	cbz	r0, 5e72 <flash_nrf_read+0x22>
	if (!len) {
    5e62:	b124      	cbz	r4, 5e6e <flash_nrf_read+0x1e>
	memcpy(data, (void *)addr, len);
    5e64:	4622      	mov	r2, r4
    5e66:	4629      	mov	r1, r5
    5e68:	4630      	mov	r0, r6
    5e6a:	f7ff ff0a 	bl	5c82 <memcpy>
		return 0;
    5e6e:	2000      	movs	r0, #0
}
    5e70:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    5e72:	f06f 0015 	mvn.w	r0, #21
    5e76:	e7fb      	b.n	5e70 <flash_nrf_read+0x20>

00005e78 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    5e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5e7a:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    5e7c:	2300      	movs	r3, #0
{
    5e7e:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
    5e80:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
    5e82:	6023      	str	r3, [r4, #0]
	info->index = 0U;
    5e84:	60a3      	str	r3, [r4, #8]
{
    5e86:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
    5e88:	6913      	ldr	r3, [r2, #16]
    5e8a:	4669      	mov	r1, sp
    5e8c:	aa01      	add	r2, sp, #4
    5e8e:	4798      	blx	r3

	while (layout_size--) {
    5e90:	9b01      	ldr	r3, [sp, #4]
    5e92:	1e5a      	subs	r2, r3, #1
    5e94:	9201      	str	r2, [sp, #4]
    5e96:	b91b      	cbnz	r3, 5ea0 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
    5e98:	f06f 0015 	mvn.w	r0, #21
}
    5e9c:	b003      	add	sp, #12
    5e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
    5ea0:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
    5ea2:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
    5ea4:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
    5ea6:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
    5ea8:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
    5eaa:	b985      	cbnz	r5, 5ece <flash_get_page_info+0x56>
			index_jmp = index - info->index;
    5eac:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
    5eae:	f8d0 c000 	ldr.w	ip, [r0]
    5eb2:	4563      	cmp	r3, ip
    5eb4:	bf28      	it	cs
    5eb6:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
    5eb8:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
    5ebc:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
    5ebe:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
    5ec0:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
    5ec2:	6802      	ldr	r2, [r0, #0]
    5ec4:	429a      	cmp	r2, r3
    5ec6:	d806      	bhi.n	5ed6 <flash_get_page_info+0x5e>
		layout++;
    5ec8:	3008      	adds	r0, #8
    5eca:	9000      	str	r0, [sp, #0]
    5ecc:	e7e0      	b.n	5e90 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
    5ece:	1a6b      	subs	r3, r5, r1
    5ed0:	fbb3 f3f7 	udiv	r3, r3, r7
    5ed4:	e7eb      	b.n	5eae <flash_get_page_info+0x36>
			return 0;
    5ed6:	2000      	movs	r0, #0
    5ed8:	e7e0      	b.n	5e9c <flash_get_page_info+0x24>

00005eda <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    5eda:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
    5edc:	2200      	movs	r2, #0
    5ede:	f7ff bfcb 	b.w	5e78 <flash_get_page_info>

00005ee2 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    5ee2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    5ee6:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    5ee8:	6883      	ldr	r3, [r0, #8]
{
    5eea:	b086      	sub	sp, #24
    5eec:	4688      	mov	r8, r1
    5eee:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    5ef0:	691b      	ldr	r3, [r3, #16]
    5ef2:	aa02      	add	r2, sp, #8
    5ef4:	a901      	add	r1, sp, #4
    5ef6:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    5ef8:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    5efa:	4625      	mov	r5, r4
    5efc:	9b02      	ldr	r3, [sp, #8]
    5efe:	42ab      	cmp	r3, r5
    5f00:	d802      	bhi.n	5f08 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    5f02:	b006      	add	sp, #24
    5f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    5f08:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    5f0a:	9f01      	ldr	r7, [sp, #4]
    5f0c:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    5f10:	687b      	ldr	r3, [r7, #4]
    5f12:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    5f14:	683a      	ldr	r2, [r7, #0]
    5f16:	eb0a 0306 	add.w	r3, sl, r6
    5f1a:	42b2      	cmp	r2, r6
    5f1c:	d802      	bhi.n	5f24 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    5f1e:	469a      	mov	sl, r3
    5f20:	3501      	adds	r5, #1
    5f22:	e7eb      	b.n	5efc <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    5f24:	4649      	mov	r1, r9
			page_info.start_offset = off;
    5f26:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    5f28:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    5f2a:	a803      	add	r0, sp, #12
    5f2c:	47c0      	blx	r8
    5f2e:	2800      	cmp	r0, #0
    5f30:	d0e7      	beq.n	5f02 <flash_page_foreach+0x20>
			off += page_info.size;
    5f32:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    5f34:	3601      	adds	r6, #1
			off += page_info.size;
    5f36:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    5f38:	e7ec      	b.n	5f14 <flash_page_foreach+0x32>

00005f3a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5f3a:	6843      	ldr	r3, [r0, #4]
}
    5f3c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5f3e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    5f40:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    5f42:	600b      	str	r3, [r1, #0]
}
    5f44:	4770      	bx	lr

00005f46 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5f46:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    5f48:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5f4c:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    5f4e:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    5f52:	6098      	str	r0, [r3, #8]
}
    5f54:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    5f56:	60d9      	str	r1, [r3, #12]
    5f58:	4770      	bx	lr

00005f5a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5f5a:	6843      	ldr	r3, [r0, #4]
}
    5f5c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5f5e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    5f60:	6099      	str	r1, [r3, #8]
}
    5f62:	4770      	bx	lr

00005f64 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5f64:	6843      	ldr	r3, [r0, #4]
}
    5f66:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5f68:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    5f6a:	60d9      	str	r1, [r3, #12]
}
    5f6c:	4770      	bx	lr

00005f6e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5f6e:	6843      	ldr	r3, [r0, #4]
    5f70:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5f72:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    5f74:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    5f78:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    5f7a:	6090      	str	r0, [r2, #8]
}
    5f7c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    5f7e:	60d3      	str	r3, [r2, #12]
    5f80:	4770      	bx	lr

00005f82 <gpio_nrfx_manage_callback>:
{
    5f82:	b510      	push	{r4, lr}
	return port->data;
    5f84:	6903      	ldr	r3, [r0, #16]
	return list->head;
    5f86:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    5f88:	b1f8      	cbz	r0, 5fca <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5f8a:	4288      	cmp	r0, r1
    5f8c:	d119      	bne.n	5fc2 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    5f8e:	689c      	ldr	r4, [r3, #8]
	return node->next;
    5f90:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    5f92:	42a1      	cmp	r1, r4
	list->head = node;
    5f94:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    5f96:	d100      	bne.n	5f9a <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    5f98:	6098      	str	r0, [r3, #8]
	parent->next = child;
    5f9a:	2000      	movs	r0, #0
    5f9c:	6008      	str	r0, [r1, #0]
	if (set) {
    5f9e:	b12a      	cbz	r2, 5fac <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    5fa0:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    5fa2:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    5fa4:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    5fa6:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    5fa8:	b902      	cbnz	r2, 5fac <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    5faa:	6099      	str	r1, [r3, #8]
	return 0;
    5fac:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5fae:	e010      	b.n	5fd2 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5fb0:	4281      	cmp	r1, r0
    5fb2:	d106      	bne.n	5fc2 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    5fb4:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    5fb6:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    5fb8:	6898      	ldr	r0, [r3, #8]
    5fba:	4281      	cmp	r1, r0
    5fbc:	d1ed      	bne.n	5f9a <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    5fbe:	609c      	str	r4, [r3, #8]
}
    5fc0:	e7eb      	b.n	5f9a <gpio_nrfx_manage_callback+0x18>
	return node->next;
    5fc2:	4604      	mov	r4, r0
    5fc4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5fc6:	2800      	cmp	r0, #0
    5fc8:	d1f2      	bne.n	5fb0 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    5fca:	2a00      	cmp	r2, #0
    5fcc:	d1e8      	bne.n	5fa0 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    5fce:	f06f 0015 	mvn.w	r0, #21
}
    5fd2:	bd10      	pop	{r4, pc}

00005fd4 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    5fd4:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    5fd6:	6843      	ldr	r3, [r0, #4]
    5fd8:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    5fda:	7a05      	ldrb	r5, [r0, #8]
    5fdc:	6844      	ldr	r4, [r0, #4]
    5fde:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    5fe2:	42a3      	cmp	r3, r4
    5fe4:	d302      	bcc.n	5fec <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    5fe6:	f06f 0001 	mvn.w	r0, #1
}
    5fea:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    5fec:	795c      	ldrb	r4, [r3, #5]
    5fee:	428c      	cmp	r4, r1
    5ff0:	d001      	beq.n	5ff6 <pinctrl_lookup_state+0x22>
		(*state)++;
    5ff2:	3308      	adds	r3, #8
    5ff4:	e7f0      	b.n	5fd8 <pinctrl_lookup_state+0x4>
			return 0;
    5ff6:	2000      	movs	r0, #0
    5ff8:	e7f7      	b.n	5fea <pinctrl_lookup_state+0x16>

00005ffa <uarte_nrfx_config_get>:
{
    5ffa:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
    5ffc:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
    5ffe:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    6002:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6006:	2000      	movs	r0, #0
    6008:	4770      	bx	lr

0000600a <uarte_nrfx_err_check>:
	return config->uarte_regs;
    600a:	6843      	ldr	r3, [r0, #4]
    600c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    600e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6012:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    6016:	4770      	bx	lr

00006018 <tx_start>:
{
    6018:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    601a:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    601c:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    601e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6022:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6026:	2200      	movs	r2, #0
    6028:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    602c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    6030:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    6034:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6038:	6862      	ldr	r2, [r4, #4]
    603a:	06d2      	lsls	r2, r2, #27
    603c:	d508      	bpl.n	6050 <tx_start+0x38>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    603e:	2108      	movs	r1, #8
	return config->uarte_regs;
    6040:	6842      	ldr	r2, [r0, #4]
    6042:	6812      	ldr	r2, [r2, #0]
    6044:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    6048:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    604c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6050:	2201      	movs	r2, #1
    6052:	609a      	str	r2, [r3, #8]
}
    6054:	bd10      	pop	{r4, pc}

00006056 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    6056:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    6058:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    605a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    605c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6060:	b150      	cbz	r0, 6078 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6062:	2000      	movs	r0, #0
	*c = *data->rx_data;
    6064:	6992      	ldr	r2, [r2, #24]
    6066:	7812      	ldrb	r2, [r2, #0]
    6068:	700a      	strb	r2, [r1, #0]
    606a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    606e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6072:	2201      	movs	r2, #1
    6074:	601a      	str	r2, [r3, #0]
	return 0;
    6076:	4770      	bx	lr
		return -1;
    6078:	f04f 30ff 	mov.w	r0, #4294967295
}
    607c:	4770      	bx	lr

0000607e <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    607e:	2a00      	cmp	r2, #0
{
    6080:	b510      	push	{r4, lr}
    6082:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6084:	dd10      	ble.n	60a8 <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
    6086:	6843      	ldr	r3, [r0, #4]
    6088:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    608a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    608e:	b150      	cbz	r0, 60a6 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6090:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = dev->data;
    6092:	6922      	ldr	r2, [r4, #16]
    6094:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6098:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    609c:	2001      	movs	r0, #1
		rx_data[num_rx++] = *data->rx_data;
    609e:	6992      	ldr	r2, [r2, #24]
    60a0:	7812      	ldrb	r2, [r2, #0]
    60a2:	700a      	strb	r2, [r1, #0]
    60a4:	6018      	str	r0, [r3, #0]
}
    60a6:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    60a8:	2000      	movs	r0, #0
    60aa:	e7fc      	b.n	60a6 <uarte_nrfx_fifo_read+0x28>

000060ac <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    60ac:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    60ae:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    60b0:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    60b2:	f04f 0020 	mov.w	r0, #32
    60b6:	f3ef 8311 	mrs	r3, BASEPRI
    60ba:	f380 8812 	msr	BASEPRI_MAX, r0
    60be:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    60c2:	2000      	movs	r0, #0
    60c4:	68c9      	ldr	r1, [r1, #12]
    60c6:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    60c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    60cc:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    60d0:	f383 8811 	msr	BASEPRI, r3
    60d4:	f3bf 8f6f 	isb	sy
}
    60d8:	4770      	bx	lr

000060da <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    60da:	2201      	movs	r2, #1
    60dc:	6903      	ldr	r3, [r0, #16]
    60de:	68db      	ldr	r3, [r3, #12]
    60e0:	739a      	strb	r2, [r3, #14]
}
    60e2:	4770      	bx	lr

000060e4 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    60e4:	6903      	ldr	r3, [r0, #16]
    60e6:	68db      	ldr	r3, [r3, #12]
    60e8:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    60ea:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    60ee:	b962      	cbnz	r2, 610a <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    60f0:	6842      	ldr	r2, [r0, #4]
    60f2:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    60f4:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    60f8:	b140      	cbz	r0, 610c <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    60fa:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    60fe:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    6102:	d003      	beq.n	610c <uarte_nrfx_irq_tx_ready_complete+0x28>
    6104:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
    6106:	6119      	str	r1, [r3, #16]
    6108:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    610a:	2000      	movs	r0, #0
}
    610c:	4770      	bx	lr

0000610e <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    610e:	6843      	ldr	r3, [r0, #4]
    6110:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6112:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    6116:	3800      	subs	r0, #0
    6118:	bf18      	it	ne
    611a:	2001      	movne	r0, #1
    611c:	4770      	bx	lr

0000611e <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    611e:	2210      	movs	r2, #16
	return config->uarte_regs;
    6120:	6843      	ldr	r3, [r0, #4]
    6122:	681b      	ldr	r3, [r3, #0]
    6124:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6128:	4770      	bx	lr

0000612a <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    612a:	2210      	movs	r2, #16
	return config->uarte_regs;
    612c:	6843      	ldr	r3, [r0, #4]
    612e:	681b      	ldr	r3, [r3, #0]
    6130:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6134:	4770      	bx	lr

00006136 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    6136:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    613a:	6843      	ldr	r3, [r0, #4]
    613c:	681b      	ldr	r3, [r3, #0]
    613e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6142:	4770      	bx	lr

00006144 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    6144:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    6148:	6843      	ldr	r3, [r0, #4]
    614a:	681b      	ldr	r3, [r3, #0]
    614c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6150:	4770      	bx	lr

00006152 <uarte_nrfx_irq_is_pending>:
{
    6152:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    6154:	6843      	ldr	r3, [r0, #4]
{
    6156:	4604      	mov	r4, r0
	return config->uarte_regs;
    6158:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    615a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    615e:	025b      	lsls	r3, r3, #9
    6160:	d405      	bmi.n	616e <uarte_nrfx_irq_is_pending+0x1c>
    6162:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    6166:	f010 0010 	ands.w	r0, r0, #16
    616a:	d106      	bne.n	617a <uarte_nrfx_irq_is_pending+0x28>
}
    616c:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    616e:	f7ff ffb9 	bl	60e4 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    6172:	2800      	cmp	r0, #0
    6174:	d0f5      	beq.n	6162 <uarte_nrfx_irq_is_pending+0x10>
		||
    6176:	2001      	movs	r0, #1
    6178:	e7f8      	b.n	616c <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    617a:	4620      	mov	r0, r4
    617c:	f7ff ffc7 	bl	610e <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    6180:	3800      	subs	r0, #0
    6182:	bf18      	it	ne
    6184:	2001      	movne	r0, #1
    6186:	e7f1      	b.n	616c <uarte_nrfx_irq_is_pending+0x1a>

00006188 <uarte_nrfx_irq_update>:
}
    6188:	2001      	movs	r0, #1
    618a:	4770      	bx	lr

0000618c <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
    618c:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
    618e:	68d8      	ldr	r0, [r3, #12]
    6190:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    6192:	68db      	ldr	r3, [r3, #12]
    6194:	605a      	str	r2, [r3, #4]
}
    6196:	4770      	bx	lr

00006198 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    6198:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    619a:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    619c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    61a0:	b940      	cbnz	r0, 61b4 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    61a2:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    61a4:	079b      	lsls	r3, r3, #30
    61a6:	d406      	bmi.n	61b6 <is_tx_ready.isra.0+0x1e>
    61a8:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    61ac:	3800      	subs	r0, #0
    61ae:	bf18      	it	ne
    61b0:	2001      	movne	r0, #1
    61b2:	4770      	bx	lr
    61b4:	2001      	movs	r0, #1
}
    61b6:	4770      	bx	lr

000061b8 <uarte_nrfx_fifo_fill>:
{
    61b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    61ba:	6906      	ldr	r6, [r0, #16]
{
    61bc:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
    61be:	68f3      	ldr	r3, [r6, #12]
    61c0:	899c      	ldrh	r4, [r3, #12]
    61c2:	3310      	adds	r3, #16
    61c4:	4294      	cmp	r4, r2
    61c6:	bfa8      	it	ge
    61c8:	4614      	movge	r4, r2
    61ca:	2201      	movs	r2, #1
    61cc:	e8d3 0fef 	ldaex	r0, [r3]
    61d0:	2800      	cmp	r0, #0
    61d2:	d103      	bne.n	61dc <uarte_nrfx_fifo_fill+0x24>
    61d4:	e8c3 2fe7 	stlex	r7, r2, [r3]
    61d8:	2f00      	cmp	r7, #0
    61da:	d1f7      	bne.n	61cc <uarte_nrfx_fifo_fill+0x14>
    61dc:	bf0c      	ite	eq
    61de:	4613      	moveq	r3, r2
    61e0:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    61e2:	d11f      	bne.n	6224 <uarte_nrfx_fifo_fill+0x6c>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
    61e4:	68f3      	ldr	r3, [r6, #12]
    61e6:	4622      	mov	r2, r4
    61e8:	6898      	ldr	r0, [r3, #8]
    61ea:	f7ff fd4a 	bl	5c82 <memcpy>
	__asm__ volatile(
    61ee:	f04f 0320 	mov.w	r3, #32
    61f2:	f3ef 8711 	mrs	r7, BASEPRI
    61f6:	f383 8812 	msr	BASEPRI_MAX, r3
    61fa:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    61fe:	6868      	ldr	r0, [r5, #4]
    6200:	f7ff ffca 	bl	6198 <is_tx_ready.isra.0>
    6204:	68f3      	ldr	r3, [r6, #12]
    6206:	b938      	cbnz	r0, 6218 <uarte_nrfx_fifo_fill+0x60>
		len = 0;
    6208:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
    620a:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
    620c:	f387 8811 	msr	BASEPRI, r7
    6210:	f3bf 8f6f 	isb	sy
}
    6214:	4620      	mov	r0, r4
    6216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
    6218:	4622      	mov	r2, r4
    621a:	4628      	mov	r0, r5
    621c:	6899      	ldr	r1, [r3, #8]
    621e:	f7ff fefb 	bl	6018 <tx_start>
    6222:	e7f3      	b.n	620c <uarte_nrfx_fifo_fill+0x54>
		return 0;
    6224:	461c      	mov	r4, r3
    6226:	e7f5      	b.n	6214 <uarte_nrfx_fifo_fill+0x5c>

00006228 <uarte_nrfx_isr_int>:
{
    6228:	b410      	push	{r4}
	const struct uarte_nrfx_config *config = dev->config;
    622a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    622c:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    622e:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6232:	05c9      	lsls	r1, r1, #23
    6234:	d518      	bpl.n	6268 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6236:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    623a:	b1a9      	cbz	r1, 6268 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    623c:	f04f 0420 	mov.w	r4, #32
    6240:	f3ef 8111 	mrs	r1, BASEPRI
    6244:	f384 8812 	msr	BASEPRI_MAX, r4
    6248:	f3bf 8f6f 	isb	sy
    624c:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6250:	b134      	cbz	r4, 6260 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6252:	2400      	movs	r4, #0
    6254:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
    6258:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    625c:	2401      	movs	r4, #1
    625e:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
    6260:	f381 8811 	msr	BASEPRI, r1
    6264:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6268:	6852      	ldr	r2, [r2, #4]
    626a:	06d2      	lsls	r2, r2, #27
    626c:	d51a      	bpl.n	62a4 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
    626e:	f04f 0220 	mov.w	r2, #32
    6272:	f3ef 8111 	mrs	r1, BASEPRI
    6276:	f382 8812 	msr	BASEPRI_MAX, r2
    627a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    627e:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6282:	b112      	cbz	r2, 628a <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6284:	2200      	movs	r2, #0
    6286:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    628a:	6902      	ldr	r2, [r0, #16]
    628c:	68d2      	ldr	r2, [r2, #12]
    628e:	b10a      	cbz	r2, 6294 <uarte_nrfx_isr_int+0x6c>
    6290:	6912      	ldr	r2, [r2, #16]
    6292:	b91a      	cbnz	r2, 629c <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
    6294:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    6298:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    629c:	f381 8811 	msr	BASEPRI, r1
    62a0:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
    62a4:	6902      	ldr	r2, [r0, #16]
	if (!data->int_driven) {
    62a6:	68d4      	ldr	r4, [r2, #12]
    62a8:	b16c      	cbz	r4, 62c6 <uarte_nrfx_isr_int+0x9e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    62aa:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    62ae:	b161      	cbz	r1, 62ca <uarte_nrfx_isr_int+0xa2>
		data->int_driven->fifo_fill_lock = 0;
    62b0:	2100      	movs	r1, #0
    62b2:	6121      	str	r1, [r4, #16]
		if (data->int_driven->disable_tx_irq) {
    62b4:	68d4      	ldr	r4, [r2, #12]
    62b6:	7ba4      	ldrb	r4, [r4, #14]
    62b8:	b13c      	cbz	r4, 62ca <uarte_nrfx_isr_int+0xa2>
    p_reg->INTENCLR = mask;
    62ba:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    62be:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    62c2:	68d3      	ldr	r3, [r2, #12]
    62c4:	7399      	strb	r1, [r3, #14]
}
    62c6:	bc10      	pop	{r4}
    62c8:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    62ca:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    62ce:	b121      	cbz	r1, 62da <uarte_nrfx_isr_int+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    62d0:	2100      	movs	r1, #0
    62d2:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    62d6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    62da:	68d2      	ldr	r2, [r2, #12]
    62dc:	6813      	ldr	r3, [r2, #0]
    62de:	2b00      	cmp	r3, #0
    62e0:	d0f1      	beq.n	62c6 <uarte_nrfx_isr_int+0x9e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    62e2:	6851      	ldr	r1, [r2, #4]
}
    62e4:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    62e6:	4718      	bx	r3

000062e8 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    62e8:	b510      	push	{r4, lr}
    62ea:	4604      	mov	r4, r0
    62ec:	2200      	movs	r2, #0
    62ee:	2101      	movs	r1, #1
    62f0:	2009      	movs	r0, #9
    62f2:	f7fc fa0d 	bl	2710 <z_arm_irq_priority_set>
    62f6:	2009      	movs	r0, #9
    62f8:	f7fc f9da 	bl	26b0 <arch_irq_enable>
    62fc:	4620      	mov	r0, r4
    62fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6302:	f7fd b8a1 	b.w	3448 <uarte_instance_init.constprop.0>

00006306 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    6306:	b510      	push	{r4, lr}
    6308:	4604      	mov	r4, r0
    630a:	2200      	movs	r2, #0
    630c:	2101      	movs	r1, #1
    630e:	2008      	movs	r0, #8
    6310:	f7fc f9fe 	bl	2710 <z_arm_irq_priority_set>
    6314:	2008      	movs	r0, #8
    6316:	f7fc f9cb 	bl	26b0 <arch_irq_enable>
    631a:	4620      	mov	r0, r4
    631c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6320:	f7fd b892 	b.w	3448 <uarte_instance_init.constprop.0>

00006324 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6324:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6326:	f100 0350 	add.w	r3, r0, #80	; 0x50
    632a:	009b      	lsls	r3, r3, #2
    632c:	b29b      	uxth	r3, r3
    632e:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    6332:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    6336:	601a      	str	r2, [r3, #0]
    6338:	681b      	ldr	r3, [r3, #0]
}
    633a:	4770      	bx	lr

0000633c <k_sys_fatal_error_handler>:

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    633c:	2000      	movs	r0, #0
{
    633e:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
    6340:	f7fc fbde 	bl	2b00 <sys_arch_reboot>

00006344 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    6344:	f7fe bda4 	b.w	4e90 <nrf_cc3xx_platform_init_no_rng>

00006348 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    6348:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    634a:	f7fb fc3f 	bl	1bcc <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    634e:	f7ff fc2b 	bl	5ba8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    6352:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    6356:	f7fe bd9b 	b.w	4e90 <nrf_cc3xx_platform_init_no_rng>

0000635a <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    635a:	6880      	ldr	r0, [r0, #8]
    635c:	3818      	subs	r0, #24
    635e:	f020 0007 	bic.w	r0, r0, #7
}
    6362:	3810      	subs	r0, #16
    6364:	4770      	bx	lr

00006366 <boot_magic_compatible_check>:
    switch (tbl_val) {
    6366:	2804      	cmp	r0, #4
    6368:	d009      	beq.n	637e <boot_magic_compatible_check+0x18>
    636a:	2805      	cmp	r0, #5
    636c:	d103      	bne.n	6376 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    636e:	1e48      	subs	r0, r1, #1
    6370:	bf18      	it	ne
    6372:	2001      	movne	r0, #1
    6374:	4770      	bx	lr
        return tbl_val == val;
    6376:	1a43      	subs	r3, r0, r1
    6378:	4258      	negs	r0, r3
    637a:	4158      	adcs	r0, r3
    637c:	4770      	bx	lr
    switch (tbl_val) {
    637e:	2001      	movs	r0, #1
}
    6380:	4770      	bx	lr

00006382 <bootutil_buffer_is_erased>:
{
    6382:	b538      	push	{r3, r4, r5, lr}
    6384:	4615      	mov	r5, r2
    if (buffer == NULL || len == 0) {
    6386:	460c      	mov	r4, r1
    6388:	b161      	cbz	r1, 63a4 <bootutil_buffer_is_erased+0x22>
    638a:	b15a      	cbz	r2, 63a4 <bootutil_buffer_is_erased+0x22>
    erased_val = flash_area_erased_val(area);
    638c:	f7ff fbdf 	bl	5b4e <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    6390:	4621      	mov	r1, r4
    6392:	4425      	add	r5, r4
        if (u8b[i] != erased_val) {
    6394:	f811 3b01 	ldrb.w	r3, [r1], #1
    6398:	4283      	cmp	r3, r0
    639a:	d103      	bne.n	63a4 <bootutil_buffer_is_erased+0x22>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    639c:	42a9      	cmp	r1, r5
    639e:	d1f9      	bne.n	6394 <bootutil_buffer_is_erased+0x12>
    return true;
    63a0:	2001      	movs	r0, #1
}
    63a2:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    63a4:	2000      	movs	r0, #0
    63a6:	e7fc      	b.n	63a2 <bootutil_buffer_is_erased+0x20>

000063a8 <boot_read_flag>:
{
    63a8:	b538      	push	{r3, r4, r5, lr}
    63aa:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    63ac:	2301      	movs	r3, #1
{
    63ae:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    63b0:	4622      	mov	r2, r4
{
    63b2:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    63b4:	f7ff fb86 	bl	5ac4 <flash_area_read>
    if (rc < 0) {
    63b8:	2800      	cmp	r0, #0
    63ba:	db0f      	blt.n	63dc <boot_read_flag+0x34>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    63bc:	2201      	movs	r2, #1
    63be:	4621      	mov	r1, r4
    63c0:	4628      	mov	r0, r5
    63c2:	f7ff ffde 	bl	6382 <bootutil_buffer_is_erased>
    63c6:	b938      	cbnz	r0, 63d8 <boot_read_flag+0x30>
    if (flag != BOOT_FLAG_SET) {
    63c8:	7823      	ldrb	r3, [r4, #0]
    return BOOT_FLAG_SET;
    63ca:	2b01      	cmp	r3, #1
        *flag = boot_flag_decode(*flag);
    63cc:	bf14      	ite	ne
    63ce:	2302      	movne	r3, #2
    63d0:	2301      	moveq	r3, #1
    63d2:	2000      	movs	r0, #0
    63d4:	7023      	strb	r3, [r4, #0]
}
    63d6:	bd38      	pop	{r3, r4, r5, pc}
    63d8:	2303      	movs	r3, #3
    63da:	e7fa      	b.n	63d2 <boot_read_flag+0x2a>
        return BOOT_EFLASH;
    63dc:	2001      	movs	r0, #1
    63de:	e7fa      	b.n	63d6 <boot_read_flag+0x2e>

000063e0 <boot_write_trailer>:
{
    63e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    63e4:	461d      	mov	r5, r3
    63e6:	4606      	mov	r6, r0
    63e8:	460f      	mov	r7, r1
    63ea:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    63ec:	f7ff fba8 	bl	5b40 <flash_area_align>
    align = ALIGN_UP(inlen, align);
    63f0:	1e6c      	subs	r4, r5, #1
    63f2:	4404      	add	r4, r0
    63f4:	4240      	negs	r0, r0
    63f6:	4004      	ands	r4, r0
    if (align > BOOT_MAX_ALIGN) {
    63f8:	2c08      	cmp	r4, #8
    63fa:	d81a      	bhi.n	6432 <boot_write_trailer+0x52>
    erased_val = flash_area_erased_val(fap);
    63fc:	4630      	mov	r0, r6
    63fe:	f7ff fba6 	bl	5b4e <flash_area_erased_val>
    6402:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    6404:	462a      	mov	r2, r5
    6406:	4641      	mov	r1, r8
    6408:	4668      	mov	r0, sp
    640a:	f7ff fc3a 	bl	5c82 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    640e:	4649      	mov	r1, r9
    6410:	1b62      	subs	r2, r4, r5
    6412:	eb0d 0005 	add.w	r0, sp, r5
    6416:	f7ff fc3f 	bl	5c98 <memset>
    rc = flash_area_write(fap, off, buf, align);
    641a:	4623      	mov	r3, r4
    641c:	466a      	mov	r2, sp
    641e:	4639      	mov	r1, r7
    6420:	4630      	mov	r0, r6
    6422:	f7ff fb64 	bl	5aee <flash_area_write>
    if (rc != 0) {
    6426:	3800      	subs	r0, #0
    6428:	bf18      	it	ne
    642a:	2001      	movne	r0, #1
}
    642c:	b003      	add	sp, #12
    642e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    6432:	f04f 30ff 	mov.w	r0, #4294967295
    6436:	e7f9      	b.n	642c <boot_write_trailer+0x4c>

00006438 <boot_write_trailer_flag>:
{
    6438:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    643a:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    643c:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    6440:	aa01      	add	r2, sp, #4
    6442:	f7ff ffcd 	bl	63e0 <boot_write_trailer>
}
    6446:	b003      	add	sp, #12
    6448:	f85d fb04 	ldr.w	pc, [sp], #4

0000644c <boot_write_image_ok>:
    644c:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    644e:	2201      	movs	r2, #1
    6450:	3918      	subs	r1, #24
    6452:	f021 0107 	bic.w	r1, r1, #7
    6456:	f7ff bfef 	b.w	6438 <boot_write_trailer_flag>

0000645a <boot_read_image_ok>:
    645a:	6882      	ldr	r2, [r0, #8]
    645c:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    645e:	f022 0207 	bic.w	r2, r2, #7
    6462:	f7ff bfa1 	b.w	63a8 <boot_read_flag>

00006466 <boot_read_swap_state_by_id>:
{
    6466:	b513      	push	{r0, r1, r4, lr}
    6468:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    646a:	b2c0      	uxtb	r0, r0
    646c:	a901      	add	r1, sp, #4
    646e:	f7fb fb55 	bl	1b1c <flash_area_open>
    if (rc != 0) {
    6472:	b950      	cbnz	r0, 648a <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    6474:	4621      	mov	r1, r4
    6476:	9801      	ldr	r0, [sp, #4]
    6478:	f7fd fa8a 	bl	3990 <boot_read_swap_state>
    647c:	4604      	mov	r4, r0
    flash_area_close(fap);
    647e:	9801      	ldr	r0, [sp, #4]
    6480:	f7ff fb1f 	bl	5ac2 <flash_area_close>
}
    6484:	4620      	mov	r0, r4
    6486:	b002      	add	sp, #8
    6488:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    648a:	2401      	movs	r4, #1
    648c:	e7fa      	b.n	6484 <boot_read_swap_state_by_id+0x1e>

0000648e <boot_write_swap_info>:
{
    648e:	b513      	push	{r0, r1, r4, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    6490:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
{
    6494:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    6496:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
    649a:	f7ff ff5e 	bl	635a <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    649e:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    64a0:	4601      	mov	r1, r0
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    64a2:	f10d 0207 	add.w	r2, sp, #7
    64a6:	4620      	mov	r0, r4
    64a8:	f7ff ff9a 	bl	63e0 <boot_write_trailer>
}
    64ac:	b002      	add	sp, #8
    64ae:	bd10      	pop	{r4, pc}

000064b0 <_mbedtls_init>:
#if defined(CONFIG_MBEDTLS_DEBUG_LEVEL)
	mbedtls_debug_set_threshold(CONFIG_MBEDTLS_DEBUG_LEVEL);
#endif

	return 0;
}
    64b0:	2000      	movs	r0, #0
    64b2:	4770      	bx	lr

000064b4 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    64b4:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    64b6:	6803      	ldr	r3, [r0, #0]
    64b8:	1acd      	subs	r5, r1, r3
    64ba:	2d00      	cmp	r5, #0
    64bc:	dc02      	bgt.n	64c4 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    64be:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
    64c2:	bd70      	pop	{r4, r5, r6, pc}
    if( ( **p & 0x80 ) == 0 )
    64c4:	f993 6000 	ldrsb.w	r6, [r3]
    64c8:	781c      	ldrb	r4, [r3, #0]
    64ca:	2e00      	cmp	r6, #0
    64cc:	db0a      	blt.n	64e4 <mbedtls_asn1_get_len+0x30>
        *len = *(*p)++;
    64ce:	1c5c      	adds	r4, r3, #1
    64d0:	6004      	str	r4, [r0, #0]
    64d2:	781b      	ldrb	r3, [r3, #0]
    64d4:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
    64d6:	6803      	ldr	r3, [r0, #0]
    64d8:	1ac9      	subs	r1, r1, r3
    64da:	6813      	ldr	r3, [r2, #0]
    64dc:	428b      	cmp	r3, r1
    64de:	d8ee      	bhi.n	64be <mbedtls_asn1_get_len+0xa>
    return( 0 );
    64e0:	2000      	movs	r0, #0
    64e2:	e7ee      	b.n	64c2 <mbedtls_asn1_get_len+0xe>
        switch( **p & 0x7F )
    64e4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    64e8:	3c01      	subs	r4, #1
    64ea:	2c03      	cmp	r4, #3
    64ec:	d82b      	bhi.n	6546 <mbedtls_asn1_get_len+0x92>
    64ee:	e8df f004 	tbb	[pc, r4]
    64f2:	0a02      	.short	0x0a02
    64f4:	2114      	.short	0x2114
            if( ( end - *p ) < 2 )
    64f6:	2d01      	cmp	r5, #1
    64f8:	d0e1      	beq.n	64be <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
    64fa:	785b      	ldrb	r3, [r3, #1]
    64fc:	6013      	str	r3, [r2, #0]
            (*p) += 2;
    64fe:	6803      	ldr	r3, [r0, #0]
    6500:	3302      	adds	r3, #2
            (*p) += 5;
    6502:	6003      	str	r3, [r0, #0]
            break;
    6504:	e7e7      	b.n	64d6 <mbedtls_asn1_get_len+0x22>
            if( ( end - *p ) < 3 )
    6506:	2d02      	cmp	r5, #2
    6508:	ddd9      	ble.n	64be <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    650a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    650e:	ba5b      	rev16	r3, r3
    6510:	b29b      	uxth	r3, r3
    6512:	6013      	str	r3, [r2, #0]
            (*p) += 3;
    6514:	6803      	ldr	r3, [r0, #0]
    6516:	3303      	adds	r3, #3
    6518:	e7f3      	b.n	6502 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 4 )
    651a:	2d03      	cmp	r5, #3
    651c:	ddcf      	ble.n	64be <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    651e:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    6520:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6522:	0224      	lsls	r4, r4, #8
    6524:	78db      	ldrb	r3, [r3, #3]
            *len = ( (size_t)(*p)[1] << 16 ) |
    6526:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    652a:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
    652c:	6013      	str	r3, [r2, #0]
            (*p) += 4;
    652e:	6803      	ldr	r3, [r0, #0]
    6530:	3304      	adds	r3, #4
    6532:	e7e6      	b.n	6502 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 5 )
    6534:	2d04      	cmp	r5, #4
    6536:	ddc2      	ble.n	64be <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    6538:	f8d3 3001 	ldr.w	r3, [r3, #1]
    653c:	ba1b      	rev	r3, r3
    653e:	6013      	str	r3, [r2, #0]
            (*p) += 5;
    6540:	6803      	ldr	r3, [r0, #0]
    6542:	3305      	adds	r3, #5
    6544:	e7dd      	b.n	6502 <mbedtls_asn1_get_len+0x4e>
        switch( **p & 0x7F )
    6546:	f06f 0063 	mvn.w	r0, #99	; 0x63
    654a:	e7ba      	b.n	64c2 <mbedtls_asn1_get_len+0xe>

0000654c <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    654c:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    654e:	6804      	ldr	r4, [r0, #0]
    6550:	1b0e      	subs	r6, r1, r4
    6552:	2e00      	cmp	r6, #0
    6554:	dd07      	ble.n	6566 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    6556:	7826      	ldrb	r6, [r4, #0]
    6558:	429e      	cmp	r6, r3
    655a:	d108      	bne.n	656e <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    655c:	3401      	adds	r4, #1
    655e:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    6560:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    6562:	f7ff bfa7 	b.w	64b4 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6566:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    656a:	bc70      	pop	{r4, r5, r6}
    656c:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    656e:	f06f 0061 	mvn.w	r0, #97	; 0x61
    6572:	e7fa      	b.n	656a <mbedtls_asn1_get_tag+0x1e>

00006574 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    6574:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    6576:	2302      	movs	r3, #2
{
    6578:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    657a:	aa01      	add	r2, sp, #4
{
    657c:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    657e:	f7ff ffe5 	bl	654c <mbedtls_asn1_get_tag>
    6582:	b940      	cbnz	r0, 6596 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
    6584:	9e01      	ldr	r6, [sp, #4]
    6586:	4628      	mov	r0, r5
    6588:	4632      	mov	r2, r6
    658a:	6821      	ldr	r1, [r4, #0]
    658c:	f000 f8ef 	bl	676e <mbedtls_mpi_read_binary>

    *p += len;
    6590:	6823      	ldr	r3, [r4, #0]
    6592:	4433      	add	r3, r6
    6594:	6023      	str	r3, [r4, #0]

    return( ret );
}
    6596:	b002      	add	sp, #8
    6598:	bd70      	pop	{r4, r5, r6, pc}

0000659a <mpi_select>:
 *                      this must satisfy 0 <= idx < T_size.
 *
 * \return \c 0 on success, or a negative error code.
 */
static int mpi_select( mbedtls_mpi *R, const mbedtls_mpi *T, size_t T_size, size_t idx )
{
    659a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    659e:	4606      	mov	r6, r0
    65a0:	460f      	mov	r7, r1
    65a2:	4615      	mov	r5, r2
    65a4:	4698      	mov	r8, r3
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    for( size_t i = 0; i < T_size; i++ )
    65a6:	2400      	movs	r4, #0
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( R, &T[i],
    65a8:	f04f 090c 	mov.w	r9, #12
    65ac:	4641      	mov	r1, r8
    65ae:	4620      	mov	r0, r4
    65b0:	f001 f917 	bl	77e2 <mbedtls_ct_size_bool_eq>
    65b4:	fb09 7104 	mla	r1, r9, r4, r7
    65b8:	b2c2      	uxtb	r2, r0
    65ba:	4630      	mov	r0, r6
    65bc:	f001 f929 	bl	7812 <mbedtls_mpi_safe_cond_assign>
    65c0:	b910      	cbnz	r0, 65c8 <mpi_select+0x2e>
    for( size_t i = 0; i < T_size; i++ )
    65c2:	3401      	adds	r4, #1
    65c4:	42a5      	cmp	r5, r4
    65c6:	d1f1      	bne.n	65ac <mpi_select+0x12>
                        (unsigned char) mbedtls_ct_size_bool_eq( i, idx ) ) );
    }

cleanup:
    return( ret );
}
    65c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000065cc <mpi_montmul.isra.0>:
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B,
    65cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi_core_montmul( A->p, A->p, B->p, B->n, N->p, N->n, mm, T->p );
    65ce:	9c06      	ldr	r4, [sp, #24]
    65d0:	e9cd 3402 	strd	r3, r4, [sp, #8]
    65d4:	6853      	ldr	r3, [r2, #4]
    65d6:	9301      	str	r3, [sp, #4]
    65d8:	6893      	ldr	r3, [r2, #8]
    65da:	9300      	str	r3, [sp, #0]
    65dc:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
    65e0:	4601      	mov	r1, r0
    65e2:	f001 f8a4 	bl	772e <mbedtls_mpi_core_montmul>
}
    65e6:	b004      	add	sp, #16
    65e8:	bd10      	pop	{r4, pc}

000065ea <mbedtls_mpi_init>:
    X->n = 0;
    65ea:	2300      	movs	r3, #0
    65ec:	2201      	movs	r2, #1
    X->p = NULL;
    65ee:	6083      	str	r3, [r0, #8]
    X->n = 0;
    65f0:	e9c0 2300 	strd	r2, r3, [r0]
}
    65f4:	4770      	bx	lr

000065f6 <mbedtls_mpi_free>:
{
    65f6:	b510      	push	{r4, lr}
    if( X == NULL )
    65f8:	4604      	mov	r4, r0
    65fa:	b168      	cbz	r0, 6618 <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
    65fc:	6880      	ldr	r0, [r0, #8]
    65fe:	b130      	cbz	r0, 660e <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
    6600:	6861      	ldr	r1, [r4, #4]
    6602:	0089      	lsls	r1, r1, #2
    6604:	f7fe fc94 	bl	4f30 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
    6608:	68a0      	ldr	r0, [r4, #8]
    660a:	f7fd fbf5 	bl	3df8 <mbedtls_free>
    X->n = 0;
    660e:	2300      	movs	r3, #0
    6610:	2201      	movs	r2, #1
    6612:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    6616:	60a3      	str	r3, [r4, #8]
}
    6618:	bd10      	pop	{r4, pc}

0000661a <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    661a:	f242 7310 	movw	r3, #10000	; 0x2710
    661e:	4299      	cmp	r1, r3
{
    6620:	b570      	push	{r4, r5, r6, lr}
    6622:	4604      	mov	r4, r0
    6624:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    6626:	d902      	bls.n	662e <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    6628:	f06f 000f 	mvn.w	r0, #15
}
    662c:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
    662e:	6843      	ldr	r3, [r0, #4]
    6630:	428b      	cmp	r3, r1
    6632:	d301      	bcc.n	6638 <mbedtls_mpi_grow+0x1e>
    return( 0 );
    6634:	2000      	movs	r0, #0
    6636:	e7f9      	b.n	662c <mbedtls_mpi_grow+0x12>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    6638:	2104      	movs	r1, #4
    663a:	4628      	mov	r0, r5
    663c:	f7fd fbd6 	bl	3dec <mbedtls_calloc>
    6640:	4606      	mov	r6, r0
    6642:	2800      	cmp	r0, #0
    6644:	d0f0      	beq.n	6628 <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
    6646:	68a1      	ldr	r1, [r4, #8]
    6648:	b159      	cbz	r1, 6662 <mbedtls_mpi_grow+0x48>
            memcpy( p, X->p, X->n * ciL );
    664a:	6862      	ldr	r2, [r4, #4]
    664c:	0092      	lsls	r2, r2, #2
    664e:	f7ff fb18 	bl	5c82 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
    6652:	6861      	ldr	r1, [r4, #4]
    6654:	68a0      	ldr	r0, [r4, #8]
    6656:	0089      	lsls	r1, r1, #2
    6658:	f7fe fc6a 	bl	4f30 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
    665c:	68a0      	ldr	r0, [r4, #8]
    665e:	f7fd fbcb 	bl	3df8 <mbedtls_free>
        X->p = p;
    6662:	e9c4 5601 	strd	r5, r6, [r4, #4]
    6666:	e7e5      	b.n	6634 <mbedtls_mpi_grow+0x1a>

00006668 <mbedtls_mpi_resize_clear>:
{
    6668:	b538      	push	{r3, r4, r5, lr}
    666a:	4604      	mov	r4, r0
    if( limbs == 0 )
    666c:	460d      	mov	r5, r1
    666e:	b919      	cbnz	r1, 6678 <mbedtls_mpi_resize_clear+0x10>
        mbedtls_mpi_free( X );
    6670:	f7ff ffc1 	bl	65f6 <mbedtls_mpi_free>
}
    6674:	2000      	movs	r0, #0
    6676:	bd38      	pop	{r3, r4, r5, pc}
    else if( X->n == limbs )
    6678:	6842      	ldr	r2, [r0, #4]
    667a:	428a      	cmp	r2, r1
    667c:	d107      	bne.n	668e <mbedtls_mpi_resize_clear+0x26>
        memset( X->p, 0, limbs * ciL );
    667e:	2100      	movs	r1, #0
    6680:	6880      	ldr	r0, [r0, #8]
    6682:	0092      	lsls	r2, r2, #2
    6684:	f7ff fb08 	bl	5c98 <memset>
        X->s = 1;
    6688:	2301      	movs	r3, #1
    668a:	6023      	str	r3, [r4, #0]
        return( 0 );
    668c:	e7f2      	b.n	6674 <mbedtls_mpi_resize_clear+0xc>
        mbedtls_mpi_free( X );
    668e:	f7ff ffb2 	bl	65f6 <mbedtls_mpi_free>
        return( mbedtls_mpi_grow( X, limbs ) );
    6692:	4629      	mov	r1, r5
    6694:	4620      	mov	r0, r4
}
    6696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return( mbedtls_mpi_grow( X, limbs ) );
    669a:	f7ff bfbe 	b.w	661a <mbedtls_mpi_grow>

0000669e <mbedtls_mpi_copy>:
    if( X == Y )
    669e:	4288      	cmp	r0, r1
{
    66a0:	b570      	push	{r4, r5, r6, lr}
    66a2:	4605      	mov	r5, r0
    66a4:	460e      	mov	r6, r1
    if( X == Y )
    66a6:	d009      	beq.n	66bc <mbedtls_mpi_copy+0x1e>
    if( Y->n == 0 )
    66a8:	6849      	ldr	r1, [r1, #4]
        if( X->n != 0 )
    66aa:	6842      	ldr	r2, [r0, #4]
    if( Y->n == 0 )
    66ac:	b941      	cbnz	r1, 66c0 <mbedtls_mpi_copy+0x22>
        if( X->n != 0 )
    66ae:	b12a      	cbz	r2, 66bc <mbedtls_mpi_copy+0x1e>
            X->s = 1;
    66b0:	2301      	movs	r3, #1
            memset( X->p, 0, X->n * ciL );
    66b2:	0092      	lsls	r2, r2, #2
            X->s = 1;
    66b4:	6003      	str	r3, [r0, #0]
            memset( X->p, 0, X->n * ciL );
    66b6:	6880      	ldr	r0, [r0, #8]
    66b8:	f7ff faee 	bl	5c98 <memset>
        return( 0 );
    66bc:	2000      	movs	r0, #0
}
    66be:	bd70      	pop	{r4, r5, r6, pc}
    for( i = Y->n - 1; i > 0; i-- )
    66c0:	1e4c      	subs	r4, r1, #1
    66c2:	b984      	cbnz	r4, 66e6 <mbedtls_mpi_copy+0x48>
    X->s = Y->s;
    66c4:	6833      	ldr	r3, [r6, #0]
    i++;
    66c6:	3401      	adds	r4, #1
    if( X->n < i )
    66c8:	4294      	cmp	r4, r2
    X->s = Y->s;
    66ca:	602b      	str	r3, [r5, #0]
    if( X->n < i )
    66cc:	d912      	bls.n	66f4 <mbedtls_mpi_copy+0x56>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    66ce:	4621      	mov	r1, r4
    66d0:	4628      	mov	r0, r5
    66d2:	f7ff ffa2 	bl	661a <mbedtls_mpi_grow>
    66d6:	2800      	cmp	r0, #0
    66d8:	d1f1      	bne.n	66be <mbedtls_mpi_copy+0x20>
    memcpy( X->p, Y->p, i * ciL );
    66da:	68b1      	ldr	r1, [r6, #8]
    66dc:	68a8      	ldr	r0, [r5, #8]
    66de:	00a2      	lsls	r2, r4, #2
    66e0:	f7ff facf 	bl	5c82 <memcpy>
    66e4:	e7ea      	b.n	66bc <mbedtls_mpi_copy+0x1e>
        if( Y->p[i] != 0 )
    66e6:	68b3      	ldr	r3, [r6, #8]
    66e8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    66ec:	2b00      	cmp	r3, #0
    66ee:	d1e9      	bne.n	66c4 <mbedtls_mpi_copy+0x26>
    for( i = Y->n - 1; i > 0; i-- )
    66f0:	3c01      	subs	r4, #1
    66f2:	e7e6      	b.n	66c2 <mbedtls_mpi_copy+0x24>
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    66f4:	68a8      	ldr	r0, [r5, #8]
    66f6:	1b12      	subs	r2, r2, r4
    66f8:	2100      	movs	r1, #0
    66fa:	0092      	lsls	r2, r2, #2
    66fc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    6700:	f7ff faca 	bl	5c98 <memset>
    6704:	e7e9      	b.n	66da <mbedtls_mpi_copy+0x3c>

00006706 <mbedtls_mpi_lset>:
{
    6706:	b570      	push	{r4, r5, r6, lr}
    6708:	460c      	mov	r4, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    670a:	2101      	movs	r1, #1
{
    670c:	4605      	mov	r5, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    670e:	f7ff ff84 	bl	661a <mbedtls_mpi_grow>
    6712:	4606      	mov	r6, r0
    6714:	b978      	cbnz	r0, 6736 <mbedtls_mpi_lset+0x30>
    memset( X->p, 0, X->n * ciL );
    6716:	686a      	ldr	r2, [r5, #4]
    6718:	4601      	mov	r1, r0
    671a:	0092      	lsls	r2, r2, #2
    671c:	68a8      	ldr	r0, [r5, #8]
    671e:	f7ff fabb 	bl	5c98 <memset>
    if( z >= 0 )
    6722:	2c00      	cmp	r4, #0
    X->s    = ( z < 0 ) ? -1 : 1;
    6724:	bfb4      	ite	lt
    6726:	f04f 32ff 	movlt.w	r2, #4294967295
    672a:	2201      	movge	r2, #1
    X->p[0] = mpi_sint_abs( z );
    672c:	68a9      	ldr	r1, [r5, #8]
    return( (mbedtls_mpi_uint) 0 - (mbedtls_mpi_uint) z );
    672e:	bfb8      	it	lt
    6730:	4264      	neglt	r4, r4
    X->s    = ( z < 0 ) ? -1 : 1;
    6732:	600c      	str	r4, [r1, #0]
    6734:	602a      	str	r2, [r5, #0]
}
    6736:	4630      	mov	r0, r6
    6738:	bd70      	pop	{r4, r5, r6, pc}

0000673a <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    673a:	6843      	ldr	r3, [r0, #4]
    673c:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    6740:	bf3f      	itttt	cc
    6742:	6883      	ldrcc	r3, [r0, #8]
    6744:	094a      	lsrcc	r2, r1, #5
    6746:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
    674a:	f001 011f 	andcc.w	r1, r1, #31
    674e:	bf3a      	itte	cc
    6750:	40c8      	lsrcc	r0, r1
    6752:	f000 0001 	andcc.w	r0, r0, #1
        return( 0 );
    6756:	2000      	movcs	r0, #0
}
    6758:	4770      	bx	lr

0000675a <mbedtls_mpi_bitlen>:
    return( mbedtls_mpi_core_bitlen( X->p, X->n ) );
    675a:	e9d0 1001 	ldrd	r1, r0, [r0, #4]
    675e:	f000 be0b 	b.w	7378 <mbedtls_mpi_core_bitlen>

00006762 <mbedtls_mpi_size>:
{
    6762:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    6764:	f7ff fff9 	bl	675a <mbedtls_mpi_bitlen>
    6768:	3007      	adds	r0, #7
}
    676a:	08c0      	lsrs	r0, r0, #3
    676c:	bd08      	pop	{r3, pc}

0000676e <mbedtls_mpi_read_binary>:
{
    676e:	b570      	push	{r4, r5, r6, lr}
    6770:	460e      	mov	r6, r1
    const size_t limbs = CHARS_TO_LIMBS( buflen );
    6772:	f012 0103 	ands.w	r1, r2, #3
    6776:	bf18      	it	ne
    6778:	2101      	movne	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    677a:	eb01 0192 	add.w	r1, r1, r2, lsr #2
{
    677e:	4605      	mov	r5, r0
    6780:	4614      	mov	r4, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    6782:	f7ff ff71 	bl	6668 <mbedtls_mpi_resize_clear>
    6786:	b938      	cbnz	r0, 6798 <mbedtls_mpi_read_binary+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_core_read_be( X->p, X->n, buf, buflen ) );
    6788:	e9d5 1001 	ldrd	r1, r0, [r5, #4]
    678c:	4623      	mov	r3, r4
    678e:	4632      	mov	r2, r6
}
    6790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_core_read_be( X->p, X->n, buf, buflen ) );
    6794:	f000 be3a 	b.w	740c <mbedtls_mpi_core_read_be>
}
    6798:	bd70      	pop	{r4, r5, r6, pc}

0000679a <mbedtls_mpi_write_binary>:
{
    679a:	4613      	mov	r3, r2
    return( mbedtls_mpi_core_write_be( X->p, X->n, buf, buflen ) );
    679c:	460a      	mov	r2, r1
    679e:	e9d0 1001 	ldrd	r1, r0, [r0, #4]
    67a2:	f000 be58 	b.w	7456 <mbedtls_mpi_core_write_be>

000067a6 <mbedtls_mpi_shift_l>:
{
    67a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67a8:	4605      	mov	r5, r0
    67aa:	460e      	mov	r6, r1
    v0 = count / (biL    );
    67ac:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
    67ae:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    67b2:	f7ff ffd2 	bl	675a <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
    67b6:	686b      	ldr	r3, [r5, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
    67b8:	4430      	add	r0, r6
    if( X->n * biL < i )
    67ba:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    67be:	d805      	bhi.n	67cc <mbedtls_mpi_shift_l+0x26>
    if( v0 > 0 )
    67c0:	2e1f      	cmp	r6, #31
    67c2:	d80f      	bhi.n	67e4 <mbedtls_mpi_shift_l+0x3e>
    if( t1 > 0 )
    67c4:	2f00      	cmp	r7, #0
    67c6:	d141      	bne.n	684c <mbedtls_mpi_shift_l+0xa6>
    ret = 0;
    67c8:	2000      	movs	r0, #0
    67ca:	e00a      	b.n	67e2 <mbedtls_mpi_shift_l+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    67cc:	f010 011f 	ands.w	r1, r0, #31
    67d0:	bf18      	it	ne
    67d2:	2101      	movne	r1, #1
    67d4:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    67d8:	4628      	mov	r0, r5
    67da:	f7ff ff1e 	bl	661a <mbedtls_mpi_grow>
    67de:	2800      	cmp	r0, #0
    67e0:	d0ee      	beq.n	67c0 <mbedtls_mpi_shift_l+0x1a>
}
    67e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
    67e4:	f06f 0003 	mvn.w	r0, #3
    67e8:	686b      	ldr	r3, [r5, #4]
    67ea:	4360      	muls	r0, r4
    67ec:	4619      	mov	r1, r3
    67ee:	009a      	lsls	r2, r3, #2
    67f0:	42a1      	cmp	r1, r4
    67f2:	f1a2 0204 	sub.w	r2, r2, #4
    67f6:	d80c      	bhi.n	6812 <mbedtls_mpi_shift_l+0x6c>
    67f8:	1ae2      	subs	r2, r4, r3
    67fa:	429c      	cmp	r4, r3
    67fc:	bf88      	it	hi
    67fe:	2200      	movhi	r2, #0
    6800:	4413      	add	r3, r2
            X->p[i - 1] = 0;
    6802:	2200      	movs	r2, #0
    6804:	009b      	lsls	r3, r3, #2
        for( ; i > 0; i-- )
    6806:	3b04      	subs	r3, #4
    6808:	1d19      	adds	r1, r3, #4
    680a:	d0db      	beq.n	67c4 <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
    680c:	68a9      	ldr	r1, [r5, #8]
    680e:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
    6810:	e7f9      	b.n	6806 <mbedtls_mpi_shift_l+0x60>
            X->p[i - 1] = X->p[i - v0 - 1];
    6812:	68ae      	ldr	r6, [r5, #8]
        for( i = X->n; i > v0; i-- )
    6814:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
    6816:	eb06 0c02 	add.w	ip, r6, r2
    681a:	f85c c000 	ldr.w	ip, [ip, r0]
    681e:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
    6822:	e7e5      	b.n	67f0 <mbedtls_mpi_shift_l+0x4a>
            r1 = X->p[i] >> (biL - t1);
    6824:	68ab      	ldr	r3, [r5, #8]
    6826:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            X->p[i] <<= t1;
    682a:	fa01 f007 	lsl.w	r0, r1, r7
    682e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
            X->p[i] |= r0;
    6832:	68a8      	ldr	r0, [r5, #8]
    6834:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    6838:	4313      	orrs	r3, r2
    683a:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
            r0 = r1;
    683e:	fa21 f206 	lsr.w	r2, r1, r6
        for( i = v0; i < X->n; i++ )
    6842:	3401      	adds	r4, #1
    6844:	686b      	ldr	r3, [r5, #4]
    6846:	42a3      	cmp	r3, r4
    6848:	d8ec      	bhi.n	6824 <mbedtls_mpi_shift_l+0x7e>
    684a:	e7bd      	b.n	67c8 <mbedtls_mpi_shift_l+0x22>
    mbedtls_mpi_uint r0 = 0, r1;
    684c:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
    684e:	f1c7 0620 	rsb	r6, r7, #32
    6852:	e7f7      	b.n	6844 <mbedtls_mpi_shift_l+0x9e>

00006854 <mbedtls_mpi_shift_r>:
{
    6854:	b508      	push	{r3, lr}
    6856:	460a      	mov	r2, r1
    if( X->n != 0 )
    6858:	6841      	ldr	r1, [r0, #4]
    685a:	b111      	cbz	r1, 6862 <mbedtls_mpi_shift_r+0xe>
        mbedtls_mpi_core_shift_r( X->p, X->n, count );
    685c:	6880      	ldr	r0, [r0, #8]
    685e:	f000 fe2c 	bl	74ba <mbedtls_mpi_core_shift_r>
}
    6862:	2000      	movs	r0, #0
    6864:	bd08      	pop	{r3, pc}

00006866 <mbedtls_mpi_cmp_abs>:
{
    6866:	b510      	push	{r4, lr}
    for( i = X->n; i > 0; i-- )
    6868:	6842      	ldr	r2, [r0, #4]
    686a:	b93a      	cbnz	r2, 687c <mbedtls_mpi_cmp_abs+0x16>
    for( j = Y->n; j > 0; j-- )
    686c:	684b      	ldr	r3, [r1, #4]
    686e:	b973      	cbnz	r3, 688e <mbedtls_mpi_cmp_abs+0x28>
    if( i == 0 && j == 0 )
    6870:	b9b2      	cbnz	r2, 68a0 <mbedtls_mpi_cmp_abs+0x3a>
    6872:	1e18      	subs	r0, r3, #0
    6874:	bf18      	it	ne
    6876:	2001      	movne	r0, #1
    6878:	4240      	negs	r0, r0
}
    687a:	bd10      	pop	{r4, pc}
        if( X->p[i - 1] != 0 )
    687c:	6883      	ldr	r3, [r0, #8]
    687e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6882:	f853 3c04 	ldr.w	r3, [r3, #-4]
    6886:	2b00      	cmp	r3, #0
    6888:	d1f0      	bne.n	686c <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
    688a:	3a01      	subs	r2, #1
    688c:	e7ed      	b.n	686a <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
    688e:	688c      	ldr	r4, [r1, #8]
    6890:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    6894:	f854 4c04 	ldr.w	r4, [r4, #-4]
    6898:	2c00      	cmp	r4, #0
    689a:	d1e9      	bne.n	6870 <mbedtls_mpi_cmp_abs+0xa>
    for( j = Y->n; j > 0; j-- )
    689c:	3b01      	subs	r3, #1
    689e:	e7e6      	b.n	686e <mbedtls_mpi_cmp_abs+0x8>
    if( i > j ) return(  1 );
    68a0:	429a      	cmp	r2, r3
    68a2:	d810      	bhi.n	68c6 <mbedtls_mpi_cmp_abs+0x60>
    if( j > i ) return( -1 );
    68a4:	d311      	bcc.n	68ca <mbedtls_mpi_cmp_abs+0x64>
    68a6:	3a01      	subs	r2, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    68a8:	6883      	ldr	r3, [r0, #8]
    68aa:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    68ae:	688b      	ldr	r3, [r1, #8]
    68b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    68b4:	429c      	cmp	r4, r3
    68b6:	d806      	bhi.n	68c6 <mbedtls_mpi_cmp_abs+0x60>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    68b8:	f102 32ff 	add.w	r2, r2, #4294967295
    68bc:	d305      	bcc.n	68ca <mbedtls_mpi_cmp_abs+0x64>
    for( ; i > 0; i-- )
    68be:	1c53      	adds	r3, r2, #1
    68c0:	d1f2      	bne.n	68a8 <mbedtls_mpi_cmp_abs+0x42>
        return( 0 );
    68c2:	2000      	movs	r0, #0
    68c4:	e7d9      	b.n	687a <mbedtls_mpi_cmp_abs+0x14>
    if( i > j ) return(  1 );
    68c6:	2001      	movs	r0, #1
    68c8:	e7d7      	b.n	687a <mbedtls_mpi_cmp_abs+0x14>
    if( j > i ) return( -1 );
    68ca:	f04f 30ff 	mov.w	r0, #4294967295
    68ce:	e7d4      	b.n	687a <mbedtls_mpi_cmp_abs+0x14>

000068d0 <mbedtls_mpi_cmp_mpi>:
{
    68d0:	4602      	mov	r2, r0
    68d2:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    68d4:	6843      	ldr	r3, [r0, #4]
    68d6:	b923      	cbnz	r3, 68e2 <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
    68d8:	6848      	ldr	r0, [r1, #4]
    68da:	b958      	cbnz	r0, 68f4 <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
    68dc:	2b00      	cmp	r3, #0
    68de:	d136      	bne.n	694e <mbedtls_mpi_cmp_mpi+0x7e>
    68e0:	e02f      	b.n	6942 <mbedtls_mpi_cmp_mpi+0x72>
        if( X->p[i - 1] != 0 )
    68e2:	6890      	ldr	r0, [r2, #8]
    68e4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    68e8:	f850 0c04 	ldr.w	r0, [r0, #-4]
    68ec:	2800      	cmp	r0, #0
    68ee:	d1f3      	bne.n	68d8 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
    68f0:	3b01      	subs	r3, #1
    68f2:	e7f0      	b.n	68d6 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
    68f4:	688c      	ldr	r4, [r1, #8]
    68f6:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    68fa:	f855 5c04 	ldr.w	r5, [r5, #-4]
    68fe:	bb15      	cbnz	r5, 6946 <mbedtls_mpi_cmp_mpi+0x76>
    for( j = Y->n; j > 0; j-- )
    6900:	3801      	subs	r0, #1
    6902:	e7ea      	b.n	68da <mbedtls_mpi_cmp_mpi+0xa>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    6904:	680d      	ldr	r5, [r1, #0]
    if( j > i ) return( -Y->s );
    6906:	d202      	bcs.n	690e <mbedtls_mpi_cmp_mpi+0x3e>
    6908:	6808      	ldr	r0, [r1, #0]
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    690a:	4240      	negs	r0, r0
    690c:	e020      	b.n	6950 <mbedtls_mpi_cmp_mpi+0x80>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    690e:	6810      	ldr	r0, [r2, #0]
    6910:	2800      	cmp	r0, #0
    6912:	dd03      	ble.n	691c <mbedtls_mpi_cmp_mpi+0x4c>
    6914:	2d00      	cmp	r5, #0
    6916:	da07      	bge.n	6928 <mbedtls_mpi_cmp_mpi+0x58>
    6918:	2001      	movs	r0, #1
    691a:	e019      	b.n	6950 <mbedtls_mpi_cmp_mpi+0x80>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    691c:	2d00      	cmp	r5, #0
    691e:	dd03      	ble.n	6928 <mbedtls_mpi_cmp_mpi+0x58>
    6920:	b110      	cbz	r0, 6928 <mbedtls_mpi_cmp_mpi+0x58>
    6922:	f04f 30ff 	mov.w	r0, #4294967295
    6926:	e013      	b.n	6950 <mbedtls_mpi_cmp_mpi+0x80>
    6928:	3b01      	subs	r3, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    692a:	6891      	ldr	r1, [r2, #8]
    692c:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    6930:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    6934:	428d      	cmp	r5, r1
    6936:	d80b      	bhi.n	6950 <mbedtls_mpi_cmp_mpi+0x80>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    6938:	f103 33ff 	add.w	r3, r3, #4294967295
    693c:	d3e5      	bcc.n	690a <mbedtls_mpi_cmp_mpi+0x3a>
    for( ; i > 0; i-- )
    693e:	1c59      	adds	r1, r3, #1
    6940:	d1f3      	bne.n	692a <mbedtls_mpi_cmp_mpi+0x5a>
        return( 0 );
    6942:	2000      	movs	r0, #0
    6944:	e004      	b.n	6950 <mbedtls_mpi_cmp_mpi+0x80>
    if( i == 0 && j == 0 )
    6946:	2b00      	cmp	r3, #0
    6948:	d0de      	beq.n	6908 <mbedtls_mpi_cmp_mpi+0x38>
    if( i > j ) return(  X->s );
    694a:	4283      	cmp	r3, r0
    694c:	d9da      	bls.n	6904 <mbedtls_mpi_cmp_mpi+0x34>
    694e:	6810      	ldr	r0, [r2, #0]
}
    6950:	bd30      	pop	{r4, r5, pc}

00006952 <mbedtls_mpi_cmp_int>:
{
    6952:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( z >= 0 )
    6954:	2900      	cmp	r1, #0
    Y.s = ( z < 0 ) ? -1 : 1;
    6956:	bfb6      	itet	lt
    6958:	f04f 33ff 	movlt.w	r3, #4294967295
    695c:	2301      	movge	r3, #1
    return( (mbedtls_mpi_uint) 0 - (mbedtls_mpi_uint) z );
    695e:	4249      	neglt	r1, r1
    Y.s = ( z < 0 ) ? -1 : 1;
    6960:	e9cd 1300 	strd	r1, r3, [sp]
    Y.n = 1;
    6964:	2301      	movs	r3, #1
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    6966:	a901      	add	r1, sp, #4
    Y.n = 1;
    6968:	9302      	str	r3, [sp, #8]
    Y.p = p;
    696a:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    696e:	f7ff ffaf 	bl	68d0 <mbedtls_mpi_cmp_mpi>
}
    6972:	b005      	add	sp, #20
    6974:	f85d fb04 	ldr.w	pc, [sp], #4

00006978 <mbedtls_mpi_add_abs>:
    if( X == B )
    6978:	4290      	cmp	r0, r2
{
    697a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    697e:	4605      	mov	r5, r0
    6980:	460f      	mov	r7, r1
    6982:	4614      	mov	r4, r2
    if( X == B )
    6984:	d002      	beq.n	698c <mbedtls_mpi_add_abs+0x14>
    if( X != A )
    6986:	4288      	cmp	r0, r1
    6988:	d106      	bne.n	6998 <mbedtls_mpi_add_abs+0x20>
{
    698a:	4627      	mov	r7, r4
    X->s = 1;
    698c:	2301      	movs	r3, #1
    698e:	602b      	str	r3, [r5, #0]
    for( j = B->n; j > 0; j-- )
    6990:	687c      	ldr	r4, [r7, #4]
    6992:	b93c      	cbnz	r4, 69a4 <mbedtls_mpi_add_abs+0x2c>
        return( 0 );
    6994:	2000      	movs	r0, #0
    6996:	e003      	b.n	69a0 <mbedtls_mpi_add_abs+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    6998:	f7ff fe81 	bl	669e <mbedtls_mpi_copy>
    699c:	2800      	cmp	r0, #0
    699e:	d0f4      	beq.n	698a <mbedtls_mpi_add_abs+0x12>
}
    69a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
    69a4:	68bb      	ldr	r3, [r7, #8]
    69a6:	ea4f 0884 	mov.w	r8, r4, lsl #2
    69aa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    69ae:	f853 3c04 	ldr.w	r3, [r3, #-4]
    69b2:	b90b      	cbnz	r3, 69b8 <mbedtls_mpi_add_abs+0x40>
    for( j = B->n; j > 0; j-- )
    69b4:	3c01      	subs	r4, #1
    69b6:	e7ec      	b.n	6992 <mbedtls_mpi_add_abs+0x1a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    69b8:	4621      	mov	r1, r4
    69ba:	4628      	mov	r0, r5
    69bc:	f7ff fe2d 	bl	661a <mbedtls_mpi_grow>
    69c0:	2800      	cmp	r0, #0
    69c2:	d1ed      	bne.n	69a0 <mbedtls_mpi_add_abs+0x28>
    mbedtls_mpi_uint *p = X->p;
    69c4:	68ae      	ldr	r6, [r5, #8]
    mbedtls_mpi_uint c = mbedtls_mpi_core_add( p, p, B->p, j );
    69c6:	4623      	mov	r3, r4
    69c8:	68ba      	ldr	r2, [r7, #8]
    69ca:	4631      	mov	r1, r6
    69cc:	4630      	mov	r0, r6
    69ce:	f000 fdae 	bl	752e <mbedtls_mpi_core_add>
    69d2:	4607      	mov	r7, r0
    p += j;
    69d4:	eb06 0308 	add.w	r3, r6, r8
    while( c != 0 )
    69d8:	2f00      	cmp	r7, #0
    69da:	d0db      	beq.n	6994 <mbedtls_mpi_add_abs+0x1c>
        if( j >= X->n )
    69dc:	686a      	ldr	r2, [r5, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j + 1 ) );
    69de:	1c66      	adds	r6, r4, #1
        if( j >= X->n )
    69e0:	42a2      	cmp	r2, r4
    69e2:	d808      	bhi.n	69f6 <mbedtls_mpi_add_abs+0x7e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j + 1 ) );
    69e4:	4631      	mov	r1, r6
    69e6:	4628      	mov	r0, r5
    69e8:	f7ff fe17 	bl	661a <mbedtls_mpi_grow>
    69ec:	2800      	cmp	r0, #0
    69ee:	d1d7      	bne.n	69a0 <mbedtls_mpi_add_abs+0x28>
            p = X->p + j;
    69f0:	68ab      	ldr	r3, [r5, #8]
    69f2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        *p += c; c = ( *p < c ); j++; p++;
    69f6:	681a      	ldr	r2, [r3, #0]
    69f8:	4634      	mov	r4, r6
    69fa:	19d2      	adds	r2, r2, r7
    69fc:	bf2c      	ite	cs
    69fe:	2701      	movcs	r7, #1
    6a00:	2700      	movcc	r7, #0
    6a02:	f843 2b04 	str.w	r2, [r3], #4
    6a06:	e7e7      	b.n	69d8 <mbedtls_mpi_add_abs+0x60>

00006a08 <mbedtls_mpi_sub_abs>:
{
    6a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a0c:	4605      	mov	r5, r0
    6a0e:	460e      	mov	r6, r1
    6a10:	4690      	mov	r8, r2
    for( n = B->n; n > 0; n-- )
    6a12:	6854      	ldr	r4, [r2, #4]
    6a14:	b93c      	cbnz	r4, 6a26 <mbedtls_mpi_sub_abs+0x1e>
    if( n > A->n )
    6a16:	6871      	ldr	r1, [r6, #4]
    6a18:	42a1      	cmp	r1, r4
    6a1a:	d20e      	bcs.n	6a3a <mbedtls_mpi_sub_abs+0x32>
        ret = MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
    6a1c:	f06f 0709 	mvn.w	r7, #9
}
    6a20:	4638      	mov	r0, r7
    6a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[n - 1] != 0 )
    6a26:	f8d8 3008 	ldr.w	r3, [r8, #8]
    6a2a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6a2e:	f853 3c04 	ldr.w	r3, [r3, #-4]
    6a32:	2b00      	cmp	r3, #0
    6a34:	d1ef      	bne.n	6a16 <mbedtls_mpi_sub_abs+0xe>
    for( n = B->n; n > 0; n-- )
    6a36:	3c01      	subs	r4, #1
    6a38:	e7ec      	b.n	6a14 <mbedtls_mpi_sub_abs+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, A->n ) );
    6a3a:	4628      	mov	r0, r5
    6a3c:	f7ff fded 	bl	661a <mbedtls_mpi_grow>
    6a40:	4607      	mov	r7, r0
    6a42:	2800      	cmp	r0, #0
    6a44:	d1ec      	bne.n	6a20 <mbedtls_mpi_sub_abs+0x18>
    if( A->n > n )
    6a46:	6872      	ldr	r2, [r6, #4]
    6a48:	4294      	cmp	r4, r2
    6a4a:	d209      	bcs.n	6a60 <mbedtls_mpi_sub_abs+0x58>
        memcpy( X->p + n, A->p + n, ( A->n - n ) * ciL );
    6a4c:	68b1      	ldr	r1, [r6, #8]
    6a4e:	68a8      	ldr	r0, [r5, #8]
    6a50:	1b12      	subs	r2, r2, r4
    6a52:	0092      	lsls	r2, r2, #2
    6a54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    6a58:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    6a5c:	f7ff f911 	bl	5c82 <memcpy>
    if( X->n > A->n )
    6a60:	686a      	ldr	r2, [r5, #4]
    6a62:	6870      	ldr	r0, [r6, #4]
    6a64:	4282      	cmp	r2, r0
    6a66:	d907      	bls.n	6a78 <mbedtls_mpi_sub_abs+0x70>
        memset( X->p + A->n, 0, ( X->n - A->n ) * ciL );
    6a68:	68ab      	ldr	r3, [r5, #8]
    6a6a:	1a12      	subs	r2, r2, r0
    6a6c:	2100      	movs	r1, #0
    6a6e:	0092      	lsls	r2, r2, #2
    6a70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6a74:	f7ff f910 	bl	5c98 <memset>
    carry = mbedtls_mpi_core_sub( X->p, A->p, B->p, n );
    6a78:	f8d8 2008 	ldr.w	r2, [r8, #8]
    6a7c:	4623      	mov	r3, r4
    6a7e:	68b1      	ldr	r1, [r6, #8]
    6a80:	68a8      	ldr	r0, [r5, #8]
    6a82:	f000 fd6a 	bl	755a <mbedtls_mpi_core_sub>
    if( carry != 0 )
    6a86:	4602      	mov	r2, r0
    6a88:	b910      	cbnz	r0, 6a90 <mbedtls_mpi_sub_abs+0x88>
    X->s = 1;
    6a8a:	2301      	movs	r3, #1
    6a8c:	602b      	str	r3, [r5, #0]
    6a8e:	e7c7      	b.n	6a20 <mbedtls_mpi_sub_abs+0x18>
        carry = mbedtls_mpi_core_sub_int( X->p + n, X->p + n, carry, X->n - n );
    6a90:	68a9      	ldr	r1, [r5, #8]
    6a92:	686b      	ldr	r3, [r5, #4]
    6a94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    6a98:	4608      	mov	r0, r1
    6a9a:	1b1b      	subs	r3, r3, r4
    6a9c:	f000 fe90 	bl	77c0 <mbedtls_mpi_core_sub_int>
        if( carry != 0 )
    6aa0:	2800      	cmp	r0, #0
    6aa2:	d0f2      	beq.n	6a8a <mbedtls_mpi_sub_abs+0x82>
    6aa4:	e7ba      	b.n	6a1c <mbedtls_mpi_sub_abs+0x14>

00006aa6 <add_sub_mpi>:
{
    6aa6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if( A->s * B->s * flip_B < 0 )
    6aaa:	6816      	ldr	r6, [r2, #0]
    s = A->s;
    6aac:	680c      	ldr	r4, [r1, #0]
{
    6aae:	4681      	mov	r9, r0
    if( A->s * B->s * flip_B < 0 )
    6ab0:	fb06 fc04 	mul.w	ip, r6, r4
    6ab4:	4666      	mov	r6, ip
    6ab6:	4373      	muls	r3, r6
{
    6ab8:	460d      	mov	r5, r1
    6aba:	4617      	mov	r7, r2
    if( A->s * B->s * flip_B < 0 )
    6abc:	d51b      	bpl.n	6af6 <add_sub_mpi+0x50>
        int cmp = mbedtls_mpi_cmp_abs( A, B );
    6abe:	4611      	mov	r1, r2
    6ac0:	4628      	mov	r0, r5
    6ac2:	f7ff fed0 	bl	6866 <mbedtls_mpi_cmp_abs>
        if( cmp >= 0 )
    6ac6:	f1b0 0800 	subs.w	r8, r0, #0
    6aca:	db0d      	blt.n	6ae8 <add_sub_mpi+0x42>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    6acc:	463a      	mov	r2, r7
    6ace:	4629      	mov	r1, r5
    6ad0:	4648      	mov	r0, r9
    6ad2:	f7ff ff99 	bl	6a08 <mbedtls_mpi_sub_abs>
    6ad6:	b990      	cbnz	r0, 6afe <add_sub_mpi+0x58>
            X->s = cmp == 0 ? 1 : s;
    6ad8:	f1b8 0f00 	cmp.w	r8, #0
    6adc:	bf08      	it	eq
    6ade:	2401      	moveq	r4, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    6ae0:	2000      	movs	r0, #0
        X->s = s;
    6ae2:	f8c9 4000 	str.w	r4, [r9]
    return( ret );
    6ae6:	e00a      	b.n	6afe <add_sub_mpi+0x58>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    6ae8:	462a      	mov	r2, r5
    6aea:	4648      	mov	r0, r9
    6aec:	f7ff ff8c 	bl	6a08 <mbedtls_mpi_sub_abs>
    6af0:	b928      	cbnz	r0, 6afe <add_sub_mpi+0x58>
            X->s = -s;
    6af2:	4264      	negs	r4, r4
    6af4:	e7f4      	b.n	6ae0 <add_sub_mpi+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    6af6:	f7ff ff3f 	bl	6978 <mbedtls_mpi_add_abs>
    6afa:	2800      	cmp	r0, #0
    6afc:	d0f0      	beq.n	6ae0 <add_sub_mpi+0x3a>
}
    6afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006b02 <mbedtls_mpi_add_mpi>:
    return( add_sub_mpi( X, A, B, 1 ) );
    6b02:	2301      	movs	r3, #1
    6b04:	f7ff bfcf 	b.w	6aa6 <add_sub_mpi>

00006b08 <mbedtls_mpi_sub_mpi>:
    return( add_sub_mpi( X, A, B, -1 ) );
    6b08:	f04f 33ff 	mov.w	r3, #4294967295
    6b0c:	f7ff bfcb 	b.w	6aa6 <add_sub_mpi>

00006b10 <mbedtls_mpi_mul_int>:
{
    6b10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6b14:	4605      	mov	r5, r0
    6b16:	4688      	mov	r8, r1
    6b18:	4616      	mov	r6, r2
    size_t n = A->n;
    6b1a:	684f      	ldr	r7, [r1, #4]
    while( n > 0 && A->p[n - 1] == 0 )
    6b1c:	b13f      	cbz	r7, 6b2e <mbedtls_mpi_mul_int+0x1e>
    6b1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
    6b22:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    6b26:	f853 3c04 	ldr.w	r3, [r3, #-4]
    6b2a:	b13b      	cbz	r3, 6b3c <mbedtls_mpi_mul_int+0x2c>
    if( b == 0 || n == 0 )
    6b2c:	b946      	cbnz	r6, 6b40 <mbedtls_mpi_mul_int+0x30>
        return( mbedtls_mpi_lset( X, 0 ) );
    6b2e:	2100      	movs	r1, #0
    6b30:	4628      	mov	r0, r5
}
    6b32:	b002      	add	sp, #8
    6b34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return( mbedtls_mpi_lset( X, 0 ) );
    6b38:	f7ff bde5 	b.w	6706 <mbedtls_mpi_lset>
        --n;
    6b3c:	3f01      	subs	r7, #1
    6b3e:	e7ed      	b.n	6b1c <mbedtls_mpi_mul_int+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n + 1 ) );
    6b40:	4628      	mov	r0, r5
    6b42:	1c79      	adds	r1, r7, #1
    6b44:	f7ff fd69 	bl	661a <mbedtls_mpi_grow>
    6b48:	4604      	mov	r4, r0
    6b4a:	b970      	cbnz	r0, 6b6a <mbedtls_mpi_mul_int+0x5a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    6b4c:	4641      	mov	r1, r8
    6b4e:	4628      	mov	r0, r5
    6b50:	f7ff fda5 	bl	669e <mbedtls_mpi_copy>
    6b54:	4604      	mov	r4, r0
    6b56:	b940      	cbnz	r0, 6b6a <mbedtls_mpi_mul_int+0x5a>
    mbedtls_mpi_core_mla( X->p, X->n, A->p, n, b - 1 );
    6b58:	3e01      	subs	r6, #1
    6b5a:	9600      	str	r6, [sp, #0]
    6b5c:	463b      	mov	r3, r7
    6b5e:	e9d5 1001 	ldrd	r1, r0, [r5, #4]
    6b62:	f8d8 2008 	ldr.w	r2, [r8, #8]
    6b66:	f000 fd15 	bl	7594 <mbedtls_mpi_core_mla>
}
    6b6a:	4620      	mov	r0, r4
    6b6c:	b002      	add	sp, #8
    6b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006b72 <mbedtls_mpi_div_mpi>:
{
    6b72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b76:	4683      	mov	fp, r0
    6b78:	b09d      	sub	sp, #116	; 0x74
    6b7a:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    6b7c:	4618      	mov	r0, r3
    6b7e:	2100      	movs	r1, #0
{
    6b80:	4616      	mov	r6, r2
    6b82:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    6b84:	f7ff fee5 	bl	6952 <mbedtls_mpi_cmp_int>
    6b88:	2800      	cmp	r0, #0
    6b8a:	f000 8187 	beq.w	6e9c <mbedtls_mpi_div_mpi+0x32a>
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    6b8e:	2303      	movs	r3, #3
    X->n = 0;
    6b90:	2400      	movs	r4, #0
    6b92:	2501      	movs	r5, #1
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    6b94:	9317      	str	r3, [sp, #92]	; 0x5c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    6b96:	4630      	mov	r0, r6
    T2.p = TP2;
    6b98:	ab19      	add	r3, sp, #100	; 0x64
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    6b9a:	9903      	ldr	r1, [sp, #12]
    X->n = 0;
    6b9c:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
    X->s = 1;
    6ba0:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
    X->p = NULL;
    6ba4:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    X->n = 0;
    6ba8:	e9cd 5410 	strd	r5, r4, [sp, #64]	; 0x40
    X->s = 1;
    6bac:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    X->p = NULL;
    6bb0:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
    T2.s = 1;
    6bb4:	9516      	str	r5, [sp, #88]	; 0x58
    T2.p = TP2;
    6bb6:	9318      	str	r3, [sp, #96]	; 0x60
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    6bb8:	f7ff fe55 	bl	6866 <mbedtls_mpi_cmp_abs>
    6bbc:	42a0      	cmp	r0, r4
    6bbe:	da28      	bge.n	6c12 <mbedtls_mpi_div_mpi+0xa0>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    6bc0:	f1bb 0f00 	cmp.w	fp, #0
    6bc4:	d105      	bne.n	6bd2 <mbedtls_mpi_div_mpi+0x60>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    6bc6:	b9e7      	cbnz	r7, 6c02 <mbedtls_mpi_div_mpi+0x90>
        return( 0 );
    6bc8:	2400      	movs	r4, #0
}
    6bca:	4620      	mov	r0, r4
    6bcc:	b01d      	add	sp, #116	; 0x74
    6bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    6bd2:	4621      	mov	r1, r4
    6bd4:	4658      	mov	r0, fp
    6bd6:	f7ff fd96 	bl	6706 <mbedtls_mpi_lset>
    6bda:	4604      	mov	r4, r0
    6bdc:	2800      	cmp	r0, #0
    6bde:	d0f2      	beq.n	6bc6 <mbedtls_mpi_div_mpi+0x54>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    6be0:	a80a      	add	r0, sp, #40	; 0x28
    6be2:	f7ff fd08 	bl	65f6 <mbedtls_mpi_free>
    6be6:	a80d      	add	r0, sp, #52	; 0x34
    6be8:	f7ff fd05 	bl	65f6 <mbedtls_mpi_free>
    6bec:	a810      	add	r0, sp, #64	; 0x40
    6bee:	f7ff fd02 	bl	65f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 );
    6bf2:	a813      	add	r0, sp, #76	; 0x4c
    6bf4:	f7ff fcff 	bl	65f6 <mbedtls_mpi_free>
    mbedtls_platform_zeroize( TP2, sizeof( TP2 ) );
    6bf8:	210c      	movs	r1, #12
    6bfa:	a819      	add	r0, sp, #100	; 0x64
    6bfc:	f7fe f998 	bl	4f30 <mbedtls_platform_zeroize>
    return( ret );
    6c00:	e7e3      	b.n	6bca <mbedtls_mpi_div_mpi+0x58>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    6c02:	4631      	mov	r1, r6
    6c04:	4638      	mov	r0, r7
    6c06:	f7ff fd4a 	bl	669e <mbedtls_mpi_copy>
    6c0a:	4604      	mov	r4, r0
    6c0c:	2800      	cmp	r0, #0
    6c0e:	d1e7      	bne.n	6be0 <mbedtls_mpi_div_mpi+0x6e>
    6c10:	e7da      	b.n	6bc8 <mbedtls_mpi_div_mpi+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    6c12:	4631      	mov	r1, r6
    6c14:	a80a      	add	r0, sp, #40	; 0x28
    6c16:	f7ff fd42 	bl	669e <mbedtls_mpi_copy>
    6c1a:	4604      	mov	r4, r0
    6c1c:	2800      	cmp	r0, #0
    6c1e:	d1df      	bne.n	6be0 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    6c20:	9903      	ldr	r1, [sp, #12]
    6c22:	a80d      	add	r0, sp, #52	; 0x34
    6c24:	f7ff fd3b 	bl	669e <mbedtls_mpi_copy>
    6c28:	4604      	mov	r4, r0
    6c2a:	2800      	cmp	r0, #0
    6c2c:	d1d8      	bne.n	6be0 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    6c2e:	6871      	ldr	r1, [r6, #4]
    6c30:	a810      	add	r0, sp, #64	; 0x40
    6c32:	3102      	adds	r1, #2
    X.s = Y.s = 1;
    6c34:	950d      	str	r5, [sp, #52]	; 0x34
    6c36:	950a      	str	r5, [sp, #40]	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    6c38:	f7ff fcef 	bl	661a <mbedtls_mpi_grow>
    6c3c:	4604      	mov	r4, r0
    6c3e:	2800      	cmp	r0, #0
    6c40:	d1ce      	bne.n	6be0 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    6c42:	4601      	mov	r1, r0
    6c44:	a810      	add	r0, sp, #64	; 0x40
    6c46:	f7ff fd5e 	bl	6706 <mbedtls_mpi_lset>
    6c4a:	4604      	mov	r4, r0
    6c4c:	2800      	cmp	r0, #0
    6c4e:	d1c7      	bne.n	6be0 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, A->n + 2 ) );
    6c50:	6871      	ldr	r1, [r6, #4]
    6c52:	a813      	add	r0, sp, #76	; 0x4c
    6c54:	3102      	adds	r1, #2
    6c56:	f7ff fce0 	bl	661a <mbedtls_mpi_grow>
    6c5a:	4604      	mov	r4, r0
    6c5c:	2800      	cmp	r0, #0
    6c5e:	d1bf      	bne.n	6be0 <mbedtls_mpi_div_mpi+0x6e>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    6c60:	a80d      	add	r0, sp, #52	; 0x34
    6c62:	f7ff fd7a 	bl	675a <mbedtls_mpi_bitlen>
    6c66:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    6c6a:	281f      	cmp	r0, #31
    6c6c:	d070      	beq.n	6d50 <mbedtls_mpi_div_mpi+0x1de>
        k = biL - 1 - k;
    6c6e:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    6c72:	4619      	mov	r1, r3
    6c74:	a80a      	add	r0, sp, #40	; 0x28
        k = biL - 1 - k;
    6c76:	9301      	str	r3, [sp, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    6c78:	f7ff fd95 	bl	67a6 <mbedtls_mpi_shift_l>
    6c7c:	4604      	mov	r4, r0
    6c7e:	2800      	cmp	r0, #0
    6c80:	d1ae      	bne.n	6be0 <mbedtls_mpi_div_mpi+0x6e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    6c82:	9901      	ldr	r1, [sp, #4]
    6c84:	a80d      	add	r0, sp, #52	; 0x34
    6c86:	f7ff fd8e 	bl	67a6 <mbedtls_mpi_shift_l>
    6c8a:	4604      	mov	r4, r0
    6c8c:	2800      	cmp	r0, #0
    6c8e:	d1a7      	bne.n	6be0 <mbedtls_mpi_div_mpi+0x6e>
    n = X.n - 1;
    6c90:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    t = Y.n - 1;
    6c92:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    6c96:	a80d      	add	r0, sp, #52	; 0x34
    6c98:	eba5 0a08 	sub.w	sl, r5, r8
    6c9c:	ea4f 194a 	mov.w	r9, sl, lsl #5
    6ca0:	4649      	mov	r1, r9
    6ca2:	f7ff fd80 	bl	67a6 <mbedtls_mpi_shift_l>
    6ca6:	4604      	mov	r4, r0
    6ca8:	2800      	cmp	r0, #0
    6caa:	d199      	bne.n	6be0 <mbedtls_mpi_div_mpi+0x6e>
        Z.p[n - t]++;
    6cac:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    6cb0:	a90d      	add	r1, sp, #52	; 0x34
    6cb2:	a80a      	add	r0, sp, #40	; 0x28
    6cb4:	f7ff fe0c 	bl	68d0 <mbedtls_mpi_cmp_mpi>
    6cb8:	2800      	cmp	r0, #0
    6cba:	da4b      	bge.n	6d54 <mbedtls_mpi_div_mpi+0x1e2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    6cbc:	4649      	mov	r1, r9
    6cbe:	a80d      	add	r0, sp, #52	; 0x34
    6cc0:	f7ff fdc8 	bl	6854 <mbedtls_mpi_shift_r>
    6cc4:	4604      	mov	r4, r0
    6cc6:	2800      	cmp	r0, #0
    6cc8:	d18a      	bne.n	6be0 <mbedtls_mpi_div_mpi+0x6e>
    t = Y.n - 1;
    6cca:	f108 33ff 	add.w	r3, r8, #4294967295
    6cce:	9305      	str	r3, [sp, #20]
        if( X.p[i] >= Y.p[t] )
    6cd0:	009b      	lsls	r3, r3, #2
    n = X.n - 1;
    6cd2:	f105 3aff 	add.w	sl, r5, #4294967295
        if( X.p[i] >= Y.p[t] )
    6cd6:	9306      	str	r3, [sp, #24]
    6cd8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    6cdc:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
    6ce0:	3b02      	subs	r3, #2
    6ce2:	3d01      	subs	r5, #1
    6ce4:	009b      	lsls	r3, r3, #2
    6ce6:	eba5 0508 	sub.w	r5, r5, r8
    6cea:	9308      	str	r3, [sp, #32]
    6cec:	00ab      	lsls	r3, r5, #2
    6cee:	9302      	str	r3, [sp, #8]
    for( i = n; i > t ; i-- )
    6cf0:	9b05      	ldr	r3, [sp, #20]
    6cf2:	459a      	cmp	sl, r3
    6cf4:	d83d      	bhi.n	6d72 <mbedtls_mpi_div_mpi+0x200>
    if( Q != NULL )
    6cf6:	f1bb 0f00 	cmp.w	fp, #0
    6cfa:	d00c      	beq.n	6d16 <mbedtls_mpi_div_mpi+0x1a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    6cfc:	4658      	mov	r0, fp
    6cfe:	a910      	add	r1, sp, #64	; 0x40
    6d00:	f7ff fccd 	bl	669e <mbedtls_mpi_copy>
    6d04:	2800      	cmp	r0, #0
    6d06:	f040 80c5 	bne.w	6e94 <mbedtls_mpi_div_mpi+0x322>
        Q->s = A->s * B->s;
    6d0a:	9a03      	ldr	r2, [sp, #12]
    6d0c:	6833      	ldr	r3, [r6, #0]
    6d0e:	6812      	ldr	r2, [r2, #0]
    6d10:	4353      	muls	r3, r2
    6d12:	f8cb 3000 	str.w	r3, [fp]
    if( R != NULL )
    6d16:	2f00      	cmp	r7, #0
    6d18:	f43f af62 	beq.w	6be0 <mbedtls_mpi_div_mpi+0x6e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    6d1c:	9901      	ldr	r1, [sp, #4]
    6d1e:	a80a      	add	r0, sp, #40	; 0x28
    6d20:	f7ff fd98 	bl	6854 <mbedtls_mpi_shift_r>
    6d24:	2800      	cmp	r0, #0
    6d26:	f040 80b5 	bne.w	6e94 <mbedtls_mpi_div_mpi+0x322>
        X.s = A->s;
    6d2a:	6833      	ldr	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    6d2c:	a90a      	add	r1, sp, #40	; 0x28
    6d2e:	4638      	mov	r0, r7
        X.s = A->s;
    6d30:	930a      	str	r3, [sp, #40]	; 0x28
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    6d32:	f7ff fcb4 	bl	669e <mbedtls_mpi_copy>
    6d36:	4601      	mov	r1, r0
    6d38:	2800      	cmp	r0, #0
    6d3a:	f040 80ad 	bne.w	6e98 <mbedtls_mpi_div_mpi+0x326>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    6d3e:	4638      	mov	r0, r7
    6d40:	f7ff fe07 	bl	6952 <mbedtls_mpi_cmp_int>
    6d44:	2800      	cmp	r0, #0
    6d46:	f47f af4b 	bne.w	6be0 <mbedtls_mpi_div_mpi+0x6e>
            R->s = 1;
    6d4a:	2301      	movs	r3, #1
    6d4c:	603b      	str	r3, [r7, #0]
    6d4e:	e747      	b.n	6be0 <mbedtls_mpi_div_mpi+0x6e>
    else k = 0;
    6d50:	9401      	str	r4, [sp, #4]
    6d52:	e79d      	b.n	6c90 <mbedtls_mpi_div_mpi+0x11e>
        Z.p[n - t]++;
    6d54:	9a12      	ldr	r2, [sp, #72]	; 0x48
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    6d56:	a90a      	add	r1, sp, #40	; 0x28
        Z.p[n - t]++;
    6d58:	f852 300a 	ldr.w	r3, [r2, sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    6d5c:	4608      	mov	r0, r1
        Z.p[n - t]++;
    6d5e:	3301      	adds	r3, #1
    6d60:	f842 300a 	str.w	r3, [r2, sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    6d64:	aa0d      	add	r2, sp, #52	; 0x34
    6d66:	f7ff fecf 	bl	6b08 <mbedtls_mpi_sub_mpi>
    6d6a:	4604      	mov	r4, r0
    6d6c:	2800      	cmp	r0, #0
    6d6e:	d09f      	beq.n	6cb0 <mbedtls_mpi_div_mpi+0x13e>
    6d70:	e736      	b.n	6be0 <mbedtls_mpi_div_mpi+0x6e>
        if( X.p[i] >= Y.p[t] )
    6d72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d74:	9a06      	ldr	r2, [sp, #24]
    6d76:	9304      	str	r3, [sp, #16]
    6d78:	4413      	add	r3, r2
    6d7a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    6d7e:	9307      	str	r3, [sp, #28]
    6d80:	9b04      	ldr	r3, [sp, #16]
    6d82:	ea4f 088a 	mov.w	r8, sl, lsl #2
    6d86:	589a      	ldr	r2, [r3, r2]
    6d88:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    6d8c:	f1a8 0304 	sub.w	r3, r8, #4
            Z.p[i - t - 1] = ~0;
    6d90:	9d12      	ldr	r5, [sp, #72]	; 0x48
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    6d92:	9309      	str	r3, [sp, #36]	; 0x24
            Z.p[i - t - 1] = ~0;
    6d94:	9b02      	ldr	r3, [sp, #8]
        if( X.p[i] >= Y.p[t] )
    6d96:	4291      	cmp	r1, r2
            Z.p[i - t - 1] = ~0;
    6d98:	441d      	add	r5, r3
        if( X.p[i] >= Y.p[t] )
    6d9a:	d276      	bcs.n	6e8a <mbedtls_mpi_div_mpi+0x318>
    quotient = dividend / d;
    6d9c:	f1a8 0004 	sub.w	r0, r8, #4
    6da0:	2300      	movs	r3, #0
    6da2:	f859 0000 	ldr.w	r0, [r9, r0]
    6da6:	f7f9 f9cd 	bl	144 <__aeabi_uldivmod>
    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
    6daa:	2900      	cmp	r1, #0
    6dac:	bf14      	ite	ne
    6dae:	f04f 33ff 	movne.w	r3, #4294967295
    6db2:	4603      	moveq	r3, r0
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    6db4:	f1ba 0f01 	cmp.w	sl, #1
            Z.p[i - t - 1] = ~0;
    6db8:	602b      	str	r3, [r5, #0]
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    6dba:	bf0e      	itee	eq
    6dbc:	2300      	moveq	r3, #0
    6dbe:	eb09 0308 	addne.w	r3, r9, r8
    6dc2:	f853 3c08 	ldrne.w	r3, [r3, #-8]
    6dc6:	9319      	str	r3, [sp, #100]	; 0x64
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    6dc8:	f1a8 0304 	sub.w	r3, r8, #4
    6dcc:	f859 3003 	ldr.w	r3, [r9, r3]
    6dd0:	931a      	str	r3, [sp, #104]	; 0x68
        T2.p[2] = X.p[i];
    6dd2:	f859 3008 	ldr.w	r3, [r9, r8]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    6dd6:	f8dd 8010 	ldr.w	r8, [sp, #16]
        T2.p[2] = X.p[i];
    6dda:	931b      	str	r3, [sp, #108]	; 0x6c
        Z.p[i - t - 1]++;
    6ddc:	682b      	ldr	r3, [r5, #0]
    6dde:	3301      	adds	r3, #1
    6de0:	602b      	str	r3, [r5, #0]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    6de2:	9b08      	ldr	r3, [sp, #32]
    6de4:	4498      	add	r8, r3
            Z.p[i - t - 1]--;
    6de6:	682b      	ldr	r3, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    6de8:	2100      	movs	r1, #0
            Z.p[i - t - 1]--;
    6dea:	3b01      	subs	r3, #1
    6dec:	602b      	str	r3, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    6dee:	a813      	add	r0, sp, #76	; 0x4c
    6df0:	f7ff fc89 	bl	6706 <mbedtls_mpi_lset>
    6df4:	2800      	cmp	r0, #0
    6df6:	d14d      	bne.n	6e94 <mbedtls_mpi_div_mpi+0x322>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    6df8:	9b05      	ldr	r3, [sp, #20]
    6dfa:	2b00      	cmp	r3, #0
    6dfc:	d048      	beq.n	6e90 <mbedtls_mpi_div_mpi+0x31e>
    6dfe:	f8d8 2000 	ldr.w	r2, [r8]
    6e02:	9b15      	ldr	r3, [sp, #84]	; 0x54
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    6e04:	a913      	add	r1, sp, #76	; 0x4c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    6e06:	601a      	str	r2, [r3, #0]
            T1.p[1] = Y.p[t];
    6e08:	9a07      	ldr	r2, [sp, #28]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    6e0a:	4608      	mov	r0, r1
            T1.p[1] = Y.p[t];
    6e0c:	6812      	ldr	r2, [r2, #0]
    6e0e:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    6e10:	682a      	ldr	r2, [r5, #0]
    6e12:	f7ff fe7d 	bl	6b10 <mbedtls_mpi_mul_int>
    6e16:	2800      	cmp	r0, #0
    6e18:	d13c      	bne.n	6e94 <mbedtls_mpi_div_mpi+0x322>
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    6e1a:	a916      	add	r1, sp, #88	; 0x58
    6e1c:	a813      	add	r0, sp, #76	; 0x4c
    6e1e:	f7ff fd57 	bl	68d0 <mbedtls_mpi_cmp_mpi>
    6e22:	2800      	cmp	r0, #0
    6e24:	dcdf      	bgt.n	6de6 <mbedtls_mpi_div_mpi+0x274>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    6e26:	682a      	ldr	r2, [r5, #0]
    6e28:	a90d      	add	r1, sp, #52	; 0x34
    6e2a:	a813      	add	r0, sp, #76	; 0x4c
    6e2c:	f7ff fe70 	bl	6b10 <mbedtls_mpi_mul_int>
    6e30:	bb80      	cbnz	r0, 6e94 <mbedtls_mpi_div_mpi+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    6e32:	9b02      	ldr	r3, [sp, #8]
    6e34:	a813      	add	r0, sp, #76	; 0x4c
    6e36:	ea4f 08c3 	mov.w	r8, r3, lsl #3
    6e3a:	4641      	mov	r1, r8
    6e3c:	f7ff fcb3 	bl	67a6 <mbedtls_mpi_shift_l>
    6e40:	bb40      	cbnz	r0, 6e94 <mbedtls_mpi_div_mpi+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    6e42:	a90a      	add	r1, sp, #40	; 0x28
    6e44:	4608      	mov	r0, r1
    6e46:	aa13      	add	r2, sp, #76	; 0x4c
    6e48:	f7ff fe5e 	bl	6b08 <mbedtls_mpi_sub_mpi>
    6e4c:	4601      	mov	r1, r0
    6e4e:	bb18      	cbnz	r0, 6e98 <mbedtls_mpi_div_mpi+0x326>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    6e50:	a80a      	add	r0, sp, #40	; 0x28
    6e52:	f7ff fd7e 	bl	6952 <mbedtls_mpi_cmp_int>
    6e56:	2800      	cmp	r0, #0
    6e58:	da12      	bge.n	6e80 <mbedtls_mpi_div_mpi+0x30e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    6e5a:	a90d      	add	r1, sp, #52	; 0x34
    6e5c:	a813      	add	r0, sp, #76	; 0x4c
    6e5e:	f7ff fc1e 	bl	669e <mbedtls_mpi_copy>
    6e62:	b9b8      	cbnz	r0, 6e94 <mbedtls_mpi_div_mpi+0x322>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    6e64:	4641      	mov	r1, r8
    6e66:	a813      	add	r0, sp, #76	; 0x4c
    6e68:	f7ff fc9d 	bl	67a6 <mbedtls_mpi_shift_l>
    6e6c:	b990      	cbnz	r0, 6e94 <mbedtls_mpi_div_mpi+0x322>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    6e6e:	a90a      	add	r1, sp, #40	; 0x28
    6e70:	4608      	mov	r0, r1
    6e72:	aa13      	add	r2, sp, #76	; 0x4c
    6e74:	f7ff fe45 	bl	6b02 <mbedtls_mpi_add_mpi>
    6e78:	b960      	cbnz	r0, 6e94 <mbedtls_mpi_div_mpi+0x322>
            Z.p[i - t - 1]--;
    6e7a:	682b      	ldr	r3, [r5, #0]
    6e7c:	3b01      	subs	r3, #1
    6e7e:	602b      	str	r3, [r5, #0]
    for( i = n; i > t ; i-- )
    6e80:	9b02      	ldr	r3, [sp, #8]
    6e82:	f10a 3aff 	add.w	sl, sl, #4294967295
    6e86:	3b04      	subs	r3, #4
    6e88:	e731      	b.n	6cee <mbedtls_mpi_div_mpi+0x17c>
    6e8a:	f04f 33ff 	mov.w	r3, #4294967295
    6e8e:	e791      	b.n	6db4 <mbedtls_mpi_div_mpi+0x242>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    6e90:	9a05      	ldr	r2, [sp, #20]
    6e92:	e7b6      	b.n	6e02 <mbedtls_mpi_div_mpi+0x290>
    6e94:	4604      	mov	r4, r0
    6e96:	e6a3      	b.n	6be0 <mbedtls_mpi_div_mpi+0x6e>
    6e98:	460c      	mov	r4, r1
    6e9a:	e6a1      	b.n	6be0 <mbedtls_mpi_div_mpi+0x6e>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    6e9c:	f06f 040b 	mvn.w	r4, #11
    6ea0:	e693      	b.n	6bca <mbedtls_mpi_div_mpi+0x58>

00006ea2 <mbedtls_mpi_mod_mpi>:
{
    6ea2:	b570      	push	{r4, r5, r6, lr}
    6ea4:	4604      	mov	r4, r0
    6ea6:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    6ea8:	4610      	mov	r0, r2
    6eaa:	2100      	movs	r1, #0
{
    6eac:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    6eae:	f7ff fd50 	bl	6952 <mbedtls_mpi_cmp_int>
    6eb2:	2800      	cmp	r0, #0
    6eb4:	db24      	blt.n	6f00 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    6eb6:	462a      	mov	r2, r5
    6eb8:	4633      	mov	r3, r6
    6eba:	4621      	mov	r1, r4
    6ebc:	2000      	movs	r0, #0
    6ebe:	f7ff fe58 	bl	6b72 <mbedtls_mpi_div_mpi>
    6ec2:	4605      	mov	r5, r0
    6ec4:	b138      	cbz	r0, 6ed6 <mbedtls_mpi_mod_mpi+0x34>
}
    6ec6:	4628      	mov	r0, r5
    6ec8:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    6eca:	4632      	mov	r2, r6
    6ecc:	4621      	mov	r1, r4
    6ece:	4620      	mov	r0, r4
    6ed0:	f7ff fe17 	bl	6b02 <mbedtls_mpi_add_mpi>
    6ed4:	b990      	cbnz	r0, 6efc <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    6ed6:	2100      	movs	r1, #0
    6ed8:	4620      	mov	r0, r4
    6eda:	f7ff fd3a 	bl	6952 <mbedtls_mpi_cmp_int>
    6ede:	2800      	cmp	r0, #0
    6ee0:	dbf3      	blt.n	6eca <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    6ee2:	4631      	mov	r1, r6
    6ee4:	4620      	mov	r0, r4
    6ee6:	f7ff fcf3 	bl	68d0 <mbedtls_mpi_cmp_mpi>
    6eea:	2800      	cmp	r0, #0
    6eec:	dbeb      	blt.n	6ec6 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    6eee:	4632      	mov	r2, r6
    6ef0:	4621      	mov	r1, r4
    6ef2:	4620      	mov	r0, r4
    6ef4:	f7ff fe08 	bl	6b08 <mbedtls_mpi_sub_mpi>
    6ef8:	2800      	cmp	r0, #0
    6efa:	d0f2      	beq.n	6ee2 <mbedtls_mpi_mod_mpi+0x40>
    6efc:	4605      	mov	r5, r0
    6efe:	e7e2      	b.n	6ec6 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    6f00:	f06f 0509 	mvn.w	r5, #9
    6f04:	e7df      	b.n	6ec6 <mbedtls_mpi_mod_mpi+0x24>

00006f06 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *prec_RR )
{
    6f06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f0a:	f5ad 7d5b 	sub.w	sp, sp, #876	; 0x36c
    6f0e:	9009      	str	r0, [sp, #36]	; 0x24
    6f10:	460e      	mov	r6, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    6f12:	4618      	mov	r0, r3
    6f14:	2100      	movs	r1, #0
{
    6f16:	461d      	mov	r5, r3
    6f18:	9205      	str	r2, [sp, #20]
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    6f1a:	f7ff fd1a 	bl	6952 <mbedtls_mpi_cmp_int>
    6f1e:	2800      	cmp	r0, #0
    6f20:	dc06      	bgt.n	6f30 <mbedtls_mpi_exp_mod+0x2a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    6f22:	f06f 0403 	mvn.w	r4, #3

    if( prec_RR == NULL || prec_RR->p == NULL )
        mbedtls_mpi_free( &RR );

    return( ret );
}
    6f26:	4620      	mov	r0, r4
    6f28:	f50d 7d5b 	add.w	sp, sp, #876	; 0x36c
    6f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    6f30:	68ab      	ldr	r3, [r5, #8]
    6f32:	681b      	ldr	r3, [r3, #0]
    6f34:	f013 0301 	ands.w	r3, r3, #1
    6f38:	9308      	str	r3, [sp, #32]
    6f3a:	d0f2      	beq.n	6f22 <mbedtls_mpi_exp_mod+0x1c>
    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    6f3c:	2100      	movs	r1, #0
    6f3e:	9805      	ldr	r0, [sp, #20]
    6f40:	f7ff fd07 	bl	6952 <mbedtls_mpi_cmp_int>
    6f44:	2800      	cmp	r0, #0
    6f46:	dbec      	blt.n	6f22 <mbedtls_mpi_exp_mod+0x1c>
    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    6f48:	9805      	ldr	r0, [sp, #20]
    6f4a:	f7ff fc06 	bl	675a <mbedtls_mpi_bitlen>
    6f4e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    6f52:	d8e6      	bhi.n	6f22 <mbedtls_mpi_exp_mod+0x1c>
        mbedtls_mpi_bitlen( N ) > MBEDTLS_MPI_MAX_BITS )
    6f54:	4628      	mov	r0, r5
    6f56:	f7ff fc00 	bl	675a <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    6f5a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    6f5e:	d8e0      	bhi.n	6f22 <mbedtls_mpi_exp_mod+0x1c>
    *mm = mbedtls_mpi_core_montmul_init( N->p );
    6f60:	68a8      	ldr	r0, [r5, #8]
    6f62:	f000 fbd3 	bl	770c <mbedtls_mpi_core_montmul_init>
    X->n = 0;
    6f66:	2100      	movs	r1, #0
    6f68:	2301      	movs	r3, #1
    memset( W, 0, sizeof( W ) );
    6f6a:	f44f 7240 	mov.w	r2, #768	; 0x300
    *mm = mbedtls_mpi_core_montmul_init( N->p );
    6f6e:	9003      	str	r0, [sp, #12]
    memset( W, 0, sizeof( W ) );
    6f70:	a81a      	add	r0, sp, #104	; 0x68
    X->n = 0;
    6f72:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
    X->s = 1;
    6f76:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    X->p = NULL;
    6f7a:	e9cd 110f 	strd	r1, r1, [sp, #60]	; 0x3c
    X->n = 0;
    6f7e:	e9cd 3114 	strd	r3, r1, [sp, #80]	; 0x50
    6f82:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
    X->p = NULL;
    6f86:	9116      	str	r1, [sp, #88]	; 0x58
    6f88:	9113      	str	r1, [sp, #76]	; 0x4c
    memset( W, 0, sizeof( W ) );
    6f8a:	f7fe fe85 	bl	5c98 <memset>
    i = mbedtls_mpi_bitlen( E );
    6f8e:	9805      	ldr	r0, [sp, #20]
    6f90:	f7ff fbe3 	bl	675a <mbedtls_mpi_bitlen>
    window_bitsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    6f94:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    6f98:	f080 80da 	bcs.w	7150 <mbedtls_mpi_exp_mod+0x24a>
    6f9c:	28ef      	cmp	r0, #239	; 0xef
    6f9e:	f200 80d9 	bhi.w	7154 <mbedtls_mpi_exp_mod+0x24e>
    6fa2:	284f      	cmp	r0, #79	; 0x4f
    6fa4:	f200 80d8 	bhi.w	7158 <mbedtls_mpi_exp_mod+0x252>
    6fa8:	2818      	cmp	r0, #24
    6faa:	9b08      	ldr	r3, [sp, #32]
    6fac:	bf28      	it	cs
    6fae:	2303      	movcs	r3, #3
    const size_t w_table_used_size = (size_t) 1 << window_bitsize;
    6fb0:	f04f 0801 	mov.w	r8, #1
    window_bitsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    6fb4:	9304      	str	r3, [sp, #16]
    const size_t w_table_used_size = (size_t) 1 << window_bitsize;
    6fb6:	9b04      	ldr	r3, [sp, #16]
    mbedtls_mpi_copy( &W[x_index], X );
    6fb8:	9909      	ldr	r1, [sp, #36]	; 0x24
    const size_t w_table_used_size = (size_t) 1 << window_bitsize;
    6fba:	fa08 f703 	lsl.w	r7, r8, r3
    X->n = 0;
    6fbe:	2300      	movs	r3, #0
    mbedtls_mpi_copy( &W[x_index], X );
    6fc0:	a81a      	add	r0, sp, #104	; 0x68
    X->p = NULL;
    6fc2:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
    X->s = 1;
    6fc6:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
    mbedtls_mpi_copy( &W[x_index], X );
    6fca:	f7ff fb68 	bl	669e <mbedtls_mpi_copy>
    j = N->n + 1;
    6fce:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[x_index], j ) );
    6fd0:	a81a      	add	r0, sp, #104	; 0x68
    j = N->n + 1;
    6fd2:	eb03 0908 	add.w	r9, r3, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[x_index], j ) );
    6fd6:	4649      	mov	r1, r9
    6fd8:	f7ff fb1f 	bl	661a <mbedtls_mpi_grow>
    6fdc:	4604      	mov	r4, r0
    6fde:	2800      	cmp	r0, #0
    6fe0:	f040 8180 	bne.w	72e4 <mbedtls_mpi_exp_mod+0x3de>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    6fe4:	4649      	mov	r1, r9
    6fe6:	a81d      	add	r0, sp, #116	; 0x74
    6fe8:	f7ff fb17 	bl	661a <mbedtls_mpi_grow>
    6fec:	4604      	mov	r4, r0
    6fee:	2800      	cmp	r0, #0
    6ff0:	f040 8178 	bne.w	72e4 <mbedtls_mpi_exp_mod+0x3de>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    6ff4:	fa09 f108 	lsl.w	r1, r9, r8
    6ff8:	a80e      	add	r0, sp, #56	; 0x38
    6ffa:	f7ff fb0e 	bl	661a <mbedtls_mpi_grow>
    6ffe:	4604      	mov	r4, r0
    7000:	2800      	cmp	r0, #0
    7002:	f040 816f 	bne.w	72e4 <mbedtls_mpi_exp_mod+0x3de>
    neg = ( A->s == -1 );
    7006:	6833      	ldr	r3, [r6, #0]
    7008:	9307      	str	r3, [sp, #28]
    if( neg )
    700a:	3301      	adds	r3, #1
    700c:	d10a      	bne.n	7024 <mbedtls_mpi_exp_mod+0x11e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    700e:	4631      	mov	r1, r6
    7010:	a814      	add	r0, sp, #80	; 0x50
    7012:	f7ff fb44 	bl	669e <mbedtls_mpi_copy>
    7016:	4604      	mov	r4, r0
    7018:	2800      	cmp	r0, #0
    701a:	f040 8163 	bne.w	72e4 <mbedtls_mpi_exp_mod+0x3de>
        Apos.s = 1;
    701e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
        A = &Apos;
    7022:	ae14      	add	r6, sp, #80	; 0x50
    if( prec_RR == NULL || prec_RR->p == NULL )
    7024:	9be4      	ldr	r3, [sp, #912]	; 0x390
    7026:	b11b      	cbz	r3, 7030 <mbedtls_mpi_exp_mod+0x12a>
    7028:	689b      	ldr	r3, [r3, #8]
    702a:	2b00      	cmp	r3, #0
    702c:	f040 8096 	bne.w	715c <mbedtls_mpi_exp_mod+0x256>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    7030:	2101      	movs	r1, #1
    7032:	a80b      	add	r0, sp, #44	; 0x2c
    7034:	f7ff fb67 	bl	6706 <mbedtls_mpi_lset>
    7038:	4604      	mov	r4, r0
    703a:	2800      	cmp	r0, #0
    703c:	f040 8152 	bne.w	72e4 <mbedtls_mpi_exp_mod+0x3de>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    7040:	6869      	ldr	r1, [r5, #4]
    7042:	a80b      	add	r0, sp, #44	; 0x2c
    7044:	0189      	lsls	r1, r1, #6
    7046:	f7ff fbae 	bl	67a6 <mbedtls_mpi_shift_l>
    704a:	4604      	mov	r4, r0
    704c:	2800      	cmp	r0, #0
    704e:	f040 8149 	bne.w	72e4 <mbedtls_mpi_exp_mod+0x3de>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    7052:	a90b      	add	r1, sp, #44	; 0x2c
    7054:	462a      	mov	r2, r5
    7056:	4608      	mov	r0, r1
    7058:	f7ff ff23 	bl	6ea2 <mbedtls_mpi_mod_mpi>
    705c:	4604      	mov	r4, r0
    705e:	2800      	cmp	r0, #0
    7060:	f040 8140 	bne.w	72e4 <mbedtls_mpi_exp_mod+0x3de>
        if( prec_RR != NULL )
    7064:	9be4      	ldr	r3, [sp, #912]	; 0x390
    7066:	b123      	cbz	r3, 7072 <mbedtls_mpi_exp_mod+0x16c>
            memcpy( prec_RR, &RR, sizeof( mbedtls_mpi ) );
    7068:	220c      	movs	r2, #12
    706a:	4618      	mov	r0, r3
    706c:	a90b      	add	r1, sp, #44	; 0x2c
        memcpy( &RR, prec_RR, sizeof( mbedtls_mpi ) );
    706e:	f7fe fe08 	bl	5c82 <memcpy>
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    7072:	4629      	mov	r1, r5
    7074:	4630      	mov	r0, r6
    7076:	f7ff fc2b 	bl	68d0 <mbedtls_mpi_cmp_mpi>
    707a:	2800      	cmp	r0, #0
    707c:	db72      	blt.n	7164 <mbedtls_mpi_exp_mod+0x25e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    707e:	462a      	mov	r2, r5
    7080:	4631      	mov	r1, r6
    7082:	a81d      	add	r0, sp, #116	; 0x74
    7084:	f7ff ff0d 	bl	6ea2 <mbedtls_mpi_mod_mpi>
    7088:	4604      	mov	r4, r0
    708a:	2800      	cmp	r0, #0
    708c:	f040 812a 	bne.w	72e4 <mbedtls_mpi_exp_mod+0x3de>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1], N->n + 1 ) );
    7090:	6869      	ldr	r1, [r5, #4]
    7092:	a81d      	add	r0, sp, #116	; 0x74
    7094:	3101      	adds	r1, #1
    7096:	f7ff fac0 	bl	661a <mbedtls_mpi_grow>
    709a:	4604      	mov	r4, r0
    709c:	2800      	cmp	r0, #0
    709e:	f040 8121 	bne.w	72e4 <mbedtls_mpi_exp_mod+0x3de>
    mpi_montmul( &W[1], &RR, N, mm, &T );
    70a2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    70a6:	462a      	mov	r2, r5
    70a8:	9b03      	ldr	r3, [sp, #12]
    70aa:	981f      	ldr	r0, [sp, #124]	; 0x7c
    70ac:	a90b      	add	r1, sp, #44	; 0x2c
    70ae:	f8cd 8000 	str.w	r8, [sp]
    70b2:	f7ff fa8b 	bl	65cc <mpi_montmul.isra.0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[x_index], &RR ) );
    70b6:	a90b      	add	r1, sp, #44	; 0x2c
    70b8:	a81a      	add	r0, sp, #104	; 0x68
    70ba:	f7ff faf0 	bl	669e <mbedtls_mpi_copy>
    70be:	4604      	mov	r4, r0
    70c0:	2800      	cmp	r0, #0
    70c2:	f040 810f 	bne.w	72e4 <mbedtls_mpi_exp_mod+0x3de>
    mbedtls_mpi_uint z = 1;
    70c6:	2301      	movs	r3, #1
    70c8:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    70ca:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    70ce:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    70d0:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    70d2:	9b03      	ldr	r3, [sp, #12]
    70d4:	462a      	mov	r2, r5
    70d6:	981c      	ldr	r0, [sp, #112]	; 0x70
    70d8:	f8cd 8000 	str.w	r8, [sp]
    70dc:	a917      	add	r1, sp, #92	; 0x5c
    70de:	f7ff fa75 	bl	65cc <mpi_montmul.isra.0>
    if( window_bitsize > 1 )
    70e2:	9b04      	ldr	r3, [sp, #16]
    70e4:	2b01      	cmp	r3, #1
    70e6:	d142      	bne.n	716e <mbedtls_mpi_exp_mod+0x268>
    size_t exponent_bits_in_window = 0;
    70e8:	2600      	movs	r6, #0
    state   = 0;
    70ea:	46b3      	mov	fp, r6
    nbits   = 0;
    70ec:	46b1      	mov	r9, r6
    nblimbs = E->n;
    70ee:	9b05      	ldr	r3, [sp, #20]
    bufsize = 0;
    70f0:	9606      	str	r6, [sp, #24]
    nblimbs = E->n;
    70f2:	f8d3 a004 	ldr.w	sl, [r3, #4]
        if( bufsize == 0 )
    70f6:	9b06      	ldr	r3, [sp, #24]
    70f8:	b93b      	cbnz	r3, 710a <mbedtls_mpi_exp_mod+0x204>
            if( nblimbs == 0 )
    70fa:	f1ba 0f00 	cmp.w	sl, #0
    70fe:	f000 80da 	beq.w	72b6 <mbedtls_mpi_exp_mod+0x3b0>
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    7102:	2320      	movs	r3, #32
            nblimbs--;
    7104:	f10a 3aff 	add.w	sl, sl, #4294967295
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    7108:	9306      	str	r3, [sp, #24]
        bufsize--;
    710a:	9b06      	ldr	r3, [sp, #24]
    710c:	3b01      	subs	r3, #1
    710e:	9306      	str	r3, [sp, #24]
        ei = (E->p[nblimbs] >> bufsize) & 1;
    7110:	9b05      	ldr	r3, [sp, #20]
    7112:	9a06      	ldr	r2, [sp, #24]
    7114:	689b      	ldr	r3, [r3, #8]
    7116:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
    711a:	40d3      	lsrs	r3, r2
        if( ei == 0 && state == 0 )
    711c:	f013 0301 	ands.w	r3, r3, #1
    7120:	d16e      	bne.n	7200 <mbedtls_mpi_exp_mod+0x2fa>
    7122:	f1bb 0f00 	cmp.w	fp, #0
    7126:	d0e6      	beq.n	70f6 <mbedtls_mpi_exp_mod+0x1f0>
        if( ei == 0 && state == 1 )
    7128:	f1bb 0f01 	cmp.w	fp, #1
    712c:	d168      	bne.n	7200 <mbedtls_mpi_exp_mod+0x2fa>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size, x_index ) );
    712e:	463a      	mov	r2, r7
    7130:	a91a      	add	r1, sp, #104	; 0x68
    7132:	a811      	add	r0, sp, #68	; 0x44
    7134:	f7ff fa31 	bl	659a <mpi_select>
    7138:	2800      	cmp	r0, #0
    713a:	f040 8102 	bne.w	7342 <mbedtls_mpi_exp_mod+0x43c>
            mpi_montmul( &W[x_index], &WW, N, mm, &T );
    713e:	462a      	mov	r2, r5
    7140:	9b03      	ldr	r3, [sp, #12]
    7142:	981c      	ldr	r0, [sp, #112]	; 0x70
    7144:	f8cd 8000 	str.w	r8, [sp]
    7148:	a911      	add	r1, sp, #68	; 0x44
    714a:	f7ff fa3f 	bl	65cc <mpi_montmul.isra.0>
            continue;
    714e:	e7d2      	b.n	70f6 <mbedtls_mpi_exp_mod+0x1f0>
    window_bitsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    7150:	2306      	movs	r3, #6
    7152:	e72d      	b.n	6fb0 <mbedtls_mpi_exp_mod+0xaa>
    7154:	2305      	movs	r3, #5
    7156:	e72b      	b.n	6fb0 <mbedtls_mpi_exp_mod+0xaa>
    7158:	2304      	movs	r3, #4
    715a:	e729      	b.n	6fb0 <mbedtls_mpi_exp_mod+0xaa>
        memcpy( &RR, prec_RR, sizeof( mbedtls_mpi ) );
    715c:	220c      	movs	r2, #12
    715e:	99e4      	ldr	r1, [sp, #912]	; 0x390
    7160:	a80b      	add	r0, sp, #44	; 0x2c
    7162:	e784      	b.n	706e <mbedtls_mpi_exp_mod+0x168>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    7164:	4631      	mov	r1, r6
    7166:	a81d      	add	r0, sp, #116	; 0x74
    7168:	f7ff fa99 	bl	669e <mbedtls_mpi_copy>
    716c:	e795      	b.n	709a <mbedtls_mpi_exp_mod+0x194>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    716e:	230c      	movs	r3, #12
        j = w_table_used_size / 2;
    7170:	ea4f 0957 	mov.w	r9, r7, lsr #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    7174:	aa1a      	add	r2, sp, #104	; 0x68
    7176:	fb03 2609 	mla	r6, r3, r9, r2
    717a:	6869      	ldr	r1, [r5, #4]
    717c:	4630      	mov	r0, r6
    717e:	3101      	adds	r1, #1
    7180:	f7ff fa4b 	bl	661a <mbedtls_mpi_grow>
    7184:	2800      	cmp	r0, #0
    7186:	f040 80dc 	bne.w	7342 <mbedtls_mpi_exp_mod+0x43c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    718a:	4630      	mov	r0, r6
    718c:	a91d      	add	r1, sp, #116	; 0x74
    718e:	f7ff fa86 	bl	669e <mbedtls_mpi_copy>
    7192:	2800      	cmp	r0, #0
    7194:	f040 80d5 	bne.w	7342 <mbedtls_mpi_exp_mod+0x43c>
        for( i = 0; i < window_bitsize - 1; i++ )
    7198:	46a2      	mov	sl, r4
    719a:	9b04      	ldr	r3, [sp, #16]
    719c:	f103 3bff 	add.w	fp, r3, #4294967295
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    71a0:	f8cd 8000 	str.w	r8, [sp]
    71a4:	462a      	mov	r2, r5
    71a6:	4631      	mov	r1, r6
    71a8:	9b03      	ldr	r3, [sp, #12]
    71aa:	68b0      	ldr	r0, [r6, #8]
        for( i = 0; i < window_bitsize - 1; i++ )
    71ac:	f10a 0a01 	add.w	sl, sl, #1
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    71b0:	f7ff fa0c 	bl	65cc <mpi_montmul.isra.0>
        for( i = 0; i < window_bitsize - 1; i++ )
    71b4:	45da      	cmp	sl, fp
    71b6:	d3f3      	bcc.n	71a0 <mbedtls_mpi_exp_mod+0x29a>
        for( i = j + 1; i < w_table_used_size; i++ )
    71b8:	f109 0901 	add.w	r9, r9, #1
    71bc:	45b9      	cmp	r9, r7
    71be:	d293      	bcs.n	70e8 <mbedtls_mpi_exp_mod+0x1e2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    71c0:	6869      	ldr	r1, [r5, #4]
    71c2:	f106 0a0c 	add.w	sl, r6, #12
    71c6:	4650      	mov	r0, sl
    71c8:	3101      	adds	r1, #1
    71ca:	f7ff fa26 	bl	661a <mbedtls_mpi_grow>
    71ce:	2800      	cmp	r0, #0
    71d0:	f040 80b7 	bne.w	7342 <mbedtls_mpi_exp_mod+0x43c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    71d4:	4631      	mov	r1, r6
    71d6:	4650      	mov	r0, sl
    71d8:	f7ff fa61 	bl	669e <mbedtls_mpi_copy>
    71dc:	2800      	cmp	r0, #0
    71de:	f040 80b0 	bne.w	7342 <mbedtls_mpi_exp_mod+0x43c>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    71e2:	f8cd 8000 	str.w	r8, [sp]
    71e6:	6970      	ldr	r0, [r6, #20]
    71e8:	462a      	mov	r2, r5
    71ea:	9b03      	ldr	r3, [sp, #12]
    71ec:	a91d      	add	r1, sp, #116	; 0x74
    71ee:	f7ff f9ed 	bl	65cc <mpi_montmul.isra.0>
        for( i = j + 1; i < w_table_used_size; i++ )
    71f2:	4656      	mov	r6, sl
    71f4:	f109 0901 	add.w	r9, r9, #1
    71f8:	e7e0      	b.n	71bc <mbedtls_mpi_exp_mod+0x2b6>
        state = 2;
    71fa:	f04f 0b02 	mov.w	fp, #2
    71fe:	e77a      	b.n	70f6 <mbedtls_mpi_exp_mod+0x1f0>
        exponent_bits_in_window |= ( ei << ( window_bitsize - nbits ) );
    7200:	9a04      	ldr	r2, [sp, #16]
        nbits++;
    7202:	f109 0901 	add.w	r9, r9, #1
        exponent_bits_in_window |= ( ei << ( window_bitsize - nbits ) );
    7206:	eba2 0209 	sub.w	r2, r2, r9
    720a:	4093      	lsls	r3, r2
    720c:	431e      	orrs	r6, r3
        if( nbits == window_bitsize )
    720e:	9b04      	ldr	r3, [sp, #16]
    7210:	454b      	cmp	r3, r9
    7212:	d1f2      	bne.n	71fa <mbedtls_mpi_exp_mod+0x2f4>
            for( i = 0; i < window_bitsize; i++ )
    7214:	f04f 0b00 	mov.w	fp, #0
                MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size,
    7218:	2300      	movs	r3, #0
    721a:	463a      	mov	r2, r7
    721c:	a91a      	add	r1, sp, #104	; 0x68
    721e:	a811      	add	r0, sp, #68	; 0x44
    7220:	f7ff f9bb 	bl	659a <mpi_select>
    7224:	2800      	cmp	r0, #0
    7226:	f040 808c 	bne.w	7342 <mbedtls_mpi_exp_mod+0x43c>
                mpi_montmul( &W[x_index], &WW, N, mm, &T );
    722a:	462a      	mov	r2, r5
    722c:	9b03      	ldr	r3, [sp, #12]
    722e:	981c      	ldr	r0, [sp, #112]	; 0x70
    7230:	f8cd 8000 	str.w	r8, [sp]
    7234:	a911      	add	r1, sp, #68	; 0x44
            for( i = 0; i < window_bitsize; i++ )
    7236:	f10b 0b01 	add.w	fp, fp, #1
                mpi_montmul( &W[x_index], &WW, N, mm, &T );
    723a:	f7ff f9c7 	bl	65cc <mpi_montmul.isra.0>
            for( i = 0; i < window_bitsize; i++ )
    723e:	45d9      	cmp	r9, fp
    7240:	d8ea      	bhi.n	7218 <mbedtls_mpi_exp_mod+0x312>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size,
    7242:	4633      	mov	r3, r6
    7244:	463a      	mov	r2, r7
    7246:	a91a      	add	r1, sp, #104	; 0x68
    7248:	a811      	add	r0, sp, #68	; 0x44
    724a:	f7ff f9a6 	bl	659a <mpi_select>
    724e:	4606      	mov	r6, r0
    7250:	2800      	cmp	r0, #0
    7252:	d178      	bne.n	7346 <mbedtls_mpi_exp_mod+0x440>
            mpi_montmul( &W[x_index], &WW, N, mm, &T );
    7254:	462a      	mov	r2, r5
    7256:	9b03      	ldr	r3, [sp, #12]
    7258:	981c      	ldr	r0, [sp, #112]	; 0x70
    725a:	f8cd 8000 	str.w	r8, [sp]
    725e:	a911      	add	r1, sp, #68	; 0x44
    7260:	f7ff f9b4 	bl	65cc <mpi_montmul.isra.0>
            nbits = 0;
    7264:	46b1      	mov	r9, r6
            state--;
    7266:	f8dd b020 	ldr.w	fp, [sp, #32]
    726a:	e744      	b.n	70f6 <mbedtls_mpi_exp_mod+0x1f0>
        MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size, x_index ) );
    726c:	2300      	movs	r3, #0
    726e:	463a      	mov	r2, r7
    7270:	a91a      	add	r1, sp, #104	; 0x68
    7272:	a811      	add	r0, sp, #68	; 0x44
    7274:	f7ff f991 	bl	659a <mpi_select>
    7278:	2800      	cmp	r0, #0
    727a:	d162      	bne.n	7342 <mbedtls_mpi_exp_mod+0x43c>
        mpi_montmul( &W[x_index], &WW, N, mm, &T );
    727c:	462a      	mov	r2, r5
    727e:	9b03      	ldr	r3, [sp, #12]
    7280:	981c      	ldr	r0, [sp, #112]	; 0x70
    7282:	f8cd 8000 	str.w	r8, [sp]
    7286:	a911      	add	r1, sp, #68	; 0x44
        exponent_bits_in_window <<= 1;
    7288:	0076      	lsls	r6, r6, #1
        mpi_montmul( &W[x_index], &WW, N, mm, &T );
    728a:	f7ff f99f 	bl	65cc <mpi_montmul.isra.0>
        if( ( exponent_bits_in_window & ( (size_t) 1 << window_bitsize ) ) != 0 )
    728e:	4237      	tst	r7, r6
    7290:	d00f      	beq.n	72b2 <mbedtls_mpi_exp_mod+0x3ac>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size, 1 ) );
    7292:	2301      	movs	r3, #1
    7294:	463a      	mov	r2, r7
    7296:	a91a      	add	r1, sp, #104	; 0x68
    7298:	a811      	add	r0, sp, #68	; 0x44
    729a:	f7ff f97e 	bl	659a <mpi_select>
    729e:	2800      	cmp	r0, #0
    72a0:	d14f      	bne.n	7342 <mbedtls_mpi_exp_mod+0x43c>
            mpi_montmul( &W[x_index], &WW, N, mm, &T );
    72a2:	462a      	mov	r2, r5
    72a4:	9b03      	ldr	r3, [sp, #12]
    72a6:	981c      	ldr	r0, [sp, #112]	; 0x70
    72a8:	f8cd 8000 	str.w	r8, [sp]
    72ac:	a911      	add	r1, sp, #68	; 0x44
    72ae:	f7ff f98d 	bl	65cc <mpi_montmul.isra.0>
    for( i = 0; i < nbits; i++ )
    72b2:	f10a 0a01 	add.w	sl, sl, #1
    72b6:	45ca      	cmp	sl, r9
    72b8:	d1d8      	bne.n	726c <mbedtls_mpi_exp_mod+0x366>
    mbedtls_mpi_uint z = 1;
    72ba:	2301      	movs	r3, #1
    72bc:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    72be:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    72c2:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    72c4:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    72c6:	9b03      	ldr	r3, [sp, #12]
    72c8:	462a      	mov	r2, r5
    72ca:	981c      	ldr	r0, [sp, #112]	; 0x70
    72cc:	f8cd 8000 	str.w	r8, [sp]
    72d0:	a917      	add	r1, sp, #92	; 0x5c
    72d2:	f7ff f97b 	bl	65cc <mpi_montmul.isra.0>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    72d6:	9b07      	ldr	r3, [sp, #28]
    72d8:	3301      	adds	r3, #1
    72da:	d020      	beq.n	731e <mbedtls_mpi_exp_mod+0x418>
    mbedtls_mpi_copy( X, &W[x_index] );
    72dc:	9809      	ldr	r0, [sp, #36]	; 0x24
    72de:	a91a      	add	r1, sp, #104	; 0x68
    72e0:	f7ff f9dd 	bl	669e <mbedtls_mpi_copy>
        mbedtls_mpi_free( &W[i] );
    72e4:	260c      	movs	r6, #12
    for( i = w_table_used_size/2; i < w_table_used_size; i++ )
    72e6:	087d      	lsrs	r5, r7, #1
    72e8:	42bd      	cmp	r5, r7
    72ea:	d32e      	bcc.n	734a <mbedtls_mpi_exp_mod+0x444>
    mbedtls_mpi_free( &W[x_index] );
    72ec:	a81a      	add	r0, sp, #104	; 0x68
    72ee:	f7ff f982 	bl	65f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &W[1] );
    72f2:	a81d      	add	r0, sp, #116	; 0x74
    72f4:	f7ff f97f 	bl	65f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
    72f8:	a80e      	add	r0, sp, #56	; 0x38
    72fa:	f7ff f97c 	bl	65f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Apos );
    72fe:	a814      	add	r0, sp, #80	; 0x50
    7300:	f7ff f979 	bl	65f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &WW );
    7304:	a811      	add	r0, sp, #68	; 0x44
    7306:	f7ff f976 	bl	65f6 <mbedtls_mpi_free>
    if( prec_RR == NULL || prec_RR->p == NULL )
    730a:	9be4      	ldr	r3, [sp, #912]	; 0x390
    730c:	b11b      	cbz	r3, 7316 <mbedtls_mpi_exp_mod+0x410>
    730e:	689b      	ldr	r3, [r3, #8]
    7310:	2b00      	cmp	r3, #0
    7312:	f47f ae08 	bne.w	6f26 <mbedtls_mpi_exp_mod+0x20>
        mbedtls_mpi_free( &RR );
    7316:	a80b      	add	r0, sp, #44	; 0x2c
    7318:	f7ff f96d 	bl	65f6 <mbedtls_mpi_free>
    731c:	e603      	b.n	6f26 <mbedtls_mpi_exp_mod+0x20>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    731e:	9b05      	ldr	r3, [sp, #20]
    7320:	685b      	ldr	r3, [r3, #4]
    7322:	2b00      	cmp	r3, #0
    7324:	d0da      	beq.n	72dc <mbedtls_mpi_exp_mod+0x3d6>
    7326:	9b05      	ldr	r3, [sp, #20]
    7328:	689b      	ldr	r3, [r3, #8]
    732a:	681b      	ldr	r3, [r3, #0]
    732c:	07db      	lsls	r3, r3, #31
    732e:	d5d5      	bpl.n	72dc <mbedtls_mpi_exp_mod+0x3d6>
        W[x_index].s = -1;
    7330:	9b07      	ldr	r3, [sp, #28]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &W[x_index], N, &W[x_index] ) );
    7332:	aa1a      	add	r2, sp, #104	; 0x68
    7334:	4629      	mov	r1, r5
    7336:	4610      	mov	r0, r2
        W[x_index].s = -1;
    7338:	931a      	str	r3, [sp, #104]	; 0x68
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &W[x_index], N, &W[x_index] ) );
    733a:	f7ff fbe2 	bl	6b02 <mbedtls_mpi_add_mpi>
    733e:	2800      	cmp	r0, #0
    7340:	d0cc      	beq.n	72dc <mbedtls_mpi_exp_mod+0x3d6>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size, 1 ) );
    7342:	4604      	mov	r4, r0
    7344:	e7ce      	b.n	72e4 <mbedtls_mpi_exp_mod+0x3de>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size,
    7346:	4604      	mov	r4, r0
    7348:	e7cc      	b.n	72e4 <mbedtls_mpi_exp_mod+0x3de>
        mbedtls_mpi_free( &W[i] );
    734a:	ab1a      	add	r3, sp, #104	; 0x68
    734c:	fb06 3005 	mla	r0, r6, r5, r3
    7350:	f7ff f951 	bl	65f6 <mbedtls_mpi_free>
    for( i = w_table_used_size/2; i < w_table_used_size; i++ )
    7354:	3501      	adds	r5, #1
    7356:	e7c7      	b.n	72e8 <mbedtls_mpi_exp_mod+0x3e2>

00007358 <mbedtls_mpi_core_clz>:
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
    {
        if( a & mask ) break;
    7358:	1e03      	subs	r3, r0, #0
    735a:	db0b      	blt.n	7374 <mbedtls_mpi_core_clz+0x1c>
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    735c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    for( j = 0; j < biL; j++ )
    7360:	2000      	movs	r0, #0
    7362:	3001      	adds	r0, #1
    7364:	2820      	cmp	r0, #32

        mask >>= 1;
    7366:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
    736a:	d100      	bne.n	736e <mbedtls_mpi_core_clz+0x16>
    736c:	4770      	bx	lr
        if( a & mask ) break;
    736e:	4213      	tst	r3, r2
    7370:	d0f7      	beq.n	7362 <mbedtls_mpi_core_clz+0xa>
    }

    return( j );
}
    7372:	4770      	bx	lr
    for( j = 0; j < biL; j++ )
    7374:	2000      	movs	r0, #0
    return( j );
    7376:	e7fc      	b.n	7372 <mbedtls_mpi_core_clz+0x1a>

00007378 <mbedtls_mpi_core_bitlen>:

size_t mbedtls_mpi_core_bitlen( const mbedtls_mpi_uint *A, size_t A_limbs )
{
    7378:	b508      	push	{r3, lr}
    737a:	4603      	mov	r3, r0
    size_t i, j;

    if( A_limbs == 0 )
    737c:	4608      	mov	r0, r1
    737e:	b141      	cbz	r1, 7392 <mbedtls_mpi_core_bitlen+0x1a>
        return( 0 );

    for( i = A_limbs - 1; i > 0; i-- )
    7380:	3901      	subs	r1, #1
    7382:	b939      	cbnz	r1, 7394 <mbedtls_mpi_core_bitlen+0x1c>
        if( A[i] != 0 )
            break;

    j = biL - mbedtls_mpi_core_clz( A[i] );
    7384:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    7388:	f7ff ffe6 	bl	7358 <mbedtls_mpi_core_clz>

    return( ( i * biL ) + j );
    738c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    7390:	3020      	adds	r0, #32
}
    7392:	bd08      	pop	{r3, pc}
        if( A[i] != 0 )
    7394:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    7398:	2a00      	cmp	r2, #0
    739a:	d1f3      	bne.n	7384 <mbedtls_mpi_core_bitlen+0xc>
    for( i = A_limbs - 1; i > 0; i-- )
    739c:	3901      	subs	r1, #1
    739e:	e7f0      	b.n	7382 <mbedtls_mpi_core_bitlen+0xa>

000073a0 <mbedtls_mpi_core_bigendian_to_host>:
    return( mpi_bigendian_to_host_c( a ) );
}

void mbedtls_mpi_core_bigendian_to_host( mbedtls_mpi_uint *A,
                                         size_t A_limbs )
{
    73a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( A_limbs == 0 )
    73a2:	b131      	cbz	r1, 73b2 <mbedtls_mpi_core_bigendian_to_host+0x12>
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = A, cur_limb_right = A + ( A_limbs - 1 );
    73a4:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
    73a8:	3b01      	subs	r3, #1
    73aa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
         cur_limb_left <= cur_limb_right;
    73ae:	4283      	cmp	r3, r0
    73b0:	d201      	bcs.n	73b6 <mbedtls_mpi_core_bigendian_to_host+0x16>
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_bigendian_to_host( *cur_limb_left );
        *cur_limb_left  = mpi_bigendian_to_host( *cur_limb_right );
        *cur_limb_right = tmp;
    }
}
    73b2:	b002      	add	sp, #8
    73b4:	bd70      	pop	{r4, r5, r6, pc}
    return( mpi_bigendian_to_host_c( a ) );
    73b6:	6802      	ldr	r2, [r0, #0]
    mbedtls_mpi_uint tmp = 0;
    73b8:	2400      	movs	r4, #0
    73ba:	9201      	str	r2, [sp, #4]
        tmp             = mpi_bigendian_to_host( *cur_limb_left );
    73bc:	2204      	movs	r2, #4
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    73be:	eb0d 0502 	add.w	r5, sp, r2
    73c2:	4629      	mov	r1, r5
        tmp |= (mbedtls_mpi_uint) *a_ptr;
    73c4:	f815 6b01 	ldrb.w	r6, [r5], #1
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    73c8:	3a01      	subs	r2, #1
    73ca:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *a_ptr;
    73ce:	ea46 2404 	orr.w	r4, r6, r4, lsl #8
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    73d2:	d1f7      	bne.n	73c4 <mbedtls_mpi_core_bigendian_to_host+0x24>
    return( mpi_bigendian_to_host_c( a ) );
    73d4:	681d      	ldr	r5, [r3, #0]
    73d6:	9501      	str	r5, [sp, #4]
    mbedtls_mpi_uint tmp = 0;
    73d8:	4615      	mov	r5, r2
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    73da:	3201      	adds	r2, #1
        tmp |= (mbedtls_mpi_uint) *a_ptr;
    73dc:	f811 6b01 	ldrb.w	r6, [r1], #1
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    73e0:	b2d2      	uxtb	r2, r2
    73e2:	2a04      	cmp	r2, #4
        tmp |= (mbedtls_mpi_uint) *a_ptr;
    73e4:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    73e8:	d1f7      	bne.n	73da <mbedtls_mpi_core_bigendian_to_host+0x3a>
        *cur_limb_left  = mpi_bigendian_to_host( *cur_limb_right );
    73ea:	f840 5b04 	str.w	r5, [r0], #4
        *cur_limb_right = tmp;
    73ee:	f843 4904 	str.w	r4, [r3], #-4
         cur_limb_left++, cur_limb_right-- )
    73f2:	e7dc      	b.n	73ae <mbedtls_mpi_core_bigendian_to_host+0xe>

000073f4 <mbedtls_mpi_core_cond_assign>:

void mbedtls_mpi_core_cond_assign( mbedtls_mpi_uint *X,
                                   const mbedtls_mpi_uint *A,
                                   size_t limbs,
                                   unsigned char assign )
{
    73f4:	b410      	push	{r4}
    73f6:	4604      	mov	r4, r0
    if( X == A )
    73f8:	428c      	cmp	r4, r1
{
    73fa:	4610      	mov	r0, r2
    if( X == A )
    73fc:	d004      	beq.n	7408 <mbedtls_mpi_core_cond_assign+0x14>
        return;

    mbedtls_ct_mpi_uint_cond_assign( limbs, X, A, assign );
    73fe:	460a      	mov	r2, r1
    7400:	4621      	mov	r1, r4
}
    7402:	bc10      	pop	{r4}
    mbedtls_ct_mpi_uint_cond_assign( limbs, X, A, assign );
    7404:	f000 b9f3 	b.w	77ee <mbedtls_ct_mpi_uint_cond_assign>
}
    7408:	bc10      	pop	{r4}
    740a:	4770      	bx	lr

0000740c <mbedtls_mpi_core_read_be>:

int mbedtls_mpi_core_read_be( mbedtls_mpi_uint *X,
                              size_t X_limbs,
                              const unsigned char *input,
                              size_t input_length )
{
    740c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7410:	461c      	mov	r4, r3
    const size_t limbs = CHARS_TO_LIMBS( input_length );
    7412:	f013 0303 	ands.w	r3, r3, #3
    7416:	bf18      	it	ne
    7418:	2301      	movne	r3, #1
    741a:	eb03 0394 	add.w	r3, r3, r4, lsr #2

    if( X_limbs < limbs )
    741e:	428b      	cmp	r3, r1
{
    7420:	4606      	mov	r6, r0
    7422:	460d      	mov	r5, r1
    7424:	4690      	mov	r8, r2
    if( X_limbs < limbs )
    7426:	d813      	bhi.n	7450 <mbedtls_mpi_core_read_be+0x44>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    /* If X_limbs is 0, input_length must also be 0 (from previous test).
     * Nothing to do. */
    if( X_limbs == 0 )
    7428:	b179      	cbz	r1, 744a <mbedtls_mpi_core_read_be+0x3e>
        return( 0 );

    memset( X, 0, X_limbs * ciL );
    742a:	008f      	lsls	r7, r1, #2
    742c:	463a      	mov	r2, r7
    742e:	2100      	movs	r1, #0
    7430:	f7fe fc32 	bl	5c98 <memset>

    /* memcpy() with (NULL, 0) is undefined behaviour */
    if( input_length != 0 )
    7434:	b12c      	cbz	r4, 7442 <mbedtls_mpi_core_read_be+0x36>
    {
        size_t overhead = ( X_limbs * ciL ) - input_length;
    7436:	1b38      	subs	r0, r7, r4
        unsigned char *Xp = (unsigned char *) X;
        memcpy( Xp + overhead, input, input_length );
    7438:	4622      	mov	r2, r4
    743a:	4641      	mov	r1, r8
    743c:	4430      	add	r0, r6
    743e:	f7fe fc20 	bl	5c82 <memcpy>
    }

    mbedtls_mpi_core_bigendian_to_host( X, X_limbs );
    7442:	4629      	mov	r1, r5
    7444:	4630      	mov	r0, r6
    7446:	f7ff ffab 	bl	73a0 <mbedtls_mpi_core_bigendian_to_host>
        return( 0 );
    744a:	2000      	movs	r0, #0

    return( 0 );
}
    744c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    7450:	f06f 0007 	mvn.w	r0, #7
    7454:	e7fa      	b.n	744c <mbedtls_mpi_core_read_be+0x40>

00007456 <mbedtls_mpi_core_write_be>:
    size_t bytes_to_copy;
    unsigned char *p;

    stored_bytes = X_limbs * ciL;

    if( stored_bytes < output_length )
    7456:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
{
    745a:	b570      	push	{r4, r5, r6, lr}
    745c:	4604      	mov	r4, r0
    stored_bytes = X_limbs * ciL;
    745e:	ea4f 0581 	mov.w	r5, r1, lsl #2
{
    7462:	4610      	mov	r0, r2
    if( stored_bytes < output_length )
    7464:	d919      	bls.n	749a <mbedtls_mpi_core_write_be+0x44>
         * null bytes and record the position at which to start
         * writing the significant bytes. In this case, the execution
         * trace of this function does not depend on the value of the
         * number. */
        bytes_to_copy = stored_bytes;
        p = output + output_length - stored_bytes;
    7466:	1b5a      	subs	r2, r3, r5
    7468:	1886      	adds	r6, r0, r2
        memset( output, 0, output_length - stored_bytes );
    746a:	2100      	movs	r1, #0
    746c:	f7fe fc14 	bl	5c98 <memset>
        p = output + output_length - stored_bytes;
    7470:	4630      	mov	r0, r6
    7472:	462b      	mov	r3, r5
            if( GET_BYTE( X, i ) != 0 )
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
        }
    }

    for( size_t i = 0; i < bytes_to_copy; i++ )
    7474:	2100      	movs	r1, #0
    7476:	18c2      	adds	r2, r0, r3
    7478:	428b      	cmp	r3, r1
    747a:	d110      	bne.n	749e <mbedtls_mpi_core_write_be+0x48>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );

    return( 0 );
    747c:	2000      	movs	r0, #0
}
    747e:	bd70      	pop	{r4, r5, r6, pc}
            if( GET_BYTE( X, i ) != 0 )
    7480:	f022 0103 	bic.w	r1, r2, #3
    7484:	5861      	ldr	r1, [r4, r1]
    7486:	f002 0603 	and.w	r6, r2, #3
    748a:	00f6      	lsls	r6, r6, #3
    748c:	40f1      	lsrs	r1, r6
    748e:	b2c9      	uxtb	r1, r1
    7490:	b981      	cbnz	r1, 74b4 <mbedtls_mpi_core_write_be+0x5e>
        for( size_t i = bytes_to_copy; i < stored_bytes; i++ )
    7492:	3201      	adds	r2, #1
    7494:	42aa      	cmp	r2, r5
    7496:	d1f3      	bne.n	7480 <mbedtls_mpi_core_write_be+0x2a>
    7498:	e7ec      	b.n	7474 <mbedtls_mpi_core_write_be+0x1e>
    749a:	461a      	mov	r2, r3
    749c:	e7fa      	b.n	7494 <mbedtls_mpi_core_write_be+0x3e>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    749e:	f021 0003 	bic.w	r0, r1, #3
    74a2:	5820      	ldr	r0, [r4, r0]
    74a4:	f001 0503 	and.w	r5, r1, #3
    74a8:	00ed      	lsls	r5, r5, #3
    74aa:	40e8      	lsrs	r0, r5
    74ac:	f802 0d01 	strb.w	r0, [r2, #-1]!
    for( size_t i = 0; i < bytes_to_copy; i++ )
    74b0:	3101      	adds	r1, #1
    74b2:	e7e1      	b.n	7478 <mbedtls_mpi_core_write_be+0x22>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    74b4:	f06f 0007 	mvn.w	r0, #7
    74b8:	e7e1      	b.n	747e <mbedtls_mpi_core_write_be+0x28>

000074ba <mbedtls_mpi_core_shift_r>:
                               size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    74ba:	0953      	lsrs	r3, r2, #5
    v1 = count & (biL - 1);

    if( v0 > limbs || ( v0 == limbs && v1 > 0 ) )
    74bc:	428b      	cmp	r3, r1
{
    74be:	b4f0      	push	{r4, r5, r6, r7}
    v1 = count & (biL - 1);
    74c0:	f002 041f 	and.w	r4, r2, #31
    if( v0 > limbs || ( v0 == limbs && v1 > 0 ) )
    74c4:	d801      	bhi.n	74ca <mbedtls_mpi_core_shift_r+0x10>
    74c6:	d109      	bne.n	74dc <mbedtls_mpi_core_shift_r+0x22>
    74c8:	b124      	cbz	r4, 74d4 <mbedtls_mpi_core_shift_r+0x1a>
            X[i - 1] >>= v1;
            X[i - 1] |= r0;
            r0 = r1;
        }
    }
}
    74ca:	bcf0      	pop	{r4, r5, r6, r7}
        memset( X, 0, limbs * ciL );
    74cc:	008a      	lsls	r2, r1, #2
    74ce:	2100      	movs	r1, #0
    74d0:	f7fe bbe2 	b.w	5c98 <memset>
    if( v0 > 0 )
    74d4:	2a1f      	cmp	r2, #31
    74d6:	d803      	bhi.n	74e0 <mbedtls_mpi_core_shift_r+0x26>
}
    74d8:	bcf0      	pop	{r4, r5, r6, r7}
    74da:	4770      	bx	lr
    if( v0 > 0 )
    74dc:	2a1f      	cmp	r2, #31
    74de:	d90a      	bls.n	74f6 <mbedtls_mpi_core_shift_r+0x3c>
    74e0:	eb00 0283 	add.w	r2, r0, r3, lsl #2
    74e4:	1f05      	subs	r5, r0, #4
    74e6:	eb00 0681 	add.w	r6, r0, r1, lsl #2
        for( i = 0; i < limbs - v0; i++ )
    74ea:	42b2      	cmp	r2, r6
    74ec:	d116      	bne.n	751c <mbedtls_mpi_core_shift_r+0x62>
            X[i] = 0;
    74ee:	2200      	movs	r2, #0
        for( i = 0; i < limbs - v0; i++ )
    74f0:	1acb      	subs	r3, r1, r3
        for( ; i < limbs; i++ )
    74f2:	428b      	cmp	r3, r1
    74f4:	d317      	bcc.n	7526 <mbedtls_mpi_core_shift_r+0x6c>
    if( v1 > 0 )
    74f6:	2c00      	cmp	r4, #0
    74f8:	d0ee      	beq.n	74d8 <mbedtls_mpi_core_shift_r+0x1e>
    mbedtls_mpi_uint r0 = 0, r1;
    74fa:	2200      	movs	r2, #0
    74fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
            r1 = X[i - 1] << (biL - v1);
    7500:	f1c4 0620 	rsb	r6, r4, #32
        for( i = limbs; i > 0; i-- )
    7504:	4281      	cmp	r1, r0
    7506:	d0e7      	beq.n	74d8 <mbedtls_mpi_core_shift_r+0x1e>
            r1 = X[i - 1] << (biL - v1);
    7508:	f851 5c04 	ldr.w	r5, [r1, #-4]
            X[i - 1] >>= v1;
    750c:	fa25 f304 	lsr.w	r3, r5, r4
            X[i - 1] |= r0;
    7510:	4313      	orrs	r3, r2
    7512:	f841 3d04 	str.w	r3, [r1, #-4]!
            r0 = r1;
    7516:	fa05 f206 	lsl.w	r2, r5, r6
    751a:	e7f3      	b.n	7504 <mbedtls_mpi_core_shift_r+0x4a>
            X[i] = X[i + v0];
    751c:	f852 7b04 	ldr.w	r7, [r2], #4
    7520:	f845 7f04 	str.w	r7, [r5, #4]!
        for( i = 0; i < limbs - v0; i++ )
    7524:	e7e1      	b.n	74ea <mbedtls_mpi_core_shift_r+0x30>
            X[i] = 0;
    7526:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for( ; i < limbs; i++ )
    752a:	3301      	adds	r3, #1
    752c:	e7e1      	b.n	74f2 <mbedtls_mpi_core_shift_r+0x38>

0000752e <mbedtls_mpi_core_add>:

mbedtls_mpi_uint mbedtls_mpi_core_add( mbedtls_mpi_uint *X,
                                       const mbedtls_mpi_uint *A,
                                       const mbedtls_mpi_uint *B,
                                       size_t limbs )
{
    752e:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_mpi_uint c = 0;

    for( size_t i = 0; i < limbs; i++ )
    7530:	2400      	movs	r4, #0
{
    7532:	4684      	mov	ip, r0
    mbedtls_mpi_uint c = 0;
    7534:	4620      	mov	r0, r4
    for( size_t i = 0; i < limbs; i++ )
    7536:	429c      	cmp	r4, r3
    7538:	d100      	bne.n	753c <mbedtls_mpi_core_add+0xe>
        c += ( t < B[i] );
        X[i] = t;
    }

    return( c );
}
    753a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mbedtls_mpi_uint t = c + A[i];
    753c:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
        c = ( t < A[i] );
    7540:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
    7544:	182e      	adds	r6, r5, r0
    7546:	bf2c      	ite	cs
    7548:	2501      	movcs	r5, #1
    754a:	2500      	movcc	r5, #0
        c += ( t < B[i] );
    754c:	19bf      	adds	r7, r7, r6
        X[i] = t;
    754e:	f84c 7024 	str.w	r7, [ip, r4, lsl #2]
        c += ( t < B[i] );
    7552:	f145 0000 	adc.w	r0, r5, #0
    for( size_t i = 0; i < limbs; i++ )
    7556:	3401      	adds	r4, #1
    7558:	e7ed      	b.n	7536 <mbedtls_mpi_core_add+0x8>

0000755a <mbedtls_mpi_core_sub>:

mbedtls_mpi_uint mbedtls_mpi_core_sub( mbedtls_mpi_uint *X,
                                       const mbedtls_mpi_uint *A,
                                       const mbedtls_mpi_uint *B,
                                       size_t limbs )
{
    755a:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_mpi_uint c = 0;

    for( size_t i = 0; i < limbs; i++ )
    755c:	2400      	movs	r4, #0
{
    755e:	4606      	mov	r6, r0
    mbedtls_mpi_uint c = 0;
    7560:	4620      	mov	r0, r4
    for( size_t i = 0; i < limbs; i++ )
    7562:	429c      	cmp	r4, r3
    7564:	d100      	bne.n	7568 <mbedtls_mpi_core_sub+0xe>
        c = ( t < B[i] ) + z;
        X[i] = t - B[i];
    }

    return( c );
}
    7566:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mbedtls_mpi_uint z = ( A[i] < c );
    7568:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
        c = ( t < B[i] ) + z;
    756c:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
        mbedtls_mpi_uint t = A[i] - c;
    7570:	ebac 0500 	sub.w	r5, ip, r0
        c = ( t < B[i] ) + z;
    7574:	42af      	cmp	r7, r5
    7576:	bf94      	ite	ls
    7578:	f04f 0e00 	movls.w	lr, #0
    757c:	f04f 0e01 	movhi.w	lr, #1
        X[i] = t - B[i];
    7580:	1bed      	subs	r5, r5, r7
    7582:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
        c = ( t < B[i] ) + z;
    7586:	4584      	cmp	ip, r0
    7588:	bf2c      	ite	cs
    758a:	4670      	movcs	r0, lr
    758c:	f10e 0001 	addcc.w	r0, lr, #1
    for( size_t i = 0; i < limbs; i++ )
    7590:	3401      	adds	r4, #1
    7592:	e7e6      	b.n	7562 <mbedtls_mpi_core_sub+0x8>

00007594 <mbedtls_mpi_core_mla>:
    /*
     * It is a documented precondition of this function that d_len >= s_len.
     * If that's not the case, we swap these round: this turns what would be
     * a buffer overflow into an incorrect result.
     */
    if( d_len < s_len )
    7594:	428b      	cmp	r3, r1
    7596:	bf28      	it	cs
    7598:	460b      	movcs	r3, r1
{
    759a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    759e:	4696      	mov	lr, r2
        s_len = d_len;
    size_t excess_len = d_len - s_len;
    size_t steps_x8 = s_len / 8;
    75a0:	08de      	lsrs	r6, r3, #3
{
    75a2:	4604      	mov	r4, r0
    size_t excess_len = d_len - s_len;
    75a4:	1ac9      	subs	r1, r1, r3
    size_t steps_x1 = s_len & 7;
    75a6:	f003 0807 	and.w	r8, r3, #7

    while( steps_x8-- )
    75aa:	4675      	mov	r5, lr
    75ac:	4603      	mov	r3, r0
    size_t steps_x8 = s_len / 8;
    75ae:	46b4      	mov	ip, r6
    mbedtls_mpi_uint c = 0; /* carry */
    75b0:	2000      	movs	r0, #0
{
    75b2:	9a08      	ldr	r2, [sp, #32]
    while( steps_x8-- )
    75b4:	f10c 3cff 	add.w	ip, ip, #4294967295
    75b8:	f1bc 3fff 	cmp.w	ip, #4294967295
    75bc:	f103 0320 	add.w	r3, r3, #32
    75c0:	f105 0520 	add.w	r5, r5, #32
    75c4:	d111      	bne.n	75ea <mbedtls_mpi_core_mla+0x56>
    75c6:	eb04 1446 	add.w	r4, r4, r6, lsl #5
    75ca:	4625      	mov	r5, r4
    75cc:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
    75d0:	ea4f 0c88 	mov.w	ip, r8, lsl #2
    75d4:	eb06 0e88 	add.w	lr, r6, r8, lsl #2
        MULADDC_X8_INIT
        MULADDC_X8_CORE
        MULADDC_X8_STOP
    }

    while( steps_x1-- )
    75d8:	4576      	cmp	r6, lr
    75da:	f040 8081 	bne.w	76e0 <mbedtls_mpi_core_mla+0x14c>
    75de:	4464      	add	r4, ip
        MULADDC_X1_INIT
        MULADDC_X1_CORE
        MULADDC_X1_STOP
    }

    while( excess_len-- )
    75e0:	3901      	subs	r1, #1
    75e2:	f080 808b 	bcs.w	76fc <mbedtls_mpi_core_mla+0x168>
        c = ( *d < c );
        d++;
    }

    return( c );
}
    75e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MULADDC_X8_CORE
    75ea:	f855 7c20 	ldr.w	r7, [r5, #-32]
    75ee:	fba2 9707 	umull	r9, r7, r2, r7
    75f2:	eb10 0909 	adds.w	r9, r0, r9
    75f6:	f853 0c20 	ldr.w	r0, [r3, #-32]
    75fa:	f147 0700 	adc.w	r7, r7, #0
    75fe:	eb10 0009 	adds.w	r0, r0, r9
    7602:	f843 0c20 	str.w	r0, [r3, #-32]
    7606:	f855 0c1c 	ldr.w	r0, [r5, #-28]
    760a:	f147 0700 	adc.w	r7, r7, #0
    760e:	fba2 0900 	umull	r0, r9, r2, r0
    7612:	183f      	adds	r7, r7, r0
    7614:	f853 0c1c 	ldr.w	r0, [r3, #-28]
    7618:	f149 0900 	adc.w	r9, r9, #0
    761c:	19c0      	adds	r0, r0, r7
    761e:	f843 0c1c 	str.w	r0, [r3, #-28]
    7622:	f855 0c18 	ldr.w	r0, [r5, #-24]
    7626:	f149 0900 	adc.w	r9, r9, #0
    762a:	fba2 0700 	umull	r0, r7, r2, r0
    762e:	eb19 0900 	adds.w	r9, r9, r0
    7632:	f853 0c18 	ldr.w	r0, [r3, #-24]
    7636:	f147 0700 	adc.w	r7, r7, #0
    763a:	eb10 0009 	adds.w	r0, r0, r9
    763e:	f843 0c18 	str.w	r0, [r3, #-24]
    7642:	f855 0c14 	ldr.w	r0, [r5, #-20]
    7646:	f147 0700 	adc.w	r7, r7, #0
    764a:	fba2 0900 	umull	r0, r9, r2, r0
    764e:	183f      	adds	r7, r7, r0
    7650:	f853 0c14 	ldr.w	r0, [r3, #-20]
    7654:	f149 0900 	adc.w	r9, r9, #0
    7658:	19c0      	adds	r0, r0, r7
    765a:	f843 0c14 	str.w	r0, [r3, #-20]
    765e:	f855 0c10 	ldr.w	r0, [r5, #-16]
    7662:	f149 0900 	adc.w	r9, r9, #0
    7666:	fba2 0700 	umull	r0, r7, r2, r0
    766a:	eb19 0900 	adds.w	r9, r9, r0
    766e:	f853 0c10 	ldr.w	r0, [r3, #-16]
    7672:	f147 0700 	adc.w	r7, r7, #0
    7676:	eb10 0009 	adds.w	r0, r0, r9
    767a:	f843 0c10 	str.w	r0, [r3, #-16]
    767e:	f855 0c0c 	ldr.w	r0, [r5, #-12]
    7682:	f147 0700 	adc.w	r7, r7, #0
    7686:	fba2 0900 	umull	r0, r9, r2, r0
    768a:	183f      	adds	r7, r7, r0
    768c:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    7690:	f149 0900 	adc.w	r9, r9, #0
    7694:	19c0      	adds	r0, r0, r7
    7696:	f843 0c0c 	str.w	r0, [r3, #-12]
    769a:	f855 0c08 	ldr.w	r0, [r5, #-8]
    769e:	f149 0900 	adc.w	r9, r9, #0
    76a2:	fba2 0700 	umull	r0, r7, r2, r0
    76a6:	eb19 0900 	adds.w	r9, r9, r0
    76aa:	f853 0c08 	ldr.w	r0, [r3, #-8]
    76ae:	f147 0700 	adc.w	r7, r7, #0
    76b2:	eb10 0009 	adds.w	r0, r0, r9
    76b6:	f843 0c08 	str.w	r0, [r3, #-8]
    76ba:	f855 0c04 	ldr.w	r0, [r5, #-4]
    76be:	f147 0700 	adc.w	r7, r7, #0
    76c2:	fba2 0a00 	umull	r0, sl, r2, r0
    76c6:	eb17 0900 	adds.w	r9, r7, r0
    76ca:	f853 7c04 	ldr.w	r7, [r3, #-4]
    76ce:	f14a 0000 	adc.w	r0, sl, #0
    76d2:	eb17 0709 	adds.w	r7, r7, r9
    76d6:	f140 0000 	adc.w	r0, r0, #0
    76da:	f843 7c04 	str.w	r7, [r3, #-4]
    76de:	e769      	b.n	75b4 <mbedtls_mpi_core_mla+0x20>
        MULADDC_X1_CORE
    76e0:	f856 3b04 	ldr.w	r3, [r6], #4
    76e4:	fba2 3703 	umull	r3, r7, r2, r3
    76e8:	18c3      	adds	r3, r0, r3
    76ea:	6828      	ldr	r0, [r5, #0]
    76ec:	f147 0700 	adc.w	r7, r7, #0
    76f0:	18c3      	adds	r3, r0, r3
    76f2:	f147 0000 	adc.w	r0, r7, #0
    76f6:	f845 3b04 	str.w	r3, [r5], #4
    76fa:	e76d      	b.n	75d8 <mbedtls_mpi_core_mla+0x44>
        *d += c;
    76fc:	6823      	ldr	r3, [r4, #0]
    76fe:	181b      	adds	r3, r3, r0
        c = ( *d < c );
    7700:	bf2c      	ite	cs
    7702:	2001      	movcs	r0, #1
    7704:	2000      	movcc	r0, #0
        *d += c;
    7706:	f844 3b04 	str.w	r3, [r4], #4
        d++;
    770a:	e769      	b.n	75e0 <mbedtls_mpi_core_mla+0x4c>

0000770c <mbedtls_mpi_core_montmul_init>:
 */
mbedtls_mpi_uint mbedtls_mpi_core_montmul_init( const mbedtls_mpi_uint *N )
{
    mbedtls_mpi_uint x = N[0];

    x += ( ( N[0] + 2 ) & 4 ) << 1;
    770c:	2303      	movs	r3, #3
    mbedtls_mpi_uint x = N[0];
    770e:	6801      	ldr	r1, [r0, #0]
    x += ( ( N[0] + 2 ) & 4 ) << 1;
    7710:	1c88      	adds	r0, r1, #2
    7712:	0040      	lsls	r0, r0, #1
    7714:	f000 0008 	and.w	r0, r0, #8
    7718:	4408      	add	r0, r1

    for( unsigned int i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( N[0] * x ) );
    771a:	fb00 f201 	mul.w	r2, r0, r1
    for( unsigned int i = biL; i >= 8; i /= 2 )
    771e:	3b01      	subs	r3, #1
        x *= ( 2 - ( N[0] * x ) );
    7720:	f1c2 0202 	rsb	r2, r2, #2
    7724:	fb02 f000 	mul.w	r0, r2, r0
    for( unsigned int i = biL; i >= 8; i /= 2 )
    7728:	d1f7      	bne.n	771a <mbedtls_mpi_core_montmul_init+0xe>

    return( ~x + 1 );
}
    772a:	4240      	negs	r0, r0
    772c:	4770      	bx	lr

0000772e <mbedtls_mpi_core_montmul>:
                               size_t B_limbs,
                               const mbedtls_mpi_uint *N,
                               size_t AN_limbs,
                               mbedtls_mpi_uint mm,
                               mbedtls_mpi_uint *T )
{
    772e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7732:	b087      	sub	sp, #28
    7734:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    memset( T, 0, ( 2 * AN_limbs + 1 ) * ciL );

    for( size_t i = 0; i < AN_limbs; i++ )
    7736:	2400      	movs	r4, #0
    7738:	462e      	mov	r6, r5
{
    773a:	9304      	str	r3, [sp, #16]
    773c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    773e:	4691      	mov	r9, r2
    7740:	9302      	str	r3, [sp, #8]
    7742:	e9dd 8311 	ldrd	r8, r3, [sp, #68]	; 0x44
    memset( T, 0, ( 2 * AN_limbs + 1 ) * ciL );
    7746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
{
    774a:	4683      	mov	fp, r0
    774c:	468a      	mov	sl, r1
    memset( T, 0, ( 2 * AN_limbs + 1 ) * ciL );
    774e:	4628      	mov	r0, r5
    7750:	2100      	movs	r1, #0
    7752:	3204      	adds	r2, #4
{
    7754:	9305      	str	r3, [sp, #20]
    memset( T, 0, ( 2 * AN_limbs + 1 ) * ciL );
    7756:	f7fe fa9f 	bl	5c98 <memset>
    {
        /* T = (T + u0*B + u1*N) / 2^biL */
        mbedtls_mpi_uint u0 = A[i];
        mbedtls_mpi_uint u1 = ( T[0] + u0 * B[0] ) * mm;

        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, B, B_limbs, u0 );
    775a:	f108 0302 	add.w	r3, r8, #2
    775e:	9303      	str	r3, [sp, #12]
    for( size_t i = 0; i < AN_limbs; i++ )
    7760:	4544      	cmp	r4, r8
    7762:	d113      	bne.n	778c <mbedtls_mpi_core_montmul+0x5e>
    7764:	eb05 0184 	add.w	r1, r5, r4, lsl #2
     * We also look to see if there was any carry in the final additions in the
     * loop above.
     */

    mbedtls_mpi_uint carry  = T[AN_limbs];
    mbedtls_mpi_uint borrow = mbedtls_mpi_core_sub( X, T, N, AN_limbs );
    7768:	4623      	mov	r3, r4
    776a:	9a02      	ldr	r2, [sp, #8]
    776c:	4658      	mov	r0, fp
    mbedtls_mpi_uint carry  = T[AN_limbs];
    776e:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
    mbedtls_mpi_uint borrow = mbedtls_mpi_core_sub( X, T, N, AN_limbs );
    7772:	f7ff fef2 	bl	755a <mbedtls_mpi_core_sub>
     * and (carry, borrow) = (1, 0) can't happen.
     *
     * So the correct return value is already in X if (carry ^ borrow) = 0,
     * but is in (the lower AN_limbs limbs of) T if (carry ^ borrow) = 1.
     */
    mbedtls_ct_mpi_uint_cond_assign( AN_limbs, X, T, (unsigned char) ( carry ^ borrow ) );
    7776:	460a      	mov	r2, r1
    7778:	ea85 0300 	eor.w	r3, r5, r0
    777c:	4659      	mov	r1, fp
    777e:	4620      	mov	r0, r4
    7780:	b2db      	uxtb	r3, r3
}
    7782:	b007      	add	sp, #28
    7784:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_ct_mpi_uint_cond_assign( AN_limbs, X, T, (unsigned char) ( carry ^ borrow ) );
    7788:	f000 b831 	b.w	77ee <mbedtls_ct_mpi_uint_cond_assign>
        mbedtls_mpi_uint u0 = A[i];
    778c:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
        mbedtls_mpi_uint u1 = ( T[0] + u0 * B[0] ) * mm;
    7790:	f8d9 2000 	ldr.w	r2, [r9]
    7794:	6837      	ldr	r7, [r6, #0]
        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, B, B_limbs, u0 );
    7796:	4630      	mov	r0, r6
        mbedtls_mpi_uint u1 = ( T[0] + u0 * B[0] ) * mm;
    7798:	fb02 7703 	mla	r7, r2, r3, r7
    779c:	9a05      	ldr	r2, [sp, #20]
        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, B, B_limbs, u0 );
    779e:	9903      	ldr	r1, [sp, #12]
        mbedtls_mpi_uint u1 = ( T[0] + u0 * B[0] ) * mm;
    77a0:	4357      	muls	r7, r2
        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, B, B_limbs, u0 );
    77a2:	9300      	str	r3, [sp, #0]
    77a4:	464a      	mov	r2, r9
    77a6:	9b04      	ldr	r3, [sp, #16]
    77a8:	f7ff fef4 	bl	7594 <mbedtls_mpi_core_mla>
        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, N, AN_limbs, u1 );
    77ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    77b0:	4630      	mov	r0, r6
    77b2:	4643      	mov	r3, r8
    77b4:	9700      	str	r7, [sp, #0]
    77b6:	f7ff feed 	bl	7594 <mbedtls_mpi_core_mla>
        T++;
    77ba:	3604      	adds	r6, #4
    for( size_t i = 0; i < AN_limbs; i++ )
    77bc:	3401      	adds	r4, #1
    77be:	e7cf      	b.n	7760 <mbedtls_mpi_core_montmul+0x32>

000077c0 <mbedtls_mpi_core_sub_int>:

mbedtls_mpi_uint mbedtls_mpi_core_sub_int( mbedtls_mpi_uint *X,
                                           const mbedtls_mpi_uint *A,
                                           mbedtls_mpi_uint c, /* doubles as carry */
                                           size_t limbs )
{
    77c0:	b530      	push	{r4, r5, lr}
    77c2:	4605      	mov	r5, r0
    for( size_t i = 0; i < limbs; i++ )
    77c4:	4610      	mov	r0, r2
    77c6:	2200      	movs	r2, #0
    77c8:	429a      	cmp	r2, r3
    77ca:	d100      	bne.n	77ce <mbedtls_mpi_core_sub_int+0xe>
        c = ( t > s );
        X[i] = t;
    }

    return( c );
}
    77cc:	bd30      	pop	{r4, r5, pc}
        mbedtls_mpi_uint t = s - c;
    77ce:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
        c = ( t > s );
    77d2:	1a24      	subs	r4, r4, r0
        X[i] = t;
    77d4:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
        c = ( t > s );
    77d8:	bf34      	ite	cc
    77da:	2001      	movcc	r0, #1
    77dc:	2000      	movcs	r0, #0
    for( size_t i = 0; i < limbs; i++ )
    77de:	3201      	adds	r2, #1
    77e0:	e7f2      	b.n	77c8 <mbedtls_mpi_core_sub_int+0x8>

000077e2 <mbedtls_ct_size_bool_eq>:

unsigned mbedtls_ct_size_bool_eq( size_t x,
                                  size_t y )
{
    /* diff = 0 if x == y, non-zero otherwise */
    const size_t diff = x ^ y;
    77e2:	4041      	eors	r1, r0
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif

    /* diff_msb's most significant bit is equal to x != y */
    const size_t diff_msb = ( diff | (size_t) -diff );
    77e4:	4248      	negs	r0, r1
    77e6:	4308      	orrs	r0, r1

    /* diff1 = (x != y) ? 1 : 0 */
    const unsigned diff1 = diff_msb >> ( sizeof( diff_msb ) * 8 - 1 );

    return( 1 ^ diff1 );
}
    77e8:	43c0      	mvns	r0, r0
    77ea:	0fc0      	lsrs	r0, r0, #31
    77ec:	4770      	bx	lr

000077ee <mbedtls_ct_mpi_uint_cond_assign>:

void mbedtls_ct_mpi_uint_cond_assign( size_t n,
                                      mbedtls_mpi_uint *dest,
                                      const mbedtls_mpi_uint *src,
                                      unsigned char condition )
{
    77ee:	b5f0      	push	{r4, r5, r6, r7, lr}

#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    for( i = 0; i < n; i++ )
    77f0:	2500      	movs	r5, #0
    const mbedtls_mpi_uint mask = -condition;
    77f2:	425f      	negs	r7, r3
    for( i = 0; i < n; i++ )
    77f4:	3904      	subs	r1, #4
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    77f6:	3b01      	subs	r3, #1
    for( i = 0; i < n; i++ )
    77f8:	4285      	cmp	r5, r0
    77fa:	d100      	bne.n	77fe <mbedtls_ct_mpi_uint_cond_assign+0x10>
}
    77fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    77fe:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
    7802:	f851 4f04 	ldr.w	r4, [r1, #4]!
    7806:	403e      	ands	r6, r7
    7808:	401c      	ands	r4, r3
    780a:	4334      	orrs	r4, r6
    780c:	600c      	str	r4, [r1, #0]
    for( i = 0; i < n; i++ )
    780e:	3501      	adds	r5, #1
    7810:	e7f2      	b.n	77f8 <mbedtls_ct_mpi_uint_cond_assign+0xa>

00007812 <mbedtls_mpi_safe_cond_assign>:
__declspec(noinline)
#endif
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X,
                                  const mbedtls_mpi *Y,
                                  unsigned char assign )
{
    7812:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7816:	460f      	mov	r7, r1
    MPI_VALIDATE_RET( Y != NULL );

    /* all-bits 1 if assign is 1, all-bits 0 if assign is 0 */
    mbedtls_mpi_uint limb_mask = mbedtls_ct_mpi_uint_mask( assign );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    7818:	6849      	ldr	r1, [r1, #4]
{
    781a:	4605      	mov	r5, r0
    781c:	4691      	mov	r9, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    781e:	f7fe fefc 	bl	661a <mbedtls_mpi_grow>
    7822:	4680      	mov	r8, r0
    7824:	b9c8      	cbnz	r0, 785a <mbedtls_mpi_safe_cond_assign+0x48>
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
    7826:	f1c9 0600 	rsb	r6, r9, #0
    782a:	ea46 0609 	orr.w	r6, r6, r9
    782e:	17f6      	asrs	r6, r6, #31
    X->s = mbedtls_ct_cond_select_sign( assign, Y->s, X->s );

    mbedtls_mpi_core_cond_assign( X->p, Y->p, Y->n, assign );

    for( size_t i = Y->n; i < X->n; i++ )
        X->p[i] &= ~limb_mask;
    7830:	43f6      	mvns	r6, r6
    unsigned uif0 = if0 + 1;
    7832:	682b      	ldr	r3, [r5, #0]
    unsigned uif1 = if1 + 1;
    7834:	683c      	ldr	r4, [r7, #0]
    unsigned uif0 = if0 + 1;
    7836:	3301      	adds	r3, #1
    unsigned uif1 = if1 + 1;
    7838:	3401      	adds	r4, #1
    return( (int) ur - 1 );
    783a:	405c      	eors	r4, r3
    783c:	ea04 0449 	and.w	r4, r4, r9, lsl #1
    7840:	405c      	eors	r4, r3
    7842:	3c01      	subs	r4, #1
    X->s = mbedtls_ct_cond_select_sign( assign, Y->s, X->s );
    7844:	602c      	str	r4, [r5, #0]
    mbedtls_mpi_core_cond_assign( X->p, Y->p, Y->n, assign );
    7846:	464b      	mov	r3, r9
    7848:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
    784c:	68a8      	ldr	r0, [r5, #8]
    784e:	f7ff fdd1 	bl	73f4 <mbedtls_mpi_core_cond_assign>
    for( size_t i = Y->n; i < X->n; i++ )
    7852:	687b      	ldr	r3, [r7, #4]
    7854:	686a      	ldr	r2, [r5, #4]
    7856:	429a      	cmp	r2, r3
    7858:	d802      	bhi.n	7860 <mbedtls_mpi_safe_cond_assign+0x4e>

cleanup:
    return( ret );
}
    785a:	4640      	mov	r0, r8
    785c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        X->p[i] &= ~limb_mask;
    7860:	68a9      	ldr	r1, [r5, #8]
    7862:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    7866:	4032      	ands	r2, r6
    7868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( size_t i = Y->n; i < X->n; i++ )
    786c:	3301      	adds	r3, #1
    786e:	e7f1      	b.n	7854 <mbedtls_mpi_safe_cond_assign+0x42>

00007870 <platform_calloc_uninit>:
}
    7870:	2000      	movs	r0, #0
    7872:	4770      	bx	lr

00007874 <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    7874:	4770      	bx	lr

00007876 <platform_free_uninit>:
static void platform_free_uninit( void *ptr )
    7876:	4770      	bx	lr

00007878 <mbedtls_rsa_import>:
{
    7878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    787c:	4604      	mov	r4, r0
    787e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    7882:	4691      	mov	r9, r2
    7884:	4698      	mov	r8, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    7886:	460d      	mov	r5, r1
    7888:	b951      	cbnz	r1, 78a0 <mbedtls_rsa_import+0x28>
    788a:	f1b9 0f00 	cmp.w	r9, #0
    788e:	d110      	bne.n	78b2 <mbedtls_rsa_import+0x3a>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    7890:	f1b8 0f00 	cmp.w	r8, #0
    7894:	d115      	bne.n	78c2 <mbedtls_rsa_import+0x4a>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    7896:	b9e7      	cbnz	r7, 78d2 <mbedtls_rsa_import+0x5a>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    7898:	bb1e      	cbnz	r6, 78e2 <mbedtls_rsa_import+0x6a>
    if( N != NULL )
    789a:	bb55      	cbnz	r5, 78f2 <mbedtls_rsa_import+0x7a>
    return( 0 );
    789c:	2000      	movs	r0, #0
    789e:	e006      	b.n	78ae <mbedtls_rsa_import+0x36>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    78a0:	3008      	adds	r0, #8
    78a2:	f7fe fefc 	bl	669e <mbedtls_mpi_copy>
    78a6:	2800      	cmp	r0, #0
    78a8:	d0ef      	beq.n	788a <mbedtls_rsa_import+0x12>
    78aa:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
    78ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    78b2:	4649      	mov	r1, r9
    78b4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    78b8:	f7fe fef1 	bl	669e <mbedtls_mpi_copy>
    78bc:	2800      	cmp	r0, #0
    78be:	d0e7      	beq.n	7890 <mbedtls_rsa_import+0x18>
    78c0:	e7f3      	b.n	78aa <mbedtls_rsa_import+0x32>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    78c2:	4641      	mov	r1, r8
    78c4:	f104 0038 	add.w	r0, r4, #56	; 0x38
    78c8:	f7fe fee9 	bl	669e <mbedtls_mpi_copy>
    78cc:	2800      	cmp	r0, #0
    78ce:	d0e2      	beq.n	7896 <mbedtls_rsa_import+0x1e>
    78d0:	e7eb      	b.n	78aa <mbedtls_rsa_import+0x32>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    78d2:	4639      	mov	r1, r7
    78d4:	f104 0020 	add.w	r0, r4, #32
    78d8:	f7fe fee1 	bl	669e <mbedtls_mpi_copy>
    78dc:	2800      	cmp	r0, #0
    78de:	d0db      	beq.n	7898 <mbedtls_rsa_import+0x20>
    78e0:	e7e3      	b.n	78aa <mbedtls_rsa_import+0x32>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    78e2:	4631      	mov	r1, r6
    78e4:	f104 0014 	add.w	r0, r4, #20
    78e8:	f7fe fed9 	bl	669e <mbedtls_mpi_copy>
    78ec:	2800      	cmp	r0, #0
    78ee:	d0d4      	beq.n	789a <mbedtls_rsa_import+0x22>
    78f0:	e7db      	b.n	78aa <mbedtls_rsa_import+0x32>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    78f2:	f104 0008 	add.w	r0, r4, #8
    78f6:	f7fe ff34 	bl	6762 <mbedtls_mpi_size>
    78fa:	6060      	str	r0, [r4, #4]
    78fc:	e7ce      	b.n	789c <mbedtls_rsa_import+0x24>

000078fe <mbedtls_rsa_init>:
{
    78fe:	b510      	push	{r4, lr}
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    7900:	22ac      	movs	r2, #172	; 0xac
    7902:	2100      	movs	r1, #0
{
    7904:	4604      	mov	r4, r0
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    7906:	f7fe f9c7 	bl	5c98 <memset>
    ctx->padding = MBEDTLS_RSA_PKCS_V15;
    790a:	2300      	movs	r3, #0
    ctx->hash_id = MBEDTLS_MD_NONE;
    790c:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
    7910:	bd10      	pop	{r4, pc}

00007912 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    7912:	b510      	push	{r4, lr}
    if( ctx == NULL )
    7914:	4604      	mov	r4, r0
    7916:	b3a0      	cbz	r0, 7982 <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
    7918:	308c      	adds	r0, #140	; 0x8c
    791a:	f7fe fe6c 	bl	65f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    791e:	f104 0098 	add.w	r0, r4, #152	; 0x98
    7922:	f7fe fe68 	bl	65f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    7926:	f104 0068 	add.w	r0, r4, #104	; 0x68
    792a:	f7fe fe64 	bl	65f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    792e:	f104 0020 	add.w	r0, r4, #32
    7932:	f7fe fe60 	bl	65f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    7936:	f104 0038 	add.w	r0, r4, #56	; 0x38
    793a:	f7fe fe5c 	bl	65f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    793e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7942:	f7fe fe58 	bl	65f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    7946:	f104 0014 	add.w	r0, r4, #20
    794a:	f7fe fe54 	bl	65f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    794e:	f104 0008 	add.w	r0, r4, #8
    7952:	f7fe fe50 	bl	65f6 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    7956:	f104 0080 	add.w	r0, r4, #128	; 0x80
    795a:	f7fe fe4c 	bl	65f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    795e:	f104 0074 	add.w	r0, r4, #116	; 0x74
    7962:	f7fe fe48 	bl	65f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    7966:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    796a:	f7fe fe44 	bl	65f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    796e:	f104 0050 	add.w	r0, r4, #80	; 0x50
    7972:	f7fe fe40 	bl	65f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    7976:	f104 0044 	add.w	r0, r4, #68	; 0x44
    {
        mbedtls_mutex_free( &ctx->mutex );
        ctx->ver = 0;
    }
#endif
}
    797a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
    797e:	f7fe be3a 	b.w	65f6 <mbedtls_mpi_free>
}
    7982:	bd10      	pop	{r4, pc}

00007984 <mbedtls_sha256_init>:
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    7984:	226c      	movs	r2, #108	; 0x6c
    7986:	2100      	movs	r1, #0
    7988:	f7fe b986 	b.w	5c98 <memset>

0000798c <mbedtls_sha256_update>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    798c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7990:	4605      	mov	r5, r0
    7992:	460e      	mov	r6, r1
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
    7994:	4614      	mov	r4, r2
    7996:	b3a2      	cbz	r2, 7a02 <mbedtls_sha256_update+0x76>
        return( 0 );

    left = ctx->total[0] & 0x3F;
    7998:	6803      	ldr	r3, [r0, #0]
    799a:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = SHA256_BLOCK_SIZE - left;

    ctx->total[0] += (uint32_t) ilen;
    799e:	189b      	adds	r3, r3, r2
    79a0:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
    79a2:	bf22      	ittt	cs
    79a4:	6843      	ldrcs	r3, [r0, #4]
    79a6:	3301      	addcs	r3, #1
    79a8:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
    79aa:	b387      	cbz	r7, 7a0e <mbedtls_sha256_update+0x82>
    fill = SHA256_BLOCK_SIZE - left;
    79ac:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
    79b0:	454a      	cmp	r2, r9
    79b2:	d31f      	bcc.n	79f4 <mbedtls_sha256_update+0x68>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
    79b4:	f100 0828 	add.w	r8, r0, #40	; 0x28
    79b8:	464a      	mov	r2, r9
    79ba:	eb08 0007 	add.w	r0, r8, r7
    79be:	f7fe f960 	bl	5c82 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    79c2:	4641      	mov	r1, r8
    79c4:	4628      	mov	r0, r5
    79c6:	f7fc fb57 	bl	4078 <mbedtls_internal_sha256_process>
    79ca:	b9d8      	cbnz	r0, 7a04 <mbedtls_sha256_update+0x78>
            return( ret );

        input += fill;
    79cc:	4427      	add	r7, r4
        ilen  -= fill;
    79ce:	f1a7 0440 	sub.w	r4, r7, #64	; 0x40
        left = 0;
    }

    while( ilen >= SHA256_BLOCK_SIZE )
    79d2:	2c3f      	cmp	r4, #63	; 0x3f
        input += fill;
    79d4:	444e      	add	r6, r9
    while( ilen >= SHA256_BLOCK_SIZE )
    79d6:	d90b      	bls.n	79f0 <mbedtls_sha256_update+0x64>
    size_t processed = 0;
    79d8:	2700      	movs	r7, #0
        if( mbedtls_internal_sha256_process_c( ctx, data ) != 0 )
    79da:	4628      	mov	r0, r5
    79dc:	19f1      	adds	r1, r6, r7
    79de:	f7fc fb4b 	bl	4078 <mbedtls_internal_sha256_process>
    79e2:	b988      	cbnz	r0, 7a08 <mbedtls_sha256_update+0x7c>
        processed += SHA256_BLOCK_SIZE;
    79e4:	3740      	adds	r7, #64	; 0x40
    while( len >= SHA256_BLOCK_SIZE )
    79e6:	1be3      	subs	r3, r4, r7
    79e8:	2b3f      	cmp	r3, #63	; 0x3f
    79ea:	d8f6      	bhi.n	79da <mbedtls_sha256_update+0x4e>
        size_t processed =
                    mbedtls_internal_sha256_process_many( ctx, input, ilen );
        if( processed < SHA256_BLOCK_SIZE )
            return( MBEDTLS_ERR_ERROR_GENERIC_ERROR );

        input += processed;
    79ec:	461c      	mov	r4, r3
    79ee:	443e      	add	r6, r7
        ilen  -= processed;
    }

    if( ilen > 0 )
    79f0:	b13c      	cbz	r4, 7a02 <mbedtls_sha256_update+0x76>
    79f2:	2700      	movs	r7, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    79f4:	f105 0028 	add.w	r0, r5, #40	; 0x28
    79f8:	4622      	mov	r2, r4
    79fa:	4631      	mov	r1, r6
    79fc:	4438      	add	r0, r7
    79fe:	f7fe f940 	bl	5c82 <memcpy>
        return( 0 );
    7a02:	2000      	movs	r0, #0

    return( 0 );
}
    7a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            return( MBEDTLS_ERR_ERROR_GENERIC_ERROR );
    7a08:	f04f 30ff 	mov.w	r0, #4294967295
    7a0c:	e7fa      	b.n	7a04 <mbedtls_sha256_update+0x78>
    while( ilen >= SHA256_BLOCK_SIZE )
    7a0e:	2a3f      	cmp	r2, #63	; 0x3f
    7a10:	d8e2      	bhi.n	79d8 <mbedtls_sha256_update+0x4c>
    7a12:	e7ef      	b.n	79f4 <mbedtls_sha256_update+0x68>

00007a14 <mbedtls_sha256_finish>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish( mbedtls_sha256_context *ctx,
                               unsigned char *output )
{
    7a14:	b570      	push	{r4, r5, r6, lr}
    7a16:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
    7a18:	2180      	movs	r1, #128	; 0x80
    used = ctx->total[0] & 0x3F;
    7a1a:	6803      	ldr	r3, [r0, #0]

    if( used <= 56 )
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    7a1c:	f100 0628 	add.w	r6, r0, #40	; 0x28
    used = ctx->total[0] & 0x3F;
    7a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
    7a24:	1c5a      	adds	r2, r3, #1
    if( used <= 56 )
    7a26:	2a38      	cmp	r2, #56	; 0x38
    ctx->buffer[used++] = 0x80;
    7a28:	4403      	add	r3, r0
{
    7a2a:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    7a2c:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
        memset( ctx->buffer + used, 0, 56 - used );
    7a30:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
    7a34:	d861      	bhi.n	7afa <mbedtls_sha256_finish+0xe6>
        memset( ctx->buffer + used, 0, 56 - used );
    7a36:	2100      	movs	r1, #0
    7a38:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
        memset( ctx->buffer + used, 0, SHA256_BLOCK_SIZE - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    7a3c:	f7fe f92c 	bl	5c98 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    7a40:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    7a44:	0f5a      	lsrs	r2, r3, #29
    7a46:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
    7a4a:	00db      	lsls	r3, r3, #3
    7a4c:	ba12      	rev	r2, r2
    7a4e:	ba1b      	rev	r3, r3

    MBEDTLS_PUT_UINT32_BE( high, ctx->buffer, 56 );
    MBEDTLS_PUT_UINT32_BE( low,  ctx->buffer, 60 );

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    7a50:	4631      	mov	r1, r6
    7a52:	4620      	mov	r0, r4
    MBEDTLS_PUT_UINT32_BE( high, ctx->buffer, 56 );
    7a54:	6622      	str	r2, [r4, #96]	; 0x60
    MBEDTLS_PUT_UINT32_BE( low,  ctx->buffer, 60 );
    7a56:	6663      	str	r3, [r4, #100]	; 0x64
    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    7a58:	f7fc fb0e 	bl	4078 <mbedtls_internal_sha256_process>
    7a5c:	2800      	cmp	r0, #0
    7a5e:	d14b      	bne.n	7af8 <mbedtls_sha256_finish+0xe4>
        return( ret );

    /*
     * Output final state
     */
    MBEDTLS_PUT_UINT32_BE( ctx->state[0], output,  0 );
    7a60:	7ae3      	ldrb	r3, [r4, #11]
    7a62:	702b      	strb	r3, [r5, #0]
    7a64:	8963      	ldrh	r3, [r4, #10]
    7a66:	706b      	strb	r3, [r5, #1]
    7a68:	68a3      	ldr	r3, [r4, #8]
    7a6a:	0a1b      	lsrs	r3, r3, #8
    7a6c:	70ab      	strb	r3, [r5, #2]
    7a6e:	68a3      	ldr	r3, [r4, #8]
    7a70:	70eb      	strb	r3, [r5, #3]
    MBEDTLS_PUT_UINT32_BE( ctx->state[1], output,  4 );
    7a72:	7be3      	ldrb	r3, [r4, #15]
    7a74:	712b      	strb	r3, [r5, #4]
    7a76:	89e3      	ldrh	r3, [r4, #14]
    7a78:	716b      	strb	r3, [r5, #5]
    7a7a:	68e3      	ldr	r3, [r4, #12]
    7a7c:	0a1b      	lsrs	r3, r3, #8
    7a7e:	71ab      	strb	r3, [r5, #6]
    7a80:	68e3      	ldr	r3, [r4, #12]
    7a82:	71eb      	strb	r3, [r5, #7]
    MBEDTLS_PUT_UINT32_BE( ctx->state[2], output,  8 );
    7a84:	7ce3      	ldrb	r3, [r4, #19]
    7a86:	722b      	strb	r3, [r5, #8]
    7a88:	8a63      	ldrh	r3, [r4, #18]
    7a8a:	726b      	strb	r3, [r5, #9]
    7a8c:	6923      	ldr	r3, [r4, #16]
    7a8e:	0a1b      	lsrs	r3, r3, #8
    7a90:	72ab      	strb	r3, [r5, #10]
    7a92:	6923      	ldr	r3, [r4, #16]
    7a94:	72eb      	strb	r3, [r5, #11]
    MBEDTLS_PUT_UINT32_BE( ctx->state[3], output, 12 );
    7a96:	7de3      	ldrb	r3, [r4, #23]
    7a98:	732b      	strb	r3, [r5, #12]
    7a9a:	8ae3      	ldrh	r3, [r4, #22]
    7a9c:	736b      	strb	r3, [r5, #13]
    7a9e:	6963      	ldr	r3, [r4, #20]
    7aa0:	0a1b      	lsrs	r3, r3, #8
    7aa2:	73ab      	strb	r3, [r5, #14]
    7aa4:	6963      	ldr	r3, [r4, #20]
    7aa6:	73eb      	strb	r3, [r5, #15]
    MBEDTLS_PUT_UINT32_BE( ctx->state[4], output, 16 );
    7aa8:	7ee3      	ldrb	r3, [r4, #27]
    7aaa:	742b      	strb	r3, [r5, #16]
    7aac:	8b63      	ldrh	r3, [r4, #26]
    7aae:	746b      	strb	r3, [r5, #17]
    7ab0:	69a3      	ldr	r3, [r4, #24]
    7ab2:	0a1b      	lsrs	r3, r3, #8
    7ab4:	74ab      	strb	r3, [r5, #18]
    7ab6:	69a3      	ldr	r3, [r4, #24]
    7ab8:	74eb      	strb	r3, [r5, #19]
    MBEDTLS_PUT_UINT32_BE( ctx->state[5], output, 20 );
    7aba:	7fe3      	ldrb	r3, [r4, #31]
    7abc:	752b      	strb	r3, [r5, #20]
    7abe:	8be3      	ldrh	r3, [r4, #30]
    7ac0:	756b      	strb	r3, [r5, #21]
    7ac2:	69e3      	ldr	r3, [r4, #28]
    7ac4:	0a1b      	lsrs	r3, r3, #8
    7ac6:	75ab      	strb	r3, [r5, #22]
    7ac8:	69e3      	ldr	r3, [r4, #28]
    7aca:	75eb      	strb	r3, [r5, #23]
    MBEDTLS_PUT_UINT32_BE( ctx->state[6], output, 24 );
    7acc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    7ad0:	762b      	strb	r3, [r5, #24]
    7ad2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    7ad4:	766b      	strb	r3, [r5, #25]
    7ad6:	6a23      	ldr	r3, [r4, #32]
    7ad8:	0a1b      	lsrs	r3, r3, #8
    7ada:	76ab      	strb	r3, [r5, #26]
    7adc:	6a23      	ldr	r3, [r4, #32]
    7ade:	76eb      	strb	r3, [r5, #27]

    int truncated = 0;
#if defined(MBEDTLS_SHA224_C)
    truncated = ctx->is224;
#endif
    if( !truncated )
    7ae0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    7ae2:	b94b      	cbnz	r3, 7af8 <mbedtls_sha256_finish+0xe4>
        MBEDTLS_PUT_UINT32_BE( ctx->state[7], output, 28 );
    7ae4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    7ae8:	772b      	strb	r3, [r5, #28]
    7aea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    7aec:	776b      	strb	r3, [r5, #29]
    7aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7af0:	0a1b      	lsrs	r3, r3, #8
    7af2:	77ab      	strb	r3, [r5, #30]
    7af4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7af6:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    7af8:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, SHA256_BLOCK_SIZE - used );
    7afa:	2100      	movs	r1, #0
    7afc:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    7b00:	f7fe f8ca 	bl	5c98 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    7b04:	4631      	mov	r1, r6
    7b06:	4620      	mov	r0, r4
    7b08:	f7fc fab6 	bl	4078 <mbedtls_internal_sha256_process>
    7b0c:	2800      	cmp	r0, #0
    7b0e:	d1f3      	bne.n	7af8 <mbedtls_sha256_finish+0xe4>
        memset( ctx->buffer, 0, 56 );
    7b10:	4601      	mov	r1, r0
    7b12:	2238      	movs	r2, #56	; 0x38
    7b14:	4630      	mov	r0, r6
    7b16:	e791      	b.n	7a3c <mbedtls_sha256_finish+0x28>

00007b18 <nrf91_errata_14>:
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul))) & 0x00000FFFul;
    7b18:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    7b1c:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    7b20:	f8d2 0134 	ldr.w	r0, [r2, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    7b24:	f3bf 8f4f 	dsb	sy
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul))) & 0x00000FFFul;
    7b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
            if (var1 == 0x09)
    7b2c:	2b09      	cmp	r3, #9
    7b2e:	d103      	bne.n	7b38 <nrf91_errata_14+0x20>
                switch(var2)
    7b30:	1e43      	subs	r3, r0, #1
    7b32:	4258      	negs	r0, r3
    7b34:	4158      	adcs	r0, r3
    7b36:	4770      	bx	lr
                        return false;
    7b38:	2000      	movs	r0, #0
}
    7b3a:	4770      	bx	lr

00007b3c <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    7b3c:	4700      	bx	r0

00007b3e <nrfx_busy_wait>:
    7b3e:	f000 bb93 	b.w	8268 <z_impl_k_busy_wait>

00007b42 <clock_stop>:
{
    7b42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    7b44:	4604      	mov	r4, r0
    7b46:	b118      	cbz	r0, 7b50 <clock_stop+0xe>
    7b48:	2801      	cmp	r0, #1
    7b4a:	d020      	beq.n	7b8e <clock_stop+0x4c>
}
    7b4c:	b003      	add	sp, #12
    7b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b50:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7b54:	2202      	movs	r2, #2
    7b56:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7b5a:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    7b5e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7b62:	2201      	movs	r2, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    7b64:	4607      	mov	r7, r0
    7b66:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    7b68:	2301      	movs	r3, #1
    7b6a:	f242 7510 	movw	r5, #10000	; 0x2710
    7b6e:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    7b72:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    7b76:	b1bc      	cbz	r4, 7ba8 <clock_stop+0x66>
    7b78:	2c01      	cmp	r4, #1
    7b7a:	d1e7      	bne.n	7b4c <clock_stop+0xa>
            if (p_clk_src != NULL)
    7b7c:	b38f      	cbz	r7, 7be2 <clock_stop+0xa0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7b7e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    7b82:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    7b86:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7b88:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    7b8c:	e014      	b.n	7bb8 <clock_stop+0x76>
    p_reg->INTENCLR = mask;
    7b8e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7b92:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    7b94:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7b98:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7b9c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    7ba0:	f10d 0707 	add.w	r7, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7ba4:	6058      	str	r0, [r3, #4]
    7ba6:	e7df      	b.n	7b68 <clock_stop+0x26>
            if (p_clk_src != NULL)
    7ba8:	b18f      	cbz	r7, 7bce <clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7baa:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    7bae:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    7bb2:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7bb4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7bb8:	03da      	lsls	r2, r3, #15
    7bba:	d5c7      	bpl.n	7b4c <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    7bbc:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7bc0:	2801      	cmp	r0, #1
    7bc2:	d1c3      	bne.n	7b4c <clock_stop+0xa>
    7bc4:	f7ff ffbb 	bl	7b3e <nrfx_busy_wait>
    7bc8:	3d01      	subs	r5, #1
    7bca:	d1d4      	bne.n	7b76 <clock_stop+0x34>
    7bcc:	e7be      	b.n	7b4c <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7bce:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    7bd2:	03d9      	lsls	r1, r3, #15
    7bd4:	d5ba      	bpl.n	7b4c <clock_stop+0xa>
    7bd6:	2001      	movs	r0, #1
    7bd8:	f7ff ffb1 	bl	7b3e <nrfx_busy_wait>
    7bdc:	3d01      	subs	r5, #1
    7bde:	d1f6      	bne.n	7bce <clock_stop+0x8c>
    7be0:	e7b4      	b.n	7b4c <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7be2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    7be6:	03db      	lsls	r3, r3, #15
    7be8:	d5b0      	bpl.n	7b4c <clock_stop+0xa>
    7bea:	2001      	movs	r0, #1
    7bec:	f7ff ffa7 	bl	7b3e <nrfx_busy_wait>
    7bf0:	3d01      	subs	r5, #1
    7bf2:	d1f6      	bne.n	7be2 <clock_stop+0xa0>
    7bf4:	e7aa      	b.n	7b4c <clock_stop+0xa>

00007bf6 <nrfx_clock_enable>:
{
    7bf6:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7bf8:	2005      	movs	r0, #5
    7bfa:	f7fa fd7b 	bl	26f4 <arch_irq_is_enabled>
    7bfe:	b910      	cbnz	r0, 7c06 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7c00:	2005      	movs	r0, #5
    7c02:	f7fa fd55 	bl	26b0 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    7c06:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7c0a:	2201      	movs	r2, #1
    7c0c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    7c10:	bd08      	pop	{r3, pc}

00007c12 <nrfx_clock_start>:
{
    7c12:	b508      	push	{r3, lr}
    switch (domain)
    7c14:	b110      	cbz	r0, 7c1c <nrfx_clock_start+0xa>
    7c16:	2801      	cmp	r0, #1
    7c18:	d030      	beq.n	7c7c <nrfx_clock_start+0x6a>
}
    7c1a:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7c1c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    7c20:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7c24:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    7c28:	03c9      	lsls	r1, r1, #15
    7c2a:	d40e      	bmi.n	7c4a <nrfx_clock_start+0x38>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    7c2c:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    7c30:	07db      	lsls	r3, r3, #31
    7c32:	d513      	bpl.n	7c5c <nrfx_clock_start+0x4a>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    7c34:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    7c38:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    7c3c:	3b01      	subs	r3, #1
    7c3e:	2b01      	cmp	r3, #1
    7c40:	d809      	bhi.n	7c56 <nrfx_clock_start+0x44>
    p_reg->INTENSET = mask;
    7c42:	2302      	movs	r3, #2
    7c44:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    7c48:	e7e7      	b.n	7c1a <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7c4a:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    7c4e:	2b02      	cmp	r3, #2
    7c50:	d005      	beq.n	7c5e <nrfx_clock_start+0x4c>
    7c52:	2b01      	cmp	r3, #1
    7c54:	d002      	beq.n	7c5c <nrfx_clock_start+0x4a>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7c56:	2000      	movs	r0, #0
    7c58:	f7ff ff73 	bl	7b42 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    7c5c:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    7c5e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    7c62:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7c66:	2300      	movs	r3, #0
    7c68:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    7c6c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    7c70:	2302      	movs	r3, #2
    7c72:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7c76:	2301      	movs	r3, #1
    7c78:	6093      	str	r3, [r2, #8]
}
    7c7a:	e7ce      	b.n	7c1a <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7c7c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7c80:	2200      	movs	r2, #0
    7c82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7c86:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    7c8a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7c8e:	6018      	str	r0, [r3, #0]
}
    7c90:	e7c3      	b.n	7c1a <nrfx_clock_start+0x8>

00007c92 <nrfx_clock_stop>:
    clock_stop(domain);
    7c92:	f7ff bf56 	b.w	7b42 <clock_stop>

00007c96 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    7c96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    7c9a:	4770      	bx	lr

00007c9c <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    7c9c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    7ca0:	4770      	bx	lr

00007ca2 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    7ca2:	f44f 7080 	mov.w	r0, #256	; 0x100
    7ca6:	4770      	bx	lr

00007ca8 <zcbor_new_backup>:

_Static_assert((sizeof(zcbor_state_t) >= sizeof(struct zcbor_state_constant)),
	"This code needs zcbor_state_t to be at least as large as zcbor_backups_t.");

bool zcbor_new_backup(zcbor_state_t *state, uint_fast32_t new_elem_count)
{
    7ca8:	b538      	push	{r3, r4, r5, lr}
	ZCBOR_CHECK_ERROR();

	if ((state->constant_state->current_backup)
    7caa:	6943      	ldr	r3, [r0, #20]
{
    7cac:	460d      	mov	r5, r1
	if ((state->constant_state->current_backup)
    7cae:	e9d3 1201 	ldrd	r1, r2, [r3, #4]
    7cb2:	4291      	cmp	r1, r2
{
    7cb4:	4604      	mov	r4, r0
    7cb6:	f04f 0000 	mov.w	r0, #0
	if ((state->constant_state->current_backup)
    7cba:	d302      	bcc.n	7cc2 <zcbor_new_backup+0x1a>
    7cbc:	2201      	movs	r2, #1
    7cbe:	60da      	str	r2, [r3, #12]
		sizeof(zcbor_state_t));

	state->elem_count = new_elem_count;

	return true;
}
    7cc0:	bd38      	pop	{r3, r4, r5, pc}
	state->payload_moved = false;
    7cc2:	7460      	strb	r0, [r4, #17]
	(state->constant_state->current_backup)++;
    7cc4:	685a      	ldr	r2, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    7cc6:	4621      	mov	r1, r4
	(state->constant_state->current_backup)++;
    7cc8:	3201      	adds	r2, #1
    7cca:	605a      	str	r2, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    7ccc:	2218      	movs	r2, #24
	uint_fast32_t i = (state->constant_state->current_backup) - 1;
    7cce:	6963      	ldr	r3, [r4, #20]
    7cd0:	6858      	ldr	r0, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    7cd2:	681b      	ldr	r3, [r3, #0]
	uint_fast32_t i = (state->constant_state->current_backup) - 1;
    7cd4:	3801      	subs	r0, #1
	memcpy(&state->constant_state->backup_list[i], state,
    7cd6:	fb02 3000 	mla	r0, r2, r0, r3
    7cda:	f7fd ffd2 	bl	5c82 <memcpy>
	return true;
    7cde:	2001      	movs	r0, #1
	state->elem_count = new_elem_count;
    7ce0:	60a5      	str	r5, [r4, #8]
	return true;
    7ce2:	e7ed      	b.n	7cc0 <zcbor_new_backup+0x18>

00007ce4 <zcbor_process_backup>:


bool zcbor_process_backup(zcbor_state_t *state, uint32_t flags,
		uint_fast32_t max_elem_count)
{
    7ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ce8:	4616      	mov	r6, r2
	const uint8_t *payload = state->payload;
	const uint_fast32_t elem_count = state->elem_count;

	ZCBOR_CHECK_ERROR();

	if (state->constant_state->current_backup == 0) {
    7cea:	6942      	ldr	r2, [r0, #20]
{
    7cec:	4604      	mov	r4, r0
	if (state->constant_state->current_backup == 0) {
    7cee:	6853      	ldr	r3, [r2, #4]
{
    7cf0:	460d      	mov	r5, r1
	const uint8_t *payload = state->payload;
    7cf2:	6807      	ldr	r7, [r0, #0]
	const uint_fast32_t elem_count = state->elem_count;
    7cf4:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (state->constant_state->current_backup == 0) {
    7cf8:	b923      	cbnz	r3, 7d04 <zcbor_process_backup+0x20>
    7cfa:	2302      	movs	r3, #2
    7cfc:	60d3      	str	r3, [r2, #12]
		zcbor_print("No backups available.\r\n");
		ZCBOR_ERR(ZCBOR_ERR_NO_BACKUP_ACTIVE);
    7cfe:	2000      	movs	r0, #0
	if (flags & ZCBOR_FLAG_TRANSFER_PAYLOAD) {
		state->payload = payload;
	}

	return true;
}
    7d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (flags & ZCBOR_FLAG_RESTORE) {
    7d04:	07e9      	lsls	r1, r5, #31
    7d06:	d50d      	bpl.n	7d24 <zcbor_process_backup+0x40>
			if (state->constant_state->backup_list[i].payload_moved) {
    7d08:	6811      	ldr	r1, [r2, #0]
    7d0a:	2218      	movs	r2, #24
		uint_fast32_t i = state->constant_state->current_backup - 1;
    7d0c:	3b01      	subs	r3, #1
		if (!(flags & ZCBOR_FLAG_TRANSFER_PAYLOAD)) {
    7d0e:	0768      	lsls	r0, r5, #29
			if (state->constant_state->backup_list[i].payload_moved) {
    7d10:	fb02 1103 	mla	r1, r2, r3, r1
		if (!(flags & ZCBOR_FLAG_TRANSFER_PAYLOAD)) {
    7d14:	d402      	bmi.n	7d1c <zcbor_process_backup+0x38>
			if (state->constant_state->backup_list[i].payload_moved) {
    7d16:	7c4b      	ldrb	r3, [r1, #17]
    7d18:	2b00      	cmp	r3, #0
    7d1a:	d1f0      	bne.n	7cfe <zcbor_process_backup+0x1a>
		memcpy(state, &state->constant_state->backup_list[i],
    7d1c:	2218      	movs	r2, #24
    7d1e:	4620      	mov	r0, r4
    7d20:	f7fd ffaf 	bl	5c82 <memcpy>
	if (flags & ZCBOR_FLAG_CONSUME) {
    7d24:	07aa      	lsls	r2, r5, #30
		state->constant_state->current_backup--;
    7d26:	bf41      	itttt	mi
    7d28:	6962      	ldrmi	r2, [r4, #20]
    7d2a:	6853      	ldrmi	r3, [r2, #4]
    7d2c:	f103 33ff 	addmi.w	r3, r3, #4294967295
    7d30:	6053      	strmi	r3, [r2, #4]
	if (elem_count > max_elem_count) {
    7d32:	45b0      	cmp	r8, r6
    7d34:	d905      	bls.n	7d42 <zcbor_process_backup+0x5e>
		ZCBOR_ERR(ZCBOR_ERR_HIGH_ELEM_COUNT);
    7d36:	6963      	ldr	r3, [r4, #20]
		if (state->constant_state) {
    7d38:	2b00      	cmp	r3, #0
    7d3a:	d0e0      	beq.n	7cfe <zcbor_process_backup+0x1a>
			state->constant_state->error = err;
    7d3c:	2204      	movs	r2, #4
    7d3e:	60da      	str	r2, [r3, #12]
    7d40:	e7dd      	b.n	7cfe <zcbor_process_backup+0x1a>
	if (flags & ZCBOR_FLAG_TRANSFER_PAYLOAD) {
    7d42:	076b      	lsls	r3, r5, #29
    7d44:	d401      	bmi.n	7d4a <zcbor_process_backup+0x66>
	return true;
    7d46:	2001      	movs	r0, #1
    7d48:	e7da      	b.n	7d00 <zcbor_process_backup+0x1c>
		state->payload = payload;
    7d4a:	6027      	str	r7, [r4, #0]
    7d4c:	e7fb      	b.n	7d46 <zcbor_process_backup+0x62>

00007d4e <zcbor_union_start_code>:
}


bool zcbor_union_start_code(zcbor_state_t *state)
{
	if (!zcbor_new_backup(state, state->elem_count)) {
    7d4e:	6881      	ldr	r1, [r0, #8]
    7d50:	f7ff bfaa 	b.w	7ca8 <zcbor_new_backup>

00007d54 <zcbor_union_elem_code>:
}


bool zcbor_union_elem_code(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state, ZCBOR_FLAG_RESTORE, state->elem_count)) {
    7d54:	2101      	movs	r1, #1
    7d56:	6882      	ldr	r2, [r0, #8]
    7d58:	f7ff bfc4 	b.w	7ce4 <zcbor_process_backup>

00007d5c <zcbor_union_end_code>:
	return true;
}

bool zcbor_union_end_code(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state, ZCBOR_FLAG_CONSUME, state->elem_count)) {
    7d5c:	2102      	movs	r1, #2
    7d5e:	6882      	ldr	r2, [r0, #8]
    7d60:	f7ff bfc0 	b.w	7ce4 <zcbor_process_backup>

00007d64 <zcbor_new_state>:
	return true;
}

void zcbor_new_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		const uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
    7d64:	b510      	push	{r4, lr}
	state_array[0].payload = payload;
    7d66:	6002      	str	r2, [r0, #0]
	state_array[0].payload_end = payload + payload_len;
    7d68:	441a      	add	r2, r3
    7d6a:	60c2      	str	r2, [r0, #12]
	state_array[0].elem_count = elem_count;
	state_array[0].indefinite_length_array = false;
    7d6c:	2200      	movs	r2, #0
	state_array[0].elem_count = elem_count;
    7d6e:	9b02      	ldr	r3, [sp, #8]
	state_array[0].payload_moved = false;
	state_array[0].constant_state = NULL;

	if(n_states < 2) {
    7d70:	2901      	cmp	r1, #1
	state_array[0].elem_count = elem_count;
    7d72:	6083      	str	r3, [r0, #8]
	state_array[0].indefinite_length_array = false;
    7d74:	8202      	strh	r2, [r0, #16]
	if(n_states < 2) {
    7d76:	d801      	bhi.n	7d7c <zcbor_new_state+0x18>
	state_array[0].constant_state = NULL;
    7d78:	6142      	str	r2, [r0, #20]
	state_array[0].constant_state->stop_on_error = false;
#endif
	if (n_states > 2) {
		state_array[0].constant_state->backup_list = &state_array[1];
	}
}
    7d7a:	bd10      	pop	{r4, pc}
	state_array[0].constant_state = (struct zcbor_state_constant *)&state_array[n_states - 1];
    7d7c:	2318      	movs	r3, #24
    7d7e:	434b      	muls	r3, r1
    7d80:	3b18      	subs	r3, #24
    7d82:	18c4      	adds	r4, r0, r3
    7d84:	6144      	str	r4, [r0, #20]
	state_array[0].constant_state->backup_list = NULL;
    7d86:	50c2      	str	r2, [r0, r3]
	state_array[0].constant_state->num_backups = n_states - 2;
    7d88:	6943      	ldr	r3, [r0, #20]
    7d8a:	1e8c      	subs	r4, r1, #2
    7d8c:	609c      	str	r4, [r3, #8]
	state_array[0].constant_state->current_backup = 0;
    7d8e:	6943      	ldr	r3, [r0, #20]
	if (n_states > 2) {
    7d90:	2902      	cmp	r1, #2
	state_array[0].constant_state->current_backup = 0;
    7d92:	605a      	str	r2, [r3, #4]
	state_array[0].constant_state->error = ZCBOR_SUCCESS;
    7d94:	6943      	ldr	r3, [r0, #20]
    7d96:	60da      	str	r2, [r3, #12]
		state_array[0].constant_state->backup_list = &state_array[1];
    7d98:	bf1e      	ittt	ne
    7d9a:	6943      	ldrne	r3, [r0, #20]
    7d9c:	3018      	addne	r0, #24
    7d9e:	6018      	strne	r0, [r3, #0]
    7da0:	e7eb      	b.n	7d7a <zcbor_new_state+0x16>

00007da2 <zcbor_error.isra.0>:
		if (state->constant_state) {
    7da2:	b100      	cbz	r0, 7da6 <zcbor_error.isra.0+0x4>
			state->constant_state->error = err;
    7da4:	60c1      	str	r1, [r0, #12]
		}
	}
}
    7da6:	4770      	bx	lr

00007da8 <initial_checks>:
		ZCBOR_ERR(err); \
	} \
} while(0)

static bool initial_checks(zcbor_state_t *state)
{
    7da8:	b508      	push	{r3, lr}
	ZCBOR_CHECK_ERROR();
	ZCBOR_CHECK_PAYLOAD();
    7daa:	6802      	ldr	r2, [r0, #0]
    7dac:	68c3      	ldr	r3, [r0, #12]
    7dae:	429a      	cmp	r2, r3
    7db0:	d305      	bcc.n	7dbe <initial_checks+0x16>
    7db2:	6940      	ldr	r0, [r0, #20]
    7db4:	2108      	movs	r1, #8
    7db6:	f7ff fff4 	bl	7da2 <zcbor_error.isra.0>
    7dba:	2000      	movs	r0, #0
	return true;
}
    7dbc:	bd08      	pop	{r3, pc}
	return true;
    7dbe:	2001      	movs	r0, #1
    7dc0:	e7fc      	b.n	7dbc <initial_checks+0x14>

00007dc2 <type_check>:

static bool type_check(zcbor_state_t *state, zcbor_major_type_t exp_major_type)
{
    7dc2:	b538      	push	{r3, r4, r5, lr}
    7dc4:	4604      	mov	r4, r0
    7dc6:	460d      	mov	r5, r1
	if (!initial_checks(state)) {
    7dc8:	f7ff ffee 	bl	7da8 <initial_checks>
    7dcc:	b140      	cbz	r0, 7de0 <type_check+0x1e>
		ZCBOR_FAIL();
	}
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
    7dce:	6823      	ldr	r3, [r4, #0]
    7dd0:	781b      	ldrb	r3, [r3, #0]

	if (major_type != exp_major_type) {
    7dd2:	ebb5 1f53 	cmp.w	r5, r3, lsr #5
    7dd6:	d004      	beq.n	7de2 <type_check+0x20>
		ZCBOR_ERR(ZCBOR_ERR_WRONG_TYPE);
    7dd8:	210a      	movs	r1, #10
    7dda:	6960      	ldr	r0, [r4, #20]
    7ddc:	f7ff ffe1 	bl	7da2 <zcbor_error.isra.0>
		ZCBOR_FAIL();
    7de0:	2000      	movs	r0, #0
	}
	return true;
}
    7de2:	bd38      	pop	{r3, r4, r5, pc}

00007de4 <list_map_end_decode>:
	return true;
}


static bool list_map_end_decode(zcbor_state_t *state)
{
    7de4:	b510      	push	{r4, lr}
	uint_fast32_t max_elem_count = 0;

	if (state->indefinite_length_array) {
    7de6:	7c02      	ldrb	r2, [r0, #16]
{
    7de8:	4604      	mov	r4, r0
	if (state->indefinite_length_array) {
    7dea:	b192      	cbz	r2, 7e12 <list_map_end_decode+0x2e>
	INITIAL_CHECKS();
    7dec:	f7ff ffdc 	bl	7da8 <initial_checks>
    7df0:	b138      	cbz	r0, 7e02 <list_map_end_decode+0x1e>
	ZCBOR_ERR_IF(*state->payload != 0xFF, ZCBOR_ERR_WRONG_TYPE);
    7df2:	6823      	ldr	r3, [r4, #0]
    7df4:	781a      	ldrb	r2, [r3, #0]
    7df6:	2aff      	cmp	r2, #255	; 0xff
    7df8:	d005      	beq.n	7e06 <list_map_end_decode+0x22>
    7dfa:	210a      	movs	r1, #10
    7dfc:	6960      	ldr	r0, [r4, #20]
    7dfe:	f7ff ffd0 	bl	7da2 <zcbor_error.isra.0>
			max_elem_count)) {
		ZCBOR_FAIL();
	}

	return true;
}
    7e02:	2000      	movs	r0, #0
    7e04:	bd10      	pop	{r4, pc}
	state->payload++;
    7e06:	3301      	adds	r3, #1
    7e08:	6023      	str	r3, [r4, #0]
		state->indefinite_length_array = false;
    7e0a:	2300      	movs	r3, #0
		max_elem_count = ZCBOR_MAX_ELEM_COUNT;
    7e0c:	f04f 32ff 	mov.w	r2, #4294967295
		state->indefinite_length_array = false;
    7e10:	7423      	strb	r3, [r4, #16]
	if (!zcbor_process_backup(state,
    7e12:	4620      	mov	r0, r4
}
    7e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!zcbor_process_backup(state,
    7e18:	2107      	movs	r1, #7
    7e1a:	f7ff bf63 	b.w	7ce4 <zcbor_process_backup>

00007e1e <value_extract>:
{
    7e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e22:	4604      	mov	r4, r0
    7e24:	460d      	mov	r5, r1
    7e26:	4617      	mov	r7, r2
	INITIAL_CHECKS();
    7e28:	f7ff ffbe 	bl	7da8 <initial_checks>
    7e2c:	4680      	mov	r8, r0
    7e2e:	b128      	cbz	r0, 7e3c <value_extract+0x1e>
	ZCBOR_ERR_IF((state->elem_count == 0), ZCBOR_ERR_LOW_ELEM_COUNT);
    7e30:	68a3      	ldr	r3, [r4, #8]
    7e32:	b943      	cbnz	r3, 7e46 <value_extract+0x28>
    7e34:	2103      	movs	r1, #3
    7e36:	6960      	ldr	r0, [r4, #20]
    7e38:	f7ff ffb3 	bl	7da2 <zcbor_error.isra.0>
	INITIAL_CHECKS();
    7e3c:	f04f 0800 	mov.w	r8, #0
}
    7e40:	4640      	mov	r0, r8
    7e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t additional = ADDITIONAL(*state->payload);
    7e46:	6823      	ldr	r3, [r4, #0]
	memset(result, 0, result_len);
    7e48:	463a      	mov	r2, r7
	uint8_t additional = ADDITIONAL(*state->payload);
    7e4a:	781e      	ldrb	r6, [r3, #0]
	state->payload_bak = state->payload;
    7e4c:	6063      	str	r3, [r4, #4]
	(state->payload)++;
    7e4e:	3301      	adds	r3, #1
	memset(result, 0, result_len);
    7e50:	2100      	movs	r1, #0
    7e52:	4628      	mov	r0, r5
	uint8_t additional = ADDITIONAL(*state->payload);
    7e54:	f006 061f 	and.w	r6, r6, #31
	(state->payload)++;
    7e58:	6023      	str	r3, [r4, #0]
	memset(result, 0, result_len);
    7e5a:	f7fd ff1d 	bl	5c98 <memset>
	if (additional <= ZCBOR_VALUE_IN_HEADER) {
    7e5e:	2e17      	cmp	r6, #23
    7e60:	d804      	bhi.n	7e6c <value_extract+0x4e>
		u8_result[0] = additional;
    7e62:	702e      	strb	r6, [r5, #0]
	(state->elem_count)--;
    7e64:	68a3      	ldr	r3, [r4, #8]
    7e66:	3b01      	subs	r3, #1
    7e68:	60a3      	str	r3, [r4, #8]
	return true;
    7e6a:	e7e9      	b.n	7e40 <value_extract+0x22>
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
    7e6c:	3e18      	subs	r6, #24
    7e6e:	b2f2      	uxtb	r2, r6
    7e70:	2a03      	cmp	r2, #3
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
    7e72:	6823      	ldr	r3, [r4, #0]
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
    7e74:	d807      	bhi.n	7e86 <value_extract+0x68>
		return 1U << (additional - ZCBOR_VALUE_IS_1_BYTE);
    7e76:	2101      	movs	r1, #1
    7e78:	40b1      	lsls	r1, r6
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
    7e7a:	428f      	cmp	r7, r1
    7e7c:	d207      	bcs.n	7e8e <value_extract+0x70>
    7e7e:	3b01      	subs	r3, #1
    7e80:	2105      	movs	r1, #5
    7e82:	6023      	str	r3, [r4, #0]
    7e84:	e7d7      	b.n	7e36 <value_extract+0x18>
		FAIL_AND_DECR_IF(len == 0, ZCBOR_ERR_ADDITIONAL_INVAL); // additional_len() did not recognize the additional value.
    7e86:	3b01      	subs	r3, #1
    7e88:	2107      	movs	r1, #7
    7e8a:	6023      	str	r3, [r4, #0]
    7e8c:	e7d3      	b.n	7e36 <value_extract+0x18>
		FAIL_AND_DECR_IF((state->payload + len) > state->payload_end,
    7e8e:	68e0      	ldr	r0, [r4, #12]
    7e90:	185a      	adds	r2, r3, r1
    7e92:	4290      	cmp	r0, r2
    7e94:	d203      	bcs.n	7e9e <value_extract+0x80>
    7e96:	3b01      	subs	r3, #1
    7e98:	2108      	movs	r1, #8
    7e9a:	6023      	str	r3, [r4, #0]
    7e9c:	e7cb      	b.n	7e36 <value_extract+0x18>
    7e9e:	1e4b      	subs	r3, r1, #1
    7ea0:	3d01      	subs	r5, #1
			u8_result[i] = (state->payload)[len - i - 1];
    7ea2:	6822      	ldr	r2, [r4, #0]
    7ea4:	5cd2      	ldrb	r2, [r2, r3]
		for (uint_fast32_t i = 0; i < len; i++) {
    7ea6:	3b01      	subs	r3, #1
			u8_result[i] = (state->payload)[len - i - 1];
    7ea8:	f805 2f01 	strb.w	r2, [r5, #1]!
		for (uint_fast32_t i = 0; i < len; i++) {
    7eac:	d2f9      	bcs.n	7ea2 <__kernel_ram_size+0x2>
		(state->payload) += len;
    7eae:	6823      	ldr	r3, [r4, #0]
    7eb0:	440b      	add	r3, r1
    7eb2:	6023      	str	r3, [r4, #0]
    7eb4:	e7d6      	b.n	7e64 <value_extract+0x46>

00007eb6 <str_start_decode>:
{
    7eb6:	b538      	push	{r3, r4, r5, lr}
    7eb8:	460c      	mov	r4, r1
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    7eba:	4611      	mov	r1, r2
{
    7ebc:	4605      	mov	r5, r0
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    7ebe:	f7ff ff80 	bl	7dc2 <type_check>
    7ec2:	b908      	cbnz	r0, 7ec8 <str_start_decode+0x12>
    7ec4:	2000      	movs	r0, #0
}
    7ec6:	bd38      	pop	{r3, r4, r5, pc}
	if (!value_extract(state, &result->len, sizeof(result->len))) {
    7ec8:	2204      	movs	r2, #4
    7eca:	4628      	mov	r0, r5
    7ecc:	18a1      	adds	r1, r4, r2
    7ece:	f7ff ffa6 	bl	7e1e <value_extract>
    7ed2:	2800      	cmp	r0, #0
    7ed4:	d0f6      	beq.n	7ec4 <str_start_decode+0xe>
	result->value = state->payload;
    7ed6:	682b      	ldr	r3, [r5, #0]
    7ed8:	6023      	str	r3, [r4, #0]
	return true;
    7eda:	e7f4      	b.n	7ec6 <str_start_decode+0x10>

00007edc <list_map_start_decode>:
{
    7edc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7ede:	4604      	mov	r4, r0
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    7ee0:	f7ff ff6f 	bl	7dc2 <type_check>
    7ee4:	4605      	mov	r5, r0
    7ee6:	b170      	cbz	r0, 7f06 <list_map_start_decode+0x2a>
	if (ADDITIONAL(*state->payload) == ZCBOR_VALUE_IS_INDEFINITE_LENGTH) {
    7ee8:	6822      	ldr	r2, [r4, #0]
    7eea:	7813      	ldrb	r3, [r2, #0]
    7eec:	f003 031f 	and.w	r3, r3, #31
    7ef0:	2b1f      	cmp	r3, #31
    7ef2:	d11a      	bne.n	7f2a <list_map_start_decode+0x4e>
		new_elem_count = ZCBOR_LARGE_ELEM_COUNT;
    7ef4:	f06f 0310 	mvn.w	r3, #16
    7ef8:	9301      	str	r3, [sp, #4]
		ZCBOR_ERR_IF(state->elem_count == 0, ZCBOR_ERR_LOW_ELEM_COUNT);
    7efa:	68a3      	ldr	r3, [r4, #8]
    7efc:	b933      	cbnz	r3, 7f0c <list_map_start_decode+0x30>
    7efe:	2103      	movs	r1, #3
    7f00:	6960      	ldr	r0, [r4, #20]
    7f02:	f7ff ff4e 	bl	7da2 <zcbor_error.isra.0>
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    7f06:	2000      	movs	r0, #0
}
    7f08:	b003      	add	sp, #12
    7f0a:	bd30      	pop	{r4, r5, pc}
		state->payload++;
    7f0c:	3201      	adds	r2, #1
		state->elem_count--;
    7f0e:	3b01      	subs	r3, #1
		state->payload++;
    7f10:	6022      	str	r2, [r4, #0]
		state->elem_count--;
    7f12:	60a3      	str	r3, [r4, #8]
	if (!zcbor_new_backup(state, new_elem_count)) {
    7f14:	4620      	mov	r0, r4
    7f16:	9901      	ldr	r1, [sp, #4]
    7f18:	f7ff fec6 	bl	7ca8 <zcbor_new_backup>
    7f1c:	b978      	cbnz	r0, 7f3e <list_map_start_decode+0x62>
		FAIL_RESTORE();
    7f1e:	6863      	ldr	r3, [r4, #4]
    7f20:	6023      	str	r3, [r4, #0]
    7f22:	68a3      	ldr	r3, [r4, #8]
    7f24:	3301      	adds	r3, #1
    7f26:	60a3      	str	r3, [r4, #8]
    7f28:	e7ed      	b.n	7f06 <list_map_start_decode+0x2a>
		if (!value_extract(state, &new_elem_count, sizeof(new_elem_count))) {
    7f2a:	2204      	movs	r2, #4
    7f2c:	4620      	mov	r0, r4
    7f2e:	eb0d 0102 	add.w	r1, sp, r2
    7f32:	f7ff ff74 	bl	7e1e <value_extract>
    7f36:	2800      	cmp	r0, #0
    7f38:	d0e5      	beq.n	7f06 <list_map_start_decode+0x2a>
	bool indefinite_length_array = false;
    7f3a:	2500      	movs	r5, #0
    7f3c:	e7ea      	b.n	7f14 <list_map_start_decode+0x38>
	state->indefinite_length_array = indefinite_length_array;
    7f3e:	7425      	strb	r5, [r4, #16]
	return true;
    7f40:	e7e2      	b.n	7f08 <list_map_start_decode+0x2c>

00007f42 <str_decode>:
{
    7f42:	b538      	push	{r3, r4, r5, lr}
    7f44:	4604      	mov	r4, r0
    7f46:	460d      	mov	r5, r1
	if (!str_start_decode(state, result, exp_major_type)) {
    7f48:	f7ff ffb5 	bl	7eb6 <str_start_decode>
    7f4c:	b188      	cbz	r0, 7f72 <str_decode+0x30>
	if (result->len > (state->payload_end - state->payload)) {
    7f4e:	6823      	ldr	r3, [r4, #0]
    7f50:	68e2      	ldr	r2, [r4, #12]
    7f52:	6869      	ldr	r1, [r5, #4]
    7f54:	1ad2      	subs	r2, r2, r3
    7f56:	4291      	cmp	r1, r2
    7f58:	d802      	bhi.n	7f60 <str_decode+0x1e>
	state->payload += result->len;
    7f5a:	440b      	add	r3, r1
    7f5c:	6023      	str	r3, [r4, #0]
}
    7f5e:	bd38      	pop	{r3, r4, r5, pc}
		ERR_RESTORE(ZCBOR_ERR_NO_PAYLOAD);
    7f60:	6863      	ldr	r3, [r4, #4]
    7f62:	2108      	movs	r1, #8
    7f64:	6023      	str	r3, [r4, #0]
    7f66:	68a3      	ldr	r3, [r4, #8]
    7f68:	6960      	ldr	r0, [r4, #20]
    7f6a:	3301      	adds	r3, #1
    7f6c:	60a3      	str	r3, [r4, #8]
    7f6e:	f7ff ff18 	bl	7da2 <zcbor_error.isra.0>
		ZCBOR_FAIL();
    7f72:	2000      	movs	r0, #0
    7f74:	e7f3      	b.n	7f5e <str_decode+0x1c>

00007f76 <str_expect>:
{
    7f76:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7f78:	460e      	mov	r6, r1
	if (!str_decode(state, &tmp_result, exp_major_type)) {
    7f7a:	4669      	mov	r1, sp
{
    7f7c:	4604      	mov	r4, r0
	if (!str_decode(state, &tmp_result, exp_major_type)) {
    7f7e:	f7ff ffe0 	bl	7f42 <str_decode>
    7f82:	4605      	mov	r5, r0
    7f84:	b160      	cbz	r0, 7fa0 <str_expect+0x2a>
	if ((tmp_result.len != result->len)
    7f86:	9a01      	ldr	r2, [sp, #4]
    7f88:	6873      	ldr	r3, [r6, #4]
    7f8a:	429a      	cmp	r2, r3
    7f8c:	d00c      	beq.n	7fa8 <str_expect+0x32>
		ERR_RESTORE(ZCBOR_ERR_WRONG_VALUE);
    7f8e:	6863      	ldr	r3, [r4, #4]
    7f90:	210b      	movs	r1, #11
    7f92:	6023      	str	r3, [r4, #0]
    7f94:	68a3      	ldr	r3, [r4, #8]
    7f96:	6960      	ldr	r0, [r4, #20]
    7f98:	3301      	adds	r3, #1
    7f9a:	60a3      	str	r3, [r4, #8]
    7f9c:	f7ff ff01 	bl	7da2 <zcbor_error.isra.0>
		ZCBOR_FAIL();
    7fa0:	2500      	movs	r5, #0
}
    7fa2:	4628      	mov	r0, r5
    7fa4:	b002      	add	sp, #8
    7fa6:	bd70      	pop	{r4, r5, r6, pc}
			|| memcmp(result->value, tmp_result.value, tmp_result.len)) {
    7fa8:	9900      	ldr	r1, [sp, #0]
    7faa:	6830      	ldr	r0, [r6, #0]
    7fac:	f7fd fe42 	bl	5c34 <memcmp>
    7fb0:	2800      	cmp	r0, #0
    7fb2:	d0f6      	beq.n	7fa2 <str_expect+0x2c>
    7fb4:	e7eb      	b.n	7f8e <str_expect+0x18>

00007fb6 <zcbor_int_decode>:
{
    7fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7fb8:	4605      	mov	r5, r0
    7fba:	460c      	mov	r4, r1
    7fbc:	4616      	mov	r6, r2
	INITIAL_CHECKS();
    7fbe:	f7ff fef3 	bl	7da8 <initial_checks>
    7fc2:	b148      	cbz	r0, 7fd8 <zcbor_int_decode+0x22>
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
    7fc4:	682b      	ldr	r3, [r5, #0]
    7fc6:	781b      	ldrb	r3, [r3, #0]
	if (major_type != ZCBOR_MAJOR_TYPE_PINT
    7fc8:	2b3f      	cmp	r3, #63	; 0x3f
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
    7fca:	ea4f 1753 	mov.w	r7, r3, lsr #5
	if (major_type != ZCBOR_MAJOR_TYPE_PINT
    7fce:	d905      	bls.n	7fdc <zcbor_int_decode+0x26>
		ZCBOR_ERR(ZCBOR_ERR_WRONG_TYPE);
    7fd0:	210a      	movs	r1, #10
		ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    7fd2:	6968      	ldr	r0, [r5, #20]
    7fd4:	f7ff fee5 	bl	7da2 <zcbor_error.isra.0>
	INITIAL_CHECKS();
    7fd8:	2000      	movs	r0, #0
    7fda:	e017      	b.n	800c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
	if (!value_extract(state, result_int, int_size)) {
    7fdc:	4632      	mov	r2, r6
    7fde:	4621      	mov	r1, r4
    7fe0:	4628      	mov	r0, r5
    7fe2:	f7ff ff1c 	bl	7e1e <value_extract>
    7fe6:	2800      	cmp	r0, #0
    7fe8:	d0f6      	beq.n	7fd8 <zcbor_int_decode+0x22>
	if (result_int8[int_size - 1] < 0) {
    7fea:	4426      	add	r6, r4
    7fec:	f916 3c01 	ldrsb.w	r3, [r6, #-1]
    7ff0:	2b00      	cmp	r3, #0
    7ff2:	da06      	bge.n	8002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
		ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    7ff4:	686b      	ldr	r3, [r5, #4]
    7ff6:	2105      	movs	r1, #5
    7ff8:	602b      	str	r3, [r5, #0]
    7ffa:	68ab      	ldr	r3, [r5, #8]
    7ffc:	3301      	adds	r3, #1
    7ffe:	60ab      	str	r3, [r5, #8]
    8000:	e7e7      	b.n	7fd2 <zcbor_int_decode+0x1c>
	if (major_type == ZCBOR_MAJOR_TYPE_NINT) {
    8002:	2f01      	cmp	r7, #1
    8004:	d102      	bne.n	800c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
    8006:	4621      	mov	r1, r4
		for (int i = 0; i < int_size; i++) {
    8008:	42b1      	cmp	r1, r6
    800a:	d100      	bne.n	800e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
}
    800c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			result_uint8[i] = (uint8_t)~result_uint8[i];
    800e:	780b      	ldrb	r3, [r1, #0]
    8010:	43db      	mvns	r3, r3
    8012:	f801 3b01 	strb.w	r3, [r1], #1
		for (int i = 0; i < int_size; i++) {
    8016:	e7f7      	b.n	8008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>

00008018 <zcbor_int32_decode>:
	return zcbor_int_decode(state, result, sizeof(*result));
    8018:	2204      	movs	r2, #4
    801a:	f7ff bfcc 	b.w	7fb6 <zcbor_int_decode>

0000801e <zcbor_bstr_decode>:
	return str_decode(state, result, ZCBOR_MAJOR_TYPE_BSTR);
    801e:	2202      	movs	r2, #2
    8020:	f7ff bf8f 	b.w	7f42 <str_decode>

00008024 <zcbor_tstr_expect>:
	return str_expect(state, result, ZCBOR_MAJOR_TYPE_TSTR);
    8024:	2203      	movs	r2, #3
    8026:	f7ff bfa6 	b.w	7f76 <str_expect>

0000802a <zcbor_map_start_decode>:
{
    802a:	b510      	push	{r4, lr}
	bool ret = list_map_start_decode(state, ZCBOR_MAJOR_TYPE_MAP);
    802c:	2105      	movs	r1, #5
{
    802e:	4604      	mov	r4, r0
	bool ret = list_map_start_decode(state, ZCBOR_MAJOR_TYPE_MAP);
    8030:	f7ff ff54 	bl	7edc <list_map_start_decode>
	if (ret && !state->indefinite_length_array) {
    8034:	b170      	cbz	r0, 8054 <zcbor_map_start_decode+0x2a>
    8036:	7c23      	ldrb	r3, [r4, #16]
    8038:	b96b      	cbnz	r3, 8056 <zcbor_map_start_decode+0x2c>
		if (state->elem_count >= (ZCBOR_MAX_ELEM_COUNT / 2)) {
    803a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    803e:	68a3      	ldr	r3, [r4, #8]
    8040:	4293      	cmp	r3, r2
    8042:	d309      	bcc.n	8058 <zcbor_map_start_decode+0x2e>
			ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    8044:	6862      	ldr	r2, [r4, #4]
    8046:	3301      	adds	r3, #1
    8048:	2105      	movs	r1, #5
    804a:	6960      	ldr	r0, [r4, #20]
    804c:	6022      	str	r2, [r4, #0]
    804e:	60a3      	str	r3, [r4, #8]
    8050:	f7ff fea7 	bl	7da2 <zcbor_error.isra.0>
    8054:	2000      	movs	r0, #0
}
    8056:	bd10      	pop	{r4, pc}
		state->elem_count *= 2;
    8058:	005b      	lsls	r3, r3, #1
    805a:	60a3      	str	r3, [r4, #8]
    805c:	e7fb      	b.n	8056 <zcbor_map_start_decode+0x2c>

0000805e <zcbor_map_end_decode>:
{
	return list_map_end_decode(state);
}


bool zcbor_map_end_decode(zcbor_state_t *state)
    805e:	f7ff bec1 	b.w	7de4 <list_map_end_decode>

00008062 <zcbor_list_map_end_force_decode>:
}


bool zcbor_list_map_end_force_decode(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state,
    8062:	f04f 32ff 	mov.w	r2, #4294967295
    8066:	2107      	movs	r1, #7
    8068:	f7ff be3c 	b.w	7ce4 <zcbor_process_backup>

0000806c <zcbor_multi_decode>:
		uint_fast32_t *num_decode,
		zcbor_decoder_t decoder,
		zcbor_state_t *state,
		void *result,
		uint_fast32_t result_len)
{
    806c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8070:	4682      	mov	sl, r0
    8072:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
    8076:	4689      	mov	r9, r1
    8078:	4690      	mov	r8, r2
    807a:	469b      	mov	fp, r3
	ZCBOR_CHECK_ERROR();
	for (uint_fast32_t i = 0; i < max_decode; i++) {
    807c:	2400      	movs	r4, #0
    807e:	454c      	cmp	r4, r9
    8080:	d103      	bne.n	808a <zcbor_multi_decode+0x1e>
			zcbor_print("Found %" PRIuFAST32 " elements.\r\n", i);
			return true;
		}
	}
	zcbor_print("Found %" PRIuFAST32 " elements.\r\n", max_decode);
	*num_decode = max_decode;
    8082:	f8c8 4000 	str.w	r4, [r8]
			return true;
    8086:	2601      	movs	r6, #1
    8088:	e016      	b.n	80b8 <zcbor_multi_decode+0x4c>
		uint8_t const *payload_bak = state->payload;
    808a:	682a      	ldr	r2, [r5, #0]
		uint_fast32_t elem_count_bak = state->elem_count;
    808c:	68ab      	ldr	r3, [r5, #8]
		if (!decoder(state,
    808e:	4639      	mov	r1, r7
    8090:	4628      	mov	r0, r5
		uint8_t const *payload_bak = state->payload;
    8092:	9201      	str	r2, [sp, #4]
		uint_fast32_t elem_count_bak = state->elem_count;
    8094:	9300      	str	r3, [sp, #0]
		if (!decoder(state,
    8096:	47d8      	blx	fp
    8098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    809a:	4606      	mov	r6, r0
    809c:	441f      	add	r7, r3
    809e:	e9dd 3200 	ldrd	r3, r2, [sp]
    80a2:	b968      	cbnz	r0, 80c0 <zcbor_multi_decode+0x54>
			ZCBOR_ERR_IF(i < min_decode, ZCBOR_ERR_ITERATIONS);
    80a4:	4554      	cmp	r4, sl
			*num_decode = i;
    80a6:	f8c8 4000 	str.w	r4, [r8]
			state->payload = payload_bak;
    80aa:	602a      	str	r2, [r5, #0]
			state->elem_count = elem_count_bak;
    80ac:	60ab      	str	r3, [r5, #8]
			ZCBOR_ERR_IF(i < min_decode, ZCBOR_ERR_ITERATIONS);
    80ae:	d2ea      	bcs.n	8086 <zcbor_multi_decode+0x1a>
    80b0:	210d      	movs	r1, #13
    80b2:	6968      	ldr	r0, [r5, #20]
    80b4:	f7ff fe75 	bl	7da2 <zcbor_error.isra.0>
	return true;
}
    80b8:	4630      	mov	r0, r6
    80ba:	b003      	add	sp, #12
    80bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint_fast32_t i = 0; i < max_decode; i++) {
    80c0:	3401      	adds	r4, #1
    80c2:	e7dc      	b.n	807e <zcbor_multi_decode+0x12>

000080c4 <encode_header_byte>:
{
    80c4:	b510      	push	{r4, lr}
	ZCBOR_CHECK_PAYLOAD();
    80c6:	6803      	ldr	r3, [r0, #0]
    80c8:	68c4      	ldr	r4, [r0, #12]
    80ca:	42a3      	cmp	r3, r4
    80cc:	d305      	bcc.n	80da <encode_header_byte+0x16>
    80ce:	6943      	ldr	r3, [r0, #20]
		if (state->constant_state) {
    80d0:	b10b      	cbz	r3, 80d6 <encode_header_byte+0x12>
			state->constant_state->error = err;
    80d2:	2208      	movs	r2, #8
    80d4:	60da      	str	r2, [r3, #12]
    80d6:	2000      	movs	r0, #0
}
    80d8:	bd10      	pop	{r4, pc}
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    80da:	f002 021f 	and.w	r2, r2, #31
    80de:	1c5c      	adds	r4, r3, #1
    80e0:	ea42 1141 	orr.w	r1, r2, r1, lsl #5
    80e4:	6004      	str	r4, [r0, #0]
	return true;
    80e6:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    80e8:	7019      	strb	r1, [r3, #0]
	return true;
    80ea:	e7f5      	b.n	80d8 <encode_header_byte+0x14>

000080ec <value_encode>:
}


static bool value_encode(zcbor_state_t *state, zcbor_major_type_t major_type,
		const void *const input, uint_fast32_t max_result_len)
{
    80ec:	b570      	push	{r4, r5, r6, lr}
    80ee:	4605      	mov	r5, r0
    80f0:	460e      	mov	r6, r1
	zcbor_assert_state(max_result_len != 0, "0-length result not supported.\r\n");

	uint_fast32_t result_len = get_result_len(input, max_result_len);
    80f2:	4610      	mov	r0, r2
    80f4:	4619      	mov	r1, r3
{
    80f6:	4614      	mov	r4, r2
	uint_fast32_t result_len = get_result_len(input, max_result_len);
    80f8:	f7fc fd28 	bl	4b4c <get_result_len>
	const void *const result = get_result(input, max_result_len, result_len);

	return value_encode_len(state, major_type, result, result_len);
    80fc:	4622      	mov	r2, r4
	uint_fast32_t result_len = get_result_len(input, max_result_len);
    80fe:	4603      	mov	r3, r0
	return value_encode_len(state, major_type, result, result_len);
    8100:	4631      	mov	r1, r6
    8102:	4628      	mov	r0, r5
}
    8104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return value_encode_len(state, major_type, result, result_len);
    8108:	f7fc bd36 	b.w	4b78 <value_encode_len>

0000810c <str_encode>:
}


static bool str_encode(zcbor_state_t *state,
		const struct zcbor_string *input, zcbor_major_type_t major_type)
{
    810c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (input->len > (state->payload_end - state->payload)) {
    8110:	f8d0 900c 	ldr.w	r9, [r0, #12]
    8114:	6805      	ldr	r5, [r0, #0]
    8116:	f8d1 a004 	ldr.w	sl, [r1, #4]
    811a:	eba9 0305 	sub.w	r3, r9, r5
    811e:	459a      	cmp	sl, r3
{
    8120:	4604      	mov	r4, r0
    8122:	460e      	mov	r6, r1
    8124:	4690      	mov	r8, r2
	if (input->len > (state->payload_end - state->payload)) {
    8126:	d907      	bls.n	8138 <str_encode+0x2c>
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
    8128:	6963      	ldr	r3, [r4, #20]
		if (state->constant_state) {
    812a:	b10b      	cbz	r3, 8130 <str_encode+0x24>
			state->constant_state->error = err;
    812c:	2208      	movs	r2, #8
    812e:	60da      	str	r2, [r3, #12]
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
    8130:	2500      	movs	r5, #0
		 * because of bstrx_cbor_start_encode/bstrx_cbor_end_encode. */
		memmove(state->payload_mut, input->value, input->len);
	}
	state->payload += input->len;
	return true;
}
    8132:	4628      	mov	r0, r5
    8134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    8138:	460f      	mov	r7, r1
    813a:	f857 3b04 	ldr.w	r3, [r7], #4
    813e:	b143      	cbz	r3, 8152 <str_encode+0x46>
    8140:	2104      	movs	r1, #4
    8142:	4638      	mov	r0, r7
    8144:	f7fc fd02 	bl	4b4c <get_result_len>
			+ 1 + input->len + (size_t)state->payload)
    8148:	4455      	add	r5, sl
    814a:	3501      	adds	r5, #1
    814c:	4405      	add	r5, r0
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    814e:	45a9      	cmp	r9, r5
    8150:	d3ea      	bcc.n	8128 <str_encode+0x1c>
	if (!value_encode(state, major_type, &input->len, sizeof(input->len))) {
    8152:	2304      	movs	r3, #4
    8154:	463a      	mov	r2, r7
    8156:	4641      	mov	r1, r8
    8158:	4620      	mov	r0, r4
    815a:	f7ff ffc7 	bl	80ec <value_encode>
    815e:	4605      	mov	r5, r0
    8160:	2800      	cmp	r0, #0
    8162:	d0e5      	beq.n	8130 <str_encode+0x24>
	if (state->payload_mut != input->value) {
    8164:	6820      	ldr	r0, [r4, #0]
    8166:	6831      	ldr	r1, [r6, #0]
    8168:	4288      	cmp	r0, r1
    816a:	d002      	beq.n	8172 <str_encode+0x66>
		memmove(state->payload_mut, input->value, input->len);
    816c:	6872      	ldr	r2, [r6, #4]
    816e:	f7fd fd71 	bl	5c54 <memmove>
	state->payload += input->len;
    8172:	6823      	ldr	r3, [r4, #0]
    8174:	6872      	ldr	r2, [r6, #4]
    8176:	4413      	add	r3, r2
    8178:	6023      	str	r3, [r4, #0]
	return true;
    817a:	e7da      	b.n	8132 <str_encode+0x26>

0000817c <zcbor_int_encode>:
	if (int_size > sizeof(int64_t)) {
    817c:	2a08      	cmp	r2, #8
{
    817e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8180:	4613      	mov	r3, r2
    8182:	460c      	mov	r4, r1
	if (int_size > sizeof(int64_t)) {
    8184:	d907      	bls.n	8196 <zcbor_int_encode+0x1a>
		ZCBOR_ERR(ZCBOR_ERR_INT_SIZE);
    8186:	6943      	ldr	r3, [r0, #20]
		if (state->constant_state) {
    8188:	b913      	cbnz	r3, 8190 <zcbor_int_encode+0x14>
    818a:	2000      	movs	r0, #0
}
    818c:	b002      	add	sp, #8
    818e:	bd70      	pop	{r4, r5, r6, pc}
			state->constant_state->error = err;
    8190:	2205      	movs	r2, #5
    8192:	60da      	str	r2, [r3, #12]
    8194:	e7f9      	b.n	818a <zcbor_int_encode+0xe>
	if (input_int8[int_size - 1] < 0) {
    8196:	188e      	adds	r6, r1, r2
    8198:	f916 2c01 	ldrsb.w	r2, [r6, #-1]
    819c:	2a00      	cmp	r2, #0
    819e:	da0f      	bge.n	81c0 <zcbor_int_encode+0x44>
    81a0:	460a      	mov	r2, r1
    81a2:	4669      	mov	r1, sp
    81a4:	460c      	mov	r4, r1
		for (int i = 0; i < int_size; i++) {
    81a6:	42b2      	cmp	r2, r6
    81a8:	d104      	bne.n	81b4 <zcbor_int_encode+0x38>
		major_type = ZCBOR_MAJOR_TYPE_NINT;
    81aa:	2101      	movs	r1, #1
	if (!value_encode(state, major_type, input, int_size)) {
    81ac:	4622      	mov	r2, r4
    81ae:	f7ff ff9d 	bl	80ec <value_encode>
    81b2:	e7eb      	b.n	818c <zcbor_int_encode+0x10>
			input_buf[i] = (uint8_t)~input_uint8[i];
    81b4:	f812 5b01 	ldrb.w	r5, [r2], #1
    81b8:	43ed      	mvns	r5, r5
    81ba:	f801 5b01 	strb.w	r5, [r1], #1
		for (int i = 0; i < int_size; i++) {
    81be:	e7f2      	b.n	81a6 <zcbor_int_encode+0x2a>
		major_type = ZCBOR_MAJOR_TYPE_PINT;
    81c0:	2100      	movs	r1, #0
    81c2:	e7f3      	b.n	81ac <zcbor_int_encode+0x30>

000081c4 <zcbor_int32_put>:
{
    81c4:	b507      	push	{r0, r1, r2, lr}
	return zcbor_int_encode(state, &input, sizeof(input));
    81c6:	2204      	movs	r2, #4
{
    81c8:	9101      	str	r1, [sp, #4]
	return zcbor_int_encode(state, &input, sizeof(input));
    81ca:	eb0d 0102 	add.w	r1, sp, r2
    81ce:	f7ff ffd5 	bl	817c <zcbor_int_encode>
}
    81d2:	b003      	add	sp, #12
    81d4:	f85d fb04 	ldr.w	pc, [sp], #4

000081d8 <zcbor_uint32_put>:
{
    81d8:	b507      	push	{r0, r1, r2, lr}
    81da:	460b      	mov	r3, r1
	return zcbor_uint64_put(state, input);
    81dc:	2100      	movs	r1, #0
	if (!value_encode(state, major_type, input, 8)) {
    81de:	466a      	mov	r2, sp
	return zcbor_uint64_put(state, input);
    81e0:	e9cd 3100 	strd	r3, r1, [sp]
	if (!value_encode(state, major_type, input, 8)) {
    81e4:	2308      	movs	r3, #8
    81e6:	f7ff ff81 	bl	80ec <value_encode>
}
    81ea:	b003      	add	sp, #12
    81ec:	f85d fb04 	ldr.w	pc, [sp], #4

000081f0 <zcbor_bstr_encode>:


bool zcbor_bstr_encode(zcbor_state_t *state, const struct zcbor_string *input)
{
	return str_encode(state, input, ZCBOR_MAJOR_TYPE_BSTR);
    81f0:	2202      	movs	r2, #2
    81f2:	f7ff bf8b 	b.w	810c <str_encode>

000081f6 <zcbor_tstr_encode>:
}


bool zcbor_tstr_encode(zcbor_state_t *state, const struct zcbor_string *input)
{
	return str_encode(state, input, ZCBOR_MAJOR_TYPE_TSTR);
    81f6:	2203      	movs	r2, #3
    81f8:	f7ff bf88 	b.w	810c <str_encode>

000081fc <zcbor_list_start_encode>:
	if (!value_encode(state, major_type, &max_num, sizeof(max_num))) {
		ZCBOR_FAIL();
	}
	state->elem_count--; /* Because of dummy header. */
#else
	if (!encode_header_byte(state, major_type, ZCBOR_VALUE_IS_INDEFINITE_LENGTH)) {
    81fc:	221f      	movs	r2, #31
    81fe:	2104      	movs	r1, #4
    8200:	f7ff bf60 	b.w	80c4 <encode_header_byte>

00008204 <zcbor_map_start_encode>:
    8204:	221f      	movs	r2, #31
    8206:	2105      	movs	r1, #5
    8208:	f7ff bf5c 	b.w	80c4 <encode_header_byte>

0000820c <zcbor_list_end_encode>:
	} else {
		/* Reset payload pointer to end of list */
		state->payload = payload;
	}
#else
	if (!encode_header_byte(state, ZCBOR_MAJOR_TYPE_PRIM, ZCBOR_VALUE_IS_INDEFINITE_LENGTH)) {
    820c:	221f      	movs	r2, #31
    820e:	2107      	movs	r1, #7
    8210:	f7ff bf58 	b.w	80c4 <encode_header_byte>

00008214 <zcbor_map_end_encode>:
{
	return list_map_end_encode(state, max_num, ZCBOR_MAJOR_TYPE_LIST);
}


bool zcbor_map_end_encode(zcbor_state_t *state, uint_fast32_t max_num)
    8214:	f7ff bffa 	b.w	820c <zcbor_list_end_encode>

00008218 <zcbor_new_encode_state>:


void zcbor_new_encode_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
	zcbor_new_state(state_array, n_states, payload, payload_len, elem_count);
    8218:	f7ff bda4 	b.w	7d64 <zcbor_new_state>

0000821c <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    821c:	4770      	bx	lr

0000821e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    821e:	b140      	cbz	r0, 8232 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    8220:	68c3      	ldr	r3, [r0, #12]
    8222:	7858      	ldrb	r0, [r3, #1]
    8224:	f010 0001 	ands.w	r0, r0, #1
    8228:	bf1e      	ittt	ne
    822a:	7818      	ldrbne	r0, [r3, #0]
    822c:	fab0 f080 	clzne	r0, r0
    8230:	0940      	lsrne	r0, r0, #5
}
    8232:	4770      	bx	lr

00008234 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    8234:	b510      	push	{r4, lr}
	__asm__ volatile(
    8236:	f04f 0320 	mov.w	r3, #32
    823a:	f3ef 8411 	mrs	r4, BASEPRI
    823e:	f383 8812 	msr	BASEPRI_MAX, r3
    8242:	f3bf 8f6f 	isb	sy

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    8246:	f7fe f879 	bl	633c <k_sys_fatal_error_handler>
	__asm__ volatile(
    824a:	f384 8811 	msr	BASEPRI, r4
    824e:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    8252:	bd10      	pop	{r4, pc}

00008254 <z_early_memset>:
	(void) memset(dst, c, n);
    8254:	f7fd bd20 	b.w	5c98 <memset>

00008258 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    8258:	f7fd bd13 	b.w	5c82 <memcpy>

0000825c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    825c:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
    8260:	3800      	subs	r0, #0
    8262:	bf18      	it	ne
    8264:	2001      	movne	r0, #1
    8266:	4770      	bx	lr

00008268 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8268:	b108      	cbz	r0, 826e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    826a:	f7f9 bc4b 	b.w	1b04 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    826e:	4770      	bx	lr

00008270 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8270:	4770      	bx	lr
	...
