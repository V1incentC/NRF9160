
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00018000 <_vector_table>:
   18000:	e0 44 01 20 4d b4 01 00 7b 7b 02 00 21 b4 01 00     .D. M...{{..!...
   18010:	21 b4 01 00 21 b4 01 00 21 b4 01 00 21 b4 01 00     !...!...!...!...
	...
   1802c:	b5 b0 01 00 21 b4 01 00 00 00 00 00 55 b0 01 00     ....!.......U...
   1803c:	21 b4 01 00                                         !...

00018040 <_irq_vector_table>:
   18040:	3d b1 01 00 3d b1 01 00 3d b1 01 00 3d b1 01 00     =...=...=...=...
   18050:	3d b1 01 00 3d b1 01 00 3d b1 01 00 3d b1 01 00     =...=...=...=...
   18060:	3d b1 01 00 3d b1 01 00 3d b1 01 00 3d b1 01 00     =...=...=...=...
   18070:	3d b1 01 00 3d b1 01 00 3d b1 01 00 3d b1 01 00     =...=...=...=...
   18080:	3d b1 01 00 3d b1 01 00 3d b1 01 00 3d b1 01 00     =...=...=...=...
   18090:	3d b1 01 00 3d b1 01 00 3d b1 01 00 3d b1 01 00     =...=...=...=...
   180a0:	3d b1 01 00 3d b1 01 00 3d b1 01 00 3d b1 01 00     =...=...=...=...
   180b0:	3d b1 01 00 3d b1 01 00 3d b1 01 00 3d b1 01 00     =...=...=...=...
   180c0:	3d b1 01 00 3d b1 01 00 3d b1 01 00 3d b1 01 00     =...=...=...=...
   180d0:	3d b1 01 00 3d b1 01 00 3d b1 01 00 3d b1 01 00     =...=...=...=...
   180e0:	3d b1 01 00 3d b1 01 00 3d b1 01 00 3d b1 01 00     =...=...=...=...
   180f0:	3d b1 01 00 3d b1 01 00 3d b1 01 00 3d b1 01 00     =...=...=...=...
   18100:	3d b1 01 00 3d b1 01 00 3d b1 01 00 3d b1 01 00     =...=...=...=...
   18110:	3d b1 01 00 3d b1 01 00 3d b1 01 00 3d b1 01 00     =...=...=...=...
   18120:	3d b1 01 00 3d b1 01 00 3d b1 01 00 3d b1 01 00     =...=...=...=...
   18130:	3d b1 01 00 3d b1 01 00 3d b1 01 00 3d b1 01 00     =...=...=...=...
   18140:	3d b1 01 00                                         =...

Disassembly of section text:

00018148 <__aeabi_fmul>:
   18148:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1814c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18150:	bf1e      	ittt	ne
   18152:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18156:	ea92 0f0c 	teqne	r2, ip
   1815a:	ea93 0f0c 	teqne	r3, ip
   1815e:	d06f      	beq.n	18240 <__aeabi_fmul+0xf8>
   18160:	441a      	add	r2, r3
   18162:	ea80 0c01 	eor.w	ip, r0, r1
   18166:	0240      	lsls	r0, r0, #9
   18168:	bf18      	it	ne
   1816a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1816e:	d01e      	beq.n	181ae <__aeabi_fmul+0x66>
   18170:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18174:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18178:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1817c:	fba0 3101 	umull	r3, r1, r0, r1
   18180:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18184:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18188:	bf3e      	ittt	cc
   1818a:	0049      	lslcc	r1, r1, #1
   1818c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18190:	005b      	lslcc	r3, r3, #1
   18192:	ea40 0001 	orr.w	r0, r0, r1
   18196:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1819a:	2afd      	cmp	r2, #253	; 0xfd
   1819c:	d81d      	bhi.n	181da <__aeabi_fmul+0x92>
   1819e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   181a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   181a6:	bf08      	it	eq
   181a8:	f020 0001 	biceq.w	r0, r0, #1
   181ac:	4770      	bx	lr
   181ae:	f090 0f00 	teq	r0, #0
   181b2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   181b6:	bf08      	it	eq
   181b8:	0249      	lsleq	r1, r1, #9
   181ba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   181be:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   181c2:	3a7f      	subs	r2, #127	; 0x7f
   181c4:	bfc2      	ittt	gt
   181c6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   181ca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   181ce:	4770      	bxgt	lr
   181d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   181d4:	f04f 0300 	mov.w	r3, #0
   181d8:	3a01      	subs	r2, #1
   181da:	dc5d      	bgt.n	18298 <__aeabi_fmul+0x150>
   181dc:	f112 0f19 	cmn.w	r2, #25
   181e0:	bfdc      	itt	le
   181e2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   181e6:	4770      	bxle	lr
   181e8:	f1c2 0200 	rsb	r2, r2, #0
   181ec:	0041      	lsls	r1, r0, #1
   181ee:	fa21 f102 	lsr.w	r1, r1, r2
   181f2:	f1c2 0220 	rsb	r2, r2, #32
   181f6:	fa00 fc02 	lsl.w	ip, r0, r2
   181fa:	ea5f 0031 	movs.w	r0, r1, rrx
   181fe:	f140 0000 	adc.w	r0, r0, #0
   18202:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   18206:	bf08      	it	eq
   18208:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1820c:	4770      	bx	lr
   1820e:	f092 0f00 	teq	r2, #0
   18212:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18216:	bf02      	ittt	eq
   18218:	0040      	lsleq	r0, r0, #1
   1821a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1821e:	3a01      	subeq	r2, #1
   18220:	d0f9      	beq.n	18216 <__aeabi_fmul+0xce>
   18222:	ea40 000c 	orr.w	r0, r0, ip
   18226:	f093 0f00 	teq	r3, #0
   1822a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1822e:	bf02      	ittt	eq
   18230:	0049      	lsleq	r1, r1, #1
   18232:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18236:	3b01      	subeq	r3, #1
   18238:	d0f9      	beq.n	1822e <__aeabi_fmul+0xe6>
   1823a:	ea41 010c 	orr.w	r1, r1, ip
   1823e:	e78f      	b.n	18160 <__aeabi_fmul+0x18>
   18240:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18244:	ea92 0f0c 	teq	r2, ip
   18248:	bf18      	it	ne
   1824a:	ea93 0f0c 	teqne	r3, ip
   1824e:	d00a      	beq.n	18266 <__aeabi_fmul+0x11e>
   18250:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18254:	bf18      	it	ne
   18256:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1825a:	d1d8      	bne.n	1820e <__aeabi_fmul+0xc6>
   1825c:	ea80 0001 	eor.w	r0, r0, r1
   18260:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18264:	4770      	bx	lr
   18266:	f090 0f00 	teq	r0, #0
   1826a:	bf17      	itett	ne
   1826c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18270:	4608      	moveq	r0, r1
   18272:	f091 0f00 	teqne	r1, #0
   18276:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1827a:	d014      	beq.n	182a6 <__aeabi_fmul+0x15e>
   1827c:	ea92 0f0c 	teq	r2, ip
   18280:	d101      	bne.n	18286 <__aeabi_fmul+0x13e>
   18282:	0242      	lsls	r2, r0, #9
   18284:	d10f      	bne.n	182a6 <__aeabi_fmul+0x15e>
   18286:	ea93 0f0c 	teq	r3, ip
   1828a:	d103      	bne.n	18294 <__aeabi_fmul+0x14c>
   1828c:	024b      	lsls	r3, r1, #9
   1828e:	bf18      	it	ne
   18290:	4608      	movne	r0, r1
   18292:	d108      	bne.n	182a6 <__aeabi_fmul+0x15e>
   18294:	ea80 0001 	eor.w	r0, r0, r1
   18298:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1829c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   182a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   182a4:	4770      	bx	lr
   182a6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   182aa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   182ae:	4770      	bx	lr

000182b0 <__aeabi_drsub>:
   182b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   182b4:	e002      	b.n	182bc <__adddf3>
   182b6:	bf00      	nop

000182b8 <__aeabi_dsub>:
   182b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000182bc <__adddf3>:
   182bc:	b530      	push	{r4, r5, lr}
   182be:	ea4f 0441 	mov.w	r4, r1, lsl #1
   182c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   182c6:	ea94 0f05 	teq	r4, r5
   182ca:	bf08      	it	eq
   182cc:	ea90 0f02 	teqeq	r0, r2
   182d0:	bf1f      	itttt	ne
   182d2:	ea54 0c00 	orrsne.w	ip, r4, r0
   182d6:	ea55 0c02 	orrsne.w	ip, r5, r2
   182da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   182de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   182e2:	f000 80e2 	beq.w	184aa <__adddf3+0x1ee>
   182e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   182ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   182ee:	bfb8      	it	lt
   182f0:	426d      	neglt	r5, r5
   182f2:	dd0c      	ble.n	1830e <__adddf3+0x52>
   182f4:	442c      	add	r4, r5
   182f6:	ea80 0202 	eor.w	r2, r0, r2
   182fa:	ea81 0303 	eor.w	r3, r1, r3
   182fe:	ea82 0000 	eor.w	r0, r2, r0
   18302:	ea83 0101 	eor.w	r1, r3, r1
   18306:	ea80 0202 	eor.w	r2, r0, r2
   1830a:	ea81 0303 	eor.w	r3, r1, r3
   1830e:	2d36      	cmp	r5, #54	; 0x36
   18310:	bf88      	it	hi
   18312:	bd30      	pophi	{r4, r5, pc}
   18314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18318:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1831c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   18320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   18324:	d002      	beq.n	1832c <__adddf3+0x70>
   18326:	4240      	negs	r0, r0
   18328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1832c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   18330:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   18338:	d002      	beq.n	18340 <__adddf3+0x84>
   1833a:	4252      	negs	r2, r2
   1833c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18340:	ea94 0f05 	teq	r4, r5
   18344:	f000 80a7 	beq.w	18496 <__adddf3+0x1da>
   18348:	f1a4 0401 	sub.w	r4, r4, #1
   1834c:	f1d5 0e20 	rsbs	lr, r5, #32
   18350:	db0d      	blt.n	1836e <__adddf3+0xb2>
   18352:	fa02 fc0e 	lsl.w	ip, r2, lr
   18356:	fa22 f205 	lsr.w	r2, r2, r5
   1835a:	1880      	adds	r0, r0, r2
   1835c:	f141 0100 	adc.w	r1, r1, #0
   18360:	fa03 f20e 	lsl.w	r2, r3, lr
   18364:	1880      	adds	r0, r0, r2
   18366:	fa43 f305 	asr.w	r3, r3, r5
   1836a:	4159      	adcs	r1, r3
   1836c:	e00e      	b.n	1838c <__adddf3+0xd0>
   1836e:	f1a5 0520 	sub.w	r5, r5, #32
   18372:	f10e 0e20 	add.w	lr, lr, #32
   18376:	2a01      	cmp	r2, #1
   18378:	fa03 fc0e 	lsl.w	ip, r3, lr
   1837c:	bf28      	it	cs
   1837e:	f04c 0c02 	orrcs.w	ip, ip, #2
   18382:	fa43 f305 	asr.w	r3, r3, r5
   18386:	18c0      	adds	r0, r0, r3
   18388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1838c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18390:	d507      	bpl.n	183a2 <__adddf3+0xe6>
   18392:	f04f 0e00 	mov.w	lr, #0
   18396:	f1dc 0c00 	rsbs	ip, ip, #0
   1839a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1839e:	eb6e 0101 	sbc.w	r1, lr, r1
   183a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   183a6:	d31b      	bcc.n	183e0 <__adddf3+0x124>
   183a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   183ac:	d30c      	bcc.n	183c8 <__adddf3+0x10c>
   183ae:	0849      	lsrs	r1, r1, #1
   183b0:	ea5f 0030 	movs.w	r0, r0, rrx
   183b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   183b8:	f104 0401 	add.w	r4, r4, #1
   183bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   183c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   183c4:	f080 809a 	bcs.w	184fc <__adddf3+0x240>
   183c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   183cc:	bf08      	it	eq
   183ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   183d2:	f150 0000 	adcs.w	r0, r0, #0
   183d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   183da:	ea41 0105 	orr.w	r1, r1, r5
   183de:	bd30      	pop	{r4, r5, pc}
   183e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   183e4:	4140      	adcs	r0, r0
   183e6:	eb41 0101 	adc.w	r1, r1, r1
   183ea:	3c01      	subs	r4, #1
   183ec:	bf28      	it	cs
   183ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   183f2:	d2e9      	bcs.n	183c8 <__adddf3+0x10c>
   183f4:	f091 0f00 	teq	r1, #0
   183f8:	bf04      	itt	eq
   183fa:	4601      	moveq	r1, r0
   183fc:	2000      	moveq	r0, #0
   183fe:	fab1 f381 	clz	r3, r1
   18402:	bf08      	it	eq
   18404:	3320      	addeq	r3, #32
   18406:	f1a3 030b 	sub.w	r3, r3, #11
   1840a:	f1b3 0220 	subs.w	r2, r3, #32
   1840e:	da0c      	bge.n	1842a <__adddf3+0x16e>
   18410:	320c      	adds	r2, #12
   18412:	dd08      	ble.n	18426 <__adddf3+0x16a>
   18414:	f102 0c14 	add.w	ip, r2, #20
   18418:	f1c2 020c 	rsb	r2, r2, #12
   1841c:	fa01 f00c 	lsl.w	r0, r1, ip
   18420:	fa21 f102 	lsr.w	r1, r1, r2
   18424:	e00c      	b.n	18440 <__adddf3+0x184>
   18426:	f102 0214 	add.w	r2, r2, #20
   1842a:	bfd8      	it	le
   1842c:	f1c2 0c20 	rsble	ip, r2, #32
   18430:	fa01 f102 	lsl.w	r1, r1, r2
   18434:	fa20 fc0c 	lsr.w	ip, r0, ip
   18438:	bfdc      	itt	le
   1843a:	ea41 010c 	orrle.w	r1, r1, ip
   1843e:	4090      	lslle	r0, r2
   18440:	1ae4      	subs	r4, r4, r3
   18442:	bfa2      	ittt	ge
   18444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   18448:	4329      	orrge	r1, r5
   1844a:	bd30      	popge	{r4, r5, pc}
   1844c:	ea6f 0404 	mvn.w	r4, r4
   18450:	3c1f      	subs	r4, #31
   18452:	da1c      	bge.n	1848e <__adddf3+0x1d2>
   18454:	340c      	adds	r4, #12
   18456:	dc0e      	bgt.n	18476 <__adddf3+0x1ba>
   18458:	f104 0414 	add.w	r4, r4, #20
   1845c:	f1c4 0220 	rsb	r2, r4, #32
   18460:	fa20 f004 	lsr.w	r0, r0, r4
   18464:	fa01 f302 	lsl.w	r3, r1, r2
   18468:	ea40 0003 	orr.w	r0, r0, r3
   1846c:	fa21 f304 	lsr.w	r3, r1, r4
   18470:	ea45 0103 	orr.w	r1, r5, r3
   18474:	bd30      	pop	{r4, r5, pc}
   18476:	f1c4 040c 	rsb	r4, r4, #12
   1847a:	f1c4 0220 	rsb	r2, r4, #32
   1847e:	fa20 f002 	lsr.w	r0, r0, r2
   18482:	fa01 f304 	lsl.w	r3, r1, r4
   18486:	ea40 0003 	orr.w	r0, r0, r3
   1848a:	4629      	mov	r1, r5
   1848c:	bd30      	pop	{r4, r5, pc}
   1848e:	fa21 f004 	lsr.w	r0, r1, r4
   18492:	4629      	mov	r1, r5
   18494:	bd30      	pop	{r4, r5, pc}
   18496:	f094 0f00 	teq	r4, #0
   1849a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1849e:	bf06      	itte	eq
   184a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   184a4:	3401      	addeq	r4, #1
   184a6:	3d01      	subne	r5, #1
   184a8:	e74e      	b.n	18348 <__adddf3+0x8c>
   184aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   184ae:	bf18      	it	ne
   184b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   184b4:	d029      	beq.n	1850a <__adddf3+0x24e>
   184b6:	ea94 0f05 	teq	r4, r5
   184ba:	bf08      	it	eq
   184bc:	ea90 0f02 	teqeq	r0, r2
   184c0:	d005      	beq.n	184ce <__adddf3+0x212>
   184c2:	ea54 0c00 	orrs.w	ip, r4, r0
   184c6:	bf04      	itt	eq
   184c8:	4619      	moveq	r1, r3
   184ca:	4610      	moveq	r0, r2
   184cc:	bd30      	pop	{r4, r5, pc}
   184ce:	ea91 0f03 	teq	r1, r3
   184d2:	bf1e      	ittt	ne
   184d4:	2100      	movne	r1, #0
   184d6:	2000      	movne	r0, #0
   184d8:	bd30      	popne	{r4, r5, pc}
   184da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   184de:	d105      	bne.n	184ec <__adddf3+0x230>
   184e0:	0040      	lsls	r0, r0, #1
   184e2:	4149      	adcs	r1, r1
   184e4:	bf28      	it	cs
   184e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   184ea:	bd30      	pop	{r4, r5, pc}
   184ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   184f0:	bf3c      	itt	cc
   184f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   184f6:	bd30      	popcc	{r4, r5, pc}
   184f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   184fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   18500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   18504:	f04f 0000 	mov.w	r0, #0
   18508:	bd30      	pop	{r4, r5, pc}
   1850a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1850e:	bf1a      	itte	ne
   18510:	4619      	movne	r1, r3
   18512:	4610      	movne	r0, r2
   18514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   18518:	bf1c      	itt	ne
   1851a:	460b      	movne	r3, r1
   1851c:	4602      	movne	r2, r0
   1851e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18522:	bf06      	itte	eq
   18524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   18528:	ea91 0f03 	teqeq	r1, r3
   1852c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   18530:	bd30      	pop	{r4, r5, pc}
   18532:	bf00      	nop

00018534 <__aeabi_ui2d>:
   18534:	f090 0f00 	teq	r0, #0
   18538:	bf04      	itt	eq
   1853a:	2100      	moveq	r1, #0
   1853c:	4770      	bxeq	lr
   1853e:	b530      	push	{r4, r5, lr}
   18540:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18544:	f104 0432 	add.w	r4, r4, #50	; 0x32
   18548:	f04f 0500 	mov.w	r5, #0
   1854c:	f04f 0100 	mov.w	r1, #0
   18550:	e750      	b.n	183f4 <__adddf3+0x138>
   18552:	bf00      	nop

00018554 <__aeabi_i2d>:
   18554:	f090 0f00 	teq	r0, #0
   18558:	bf04      	itt	eq
   1855a:	2100      	moveq	r1, #0
   1855c:	4770      	bxeq	lr
   1855e:	b530      	push	{r4, r5, lr}
   18560:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18564:	f104 0432 	add.w	r4, r4, #50	; 0x32
   18568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1856c:	bf48      	it	mi
   1856e:	4240      	negmi	r0, r0
   18570:	f04f 0100 	mov.w	r1, #0
   18574:	e73e      	b.n	183f4 <__adddf3+0x138>
   18576:	bf00      	nop

00018578 <__aeabi_f2d>:
   18578:	0042      	lsls	r2, r0, #1
   1857a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1857e:	ea4f 0131 	mov.w	r1, r1, rrx
   18582:	ea4f 7002 	mov.w	r0, r2, lsl #28
   18586:	bf1f      	itttt	ne
   18588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1858c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   18590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   18594:	4770      	bxne	lr
   18596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1859a:	bf08      	it	eq
   1859c:	4770      	bxeq	lr
   1859e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   185a2:	bf04      	itt	eq
   185a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   185a8:	4770      	bxeq	lr
   185aa:	b530      	push	{r4, r5, lr}
   185ac:	f44f 7460 	mov.w	r4, #896	; 0x380
   185b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   185b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   185b8:	e71c      	b.n	183f4 <__adddf3+0x138>
   185ba:	bf00      	nop

000185bc <__aeabi_ul2d>:
   185bc:	ea50 0201 	orrs.w	r2, r0, r1
   185c0:	bf08      	it	eq
   185c2:	4770      	bxeq	lr
   185c4:	b530      	push	{r4, r5, lr}
   185c6:	f04f 0500 	mov.w	r5, #0
   185ca:	e00a      	b.n	185e2 <__aeabi_l2d+0x16>

000185cc <__aeabi_l2d>:
   185cc:	ea50 0201 	orrs.w	r2, r0, r1
   185d0:	bf08      	it	eq
   185d2:	4770      	bxeq	lr
   185d4:	b530      	push	{r4, r5, lr}
   185d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   185da:	d502      	bpl.n	185e2 <__aeabi_l2d+0x16>
   185dc:	4240      	negs	r0, r0
   185de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   185e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   185e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   185ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   185ee:	f43f aed8 	beq.w	183a2 <__adddf3+0xe6>
   185f2:	f04f 0203 	mov.w	r2, #3
   185f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   185fa:	bf18      	it	ne
   185fc:	3203      	addne	r2, #3
   185fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   18602:	bf18      	it	ne
   18604:	3203      	addne	r2, #3
   18606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1860a:	f1c2 0320 	rsb	r3, r2, #32
   1860e:	fa00 fc03 	lsl.w	ip, r0, r3
   18612:	fa20 f002 	lsr.w	r0, r0, r2
   18616:	fa01 fe03 	lsl.w	lr, r1, r3
   1861a:	ea40 000e 	orr.w	r0, r0, lr
   1861e:	fa21 f102 	lsr.w	r1, r1, r2
   18622:	4414      	add	r4, r2
   18624:	e6bd      	b.n	183a2 <__adddf3+0xe6>
   18626:	bf00      	nop

00018628 <__aeabi_dmul>:
   18628:	b570      	push	{r4, r5, r6, lr}
   1862a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1862e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   18632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   18636:	bf1d      	ittte	ne
   18638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1863c:	ea94 0f0c 	teqne	r4, ip
   18640:	ea95 0f0c 	teqne	r5, ip
   18644:	f000 f8de 	bleq	18804 <__aeabi_dmul+0x1dc>
   18648:	442c      	add	r4, r5
   1864a:	ea81 0603 	eor.w	r6, r1, r3
   1864e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   18652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   18656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1865a:	bf18      	it	ne
   1865c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   18660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   18668:	d038      	beq.n	186dc <__aeabi_dmul+0xb4>
   1866a:	fba0 ce02 	umull	ip, lr, r0, r2
   1866e:	f04f 0500 	mov.w	r5, #0
   18672:	fbe1 e502 	umlal	lr, r5, r1, r2
   18676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1867a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1867e:	f04f 0600 	mov.w	r6, #0
   18682:	fbe1 5603 	umlal	r5, r6, r1, r3
   18686:	f09c 0f00 	teq	ip, #0
   1868a:	bf18      	it	ne
   1868c:	f04e 0e01 	orrne.w	lr, lr, #1
   18690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   18694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   18698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1869c:	d204      	bcs.n	186a8 <__aeabi_dmul+0x80>
   1869e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   186a2:	416d      	adcs	r5, r5
   186a4:	eb46 0606 	adc.w	r6, r6, r6
   186a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   186ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   186b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   186b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   186b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   186bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   186c0:	bf88      	it	hi
   186c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   186c6:	d81e      	bhi.n	18706 <__aeabi_dmul+0xde>
   186c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   186cc:	bf08      	it	eq
   186ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   186d2:	f150 0000 	adcs.w	r0, r0, #0
   186d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   186da:	bd70      	pop	{r4, r5, r6, pc}
   186dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   186e0:	ea46 0101 	orr.w	r1, r6, r1
   186e4:	ea40 0002 	orr.w	r0, r0, r2
   186e8:	ea81 0103 	eor.w	r1, r1, r3
   186ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   186f0:	bfc2      	ittt	gt
   186f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   186f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   186fa:	bd70      	popgt	{r4, r5, r6, pc}
   186fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18700:	f04f 0e00 	mov.w	lr, #0
   18704:	3c01      	subs	r4, #1
   18706:	f300 80ab 	bgt.w	18860 <__aeabi_dmul+0x238>
   1870a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1870e:	bfde      	ittt	le
   18710:	2000      	movle	r0, #0
   18712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   18716:	bd70      	pople	{r4, r5, r6, pc}
   18718:	f1c4 0400 	rsb	r4, r4, #0
   1871c:	3c20      	subs	r4, #32
   1871e:	da35      	bge.n	1878c <__aeabi_dmul+0x164>
   18720:	340c      	adds	r4, #12
   18722:	dc1b      	bgt.n	1875c <__aeabi_dmul+0x134>
   18724:	f104 0414 	add.w	r4, r4, #20
   18728:	f1c4 0520 	rsb	r5, r4, #32
   1872c:	fa00 f305 	lsl.w	r3, r0, r5
   18730:	fa20 f004 	lsr.w	r0, r0, r4
   18734:	fa01 f205 	lsl.w	r2, r1, r5
   18738:	ea40 0002 	orr.w	r0, r0, r2
   1873c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   18740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   18744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   18748:	fa21 f604 	lsr.w	r6, r1, r4
   1874c:	eb42 0106 	adc.w	r1, r2, r6
   18750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18754:	bf08      	it	eq
   18756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1875a:	bd70      	pop	{r4, r5, r6, pc}
   1875c:	f1c4 040c 	rsb	r4, r4, #12
   18760:	f1c4 0520 	rsb	r5, r4, #32
   18764:	fa00 f304 	lsl.w	r3, r0, r4
   18768:	fa20 f005 	lsr.w	r0, r0, r5
   1876c:	fa01 f204 	lsl.w	r2, r1, r4
   18770:	ea40 0002 	orr.w	r0, r0, r2
   18774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1877c:	f141 0100 	adc.w	r1, r1, #0
   18780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18784:	bf08      	it	eq
   18786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1878a:	bd70      	pop	{r4, r5, r6, pc}
   1878c:	f1c4 0520 	rsb	r5, r4, #32
   18790:	fa00 f205 	lsl.w	r2, r0, r5
   18794:	ea4e 0e02 	orr.w	lr, lr, r2
   18798:	fa20 f304 	lsr.w	r3, r0, r4
   1879c:	fa01 f205 	lsl.w	r2, r1, r5
   187a0:	ea43 0302 	orr.w	r3, r3, r2
   187a4:	fa21 f004 	lsr.w	r0, r1, r4
   187a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   187ac:	fa21 f204 	lsr.w	r2, r1, r4
   187b0:	ea20 0002 	bic.w	r0, r0, r2
   187b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   187b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   187bc:	bf08      	it	eq
   187be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   187c2:	bd70      	pop	{r4, r5, r6, pc}
   187c4:	f094 0f00 	teq	r4, #0
   187c8:	d10f      	bne.n	187ea <__aeabi_dmul+0x1c2>
   187ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   187ce:	0040      	lsls	r0, r0, #1
   187d0:	eb41 0101 	adc.w	r1, r1, r1
   187d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   187d8:	bf08      	it	eq
   187da:	3c01      	subeq	r4, #1
   187dc:	d0f7      	beq.n	187ce <__aeabi_dmul+0x1a6>
   187de:	ea41 0106 	orr.w	r1, r1, r6
   187e2:	f095 0f00 	teq	r5, #0
   187e6:	bf18      	it	ne
   187e8:	4770      	bxne	lr
   187ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   187ee:	0052      	lsls	r2, r2, #1
   187f0:	eb43 0303 	adc.w	r3, r3, r3
   187f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   187f8:	bf08      	it	eq
   187fa:	3d01      	subeq	r5, #1
   187fc:	d0f7      	beq.n	187ee <__aeabi_dmul+0x1c6>
   187fe:	ea43 0306 	orr.w	r3, r3, r6
   18802:	4770      	bx	lr
   18804:	ea94 0f0c 	teq	r4, ip
   18808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1880c:	bf18      	it	ne
   1880e:	ea95 0f0c 	teqne	r5, ip
   18812:	d00c      	beq.n	1882e <__aeabi_dmul+0x206>
   18814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18818:	bf18      	it	ne
   1881a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1881e:	d1d1      	bne.n	187c4 <__aeabi_dmul+0x19c>
   18820:	ea81 0103 	eor.w	r1, r1, r3
   18824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18828:	f04f 0000 	mov.w	r0, #0
   1882c:	bd70      	pop	{r4, r5, r6, pc}
   1882e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18832:	bf06      	itte	eq
   18834:	4610      	moveq	r0, r2
   18836:	4619      	moveq	r1, r3
   18838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1883c:	d019      	beq.n	18872 <__aeabi_dmul+0x24a>
   1883e:	ea94 0f0c 	teq	r4, ip
   18842:	d102      	bne.n	1884a <__aeabi_dmul+0x222>
   18844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   18848:	d113      	bne.n	18872 <__aeabi_dmul+0x24a>
   1884a:	ea95 0f0c 	teq	r5, ip
   1884e:	d105      	bne.n	1885c <__aeabi_dmul+0x234>
   18850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   18854:	bf1c      	itt	ne
   18856:	4610      	movne	r0, r2
   18858:	4619      	movne	r1, r3
   1885a:	d10a      	bne.n	18872 <__aeabi_dmul+0x24a>
   1885c:	ea81 0103 	eor.w	r1, r1, r3
   18860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1886c:	f04f 0000 	mov.w	r0, #0
   18870:	bd70      	pop	{r4, r5, r6, pc}
   18872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1887a:	bd70      	pop	{r4, r5, r6, pc}

0001887c <__aeabi_ddiv>:
   1887c:	b570      	push	{r4, r5, r6, lr}
   1887e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   18886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1888a:	bf1d      	ittte	ne
   1888c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18890:	ea94 0f0c 	teqne	r4, ip
   18894:	ea95 0f0c 	teqne	r5, ip
   18898:	f000 f8a7 	bleq	189ea <__aeabi_ddiv+0x16e>
   1889c:	eba4 0405 	sub.w	r4, r4, r5
   188a0:	ea81 0e03 	eor.w	lr, r1, r3
   188a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   188a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   188ac:	f000 8088 	beq.w	189c0 <__aeabi_ddiv+0x144>
   188b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   188b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   188b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   188bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   188c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   188c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   188c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   188cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   188d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   188d4:	429d      	cmp	r5, r3
   188d6:	bf08      	it	eq
   188d8:	4296      	cmpeq	r6, r2
   188da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   188de:	f504 7440 	add.w	r4, r4, #768	; 0x300
   188e2:	d202      	bcs.n	188ea <__aeabi_ddiv+0x6e>
   188e4:	085b      	lsrs	r3, r3, #1
   188e6:	ea4f 0232 	mov.w	r2, r2, rrx
   188ea:	1ab6      	subs	r6, r6, r2
   188ec:	eb65 0503 	sbc.w	r5, r5, r3
   188f0:	085b      	lsrs	r3, r3, #1
   188f2:	ea4f 0232 	mov.w	r2, r2, rrx
   188f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   188fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   188fe:	ebb6 0e02 	subs.w	lr, r6, r2
   18902:	eb75 0e03 	sbcs.w	lr, r5, r3
   18906:	bf22      	ittt	cs
   18908:	1ab6      	subcs	r6, r6, r2
   1890a:	4675      	movcs	r5, lr
   1890c:	ea40 000c 	orrcs.w	r0, r0, ip
   18910:	085b      	lsrs	r3, r3, #1
   18912:	ea4f 0232 	mov.w	r2, r2, rrx
   18916:	ebb6 0e02 	subs.w	lr, r6, r2
   1891a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1891e:	bf22      	ittt	cs
   18920:	1ab6      	subcs	r6, r6, r2
   18922:	4675      	movcs	r5, lr
   18924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18928:	085b      	lsrs	r3, r3, #1
   1892a:	ea4f 0232 	mov.w	r2, r2, rrx
   1892e:	ebb6 0e02 	subs.w	lr, r6, r2
   18932:	eb75 0e03 	sbcs.w	lr, r5, r3
   18936:	bf22      	ittt	cs
   18938:	1ab6      	subcs	r6, r6, r2
   1893a:	4675      	movcs	r5, lr
   1893c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18940:	085b      	lsrs	r3, r3, #1
   18942:	ea4f 0232 	mov.w	r2, r2, rrx
   18946:	ebb6 0e02 	subs.w	lr, r6, r2
   1894a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1894e:	bf22      	ittt	cs
   18950:	1ab6      	subcs	r6, r6, r2
   18952:	4675      	movcs	r5, lr
   18954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18958:	ea55 0e06 	orrs.w	lr, r5, r6
   1895c:	d018      	beq.n	18990 <__aeabi_ddiv+0x114>
   1895e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   18962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   18966:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1896a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1896e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   18972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   18976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1897a:	d1c0      	bne.n	188fe <__aeabi_ddiv+0x82>
   1897c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18980:	d10b      	bne.n	1899a <__aeabi_ddiv+0x11e>
   18982:	ea41 0100 	orr.w	r1, r1, r0
   18986:	f04f 0000 	mov.w	r0, #0
   1898a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1898e:	e7b6      	b.n	188fe <__aeabi_ddiv+0x82>
   18990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18994:	bf04      	itt	eq
   18996:	4301      	orreq	r1, r0
   18998:	2000      	moveq	r0, #0
   1899a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1899e:	bf88      	it	hi
   189a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   189a4:	f63f aeaf 	bhi.w	18706 <__aeabi_dmul+0xde>
   189a8:	ebb5 0c03 	subs.w	ip, r5, r3
   189ac:	bf04      	itt	eq
   189ae:	ebb6 0c02 	subseq.w	ip, r6, r2
   189b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   189b6:	f150 0000 	adcs.w	r0, r0, #0
   189ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   189be:	bd70      	pop	{r4, r5, r6, pc}
   189c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   189c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   189c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   189cc:	bfc2      	ittt	gt
   189ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   189d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   189d6:	bd70      	popgt	{r4, r5, r6, pc}
   189d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   189dc:	f04f 0e00 	mov.w	lr, #0
   189e0:	3c01      	subs	r4, #1
   189e2:	e690      	b.n	18706 <__aeabi_dmul+0xde>
   189e4:	ea45 0e06 	orr.w	lr, r5, r6
   189e8:	e68d      	b.n	18706 <__aeabi_dmul+0xde>
   189ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   189ee:	ea94 0f0c 	teq	r4, ip
   189f2:	bf08      	it	eq
   189f4:	ea95 0f0c 	teqeq	r5, ip
   189f8:	f43f af3b 	beq.w	18872 <__aeabi_dmul+0x24a>
   189fc:	ea94 0f0c 	teq	r4, ip
   18a00:	d10a      	bne.n	18a18 <__aeabi_ddiv+0x19c>
   18a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18a06:	f47f af34 	bne.w	18872 <__aeabi_dmul+0x24a>
   18a0a:	ea95 0f0c 	teq	r5, ip
   18a0e:	f47f af25 	bne.w	1885c <__aeabi_dmul+0x234>
   18a12:	4610      	mov	r0, r2
   18a14:	4619      	mov	r1, r3
   18a16:	e72c      	b.n	18872 <__aeabi_dmul+0x24a>
   18a18:	ea95 0f0c 	teq	r5, ip
   18a1c:	d106      	bne.n	18a2c <__aeabi_ddiv+0x1b0>
   18a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18a22:	f43f aefd 	beq.w	18820 <__aeabi_dmul+0x1f8>
   18a26:	4610      	mov	r0, r2
   18a28:	4619      	mov	r1, r3
   18a2a:	e722      	b.n	18872 <__aeabi_dmul+0x24a>
   18a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18a30:	bf18      	it	ne
   18a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18a36:	f47f aec5 	bne.w	187c4 <__aeabi_dmul+0x19c>
   18a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   18a3e:	f47f af0d 	bne.w	1885c <__aeabi_dmul+0x234>
   18a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18a46:	f47f aeeb 	bne.w	18820 <__aeabi_dmul+0x1f8>
   18a4a:	e712      	b.n	18872 <__aeabi_dmul+0x24a>

00018a4c <__aeabi_d2f>:
   18a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18a54:	bf24      	itt	cs
   18a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   18a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   18a5e:	d90d      	bls.n	18a7c <__aeabi_d2f+0x30>
   18a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   18a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18a74:	bf08      	it	eq
   18a76:	f020 0001 	biceq.w	r0, r0, #1
   18a7a:	4770      	bx	lr
   18a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18a80:	d121      	bne.n	18ac6 <__aeabi_d2f+0x7a>
   18a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   18a86:	bfbc      	itt	lt
   18a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18a8c:	4770      	bxlt	lr
   18a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
   18a96:	f1c2 0218 	rsb	r2, r2, #24
   18a9a:	f1c2 0c20 	rsb	ip, r2, #32
   18a9e:	fa10 f30c 	lsls.w	r3, r0, ip
   18aa2:	fa20 f002 	lsr.w	r0, r0, r2
   18aa6:	bf18      	it	ne
   18aa8:	f040 0001 	orrne.w	r0, r0, #1
   18aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
   18ab8:	ea40 000c 	orr.w	r0, r0, ip
   18abc:	fa23 f302 	lsr.w	r3, r3, r2
   18ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18ac4:	e7cc      	b.n	18a60 <__aeabi_d2f+0x14>
   18ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   18aca:	d107      	bne.n	18adc <__aeabi_d2f+0x90>
   18acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   18ad0:	bf1e      	ittt	ne
   18ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   18ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   18ada:	4770      	bxne	lr
   18adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   18ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18ae8:	4770      	bx	lr
   18aea:	bf00      	nop

00018aec <__aeabi_frsub>:
   18aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   18af0:	e002      	b.n	18af8 <__addsf3>
   18af2:	bf00      	nop

00018af4 <__aeabi_fsub>:
   18af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00018af8 <__addsf3>:
   18af8:	0042      	lsls	r2, r0, #1
   18afa:	bf1f      	itttt	ne
   18afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18b00:	ea92 0f03 	teqne	r2, r3
   18b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   18b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18b0c:	d06a      	beq.n	18be4 <__addsf3+0xec>
   18b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   18b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   18b16:	bfc1      	itttt	gt
   18b18:	18d2      	addgt	r2, r2, r3
   18b1a:	4041      	eorgt	r1, r0
   18b1c:	4048      	eorgt	r0, r1
   18b1e:	4041      	eorgt	r1, r0
   18b20:	bfb8      	it	lt
   18b22:	425b      	neglt	r3, r3
   18b24:	2b19      	cmp	r3, #25
   18b26:	bf88      	it	hi
   18b28:	4770      	bxhi	lr
   18b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18b36:	bf18      	it	ne
   18b38:	4240      	negne	r0, r0
   18b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   18b46:	bf18      	it	ne
   18b48:	4249      	negne	r1, r1
   18b4a:	ea92 0f03 	teq	r2, r3
   18b4e:	d03f      	beq.n	18bd0 <__addsf3+0xd8>
   18b50:	f1a2 0201 	sub.w	r2, r2, #1
   18b54:	fa41 fc03 	asr.w	ip, r1, r3
   18b58:	eb10 000c 	adds.w	r0, r0, ip
   18b5c:	f1c3 0320 	rsb	r3, r3, #32
   18b60:	fa01 f103 	lsl.w	r1, r1, r3
   18b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18b68:	d502      	bpl.n	18b70 <__addsf3+0x78>
   18b6a:	4249      	negs	r1, r1
   18b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18b74:	d313      	bcc.n	18b9e <__addsf3+0xa6>
   18b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   18b7a:	d306      	bcc.n	18b8a <__addsf3+0x92>
   18b7c:	0840      	lsrs	r0, r0, #1
   18b7e:	ea4f 0131 	mov.w	r1, r1, rrx
   18b82:	f102 0201 	add.w	r2, r2, #1
   18b86:	2afe      	cmp	r2, #254	; 0xfe
   18b88:	d251      	bcs.n	18c2e <__addsf3+0x136>
   18b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   18b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18b92:	bf08      	it	eq
   18b94:	f020 0001 	biceq.w	r0, r0, #1
   18b98:	ea40 0003 	orr.w	r0, r0, r3
   18b9c:	4770      	bx	lr
   18b9e:	0049      	lsls	r1, r1, #1
   18ba0:	eb40 0000 	adc.w	r0, r0, r0
   18ba4:	3a01      	subs	r2, #1
   18ba6:	bf28      	it	cs
   18ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   18bac:	d2ed      	bcs.n	18b8a <__addsf3+0x92>
   18bae:	fab0 fc80 	clz	ip, r0
   18bb2:	f1ac 0c08 	sub.w	ip, ip, #8
   18bb6:	ebb2 020c 	subs.w	r2, r2, ip
   18bba:	fa00 f00c 	lsl.w	r0, r0, ip
   18bbe:	bfaa      	itet	ge
   18bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   18bc4:	4252      	neglt	r2, r2
   18bc6:	4318      	orrge	r0, r3
   18bc8:	bfbc      	itt	lt
   18bca:	40d0      	lsrlt	r0, r2
   18bcc:	4318      	orrlt	r0, r3
   18bce:	4770      	bx	lr
   18bd0:	f092 0f00 	teq	r2, #0
   18bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18bd8:	bf06      	itte	eq
   18bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   18bde:	3201      	addeq	r2, #1
   18be0:	3b01      	subne	r3, #1
   18be2:	e7b5      	b.n	18b50 <__addsf3+0x58>
   18be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18bec:	bf18      	it	ne
   18bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18bf2:	d021      	beq.n	18c38 <__addsf3+0x140>
   18bf4:	ea92 0f03 	teq	r2, r3
   18bf8:	d004      	beq.n	18c04 <__addsf3+0x10c>
   18bfa:	f092 0f00 	teq	r2, #0
   18bfe:	bf08      	it	eq
   18c00:	4608      	moveq	r0, r1
   18c02:	4770      	bx	lr
   18c04:	ea90 0f01 	teq	r0, r1
   18c08:	bf1c      	itt	ne
   18c0a:	2000      	movne	r0, #0
   18c0c:	4770      	bxne	lr
   18c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   18c12:	d104      	bne.n	18c1e <__addsf3+0x126>
   18c14:	0040      	lsls	r0, r0, #1
   18c16:	bf28      	it	cs
   18c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   18c1c:	4770      	bx	lr
   18c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   18c22:	bf3c      	itt	cc
   18c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18c28:	4770      	bxcc	lr
   18c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18c36:	4770      	bx	lr
   18c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18c3c:	bf16      	itet	ne
   18c3e:	4608      	movne	r0, r1
   18c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18c44:	4601      	movne	r1, r0
   18c46:	0242      	lsls	r2, r0, #9
   18c48:	bf06      	itte	eq
   18c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   18c4e:	ea90 0f01 	teqeq	r0, r1
   18c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   18c56:	4770      	bx	lr

00018c58 <__aeabi_ui2f>:
   18c58:	f04f 0300 	mov.w	r3, #0
   18c5c:	e004      	b.n	18c68 <__aeabi_i2f+0x8>
   18c5e:	bf00      	nop

00018c60 <__aeabi_i2f>:
   18c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18c64:	bf48      	it	mi
   18c66:	4240      	negmi	r0, r0
   18c68:	ea5f 0c00 	movs.w	ip, r0
   18c6c:	bf08      	it	eq
   18c6e:	4770      	bxeq	lr
   18c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18c74:	4601      	mov	r1, r0
   18c76:	f04f 0000 	mov.w	r0, #0
   18c7a:	e01c      	b.n	18cb6 <__aeabi_l2f+0x2a>

00018c7c <__aeabi_ul2f>:
   18c7c:	ea50 0201 	orrs.w	r2, r0, r1
   18c80:	bf08      	it	eq
   18c82:	4770      	bxeq	lr
   18c84:	f04f 0300 	mov.w	r3, #0
   18c88:	e00a      	b.n	18ca0 <__aeabi_l2f+0x14>
   18c8a:	bf00      	nop

00018c8c <__aeabi_l2f>:
   18c8c:	ea50 0201 	orrs.w	r2, r0, r1
   18c90:	bf08      	it	eq
   18c92:	4770      	bxeq	lr
   18c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   18c98:	d502      	bpl.n	18ca0 <__aeabi_l2f+0x14>
   18c9a:	4240      	negs	r0, r0
   18c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18ca0:	ea5f 0c01 	movs.w	ip, r1
   18ca4:	bf02      	ittt	eq
   18ca6:	4684      	moveq	ip, r0
   18ca8:	4601      	moveq	r1, r0
   18caa:	2000      	moveq	r0, #0
   18cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18cb0:	bf08      	it	eq
   18cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   18cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   18cba:	fabc f28c 	clz	r2, ip
   18cbe:	3a08      	subs	r2, #8
   18cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   18cc4:	db10      	blt.n	18ce8 <__aeabi_l2f+0x5c>
   18cc6:	fa01 fc02 	lsl.w	ip, r1, r2
   18cca:	4463      	add	r3, ip
   18ccc:	fa00 fc02 	lsl.w	ip, r0, r2
   18cd0:	f1c2 0220 	rsb	r2, r2, #32
   18cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18cd8:	fa20 f202 	lsr.w	r2, r0, r2
   18cdc:	eb43 0002 	adc.w	r0, r3, r2
   18ce0:	bf08      	it	eq
   18ce2:	f020 0001 	biceq.w	r0, r0, #1
   18ce6:	4770      	bx	lr
   18ce8:	f102 0220 	add.w	r2, r2, #32
   18cec:	fa01 fc02 	lsl.w	ip, r1, r2
   18cf0:	f1c2 0220 	rsb	r2, r2, #32
   18cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18cf8:	fa21 f202 	lsr.w	r2, r1, r2
   18cfc:	eb43 0002 	adc.w	r0, r3, r2
   18d00:	bf08      	it	eq
   18d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18d06:	4770      	bx	lr

00018d08 <__aeabi_ldivmod>:
   18d08:	b97b      	cbnz	r3, 18d2a <__aeabi_ldivmod+0x22>
   18d0a:	b972      	cbnz	r2, 18d2a <__aeabi_ldivmod+0x22>
   18d0c:	2900      	cmp	r1, #0
   18d0e:	bfbe      	ittt	lt
   18d10:	2000      	movlt	r0, #0
   18d12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   18d16:	e006      	blt.n	18d26 <__aeabi_ldivmod+0x1e>
   18d18:	bf08      	it	eq
   18d1a:	2800      	cmpeq	r0, #0
   18d1c:	bf1c      	itt	ne
   18d1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   18d22:	f04f 30ff 	movne.w	r0, #4294967295
   18d26:	f000 b857 	b.w	18dd8 <__aeabi_idiv0>
   18d2a:	f1ad 0c08 	sub.w	ip, sp, #8
   18d2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   18d32:	2900      	cmp	r1, #0
   18d34:	db09      	blt.n	18d4a <__aeabi_ldivmod+0x42>
   18d36:	2b00      	cmp	r3, #0
   18d38:	db1a      	blt.n	18d70 <__aeabi_ldivmod+0x68>
   18d3a:	f000 f84f 	bl	18ddc <__udivmoddi4>
   18d3e:	f8dd e004 	ldr.w	lr, [sp, #4]
   18d42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18d46:	b004      	add	sp, #16
   18d48:	4770      	bx	lr
   18d4a:	4240      	negs	r0, r0
   18d4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18d50:	2b00      	cmp	r3, #0
   18d52:	db1b      	blt.n	18d8c <__aeabi_ldivmod+0x84>
   18d54:	f000 f842 	bl	18ddc <__udivmoddi4>
   18d58:	f8dd e004 	ldr.w	lr, [sp, #4]
   18d5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18d60:	b004      	add	sp, #16
   18d62:	4240      	negs	r0, r0
   18d64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18d68:	4252      	negs	r2, r2
   18d6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18d6e:	4770      	bx	lr
   18d70:	4252      	negs	r2, r2
   18d72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18d76:	f000 f831 	bl	18ddc <__udivmoddi4>
   18d7a:	f8dd e004 	ldr.w	lr, [sp, #4]
   18d7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18d82:	b004      	add	sp, #16
   18d84:	4240      	negs	r0, r0
   18d86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18d8a:	4770      	bx	lr
   18d8c:	4252      	negs	r2, r2
   18d8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18d92:	f000 f823 	bl	18ddc <__udivmoddi4>
   18d96:	f8dd e004 	ldr.w	lr, [sp, #4]
   18d9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18d9e:	b004      	add	sp, #16
   18da0:	4252      	negs	r2, r2
   18da2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18da6:	4770      	bx	lr

00018da8 <__aeabi_uldivmod>:
   18da8:	b953      	cbnz	r3, 18dc0 <__aeabi_uldivmod+0x18>
   18daa:	b94a      	cbnz	r2, 18dc0 <__aeabi_uldivmod+0x18>
   18dac:	2900      	cmp	r1, #0
   18dae:	bf08      	it	eq
   18db0:	2800      	cmpeq	r0, #0
   18db2:	bf1c      	itt	ne
   18db4:	f04f 31ff 	movne.w	r1, #4294967295
   18db8:	f04f 30ff 	movne.w	r0, #4294967295
   18dbc:	f000 b80c 	b.w	18dd8 <__aeabi_idiv0>
   18dc0:	f1ad 0c08 	sub.w	ip, sp, #8
   18dc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   18dc8:	f000 f808 	bl	18ddc <__udivmoddi4>
   18dcc:	f8dd e004 	ldr.w	lr, [sp, #4]
   18dd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18dd4:	b004      	add	sp, #16
   18dd6:	4770      	bx	lr

00018dd8 <__aeabi_idiv0>:
   18dd8:	4770      	bx	lr
   18dda:	bf00      	nop

00018ddc <__udivmoddi4>:
   18ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18de0:	4686      	mov	lr, r0
   18de2:	468c      	mov	ip, r1
   18de4:	4608      	mov	r0, r1
   18de6:	9e08      	ldr	r6, [sp, #32]
   18de8:	4615      	mov	r5, r2
   18dea:	4674      	mov	r4, lr
   18dec:	4619      	mov	r1, r3
   18dee:	2b00      	cmp	r3, #0
   18df0:	f040 80c1 	bne.w	18f76 <__udivmoddi4+0x19a>
   18df4:	4285      	cmp	r5, r0
   18df6:	fab2 f282 	clz	r2, r2
   18dfa:	d945      	bls.n	18e88 <__udivmoddi4+0xac>
   18dfc:	b14a      	cbz	r2, 18e12 <__udivmoddi4+0x36>
   18dfe:	f1c2 0320 	rsb	r3, r2, #32
   18e02:	fa00 fc02 	lsl.w	ip, r0, r2
   18e06:	4095      	lsls	r5, r2
   18e08:	4094      	lsls	r4, r2
   18e0a:	fa2e f303 	lsr.w	r3, lr, r3
   18e0e:	ea43 0c0c 	orr.w	ip, r3, ip
   18e12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18e16:	b2a8      	uxth	r0, r5
   18e18:	0c23      	lsrs	r3, r4, #16
   18e1a:	fbbc f8fe 	udiv	r8, ip, lr
   18e1e:	fb0e cc18 	mls	ip, lr, r8, ip
   18e22:	fb08 f900 	mul.w	r9, r8, r0
   18e26:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   18e2a:	4599      	cmp	r9, r3
   18e2c:	d928      	bls.n	18e80 <__udivmoddi4+0xa4>
   18e2e:	18eb      	adds	r3, r5, r3
   18e30:	f108 37ff 	add.w	r7, r8, #4294967295
   18e34:	d204      	bcs.n	18e40 <__udivmoddi4+0x64>
   18e36:	4599      	cmp	r9, r3
   18e38:	d902      	bls.n	18e40 <__udivmoddi4+0x64>
   18e3a:	f1a8 0702 	sub.w	r7, r8, #2
   18e3e:	442b      	add	r3, r5
   18e40:	eba3 0309 	sub.w	r3, r3, r9
   18e44:	b2a4      	uxth	r4, r4
   18e46:	fbb3 fcfe 	udiv	ip, r3, lr
   18e4a:	fb0e 331c 	mls	r3, lr, ip, r3
   18e4e:	fb0c f000 	mul.w	r0, ip, r0
   18e52:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   18e56:	42a0      	cmp	r0, r4
   18e58:	d914      	bls.n	18e84 <__udivmoddi4+0xa8>
   18e5a:	192c      	adds	r4, r5, r4
   18e5c:	f10c 33ff 	add.w	r3, ip, #4294967295
   18e60:	d204      	bcs.n	18e6c <__udivmoddi4+0x90>
   18e62:	42a0      	cmp	r0, r4
   18e64:	d902      	bls.n	18e6c <__udivmoddi4+0x90>
   18e66:	f1ac 0302 	sub.w	r3, ip, #2
   18e6a:	442c      	add	r4, r5
   18e6c:	1a24      	subs	r4, r4, r0
   18e6e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   18e72:	b11e      	cbz	r6, 18e7c <__udivmoddi4+0xa0>
   18e74:	40d4      	lsrs	r4, r2
   18e76:	2300      	movs	r3, #0
   18e78:	6034      	str	r4, [r6, #0]
   18e7a:	6073      	str	r3, [r6, #4]
   18e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18e80:	4647      	mov	r7, r8
   18e82:	e7dd      	b.n	18e40 <__udivmoddi4+0x64>
   18e84:	4663      	mov	r3, ip
   18e86:	e7f1      	b.n	18e6c <__udivmoddi4+0x90>
   18e88:	bb92      	cbnz	r2, 18ef0 <__udivmoddi4+0x114>
   18e8a:	1b43      	subs	r3, r0, r5
   18e8c:	2101      	movs	r1, #1
   18e8e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18e92:	b2af      	uxth	r7, r5
   18e94:	0c20      	lsrs	r0, r4, #16
   18e96:	fbb3 fcfe 	udiv	ip, r3, lr
   18e9a:	fb0e 331c 	mls	r3, lr, ip, r3
   18e9e:	fb0c f807 	mul.w	r8, ip, r7
   18ea2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   18ea6:	4598      	cmp	r8, r3
   18ea8:	d961      	bls.n	18f6e <__udivmoddi4+0x192>
   18eaa:	18eb      	adds	r3, r5, r3
   18eac:	f10c 30ff 	add.w	r0, ip, #4294967295
   18eb0:	d204      	bcs.n	18ebc <__udivmoddi4+0xe0>
   18eb2:	4598      	cmp	r8, r3
   18eb4:	d902      	bls.n	18ebc <__udivmoddi4+0xe0>
   18eb6:	f1ac 0002 	sub.w	r0, ip, #2
   18eba:	442b      	add	r3, r5
   18ebc:	eba3 0308 	sub.w	r3, r3, r8
   18ec0:	b2a4      	uxth	r4, r4
   18ec2:	fbb3 fcfe 	udiv	ip, r3, lr
   18ec6:	fb0e 331c 	mls	r3, lr, ip, r3
   18eca:	fb0c f707 	mul.w	r7, ip, r7
   18ece:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   18ed2:	42a7      	cmp	r7, r4
   18ed4:	d94d      	bls.n	18f72 <__udivmoddi4+0x196>
   18ed6:	192c      	adds	r4, r5, r4
   18ed8:	f10c 33ff 	add.w	r3, ip, #4294967295
   18edc:	d204      	bcs.n	18ee8 <__udivmoddi4+0x10c>
   18ede:	42a7      	cmp	r7, r4
   18ee0:	d902      	bls.n	18ee8 <__udivmoddi4+0x10c>
   18ee2:	f1ac 0302 	sub.w	r3, ip, #2
   18ee6:	442c      	add	r4, r5
   18ee8:	1be4      	subs	r4, r4, r7
   18eea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   18eee:	e7c0      	b.n	18e72 <__udivmoddi4+0x96>
   18ef0:	f1c2 0320 	rsb	r3, r2, #32
   18ef4:	4095      	lsls	r5, r2
   18ef6:	4094      	lsls	r4, r2
   18ef8:	fa20 f103 	lsr.w	r1, r0, r3
   18efc:	fa2e f303 	lsr.w	r3, lr, r3
   18f00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18f04:	4090      	lsls	r0, r2
   18f06:	b2af      	uxth	r7, r5
   18f08:	4303      	orrs	r3, r0
   18f0a:	fbb1 fcfe 	udiv	ip, r1, lr
   18f0e:	fb0e 101c 	mls	r0, lr, ip, r1
   18f12:	0c19      	lsrs	r1, r3, #16
   18f14:	fb0c f807 	mul.w	r8, ip, r7
   18f18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   18f1c:	4588      	cmp	r8, r1
   18f1e:	d922      	bls.n	18f66 <__udivmoddi4+0x18a>
   18f20:	1869      	adds	r1, r5, r1
   18f22:	f10c 30ff 	add.w	r0, ip, #4294967295
   18f26:	d204      	bcs.n	18f32 <__udivmoddi4+0x156>
   18f28:	4588      	cmp	r8, r1
   18f2a:	d902      	bls.n	18f32 <__udivmoddi4+0x156>
   18f2c:	f1ac 0002 	sub.w	r0, ip, #2
   18f30:	4429      	add	r1, r5
   18f32:	eba1 0108 	sub.w	r1, r1, r8
   18f36:	b29b      	uxth	r3, r3
   18f38:	fbb1 fcfe 	udiv	ip, r1, lr
   18f3c:	fb0e 111c 	mls	r1, lr, ip, r1
   18f40:	fb0c f707 	mul.w	r7, ip, r7
   18f44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   18f48:	429f      	cmp	r7, r3
   18f4a:	d90e      	bls.n	18f6a <__udivmoddi4+0x18e>
   18f4c:	18eb      	adds	r3, r5, r3
   18f4e:	f10c 31ff 	add.w	r1, ip, #4294967295
   18f52:	d204      	bcs.n	18f5e <__udivmoddi4+0x182>
   18f54:	429f      	cmp	r7, r3
   18f56:	d902      	bls.n	18f5e <__udivmoddi4+0x182>
   18f58:	f1ac 0102 	sub.w	r1, ip, #2
   18f5c:	442b      	add	r3, r5
   18f5e:	1bdb      	subs	r3, r3, r7
   18f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   18f64:	e793      	b.n	18e8e <__udivmoddi4+0xb2>
   18f66:	4660      	mov	r0, ip
   18f68:	e7e3      	b.n	18f32 <__udivmoddi4+0x156>
   18f6a:	4661      	mov	r1, ip
   18f6c:	e7f7      	b.n	18f5e <__udivmoddi4+0x182>
   18f6e:	4660      	mov	r0, ip
   18f70:	e7a4      	b.n	18ebc <__udivmoddi4+0xe0>
   18f72:	4663      	mov	r3, ip
   18f74:	e7b8      	b.n	18ee8 <__udivmoddi4+0x10c>
   18f76:	4283      	cmp	r3, r0
   18f78:	d906      	bls.n	18f88 <__udivmoddi4+0x1ac>
   18f7a:	b916      	cbnz	r6, 18f82 <__udivmoddi4+0x1a6>
   18f7c:	2100      	movs	r1, #0
   18f7e:	4608      	mov	r0, r1
   18f80:	e77c      	b.n	18e7c <__udivmoddi4+0xa0>
   18f82:	e9c6 e000 	strd	lr, r0, [r6]
   18f86:	e7f9      	b.n	18f7c <__udivmoddi4+0x1a0>
   18f88:	fab3 f783 	clz	r7, r3
   18f8c:	b98f      	cbnz	r7, 18fb2 <__udivmoddi4+0x1d6>
   18f8e:	4283      	cmp	r3, r0
   18f90:	d301      	bcc.n	18f96 <__udivmoddi4+0x1ba>
   18f92:	4572      	cmp	r2, lr
   18f94:	d808      	bhi.n	18fa8 <__udivmoddi4+0x1cc>
   18f96:	ebbe 0402 	subs.w	r4, lr, r2
   18f9a:	eb60 0303 	sbc.w	r3, r0, r3
   18f9e:	2001      	movs	r0, #1
   18fa0:	469c      	mov	ip, r3
   18fa2:	b91e      	cbnz	r6, 18fac <__udivmoddi4+0x1d0>
   18fa4:	2100      	movs	r1, #0
   18fa6:	e769      	b.n	18e7c <__udivmoddi4+0xa0>
   18fa8:	4638      	mov	r0, r7
   18faa:	e7fa      	b.n	18fa2 <__udivmoddi4+0x1c6>
   18fac:	e9c6 4c00 	strd	r4, ip, [r6]
   18fb0:	e7f8      	b.n	18fa4 <__udivmoddi4+0x1c8>
   18fb2:	f1c7 0c20 	rsb	ip, r7, #32
   18fb6:	40bb      	lsls	r3, r7
   18fb8:	fa0e f507 	lsl.w	r5, lr, r7
   18fbc:	fa22 f40c 	lsr.w	r4, r2, ip
   18fc0:	fa2e f10c 	lsr.w	r1, lr, ip
   18fc4:	40ba      	lsls	r2, r7
   18fc6:	431c      	orrs	r4, r3
   18fc8:	fa20 f30c 	lsr.w	r3, r0, ip
   18fcc:	40b8      	lsls	r0, r7
   18fce:	ea4f 4914 	mov.w	r9, r4, lsr #16
   18fd2:	4301      	orrs	r1, r0
   18fd4:	fa1f fe84 	uxth.w	lr, r4
   18fd8:	fbb3 f8f9 	udiv	r8, r3, r9
   18fdc:	fb09 3018 	mls	r0, r9, r8, r3
   18fe0:	0c0b      	lsrs	r3, r1, #16
   18fe2:	fb08 fa0e 	mul.w	sl, r8, lr
   18fe6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   18fea:	459a      	cmp	sl, r3
   18fec:	d940      	bls.n	19070 <__udivmoddi4+0x294>
   18fee:	18e3      	adds	r3, r4, r3
   18ff0:	f108 30ff 	add.w	r0, r8, #4294967295
   18ff4:	d204      	bcs.n	19000 <__udivmoddi4+0x224>
   18ff6:	459a      	cmp	sl, r3
   18ff8:	d902      	bls.n	19000 <__udivmoddi4+0x224>
   18ffa:	f1a8 0002 	sub.w	r0, r8, #2
   18ffe:	4423      	add	r3, r4
   19000:	eba3 030a 	sub.w	r3, r3, sl
   19004:	b289      	uxth	r1, r1
   19006:	fbb3 f8f9 	udiv	r8, r3, r9
   1900a:	fb09 3318 	mls	r3, r9, r8, r3
   1900e:	fb08 fe0e 	mul.w	lr, r8, lr
   19012:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   19016:	458e      	cmp	lr, r1
   19018:	d92c      	bls.n	19074 <__udivmoddi4+0x298>
   1901a:	1861      	adds	r1, r4, r1
   1901c:	f108 33ff 	add.w	r3, r8, #4294967295
   19020:	d204      	bcs.n	1902c <__udivmoddi4+0x250>
   19022:	458e      	cmp	lr, r1
   19024:	d902      	bls.n	1902c <__udivmoddi4+0x250>
   19026:	f1a8 0302 	sub.w	r3, r8, #2
   1902a:	4421      	add	r1, r4
   1902c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   19030:	eba1 010e 	sub.w	r1, r1, lr
   19034:	fba0 9802 	umull	r9, r8, r0, r2
   19038:	4541      	cmp	r1, r8
   1903a:	46ce      	mov	lr, r9
   1903c:	4643      	mov	r3, r8
   1903e:	d302      	bcc.n	19046 <__udivmoddi4+0x26a>
   19040:	d106      	bne.n	19050 <__udivmoddi4+0x274>
   19042:	454d      	cmp	r5, r9
   19044:	d204      	bcs.n	19050 <__udivmoddi4+0x274>
   19046:	3801      	subs	r0, #1
   19048:	ebb9 0e02 	subs.w	lr, r9, r2
   1904c:	eb68 0304 	sbc.w	r3, r8, r4
   19050:	2e00      	cmp	r6, #0
   19052:	d0a7      	beq.n	18fa4 <__udivmoddi4+0x1c8>
   19054:	ebb5 020e 	subs.w	r2, r5, lr
   19058:	eb61 0103 	sbc.w	r1, r1, r3
   1905c:	fa01 fc0c 	lsl.w	ip, r1, ip
   19060:	fa22 f307 	lsr.w	r3, r2, r7
   19064:	40f9      	lsrs	r1, r7
   19066:	ea4c 0303 	orr.w	r3, ip, r3
   1906a:	e9c6 3100 	strd	r3, r1, [r6]
   1906e:	e799      	b.n	18fa4 <__udivmoddi4+0x1c8>
   19070:	4640      	mov	r0, r8
   19072:	e7c5      	b.n	19000 <__udivmoddi4+0x224>
   19074:	4643      	mov	r3, r8
   19076:	e7d9      	b.n	1902c <__udivmoddi4+0x250>

00019078 <strcmp>:
   19078:	f810 2b01 	ldrb.w	r2, [r0], #1
   1907c:	f811 3b01 	ldrb.w	r3, [r1], #1
   19080:	2a01      	cmp	r2, #1
   19082:	bf28      	it	cs
   19084:	429a      	cmpcs	r2, r3
   19086:	d0f7      	beq.n	19078 <strcmp>
   19088:	1ad0      	subs	r0, r2, r3
   1908a:	4770      	bx	lr

0001908c <strlen>:
   1908c:	4603      	mov	r3, r0
   1908e:	f813 2b01 	ldrb.w	r2, [r3], #1
   19092:	2a00      	cmp	r2, #0
   19094:	d1fb      	bne.n	1908e <strlen+0x2>
   19096:	1a18      	subs	r0, r3, r0
   19098:	3801      	subs	r0, #1
   1909a:	4770      	bx	lr
   1909c:	0000      	movs	r0, r0
	...

000190a0 <adxl362_attr_set>:
static int adxl362_attr_set(const struct device *dev,
			    enum sensor_channel chan,
			    enum sensor_attribute attr,
			    const struct sensor_value *val)
{
	switch (attr) {
   190a0:	2a02      	cmp	r2, #2
{
   190a2:	b570      	push	{r4, r5, r6, lr}
   190a4:	4604      	mov	r4, r0
   190a6:	460d      	mov	r5, r1
   190a8:	4618      	mov	r0, r3
	switch (attr) {
   190aa:	d811      	bhi.n	190d0 <adxl362_attr_set+0x30>
   190ac:	b1da      	cbz	r2, 190e6 <adxl362_attr_set+0x46>
	if (chan != SENSOR_CHAN_ACCEL_X &&
   190ae:	2d02      	cmp	r5, #2
	uint16_t threshold = val->val1;
   190b0:	8819      	ldrh	r1, [r3, #0]
	if (chan != SENSOR_CHAN_ACCEL_X &&
   190b2:	d86d      	bhi.n	19190 <adxl362_attr_set+0xf0>
	if (threshold > 2047) {
   190b4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
   190b8:	d26a      	bcs.n	19190 <adxl362_attr_set+0xf0>
		reg = ADXL362_REG_THRESH_ACT_L;
   190ba:	2a02      	cmp	r2, #2
	ret = adxl362_set_reg(dev, (threshold & 0x7FF), reg, 2);
   190bc:	f04f 0302 	mov.w	r3, #2
   190c0:	bf14      	ite	ne
   190c2:	2223      	movne	r2, #35	; 0x23
   190c4:	2220      	moveq	r2, #32
		return adxl362_attr_set_thresh(dev, chan, attr, val);
	case SENSOR_ATTR_HYSTERESIS:
	{
		uint16_t timeout = val->val1;

		return adxl362_set_reg(dev, timeout, ADXL362_REG_TIME_INACT_L, 2);
   190c6:	6860      	ldr	r0, [r4, #4]
		LOG_DBG("attr_set() not supported on this channel.");
		return -ENOTSUP;
	}

	return 0;
}
   190c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return adxl362_set_reg(dev, timeout, ADXL362_REG_TIME_INACT_L, 2);
   190cc:	f00f b9a7 	b.w	2841e <adxl362_set_reg.isra.0>
	switch (attr) {
   190d0:	2a05      	cmp	r2, #5
   190d2:	d004      	beq.n	190de <adxl362_attr_set+0x3e>
	switch (chan) {
   190d4:	2903      	cmp	r1, #3
   190d6:	d91c      	bls.n	19112 <adxl362_attr_set+0x72>
   190d8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   190dc:	e05a      	b.n	19194 <adxl362_attr_set+0xf4>
		return adxl362_set_reg(dev, timeout, ADXL362_REG_TIME_INACT_L, 2);
   190de:	2302      	movs	r3, #2
   190e0:	2225      	movs	r2, #37	; 0x25
   190e2:	8801      	ldrh	r1, [r0, #0]
   190e4:	e7ef      	b.n	190c6 <adxl362_attr_set+0x26>
	switch (chan) {
   190e6:	2903      	cmp	r1, #3
   190e8:	d8f6      	bhi.n	190d8 <adxl362_attr_set+0x38>
						   val->val2 / 1000);
   190ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
		out_rate = adxl362_freq_to_odr_val(val->val1,
   190ee:	881d      	ldrh	r5, [r3, #0]
						   val->val2 / 1000);
   190f0:	685b      	ldr	r3, [r3, #4]
   190f2:	fb93 f3f1 	sdiv	r3, r3, r1
		out_rate = adxl362_freq_to_odr_val(val->val1,
   190f6:	b29b      	uxth	r3, r3
	if (freq_int == 0U && freq_milli == 0U) {
   190f8:	ea55 0103 	orrs.w	r1, r5, r3
   190fc:	d0ec      	beq.n	190d8 <adxl362_attr_set+0x38>
	for (i = 0; i < ARRAY_SIZE(adxl362_odr_map); i++) {
   190fe:	4928      	ldr	r1, [pc, #160]	; (191a0 <adxl362_attr_set+0x100>)
		if (freq_int < adxl362_odr_map[i].freq_int ||
   19100:	8808      	ldrh	r0, [r1, #0]
   19102:	4285      	cmp	r5, r0
   19104:	d23a      	bcs.n	1917c <adxl362_attr_set+0xdc>
		return adxl362_set_output_rate(dev, out_rate);
   19106:	4620      	mov	r0, r4
}
   19108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return adxl362_set_output_rate(dev, out_rate);
   1910c:	b2d1      	uxtb	r1, r2
   1910e:	f00f b9b1 	b.w	28474 <adxl362_set_output_rate>
	switch (attr) {
   19112:	2a07      	cmp	r2, #7
   19114:	d1e0      	bne.n	190d8 <adxl362_attr_set+0x38>
 *
 * @return The converted value, in Gs.
 */
static inline int32_t sensor_ms2_to_g(const struct sensor_value *ms2)
{
	int64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
   19116:	685b      	ldr	r3, [r3, #4]
   19118:	6805      	ldr	r5, [r0, #0]
   1911a:	4822      	ldr	r0, [pc, #136]	; (191a4 <adxl362_attr_set+0x104>)
   1911c:	17d9      	asrs	r1, r3, #31
   1911e:	fbc5 3100 	smlal	r3, r1, r5, r0

	if (micro_ms2 > 0) {
   19122:	2b01      	cmp	r3, #1
   19124:	f171 0200 	sbcs.w	r2, r1, #0
   19128:	db1c      	blt.n	19164 <adxl362_attr_set+0xc4>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
   1912a:	f500 106e 	add.w	r0, r0, #3899392	; 0x3b8000
   1912e:	f600 705d 	addw	r0, r0, #3933	; 0xf5d
   19132:	1818      	adds	r0, r3, r0
   19134:	f141 0100 	adc.w	r1, r1, #0
   19138:	a317      	add	r3, pc, #92	; (adr r3, 19198 <adxl362_attr_set+0xf8>)
   1913a:	e9d3 2300 	ldrd	r2, r3, [r3]
	} else {
		return (micro_ms2 - SENSOR_G / 2) / SENSOR_G;
   1913e:	f7ff fde3 	bl	18d08 <__aeabi_ldivmod>
		range_reg = adxl362_range_to_reg_val(sensor_ms2_to_g(val));
   19142:	b280      	uxth	r0, r0
		if (range <= adxl362_acc_range_map[i].range) {
   19144:	2802      	cmp	r0, #2
   19146:	d915      	bls.n	19174 <adxl362_attr_set+0xd4>
   19148:	2804      	cmp	r0, #4
   1914a:	d915      	bls.n	19178 <adxl362_attr_set+0xd8>
   1914c:	2808      	cmp	r0, #8
   1914e:	d8c3      	bhi.n	190d8 <adxl362_attr_set+0x38>
	for (i = 0; i < ARRAY_SIZE(adxl362_acc_range_map); i++) {
   19150:	2202      	movs	r2, #2
			return adxl362_acc_range_map[i].reg_val;
   19152:	4b15      	ldr	r3, [pc, #84]	; (191a8 <adxl362_attr_set+0x108>)
		return adxl362_set_range(dev, range_reg);
   19154:	4620      	mov	r0, r4
}
   19156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return adxl362_acc_range_map[i].reg_val;
   1915a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		return adxl362_set_range(dev, range_reg);
   1915e:	7899      	ldrb	r1, [r3, #2]
   19160:	f00f b969 	b.w	28436 <adxl362_set_range>
   19164:	4811      	ldr	r0, [pc, #68]	; (191ac <adxl362_attr_set+0x10c>)
   19166:	1818      	adds	r0, r3, r0
   19168:	f161 0100 	sbc.w	r1, r1, #0
   1916c:	a30a      	add	r3, pc, #40	; (adr r3, 19198 <adxl362_attr_set+0xf8>)
   1916e:	e9d3 2300 	ldrd	r2, r3, [r3]
   19172:	e7e4      	b.n	1913e <adxl362_attr_set+0x9e>
	for (i = 0; i < ARRAY_SIZE(adxl362_acc_range_map); i++) {
   19174:	2200      	movs	r2, #0
   19176:	e7ec      	b.n	19152 <adxl362_attr_set+0xb2>
   19178:	2201      	movs	r2, #1
   1917a:	e7ea      	b.n	19152 <adxl362_attr_set+0xb2>
		if (freq_int < adxl362_odr_map[i].freq_int ||
   1917c:	d102      	bne.n	19184 <adxl362_attr_set+0xe4>
		    (freq_int == adxl362_odr_map[i].freq_int &&
   1917e:	8848      	ldrh	r0, [r1, #2]
   19180:	4298      	cmp	r0, r3
   19182:	d2c0      	bcs.n	19106 <adxl362_attr_set+0x66>
	for (i = 0; i < ARRAY_SIZE(adxl362_odr_map); i++) {
   19184:	3201      	adds	r2, #1
   19186:	2a06      	cmp	r2, #6
   19188:	f101 0104 	add.w	r1, r1, #4
   1918c:	d1b8      	bne.n	19100 <adxl362_attr_set+0x60>
   1918e:	e7a3      	b.n	190d8 <adxl362_attr_set+0x38>
		return -EINVAL;
   19190:	f06f 0015 	mvn.w	r0, #21
}
   19194:	bd70      	pop	{r4, r5, r6, pc}
   19196:	bf00      	nop
   19198:	0095a33a 	.word	0x0095a33a
   1919c:	00000000 	.word	0x00000000
   191a0:	0002cb9e 	.word	0x0002cb9e
   191a4:	000f4240 	.word	0x000f4240
   191a8:	0002cb92 	.word	0x0002cb92
   191ac:	ffb52e63 	.word	0xffb52e63

000191b0 <parse_edrx>:

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   191b0:	2300      	movs	r3, #0
{
   191b2:	b570      	push	{r4, r5, r6, lr}
   191b4:	b086      	sub	sp, #24
	struct at_param_list resp_list = {0};
   191b6:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   191ba:	2304      	movs	r3, #4
{
   191bc:	460d      	mov	r5, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   191be:	4606      	mov	r6, r0
	size_t len = sizeof(tmp_buf) - 1;
   191c0:	9301      	str	r3, [sp, #4]
	if ((at_response == NULL) || (cfg == NULL)) {
   191c2:	2800      	cmp	r0, #0
   191c4:	f000 8086 	beq.w	192d4 <parse_edrx+0x124>
   191c8:	2900      	cmp	r1, #0
   191ca:	f000 8083 	beq.w	192d4 <parse_edrx+0x124>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   191ce:	2106      	movs	r1, #6
   191d0:	a804      	add	r0, sp, #16
   191d2:	f010 f9d8 	bl	29586 <at_params_list_init>
	if (err) {
   191d6:	4604      	mov	r4, r0
   191d8:	2800      	cmp	r0, #0
   191da:	d138      	bne.n	1924e <parse_edrx+0x9e>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   191dc:	4601      	mov	r1, r0
   191de:	aa04      	add	r2, sp, #16
   191e0:	4630      	mov	r0, r6
   191e2:	f010 f9b7 	bl	29554 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   191e6:	4604      	mov	r4, r0
   191e8:	bb48      	cbnz	r0, 1923e <parse_edrx+0x8e>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
		goto clean_exit;
	}

	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   191ea:	466a      	mov	r2, sp
   191ec:	2101      	movs	r1, #1
   191ee:	a804      	add	r0, sp, #16
   191f0:	f010 faa5 	bl	2973e <at_params_int_get>
	if (err) {
   191f4:	4604      	mov	r4, r0
   191f6:	bb10      	cbnz	r0, 1923e <parse_edrx+0x8e>
	/* The access technology indicators 4 for LTE-M and 5 for NB-IoT are
	 * specified in 3GPP 27.007 Ch. 7.41.
	 * 0 indicates that the current cell doesn't use eDRX.
	 * Any other value is not expected, and we use 0xFFFFFFFF to represent those.
	 */
	cfg->mode = tmp_int == 0 ? LTE_LC_LTE_MODE_NONE :
   191f8:	9c00      	ldr	r4, [sp, #0]
   191fa:	b324      	cbz	r4, 19246 <parse_edrx+0x96>
   191fc:	2c04      	cmp	r4, #4
   191fe:	d029      	beq.n	19254 <parse_edrx+0xa4>
   19200:	2c05      	cmp	r4, #5
   19202:	bf0c      	ite	eq
   19204:	2309      	moveq	r3, #9
   19206:	23ff      	movne	r3, #255	; 0xff
   19208:	702b      	strb	r3, [r5, #0]
		return 0;
	} else if (cfg->mode == 0xFFFFFFFF) {
		return -ENODATA;
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   1920a:	2103      	movs	r1, #3
   1920c:	ab01      	add	r3, sp, #4
   1920e:	aa02      	add	r2, sp, #8
   19210:	a804      	add	r0, sp, #16
   19212:	f010 fac0 	bl	29796 <at_params_string_get>
				   tmp_buf, &len);
	if (err) {
   19216:	4604      	mov	r4, r0
   19218:	b988      	cbnz	r0, 1923e <parse_edrx+0x8e>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
		goto clean_exit;
	}

	tmp_buf[len] = '\0';
   1921a:	9b01      	ldr	r3, [sp, #4]
	 * special case of idx == 0 for LTE-M, where the value is 5.12 seconds.
	 * The variable idx is used to map to the entry of index idx in
	 * Figure 10.5.5.32/3GPP TS 24.008, table for eDRX in S1 mode, and
	 * note 4 and 5 are taken into account.
	 */
	idx = strtoul(tmp_buf, NULL, 2);
   1921c:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   1921e:	3318      	adds	r3, #24
   19220:	446b      	add	r3, sp
   19222:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   19226:	2202      	movs	r2, #2
   19228:	a802      	add	r0, sp, #8
   1922a:	f00c fdab 	bl	25d84 <strtoul>

	/* Confirm valid system mode and set Paging Time Window multiplier.
	 * Multiplier is 1.28 s for LTE-M, and 2.56 s for NB-IoT, derived from
	 * figure 10.5.5.32/3GPP TS 24.008.
	 */
	err = get_ptw_multiplier(cfg->mode, &ptw_multiplier);
   1922e:	782b      	ldrb	r3, [r5, #0]
	idx = strtoul(tmp_buf, NULL, 2);
   19230:	b2c0      	uxtb	r0, r0
	switch (lte_mode) {
   19232:	2b07      	cmp	r3, #7
   19234:	d010      	beq.n	19258 <parse_edrx+0xa8>
   19236:	2b09      	cmp	r3, #9
   19238:	d013      	beq.n	19262 <parse_edrx+0xb2>
   1923a:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
   1923e:	a804      	add	r0, sp, #16
   19240:	f010 f9cb 	bl	295da <at_params_list_free>

	return err;
   19244:	e003      	b.n	1924e <parse_edrx+0x9e>
		cfg->edrx = 0;
   19246:	2300      	movs	r3, #0
	cfg->mode = tmp_int == 0 ? LTE_LC_LTE_MODE_NONE :
   19248:	702c      	strb	r4, [r5, #0]
		cfg->edrx = 0;
   1924a:	606b      	str	r3, [r5, #4]
		cfg->ptw = 0;
   1924c:	60ab      	str	r3, [r5, #8]
}
   1924e:	4620      	mov	r0, r4
   19250:	b006      	add	sp, #24
   19252:	bd70      	pop	{r4, r5, r6, pc}
   19254:	2307      	movs	r3, #7
   19256:	e7d7      	b.n	19208 <parse_edrx+0x58>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   19258:	280f      	cmp	r0, #15
   1925a:	d909      	bls.n	19270 <parse_edrx+0xc0>
		return -EINVAL;
   1925c:	f06f 0415 	mvn.w	r4, #21
   19260:	e7ed      	b.n	1923e <parse_edrx+0x8e>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   19262:	280f      	cmp	r0, #15
   19264:	d8fa      	bhi.n	1925c <parse_edrx+0xac>
		multiplier = edrx_lookup_nbiot[idx];
   19266:	4b20      	ldr	r3, [pc, #128]	; (192e8 <parse_edrx+0x138>)
		*ptw_multiplier = 2.56;
   19268:	4e20      	ldr	r6, [pc, #128]	; (192ec <parse_edrx+0x13c>)
		multiplier = edrx_lookup_nbiot[idx];
   1926a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
		break;
   1926e:	e003      	b.n	19278 <parse_edrx+0xc8>
		multiplier = edrx_lookup_ltem[idx];
   19270:	4b1f      	ldr	r3, [pc, #124]	; (192f0 <parse_edrx+0x140>)
		*ptw_multiplier = 1.28;
   19272:	4e20      	ldr	r6, [pc, #128]	; (192f4 <parse_edrx+0x144>)
		multiplier = edrx_lookup_ltem[idx];
   19274:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   19278:	b350      	cbz	r0, 192d0 <parse_edrx+0x120>
   1927a:	f7ff f96b 	bl	18554 <__aeabi_i2d>
   1927e:	a318      	add	r3, pc, #96	; (adr r3, 192e0 <parse_edrx+0x130>)
   19280:	e9d3 2300 	ldrd	r2, r3, [r3]
   19284:	f7ff f9d0 	bl	18628 <__aeabi_dmul>
   19288:	f7ff fbe0 	bl	18a4c <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   1928c:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1928e:	6068      	str	r0, [r5, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   19290:	eb0d 0301 	add.w	r3, sp, r1
   19294:	aa02      	add	r2, sp, #8
   19296:	a804      	add	r0, sp, #16
	len = sizeof(tmp_buf) - 1;
   19298:	9101      	str	r1, [sp, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1929a:	f010 fa7c 	bl	29796 <at_params_string_get>
	if (err) {
   1929e:	4604      	mov	r4, r0
   192a0:	2800      	cmp	r0, #0
   192a2:	d1cc      	bne.n	1923e <parse_edrx+0x8e>
	tmp_buf[len] = '\0';
   192a4:	9b01      	ldr	r3, [sp, #4]
	idx = strtoul(tmp_buf, NULL, 2);
   192a6:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   192a8:	3318      	adds	r3, #24
   192aa:	446b      	add	r3, sp
   192ac:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   192b0:	2202      	movs	r2, #2
   192b2:	a802      	add	r0, sp, #8
   192b4:	f00c fd66 	bl	25d84 <strtoul>
   192b8:	b2c0      	uxtb	r0, r0
	if (idx > 15) {
   192ba:	280f      	cmp	r0, #15
   192bc:	d8ce      	bhi.n	1925c <parse_edrx+0xac>
	idx += 1;
   192be:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   192c0:	b2c0      	uxtb	r0, r0
   192c2:	f7ff fccd 	bl	18c60 <__aeabi_i2f>
   192c6:	4631      	mov	r1, r6
   192c8:	f7fe ff3e 	bl	18148 <__aeabi_fmul>
   192cc:	60a8      	str	r0, [r5, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   192ce:	e7b6      	b.n	1923e <parse_edrx+0x8e>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   192d0:	4809      	ldr	r0, [pc, #36]	; (192f8 <parse_edrx+0x148>)
   192d2:	e7db      	b.n	1928c <parse_edrx+0xdc>
		return -EINVAL;
   192d4:	f06f 0415 	mvn.w	r4, #21
   192d8:	e7b9      	b.n	1924e <parse_edrx+0x9e>
   192da:	bf00      	nop
   192dc:	f3af 8000 	nop.w
   192e0:	47ae147b 	.word	0x47ae147b
   192e4:	40247ae1 	.word	0x40247ae1
   192e8:	0002cbb6 	.word	0x0002cbb6
   192ec:	4023d70a 	.word	0x4023d70a
   192f0:	0002cbd6 	.word	0x0002cbd6
   192f4:	3fa3d70a 	.word	0x3fa3d70a
   192f8:	40a3d70a 	.word	0x40a3d70a

000192fc <pdn_event_handler>:
    modem_info_string_get(MODEM_INFO_IMSI, sbuf, sizeof(sbuf));
    printk("Modem IMSI: %s\n", sbuf);
}

void pdn_event_handler(uint8_t cid, enum pdn_event event, int reason)
{
   192fc:	b570      	push	{r4, r5, r6, lr}
   192fe:	460d      	mov	r5, r1
   19300:	4604      	mov	r4, r0
   19302:	4616      	mov	r6, r2
	struct shared_data *sd = shared_data_get();
   19304:	f000 fa1e 	bl	19744 <shared_data_get>
	switch (event)
   19308:	2d05      	cmp	r5, #5
   1930a:	d826      	bhi.n	1935a <pdn_event_handler+0x5e>
   1930c:	e8df f005 	tbb	[pc, r5]
   19310:	19130d03 	.word	0x19130d03
   19314:	1622      	.short	0x1622
	{
	case PDN_EVENT_CNEC_ESM:
		printk("PDP context %d error, %s\n", cid, pdn_esm_strerror(reason));
   19316:	4630      	mov	r0, r6
   19318:	f007 ff5e 	bl	211d8 <pdn_esm_strerror>
   1931c:	4621      	mov	r1, r4
   1931e:	4602      	mov	r2, r0
   19320:	4810      	ldr	r0, [pc, #64]	; (19364 <pdn_event_handler+0x68>)
#endif
	default:
		printk("PDP context %d, unknown event %d\n", cid, event);
		break;
	}
}
   19322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("PDP context %d, unknown event %d\n", cid, event);
   19326:	f00d be4b 	b.w	26fc0 <printk>
		printk("PDP context %d activated\n", cid);
   1932a:	4621      	mov	r1, r4
   1932c:	480e      	ldr	r0, [pc, #56]	; (19368 <pdn_event_handler+0x6c>)
}
   1932e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("PDP context %d IPv6 down\n", cid);
   19332:	f00d be45 	b.w	26fc0 <printk>
		printk("PDP context %d deactivated\n", cid);
   19336:	4621      	mov	r1, r4
   19338:	480c      	ldr	r0, [pc, #48]	; (1936c <pdn_event_handler+0x70>)
   1933a:	e7f8      	b.n	1932e <pdn_event_handler+0x32>
		printk("PDP context %d network detached\n", cid);
   1933c:	4621      	mov	r1, r4
   1933e:	480c      	ldr	r0, [pc, #48]	; (19370 <pdn_event_handler+0x74>)
   19340:	e7f5      	b.n	1932e <pdn_event_handler+0x32>
		printk("PDP context %d IPv6 up\n", cid);
   19342:	4621      	mov	r1, r4
   19344:	480b      	ldr	r0, [pc, #44]	; (19374 <pdn_event_handler+0x78>)
   19346:	f00d fe3b 	bl	26fc0 <printk>
}
   1934a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1934e:	480a      	ldr	r0, [pc, #40]	; (19378 <pdn_event_handler+0x7c>)
   19350:	f00b bb10 	b.w	24974 <z_impl_k_sem_give>
		printk("PDP context %d IPv6 down\n", cid);
   19354:	4621      	mov	r1, r4
   19356:	4809      	ldr	r0, [pc, #36]	; (1937c <pdn_event_handler+0x80>)
   19358:	e7e9      	b.n	1932e <pdn_event_handler+0x32>
		printk("PDP context %d, unknown event %d\n", cid, event);
   1935a:	462a      	mov	r2, r5
   1935c:	4621      	mov	r1, r4
   1935e:	4808      	ldr	r0, [pc, #32]	; (19380 <pdn_event_handler+0x84>)
   19360:	e7df      	b.n	19322 <pdn_event_handler+0x26>
   19362:	bf00      	nop
   19364:	0002cbf6 	.word	0x0002cbf6
   19368:	0002cc10 	.word	0x0002cc10
   1936c:	0002cc2a 	.word	0x0002cc2a
   19370:	0002cc46 	.word	0x0002cc46
   19374:	0002cc67 	.word	0x0002cc67
   19378:	2000c938 	.word	0x2000c938
   1937c:	0002cc7f 	.word	0x0002cc7f
   19380:	0002cc99 	.word	0x0002cc99

00019384 <print_modem_info>:
void print_modem_info(void) {
   19384:	b500      	push	{lr}
   19386:	b0a1      	sub	sp, #132	; 0x84
    modem_info_string_get(MODEM_INFO_RSRP, sbuf, sizeof(sbuf));
   19388:	2280      	movs	r2, #128	; 0x80
   1938a:	4669      	mov	r1, sp
   1938c:	2000      	movs	r0, #0
   1938e:	f007 fcff 	bl	20d90 <modem_info_string_get>
    printk("Signal strength: %s\n", sbuf);
   19392:	4669      	mov	r1, sp
   19394:	4810      	ldr	r0, [pc, #64]	; (193d8 <print_modem_info+0x54>)
   19396:	f00d fe13 	bl	26fc0 <printk>
    modem_info_string_get(MODEM_INFO_BATTERY, sbuf, sizeof(sbuf));
   1939a:	2280      	movs	r2, #128	; 0x80
   1939c:	4669      	mov	r1, sp
   1939e:	200b      	movs	r0, #11
   193a0:	f007 fcf6 	bl	20d90 <modem_info_string_get>
    printk("Battery voltage: %s\n", sbuf);
   193a4:	4669      	mov	r1, sp
   193a6:	480d      	ldr	r0, [pc, #52]	; (193dc <print_modem_info+0x58>)
   193a8:	f00d fe0a 	bl	26fc0 <printk>
    modem_info_string_get(MODEM_INFO_FW_VERSION, sbuf, sizeof(sbuf));
   193ac:	2280      	movs	r2, #128	; 0x80
   193ae:	4669      	mov	r1, sp
   193b0:	200d      	movs	r0, #13
   193b2:	f007 fced 	bl	20d90 <modem_info_string_get>
    printk("Modem firmware version: %s\n", sbuf);
   193b6:	4669      	mov	r1, sp
   193b8:	4809      	ldr	r0, [pc, #36]	; (193e0 <print_modem_info+0x5c>)
   193ba:	f00d fe01 	bl	26fc0 <printk>
    modem_info_string_get(MODEM_INFO_IMSI, sbuf, sizeof(sbuf));
   193be:	2280      	movs	r2, #128	; 0x80
   193c0:	4669      	mov	r1, sp
   193c2:	2012      	movs	r0, #18
   193c4:	f007 fce4 	bl	20d90 <modem_info_string_get>
    printk("Modem IMSI: %s\n", sbuf);
   193c8:	4669      	mov	r1, sp
   193ca:	4806      	ldr	r0, [pc, #24]	; (193e4 <print_modem_info+0x60>)
   193cc:	f00d fdf8 	bl	26fc0 <printk>
}
   193d0:	b021      	add	sp, #132	; 0x84
   193d2:	f85d fb04 	ldr.w	pc, [sp], #4
   193d6:	bf00      	nop
   193d8:	0002ccbb 	.word	0x0002ccbb
   193dc:	0002ccd0 	.word	0x0002ccd0
   193e0:	0002cce5 	.word	0x0002cce5
   193e4:	0002cd01 	.word	0x0002cd01

000193e8 <main>:
#endif
}


int main(void)
{
   193e8:	b510      	push	{r4, lr}
	int err;
    char imei[IMEI_BUF_SIZE];

    printk("HTTPS client sample started\n\r");
   193ea:	4823      	ldr	r0, [pc, #140]	; (19478 <main+0x90>)
{
   193ec:	b08a      	sub	sp, #40	; 0x28
    printk("HTTPS client sample started\n\r");
   193ee:	f00d fde7 	bl	26fc0 <printk>
	shared_data_init();
   193f2:	f000 f991 	bl	19718 <shared_data_init>
	#ifdef CONFIG_BOARD_THINGY91_NRF9160NS
	thingy91_sensors_init();
   193f6:	f000 faa3 	bl	19940 <thingy91_sensors_init>
	#endif
	// Initialize modem library
    err = nrf_modem_lib_init();
   193fa:	f005 fbf5 	bl	1ebe8 <nrf_modem_lib_init>
    if (err)
   193fe:	4601      	mov	r1, r0
   19400:	b130      	cbz	r0, 19410 <main+0x28>
    {
        printk("Modem library initialization failed, error: %d\n", err);
   19402:	481e      	ldr	r0, [pc, #120]	; (1947c <main+0x94>)

	// Initialize modem info
    err = modem_info_init();
    if (err)
    {
        printk("Failed to initialize modem info: %d", err);
   19404:	f00d fddc 	bl	26fc0 <printk>
        return 0;
   19408:	2400      	movs	r4, #0
	struct shared_data *sd = shared_data_get();
	printk("Received data: %s\n", sd->response_buf);
	sensor_thread_start();
	
	return 0;
}
   1940a:	4620      	mov	r0, r4
   1940c:	b00a      	add	sp, #40	; 0x28
   1940e:	bd10      	pop	{r4, pc}
    err = modem_info_init();
   19410:	f007 fdfe 	bl	21010 <modem_info_init>
    if (err)
   19414:	4601      	mov	r1, r0
   19416:	b108      	cbz	r0, 1941c <main+0x34>
        printk("Failed to initialize modem info: %d", err);
   19418:	4819      	ldr	r0, [pc, #100]	; (19480 <main+0x98>)
   1941a:	e7f3      	b.n	19404 <main+0x1c>
    err = pdn_default_ctx_cb_reg(pdn_event_handler);
   1941c:	4819      	ldr	r0, [pc, #100]	; (19484 <main+0x9c>)
   1941e:	f010 fb68 	bl	29af2 <pdn_default_ctx_cb_reg>
    if (err)
   19422:	4601      	mov	r1, r0
   19424:	b108      	cbz	r0, 1942a <main+0x42>
        printk("pdn_default_ctx_cb_reg() failed, err %d\n", err);
   19426:	4818      	ldr	r0, [pc, #96]	; (19488 <main+0xa0>)
   19428:	e7ec      	b.n	19404 <main+0x1c>
	printk("Waiting for network.. ");
   1942a:	4818      	ldr	r0, [pc, #96]	; (1948c <main+0xa4>)
   1942c:	f00d fdc8 	bl	26fc0 <printk>
	err = lte_lc_init_and_connect();
   19430:	f010 fa73 	bl	2991a <lte_lc_init_and_connect>
	if (err)
   19434:	4601      	mov	r1, r0
   19436:	b108      	cbz	r0, 1943c <main+0x54>
		printk("Failed to connect to the LTE network, err %d\n", err);
   19438:	4815      	ldr	r0, [pc, #84]	; (19490 <main+0xa8>)
   1943a:	e7e3      	b.n	19404 <main+0x1c>
	printk("OK\n");
   1943c:	4815      	ldr	r0, [pc, #84]	; (19494 <main+0xac>)
   1943e:	f00d fdbf 	bl	26fc0 <printk>
    print_modem_info();
   19442:	f7ff ff9f 	bl	19384 <print_modem_info>
    err = modem_info_string_get(MODEM_INFO_IMEI, imei, sizeof(imei));
   19446:	2224      	movs	r2, #36	; 0x24
   19448:	2013      	movs	r0, #19
   1944a:	a901      	add	r1, sp, #4
   1944c:	f007 fca0 	bl	20d90 <modem_info_string_get>
    if (err < 0) {
   19450:	1e04      	subs	r4, r0, #0
   19452:	da04      	bge.n	1945e <main+0x76>
        printk("Failed to get IMEI, error: %d\n", err);
   19454:	4621      	mov	r1, r4
   19456:	4810      	ldr	r0, [pc, #64]	; (19498 <main+0xb0>)
   19458:	f00d fdb2 	bl	26fc0 <printk>
        return err;
   1945c:	e7d5      	b.n	1940a <main+0x22>
	fetch_and_parse_json_response(imei);
   1945e:	a801      	add	r0, sp, #4
   19460:	f000 f902 	bl	19668 <fetch_and_parse_json_response>
	struct shared_data *sd = shared_data_get();
   19464:	f000 f96e 	bl	19744 <shared_data_get>
	printk("Received data: %s\n", sd->response_buf);
   19468:	f100 0144 	add.w	r1, r0, #68	; 0x44
   1946c:	480b      	ldr	r0, [pc, #44]	; (1949c <main+0xb4>)
   1946e:	f00d fda7 	bl	26fc0 <printk>
	sensor_thread_start();
   19472:	f000 fa0d 	bl	19890 <sensor_thread_start>
	return 0;
   19476:	e7c7      	b.n	19408 <main+0x20>
   19478:	0002cd11 	.word	0x0002cd11
   1947c:	0002cd2f 	.word	0x0002cd2f
   19480:	0002cd5f 	.word	0x0002cd5f
   19484:	000192fd 	.word	0x000192fd
   19488:	0002cd83 	.word	0x0002cd83
   1948c:	0002cdac 	.word	0x0002cdac
   19490:	0002cdc3 	.word	0x0002cdc3
   19494:	0002cdf1 	.word	0x0002cdf1
   19498:	0002cdf5 	.word	0x0002cdf5
   1949c:	0002ce14 	.word	0x0002ce14

000194a0 <api_response_parser_json>:
// api_response_parser.c
#include "api_response_parser.h"

int api_response_parser_json(const char *response, struct api_response *resp) {
   194a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   194a2:	460d      	mov	r5, r1

	int err;

	/* Find the start of the JSON body */
	char *json_start = strstr(response, "{");
   194a4:	217b      	movs	r1, #123	; 0x7b
   194a6:	f011 fefa 	bl	2b29e <strchr>
	if (json_start == NULL) {
   194aa:	4604      	mov	r4, r0
   194ac:	b178      	cbz	r0, 194ce <api_response_parser_json+0x2e>
		return -1;
	}

	/* Find the end of the JSON body */
	char *json_end = strrchr(json_start, '}');
   194ae:	217d      	movs	r1, #125	; 0x7d
   194b0:	f011 ff3b 	bl	2b32a <strrchr>
	if (json_end == NULL) {
   194b4:	b158      	cbz	r0, 194ce <api_response_parser_json+0x2e>
		return -1;
	}
	json_end++; // Include the closing brace
   194b6:	3001      	adds	r0, #1

	/* Parse JSON response */
	err = json_obj_parse(json_start, json_end - json_start, response_descr,
   194b8:	1b01      	subs	r1, r0, r4
   194ba:	2301      	movs	r3, #1
   194bc:	4620      	mov	r0, r4
   194be:	4a05      	ldr	r2, [pc, #20]	; (194d4 <api_response_parser_json+0x34>)
   194c0:	9500      	str	r5, [sp, #0]
   194c2:	f001 fa27 	bl	1a914 <json_obj_parse>
						 ARRAY_SIZE(response_descr), resp);
	if (err < 0) {
   194c6:	ea00 70e0 	and.w	r0, r0, r0, asr #31
		return err;
	}

	return 0;
}
   194ca:	b003      	add	sp, #12
   194cc:	bd30      	pop	{r4, r5, pc}
		return -1;
   194ce:	f04f 30ff 	mov.w	r0, #4294967295
   194d2:	e7fa      	b.n	194ca <api_response_parser_json+0x2a>
   194d4:	0002bf58 	.word	0x0002bf58

000194d8 <http_client_send_get_request>:
	k_mutex_unlock(&sd->url_mutex);
	/* Signal the semaphore */
	k_sem_give(&sd->http_response_sem);
}

int http_client_send_get_request(const char *url) {
   194d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int err;
    int fd;
    struct addrinfo *res;
    struct addrinfo hints = {
   194dc:	2701      	movs	r7, #1
int http_client_send_get_request(const char *url) {
   194de:	b0d1      	sub	sp, #324	; 0x144
   194e0:	4605      	mov	r5, r0
    struct addrinfo hints = {
   194e2:	2250      	movs	r2, #80	; 0x50
   194e4:	2100      	movs	r1, #0
   194e6:	a806      	add	r0, sp, #24
   194e8:	f011 fe8c 	bl	2b204 <memset>
        .ai_family = AF_INET,
        .ai_socktype = SOCK_STREAM,
    };
    struct http_request req = {0};
   194ec:	22d8      	movs	r2, #216	; 0xd8
   194ee:	2100      	movs	r1, #0
   194f0:	a81a      	add	r0, sp, #104	; 0x68
    struct addrinfo hints = {
   194f2:	e9cd 7708 	strd	r7, r7, [sp, #32]
    struct http_request req = {0};
   194f6:	f011 fe85 	bl	2b204 <memset>
    static uint8_t recv_buf[HTTP_RESPONSE_BUF_SIZE];
	struct shared_data *sd = shared_data_get();
   194fa:	f000 f923 	bl	19744 <shared_data_get>

	k_mutex_lock(&sd->url_mutex, K_FOREVER);
   194fe:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return z_impl_k_mutex_lock(mutex, timeout);
   19502:	f04f 32ff 	mov.w	r2, #4294967295
   19506:	f04f 33ff 	mov.w	r3, #4294967295
   1950a:	4620      	mov	r0, r4
   1950c:	f00b f948 	bl	247a0 <z_impl_k_mutex_lock>
    /* Format HTTP request */
    req.method = HTTP_GET;
    req.url = url;
    req.host = HTTPS_HOSTNAME;
    req.protocol = "HTTP/1.1";
   19510:	4b49      	ldr	r3, [pc, #292]	; (19638 <http_client_send_get_request+0x160>)
    req.url = url;
   19512:	9545      	str	r5, [sp, #276]	; 0x114
    req.protocol = "HTTP/1.1";
   19514:	9346      	str	r3, [sp, #280]	; 0x118
    req.response = http_response_cb;
   19516:	4b49      	ldr	r3, [pc, #292]	; (1963c <http_client_send_get_request+0x164>)
    req.host = HTTPS_HOSTNAME;
   19518:	4d49      	ldr	r5, [pc, #292]	; (19640 <http_client_send_get_request+0x168>)
    req.response = http_response_cb;
   1951a:	9341      	str	r3, [sp, #260]	; 0x104
    req.recv_buf = recv_buf;
   1951c:	4b49      	ldr	r3, [pc, #292]	; (19644 <http_client_send_get_request+0x16c>)
    req.method = HTTP_GET;
   1951e:	f88d 7100 	strb.w	r7, [sp, #256]	; 0x100
    req.recv_buf = recv_buf;
   19522:	9343      	str	r3, [sp, #268]	; 0x10c
    req.recv_buf_len = sizeof(recv_buf);
   19524:	f44f 6300 	mov.w	r3, #2048	; 0x800
    req.host = HTTPS_HOSTNAME;
   19528:	9549      	str	r5, [sp, #292]	; 0x124
    req.recv_buf_len = sizeof(recv_buf);
   1952a:	9344      	str	r3, [sp, #272]	; 0x110
	return z_impl_k_mutex_unlock(mutex);
   1952c:	4620      	mov	r0, r4
   1952e:	f00b f9b1 	bl	24894 <z_impl_k_mutex_unlock>
/** POSIX wrapper for @ref zsock_getaddrinfo */
static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   19532:	4628      	mov	r0, r5
   19534:	4944      	ldr	r1, [pc, #272]	; (19648 <http_client_send_get_request+0x170>)
   19536:	ab03      	add	r3, sp, #12
   19538:	aa06      	add	r2, sp, #24
   1953a:	f00e f9a0 	bl	2787e <zsock_getaddrinfo>
	k_mutex_unlock(&sd->url_mutex);

    /* Resolve hostname */
    err = getaddrinfo(HTTPS_HOSTNAME, HTTPS_PORT, &hints, &res);
    if (err) {
   1953e:	4604      	mov	r4, r0
   19540:	b140      	cbz	r0, 19554 <http_client_send_get_request+0x7c>
        printk("Failed to resolve hostname %s, error: %d\n", HTTPS_HOSTNAME, err);
   19542:	4602      	mov	r2, r0
   19544:	4629      	mov	r1, r5
   19546:	4841      	ldr	r0, [pc, #260]	; (1964c <http_client_send_get_request+0x174>)
   19548:	f00d fd3a 	bl	26fc0 <printk>
clean_up:
	freeaddrinfo(res);
	close(fd);

	return err;
}
   1954c:	4620      	mov	r0, r4
   1954e:	b051      	add	sp, #324	; 0x144
   19550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fd = socket(res->ai_family, SOCK_STREAM, IPPROTO_TLS_1_2);
   19554:	9b03      	ldr	r3, [sp, #12]
   19556:	6898      	ldr	r0, [r3, #8]
		union { uintptr_t x; int val; } parm2 = { .val = proto };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_SOCKET);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_socket(family, type, proto);
   19558:	f44f 7281 	mov.w	r2, #258	; 0x102
   1955c:	4639      	mov	r1, r7
   1955e:	f001 fb4d 	bl	1abfc <z_impl_zsock_socket>
    if (fd < 0) {
   19562:	1e06      	subs	r6, r0, #0
   19564:	da0a      	bge.n	1957c <http_client_send_get_request+0xa4>
        printk("Failed to create socket, error: %d\n", errno);
   19566:	f00e fb6b 	bl	27c40 <__errno>
   1956a:	6801      	ldr	r1, [r0, #0]
   1956c:	4838      	ldr	r0, [pc, #224]	; (19650 <http_client_send_get_request+0x178>)
		printk("Failed to send HTTP request, error: %d\n", errno);
   1956e:	f00d fd27 	bl	26fc0 <printk>
		err = -errno;
   19572:	f00e fb65 	bl	27c40 <__errno>
   19576:	6804      	ldr	r4, [r0, #0]
   19578:	4264      	negs	r4, r4
		goto clean_up;
   1957a:	e016      	b.n	195aa <http_client_send_get_request+0xd2>
	verify = REQUIRED;
   1957c:	f04f 0802 	mov.w	r8, #2
   19580:	232a      	movs	r3, #42	; 0x2a
   19582:	e9cd 8304 	strd	r8, r3, [sp, #16]
		union { uintptr_t x; socklen_t val; } parm4 = { .val = optlen };
		return (int) arch_syscall_invoke5(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   19586:	f04f 0904 	mov.w	r9, #4
   1958a:	2205      	movs	r2, #5
   1958c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   19590:	f8cd 9000 	str.w	r9, [sp]
   19594:	ab04      	add	r3, sp, #16
   19596:	f00e fa7c 	bl	27a92 <z_impl_zsock_setsockopt>
	if (err)
   1959a:	4604      	mov	r4, r0
   1959c:	b160      	cbz	r0, 195b8 <http_client_send_get_request+0xe0>
		printk("Failed to setup peer verification, err %d\n", errno);
   1959e:	f00e fb4f 	bl	27c40 <__errno>
   195a2:	6801      	ldr	r1, [r0, #0]
   195a4:	482b      	ldr	r0, [pc, #172]	; (19654 <http_client_send_get_request+0x17c>)
		printk("Failed to setup TLS hostname, err %d\n", errno);
   195a6:	f00d fd0b 	bl	26fc0 <printk>
}

/** POSIX wrapper for @ref zsock_freeaddrinfo */
static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   195aa:	9803      	ldr	r0, [sp, #12]
   195ac:	f00e f969 	bl	27882 <zsock_freeaddrinfo>
	return z_impl_zsock_close(sock);
   195b0:	4630      	mov	r0, r6
   195b2:	f00e f999 	bl	278e8 <z_impl_zsock_close>
   195b6:	e7c9      	b.n	1954c <http_client_send_get_request+0x74>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   195b8:	f44f 718d 	mov.w	r1, #282	; 0x11a
   195bc:	463a      	mov	r2, r7
   195be:	4630      	mov	r0, r6
   195c0:	f8cd 9000 	str.w	r9, [sp]
   195c4:	ab05      	add	r3, sp, #20
   195c6:	f00e fa64 	bl	27a92 <z_impl_zsock_setsockopt>
	if (err)
   195ca:	4604      	mov	r4, r0
   195cc:	b120      	cbz	r0, 195d8 <http_client_send_get_request+0x100>
		printk("Failed to setup TLS sec tag, err %d\n", errno);
   195ce:	f00e fb37 	bl	27c40 <__errno>
   195d2:	6801      	ldr	r1, [r0, #0]
   195d4:	4820      	ldr	r0, [pc, #128]	; (19658 <http_client_send_get_request+0x180>)
   195d6:	e7e6      	b.n	195a6 <http_client_send_get_request+0xce>
   195d8:	230f      	movs	r3, #15
   195da:	4642      	mov	r2, r8
   195dc:	9300      	str	r3, [sp, #0]
   195de:	f44f 718d 	mov.w	r1, #282	; 0x11a
   195e2:	462b      	mov	r3, r5
   195e4:	4630      	mov	r0, r6
   195e6:	f00e fa54 	bl	27a92 <z_impl_zsock_setsockopt>
	if (err)
   195ea:	4604      	mov	r4, r0
   195ec:	b120      	cbz	r0, 195f8 <http_client_send_get_request+0x120>
		printk("Failed to setup TLS hostname, err %d\n", errno);
   195ee:	f00e fb27 	bl	27c40 <__errno>
   195f2:	6801      	ldr	r1, [r0, #0]
   195f4:	4819      	ldr	r0, [pc, #100]	; (1965c <http_client_send_get_request+0x184>)
   195f6:	e7d6      	b.n	195a6 <http_client_send_get_request+0xce>
	((struct sockaddr_in *)res->ai_addr)->sin_port = htons(HTTP_PORT);
   195f8:	f64b 3201 	movw	r2, #47873	; 0xbb01
   195fc:	9b03      	ldr	r3, [sp, #12]
   195fe:	699b      	ldr	r3, [r3, #24]
   19600:	805a      	strh	r2, [r3, #2]
	err = connect(fd, res->ai_addr, res->ai_addrlen);
   19602:	9b03      	ldr	r3, [sp, #12]
   19604:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	return z_impl_zsock_connect(sock, addr, addrlen);
   19608:	4630      	mov	r0, r6
   1960a:	f00e f991 	bl	27930 <z_impl_zsock_connect>
	if (err < 0) {
   1960e:	2800      	cmp	r0, #0
   19610:	da04      	bge.n	1961c <http_client_send_get_request+0x144>
		printk("Failed to connect to server, error: %d\n", errno);
   19612:	f00e fb15 	bl	27c40 <__errno>
   19616:	6801      	ldr	r1, [r0, #0]
   19618:	4811      	ldr	r0, [pc, #68]	; (19660 <http_client_send_get_request+0x188>)
   1961a:	e7a8      	b.n	1956e <http_client_send_get_request+0x96>
	err = http_client_req(fd, &req, 5000, NULL);
   1961c:	4623      	mov	r3, r4
   1961e:	f241 3288 	movw	r2, #5000	; 0x1388
   19622:	4630      	mov	r0, r6
   19624:	a91a      	add	r1, sp, #104	; 0x68
   19626:	f003 fcc5 	bl	1cfb4 <http_client_req>
	if (err < 0) {
   1962a:	1e04      	subs	r4, r0, #0
   1962c:	dabd      	bge.n	195aa <http_client_send_get_request+0xd2>
		printk("Failed to send HTTP request, error: %d\n", errno);
   1962e:	f00e fb07 	bl	27c40 <__errno>
   19632:	6801      	ldr	r1, [r0, #0]
   19634:	480b      	ldr	r0, [pc, #44]	; (19664 <http_client_send_get_request+0x18c>)
   19636:	e79a      	b.n	1956e <http_client_send_get_request+0x96>
   19638:	0002ce85 	.word	0x0002ce85
   1963c:	00026f39 	.word	0x00026f39
   19640:	0002ce75 	.word	0x0002ce75
   19644:	2000dd9c 	.word	0x2000dd9c
   19648:	0002ce8e 	.word	0x0002ce8e
   1964c:	0002ce92 	.word	0x0002ce92
   19650:	0002cebc 	.word	0x0002cebc
   19654:	0002cee0 	.word	0x0002cee0
   19658:	0002cf0b 	.word	0x0002cf0b
   1965c:	0002cf30 	.word	0x0002cf30
   19660:	0002cf56 	.word	0x0002cf56
   19664:	0002cf7e 	.word	0x0002cf7e

00019668 <fetch_and_parse_json_response>:

void fetch_and_parse_json_response(const char *imei) {
   19668:	b570      	push	{r4, r5, r6, lr}
   1966a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   1966e:	4605      	mov	r5, r0

    struct shared_data *sd = shared_data_get(); // Get shared data instance
   19670:	f000 f868 	bl	19744 <shared_data_get>

    char url[HTTP_URL_BUF_SIZE];
    snprintf(url, sizeof(url), "/v3.0/config?id=%s", imei);
   19674:	f44f 7100 	mov.w	r1, #512	; 0x200
   19678:	462b      	mov	r3, r5
   1967a:	4a23      	ldr	r2, [pc, #140]	; (19708 <fetch_and_parse_json_response+0xa0>)
    struct shared_data *sd = shared_data_get(); // Get shared data instance
   1967c:	4604      	mov	r4, r0
    snprintf(url, sizeof(url), "/v3.0/config?id=%s", imei);
   1967e:	4668      	mov	r0, sp
   19680:	f00c f968 	bl	25954 <sniprintf>

    int err = http_client_send_get_request(url); // Use shared data instance
   19684:	4668      	mov	r0, sp
   19686:	f7ff ff27 	bl	194d8 <http_client_send_get_request>
    if (err < 0) {
   1968a:	1e01      	subs	r1, r0, #0
   1968c:	da05      	bge.n	1969a <fetch_and_parse_json_response+0x32>
        printk("Failed to get JSON response from server, error: %d\n", err);
   1968e:	481f      	ldr	r0, [pc, #124]	; (1970c <fetch_and_parse_json_response+0xa4>)
   19690:	f00d fc96 	bl	26fc0 <printk>
    api_response_parser_json(sd->response_buf, &sd->json_response);
	k_mutex_unlock(&sd->url_mutex);
    memcpy(sd->api_key, sd->json_response.settings[0].c1, sizeof(sd->api_key));
    printk("Extracted c1 key: %s\n", sd->api_key);
    k_sem_give(&sd->api_key_sem);
   19694:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   19698:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
   1969a:	f04f 32ff 	mov.w	r2, #4294967295
   1969e:	f04f 33ff 	mov.w	r3, #4294967295
   196a2:	f104 0018 	add.w	r0, r4, #24
   196a6:	f00b f98b 	bl	249c0 <z_impl_k_sem_take>
	k_mutex_lock(&sd->url_mutex, K_FOREVER);
   196aa:	f104 0530 	add.w	r5, r4, #48	; 0x30
	return z_impl_k_mutex_lock(mutex, timeout);
   196ae:	f04f 33ff 	mov.w	r3, #4294967295
    printk("Received JSON response (%d bytes):\n%s\n", sd->response_len, sd->response_buf);
   196b2:	f104 0644 	add.w	r6, r4, #68	; 0x44
   196b6:	f04f 32ff 	mov.w	r2, #4294967295
   196ba:	4628      	mov	r0, r5
   196bc:	f00b f870 	bl	247a0 <z_impl_k_mutex_lock>
   196c0:	4632      	mov	r2, r6
   196c2:	f8d4 1844 	ldr.w	r1, [r4, #2116]	; 0x844
   196c6:	4812      	ldr	r0, [pc, #72]	; (19710 <fetch_and_parse_json_response+0xa8>)
   196c8:	f00d fc7a 	bl	26fc0 <printk>
    api_response_parser_json(sd->response_buf, &sd->json_response);
   196cc:	4630      	mov	r0, r6
   196ce:	f604 015c 	addw	r1, r4, #2140	; 0x85c
   196d2:	f7ff fee5 	bl	194a0 <api_response_parser_json>
	return z_impl_k_mutex_unlock(mutex);
   196d6:	4628      	mov	r0, r5
   196d8:	f00b f8dc 	bl	24894 <z_impl_k_mutex_unlock>
    memcpy(sd->api_key, sd->json_response.settings[0].c1, sizeof(sd->api_key));
   196dc:	f604 0148 	addw	r1, r4, #2120	; 0x848
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   196e0:	460a      	mov	r2, r1
   196e2:	f8d4 3860 	ldr.w	r3, [r4, #2144]	; 0x860
   196e6:	f103 0010 	add.w	r0, r3, #16
   196ea:	f853 5b04 	ldr.w	r5, [r3], #4
   196ee:	4283      	cmp	r3, r0
   196f0:	f842 5b04 	str.w	r5, [r2], #4
   196f4:	d1f9      	bne.n	196ea <fetch_and_parse_json_response+0x82>
   196f6:	781b      	ldrb	r3, [r3, #0]
    printk("Extracted c1 key: %s\n", sd->api_key);
   196f8:	4806      	ldr	r0, [pc, #24]	; (19714 <fetch_and_parse_json_response+0xac>)
   196fa:	7013      	strb	r3, [r2, #0]
   196fc:	f00d fc60 	bl	26fc0 <printk>
	z_impl_k_sem_give(sem);
   19700:	4620      	mov	r0, r4
   19702:	f00b f937 	bl	24974 <z_impl_k_sem_give>
   19706:	e7c5      	b.n	19694 <fetch_and_parse_json_response+0x2c>
   19708:	0002cfa6 	.word	0x0002cfa6
   1970c:	0002cfb9 	.word	0x0002cfb9
   19710:	0002cfed 	.word	0x0002cfed
   19714:	0002d014 	.word	0x0002d014

00019718 <shared_data_init>:
// shared_data.c
#include "shared_data.h"

static struct shared_data shared_data_instance;

void shared_data_init(void) {
   19718:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1971a:	4c09      	ldr	r4, [pc, #36]	; (19740 <shared_data_init+0x28>)
   1971c:	2201      	movs	r2, #1
   1971e:	2100      	movs	r1, #0
   19720:	4620      	mov	r0, r4
   19722:	f011 fa2d 	bl	2ab80 <z_impl_k_sem_init>
   19726:	2201      	movs	r2, #1
   19728:	2100      	movs	r1, #0
   1972a:	f104 0018 	add.w	r0, r4, #24
   1972e:	f011 fa27 	bl	2ab80 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
   19732:	f104 0030 	add.w	r0, r4, #48	; 0x30
    k_sem_init(&shared_data_instance.api_key_sem, 0, 1);
    k_sem_init(&shared_data_instance.http_response_sem, 0, 1);
    k_mutex_init(&shared_data_instance.url_mutex);
    
    // Initialize other shared data here
}
   19736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1973a:	f011 b99d 	b.w	2aa78 <z_impl_k_mutex_init>
   1973e:	bf00      	nop
   19740:	2000cc80 	.word	0x2000cc80

00019744 <shared_data_get>:

struct shared_data *shared_data_get(void) {
    return &shared_data_instance;
}
   19744:	4800      	ldr	r0, [pc, #0]	; (19748 <shared_data_get+0x4>)
   19746:	4770      	bx	lr
   19748:	2000cc80 	.word	0x2000cc80

0001974c <sensor_thread_send_func>:
K_THREAD_STACK_DEFINE(sensor_thread_stack_area, STACKSIZE);
struct k_thread sensor_thread_data;


void sensor_thread_send_func(void *arg1, void *arg2, void *arg3)
{
   1974c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19750:	f5ad 7d32 	sub.w	sp, sp, #712	; 0x2c8
    char url[HTTP_URL_BUF_SIZE];  // Define the url buffer here
    char sbuf[128];
    int16_t signal_strength;
    uint16_t battery_voltage;

    struct shared_data *sd = shared_data_get();
   19754:	f7ff fff6 	bl	19744 <shared_data_get>
   19758:	4604      	mov	r4, r0
    
    // Fetch the semaphores from the shared data
    struct k_sem *api_key_sem = &sd->api_key_sem;
    struct k_sem *http_response_sem = &sd->http_response_sem;
   1975a:	f100 0618 	add.w	r6, r0, #24
    struct k_mutex  *url_mutex = &sd-> url_mutex;
   1975e:	f100 0530 	add.w	r5, r0, #48	; 0x30
	return z_impl_k_sem_take(sem, timeout);
   19762:	f04f 32ff 	mov.w	r2, #4294967295
   19766:	f04f 33ff 	mov.w	r3, #4294967295
   1976a:	f00b f929 	bl	249c0 <z_impl_k_sem_take>

	k_sem_take(api_key_sem, K_FOREVER);
	printk("Hello from sensor thread\n");
   1976e:	483f      	ldr	r0, [pc, #252]	; (1986c <sensor_thread_send_func+0x120>)
   19770:	f00d fc26 	bl	26fc0 <printk>

	while (1) {
        /* Wait for api_key to be received */
        
		printk("Sensor thread: semaphore taken\n");
   19774:	4f3e      	ldr	r7, [pc, #248]	; (19870 <sensor_thread_send_func+0x124>)
   19776:	4638      	mov	r0, r7
   19778:	f00d fc22 	bl	26fc0 <printk>
        #ifdef CONFIG_BOARD_THINGY91_NRF9160NS
        // Get Sensor Data
        struct sensor_value temp, press, humidity, gas_res;
        get_sensor_data(&temp, &press, &humidity, &gas_res);
   1977c:	ab10      	add	r3, sp, #64	; 0x40
   1977e:	aa0e      	add	r2, sp, #56	; 0x38
   19780:	a90c      	add	r1, sp, #48	; 0x30
   19782:	a80a      	add	r0, sp, #40	; 0x28
   19784:	f000 f8ae 	bl	198e4 <get_sensor_data>
        
        modem_info_string_get(MODEM_INFO_RSRP, sbuf, sizeof(sbuf));
   19788:	2280      	movs	r2, #128	; 0x80
   1978a:	a912      	add	r1, sp, #72	; 0x48
   1978c:	2000      	movs	r0, #0
   1978e:	f007 faff 	bl	20d90 <modem_info_string_get>
        printk("Signal strength: %s\n", sbuf);
   19792:	a912      	add	r1, sp, #72	; 0x48
   19794:	4837      	ldr	r0, [pc, #220]	; (19874 <sensor_thread_send_func+0x128>)
   19796:	f00d fc13 	bl	26fc0 <printk>
        sscanf(sbuf, "%d", &signal_strength);
   1979a:	aa09      	add	r2, sp, #36	; 0x24
   1979c:	4936      	ldr	r1, [pc, #216]	; (19878 <sensor_thread_send_func+0x12c>)
   1979e:	a812      	add	r0, sp, #72	; 0x48
   197a0:	f00c f90c 	bl	259bc <siscanf>

        modem_info_string_get(MODEM_INFO_BATTERY, sbuf, sizeof(sbuf));
   197a4:	2280      	movs	r2, #128	; 0x80
   197a6:	a912      	add	r1, sp, #72	; 0x48
   197a8:	200b      	movs	r0, #11
   197aa:	f007 faf1 	bl	20d90 <modem_info_string_get>
        printk("Battery voltage: %s\n", sbuf);
   197ae:	a912      	add	r1, sp, #72	; 0x48
   197b0:	4832      	ldr	r0, [pc, #200]	; (1987c <sensor_thread_send_func+0x130>)
   197b2:	f00d fc05 	bl	26fc0 <printk>
        sscanf(sbuf, "%hu", &battery_voltage);
   197b6:	4932      	ldr	r1, [pc, #200]	; (19880 <sensor_thread_send_func+0x134>)
   197b8:	f10d 0226 	add.w	r2, sp, #38	; 0x26
   197bc:	a812      	add	r0, sp, #72	; 0x48
   197be:	f00c f8fd 	bl	259bc <siscanf>
	return z_impl_k_mutex_lock(mutex, timeout);
   197c2:	f04f 32ff 	mov.w	r2, #4294967295
   197c6:	f04f 33ff 	mov.w	r3, #4294967295
   197ca:	4628      	mov	r0, r5
   197cc:	f00a ffe8 	bl	247a0 <z_impl_k_mutex_lock>
        /* Format URL with query parameters */
		k_mutex_lock(url_mutex, K_FOREVER);
		snprintf(url, sizeof(url),
   197d0:	220a      	movs	r2, #10
   197d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   197d4:	f44f 7100 	mov.w	r1, #512	; 0x200
   197d8:	9307      	str	r3, [sp, #28]
   197da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   197dc:	a832      	add	r0, sp, #200	; 0xc8
   197de:	9306      	str	r3, [sp, #24]
   197e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                 temp.val1, temp.val2,
                 press.val1*10, press.val2*10,
                 humidity.val1, humidity.val2);
		
        /* Clear the response buffer */
        memset(sd->response_buf, 0, sizeof(sd->response_buf));
   197e2:	f104 0844 	add.w	r8, r4, #68	; 0x44
		snprintf(url, sizeof(url),
   197e6:	4353      	muls	r3, r2
   197e8:	9305      	str	r3, [sp, #20]
   197ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   197ec:	4353      	muls	r3, r2
   197ee:	9304      	str	r3, [sp, #16]
   197f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   197f2:	4a24      	ldr	r2, [pc, #144]	; (19884 <sensor_thread_send_func+0x138>)
   197f4:	9303      	str	r3, [sp, #12]
   197f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   197f8:	9302      	str	r3, [sp, #8]
   197fa:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
   197fe:	9301      	str	r3, [sp, #4]
   19800:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   19804:	9300      	str	r3, [sp, #0]
   19806:	f604 0348 	addw	r3, r4, #2120	; 0x848
   1980a:	f00c f8a3 	bl	25954 <sniprintf>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   1980e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19812:	2100      	movs	r1, #0
   19814:	4640      	mov	r0, r8
   19816:	f011 fcf5 	bl	2b204 <memset>
	return z_impl_k_mutex_unlock(mutex);
   1981a:	4628      	mov	r0, r5
   1981c:	f00b f83a 	bl	24894 <z_impl_k_mutex_unlock>
#endif

		
        
		/* Send GET request and get response */
		int err = http_client_send_get_request(url);
   19820:	a832      	add	r0, sp, #200	; 0xc8
   19822:	f7ff fe59 	bl	194d8 <http_client_send_get_request>
		if (err < 0) {
   19826:	1e01      	subs	r1, r0, #0
   19828:	da02      	bge.n	19830 <sensor_thread_send_func+0xe4>
			printk("Failed to get response from server, error:%d", err);
   1982a:	4817      	ldr	r0, [pc, #92]	; (19888 <sensor_thread_send_func+0x13c>)
   1982c:	f00d fbc8 	bl	26fc0 <printk>
	return z_impl_k_sem_take(sem, timeout);
   19830:	f04f 32ff 	mov.w	r2, #4294967295
   19834:	f04f 33ff 	mov.w	r3, #4294967295
   19838:	4630      	mov	r0, r6
   1983a:	f00b f8c1 	bl	249c0 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   1983e:	f04f 33ff 	mov.w	r3, #4294967295
   19842:	f04f 32ff 	mov.w	r2, #4294967295
   19846:	4628      	mov	r0, r5
   19848:	f00a ffaa 	bl	247a0 <z_impl_k_mutex_lock>
        
		/* Wait for the response data */
		k_sem_take(http_response_sem, K_FOREVER);
        k_mutex_lock(url_mutex, K_FOREVER);
		/* Print the response data */
		printk("Received response (%d bytes):\n%s\n", sd->response_len, sd->response_buf);
   1984c:	4642      	mov	r2, r8
   1984e:	f8d4 1844 	ldr.w	r1, [r4, #2116]	; 0x844
   19852:	480e      	ldr	r0, [pc, #56]	; (1988c <sensor_thread_send_func+0x140>)
   19854:	f00d fbb4 	bl	26fc0 <printk>
	return z_impl_k_mutex_unlock(mutex);
   19858:	4628      	mov	r0, r5
   1985a:	f00b f81b 	bl	24894 <z_impl_k_mutex_unlock>
	return z_impl_k_sleep(timeout);
   1985e:	2100      	movs	r1, #0
   19860:	f04f 7096 	mov.w	r0, #19660800	; 0x12c0000
   19864:	f00b fcec 	bl	25240 <z_impl_k_sleep>
	while (1) {
   19868:	e785      	b.n	19776 <sensor_thread_send_func+0x2a>
   1986a:	bf00      	nop
   1986c:	0002d02a 	.word	0x0002d02a
   19870:	0002d044 	.word	0x0002d044
   19874:	0002ccbb 	.word	0x0002ccbb
   19878:	0002cd80 	.word	0x0002cd80
   1987c:	0002ccd0 	.word	0x0002ccd0
   19880:	0002de33 	.word	0x0002de33
   19884:	0002d064 	.word	0x0002d064
   19888:	0002d0be 	.word	0x0002d0be
   1988c:	0002d0eb 	.word	0x0002d0eb

00019890 <sensor_thread_start>:
        k_sleep(SLEEP_TIME);
        
    }
}

void sensor_thread_start(void) {
   19890:	b500      	push	{lr}
   19892:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19894:	2200      	movs	r2, #0
   19896:	2300      	movs	r3, #0
   19898:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1989c:	2300      	movs	r3, #0
   1989e:	2205      	movs	r2, #5
   198a0:	e9cd 3301 	strd	r3, r3, [sp, #4]
   198a4:	e9cd 2303 	strd	r2, r3, [sp, #12]
   198a8:	9300      	str	r3, [sp, #0]
   198aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   198ae:	4b04      	ldr	r3, [pc, #16]	; (198c0 <sensor_thread_start+0x30>)
   198b0:	4904      	ldr	r1, [pc, #16]	; (198c4 <sensor_thread_start+0x34>)
   198b2:	4805      	ldr	r0, [pc, #20]	; (198c8 <sensor_thread_start+0x38>)
   198b4:	f00a fed0 	bl	24658 <z_impl_k_thread_create>
    // ... Create and start sensor thread ...
    k_thread_create(&sensor_thread_data, sensor_thread_stack_area,
                    STACKSIZE,
                    sensor_thread_send_func, NULL, NULL, NULL,
                    THREAD_PRIORITY, 0, K_NO_WAIT);
   198b8:	b009      	add	sp, #36	; 0x24
   198ba:	f85d fb04 	ldr.w	pc, [sp], #4
   198be:	bf00      	nop
   198c0:	0001974d 	.word	0x0001974d
   198c4:	2000eb00 	.word	0x2000eb00
   198c8:	2000c9d0 	.word	0x2000c9d0

000198cc <sensor_channel_get.constprop.0.isra.0>:


extern int z_impl_sensor_channel_get(const struct device * dev, enum sensor_channel chan, struct sensor_value * val);

__pinned_func
static inline int sensor_channel_get(const struct device * dev, enum sensor_channel chan, struct sensor_value * val)
   198cc:	b410      	push	{r4}
   198ce:	4603      	mov	r3, r0
   198d0:	460a      	mov	r2, r1
	return api->channel_get(dev, chan, val);
   198d2:	4803      	ldr	r0, [pc, #12]	; (198e0 <sensor_channel_get.constprop.0.isra.0+0x14>)
   198d4:	6881      	ldr	r1, [r0, #8]
   198d6:	690c      	ldr	r4, [r1, #16]
   198d8:	4619      	mov	r1, r3
   198da:	4623      	mov	r3, r4
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_SENSOR_CHANNEL_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sensor_channel_get(dev, chan, val);
}
   198dc:	bc10      	pop	{r4}
   198de:	4718      	bx	r3
   198e0:	0002bb1c 	.word	0x0002bb1c

000198e4 <get_sensor_data>:
#include "thingy91.h"

const struct device *const dev = DEVICE_DT_GET_ONE(bosch_bme680);

void get_sensor_data(struct sensor_value *temp, struct sensor_value *press, struct sensor_value *humidity, struct sensor_value *gas_res)
{
   198e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   198e8:	4607      	mov	r7, r0
   198ea:	460e      	mov	r6, r1
   198ec:	4615      	mov	r5, r2
   198ee:	461c      	mov	r4, r3
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   198f0:	f8df 8044 	ldr.w	r8, [pc, #68]	; 19938 <get_sensor_data+0x54>
   198f4:	4640      	mov	r0, r8
   198f6:	f010 ffff 	bl	2a8f8 <z_device_is_ready>
    if (!device_is_ready(dev)) {
   198fa:	b920      	cbnz	r0, 19906 <get_sensor_data+0x22>
    sensor_sample_fetch(dev);
    sensor_channel_get(dev, SENSOR_CHAN_AMBIENT_TEMP, temp);
    sensor_channel_get(dev, SENSOR_CHAN_PRESS, press);
    sensor_channel_get(dev, SENSOR_CHAN_HUMIDITY, humidity);
    sensor_channel_get(dev, SENSOR_CHAN_GAS_RES, gas_res);
}
   198fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        printk("sensor: device not ready.\n");
   19900:	480e      	ldr	r0, [pc, #56]	; (1993c <get_sensor_data+0x58>)
   19902:	f00d bb5d 	b.w	26fc0 <printk>
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
   19906:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1990a:	2139      	movs	r1, #57	; 0x39
   1990c:	68db      	ldr	r3, [r3, #12]
   1990e:	4640      	mov	r0, r8
   19910:	4798      	blx	r3
    sensor_channel_get(dev, SENSOR_CHAN_AMBIENT_TEMP, temp);
   19912:	4639      	mov	r1, r7
   19914:	200d      	movs	r0, #13
   19916:	f7ff ffd9 	bl	198cc <sensor_channel_get.constprop.0.isra.0>
    sensor_channel_get(dev, SENSOR_CHAN_PRESS, press);
   1991a:	4631      	mov	r1, r6
   1991c:	200e      	movs	r0, #14
   1991e:	f7ff ffd5 	bl	198cc <sensor_channel_get.constprop.0.isra.0>
    sensor_channel_get(dev, SENSOR_CHAN_HUMIDITY, humidity);
   19922:	4629      	mov	r1, r5
   19924:	2010      	movs	r0, #16
   19926:	f7ff ffd1 	bl	198cc <sensor_channel_get.constprop.0.isra.0>
    sensor_channel_get(dev, SENSOR_CHAN_GAS_RES, gas_res);
   1992a:	4621      	mov	r1, r4
}
   1992c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    sensor_channel_get(dev, SENSOR_CHAN_GAS_RES, gas_res);
   19930:	201d      	movs	r0, #29
   19932:	f7ff bfcb 	b.w	198cc <sensor_channel_get.constprop.0.isra.0>
   19936:	bf00      	nop
   19938:	0002bb1c 	.word	0x0002bb1c
   1993c:	0002d10d 	.word	0x0002d10d

00019940 <thingy91_sensors_init>:

int thingy91_sensors_init()
{
   19940:	b538      	push	{r3, r4, r5, lr}
   19942:	4d09      	ldr	r5, [pc, #36]	; (19968 <thingy91_sensors_init+0x28>)
   19944:	4628      	mov	r0, r5
   19946:	f010 ffd7 	bl	2a8f8 <z_device_is_ready>
    if (!device_is_ready(dev)) {
   1994a:	4604      	mov	r4, r0
   1994c:	b920      	cbnz	r0, 19958 <thingy91_sensors_init+0x18>
		printk("sensor: device not ready.\n");
   1994e:	4807      	ldr	r0, [pc, #28]	; (1996c <thingy91_sensors_init+0x2c>)
   19950:	f00d fb36 	bl	26fc0 <printk>
		return 0;
   19954:	4620      	mov	r0, r4
	}
    printf("Device %p name is %s\n", dev, dev->name);
    return 1;
   19956:	bd38      	pop	{r3, r4, r5, pc}
    printf("Device %p name is %s\n", dev, dev->name);
   19958:	4629      	mov	r1, r5
   1995a:	682a      	ldr	r2, [r5, #0]
   1995c:	4804      	ldr	r0, [pc, #16]	; (19970 <thingy91_sensors_init+0x30>)
   1995e:	f00b ffd1 	bl	25904 <iprintf>
    return 1;
   19962:	2001      	movs	r0, #1
   19964:	e7f7      	b.n	19956 <thingy91_sensors_init+0x16>
   19966:	bf00      	nop
   19968:	0002bb1c 	.word	0x0002bb1c
   1996c:	0002d10d 	.word	0x0002d10d
   19970:	0002d128 	.word	0x0002d128

00019974 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   19974:	2803      	cmp	r0, #3
{
   19976:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   19978:	d906      	bls.n	19988 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   1997a:	f00e f961 	bl	27c40 <__errno>
   1997e:	2309      	movs	r3, #9
   19980:	6003      	str	r3, [r0, #0]
		return -1;
   19982:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   19986:	bd08      	pop	{r3, pc}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19988:	4b04      	ldr	r3, [pc, #16]	; (1999c <_check_fd+0x28>)
   1998a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
   1998e:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_get(&fdtable[fd].refcount)) {
   19992:	2b00      	cmp	r3, #0
   19994:	d0f1      	beq.n	1997a <_check_fd+0x6>
	return 0;
   19996:	2000      	movs	r0, #0
   19998:	e7f5      	b.n	19986 <_check_fd+0x12>
   1999a:	bf00      	nop
   1999c:	2000d55c 	.word	0x2000d55c

000199a0 <z_get_fd_obj_and_vtable>:
	return entry->obj;
}

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
   199a0:	b570      	push	{r4, r5, r6, lr}
   199a2:	4604      	mov	r4, r0
   199a4:	460e      	mov	r6, r1
   199a6:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   199a8:	f7ff ffe4 	bl	19974 <_check_fd>
   199ac:	2800      	cmp	r0, #0
   199ae:	db0c      	blt.n	199ca <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
   199b0:	4b07      	ldr	r3, [pc, #28]	; (199d0 <z_get_fd_obj_and_vtable+0x30>)
   199b2:	0161      	lsls	r1, r4, #5
   199b4:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   199b8:	6862      	ldr	r2, [r4, #4]
   199ba:	6032      	str	r2, [r6, #0]

	if (lock) {
   199bc:	b11d      	cbz	r5, 199c6 <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
   199be:	f101 020c 	add.w	r2, r1, #12
   199c2:	441a      	add	r2, r3
   199c4:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
   199c6:	5858      	ldr	r0, [r3, r1]
}
   199c8:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   199ca:	2000      	movs	r0, #0
   199cc:	e7fc      	b.n	199c8 <z_get_fd_obj_and_vtable+0x28>
   199ce:	bf00      	nop
   199d0:	2000d554 	.word	0x2000d554

000199d4 <z_reserve_fd>:

int z_reserve_fd(void)
{
   199d4:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   199d6:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   199d8:	f04f 33ff 	mov.w	r3, #4294967295
   199dc:	f04f 32ff 	mov.w	r2, #4294967295
   199e0:	4814      	ldr	r0, [pc, #80]	; (19a34 <z_reserve_fd+0x60>)
   199e2:	f00a fedd 	bl	247a0 <z_impl_k_mutex_lock>
   199e6:	4b14      	ldr	r3, [pc, #80]	; (19a38 <z_reserve_fd+0x64>)
   199e8:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   199ec:	b17a      	cbz	r2, 19a0e <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   199ee:	3401      	adds	r4, #1
   199f0:	2c04      	cmp	r4, #4
   199f2:	f103 0320 	add.w	r3, r3, #32
   199f6:	d1f7      	bne.n	199e8 <z_reserve_fd+0x14>
	errno = ENFILE;
   199f8:	f00e f922 	bl	27c40 <__errno>
   199fc:	2317      	movs	r3, #23
	return -1;
   199fe:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   19a02:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   19a04:	480b      	ldr	r0, [pc, #44]	; (19a34 <z_reserve_fd+0x60>)
   19a06:	f00a ff45 	bl	24894 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   19a0a:	4620      	mov	r0, r4
   19a0c:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   19a0e:	e8d3 0fef 	ldaex	r0, [r3]
   19a12:	3001      	adds	r0, #1
   19a14:	e8c3 0fe1 	stlex	r1, r0, [r3]
   19a18:	2900      	cmp	r1, #0
   19a1a:	d1f8      	bne.n	19a0e <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   19a1c:	4807      	ldr	r0, [pc, #28]	; (19a3c <z_reserve_fd+0x68>)
   19a1e:	0163      	lsls	r3, r4, #5
   19a20:	eb00 1144 	add.w	r1, r0, r4, lsl #5
   19a24:	50c2      	str	r2, [r0, r3]
		fdtable[fd].vtable = NULL;
   19a26:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
   19a28:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   19a2a:	4418      	add	r0, r3
   19a2c:	f011 f824 	bl	2aa78 <z_impl_k_mutex_init>
   19a30:	e7e8      	b.n	19a04 <z_reserve_fd+0x30>
   19a32:	bf00      	nop
   19a34:	2000c8ac 	.word	0x2000c8ac
   19a38:	2000d55c 	.word	0x2000d55c
   19a3c:	2000d554 	.word	0x2000d554

00019a40 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   19a40:	b410      	push	{r4}
   19a42:	4604      	mov	r4, r0
   19a44:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   19a46:	4b09      	ldr	r3, [pc, #36]	; (19a6c <z_finalize_fd+0x2c>)
   19a48:	0162      	lsls	r2, r4, #5
   19a4a:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   19a4e:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   19a50:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   19a52:	b140      	cbz	r0, 19a66 <z_finalize_fd+0x26>
   19a54:	68c4      	ldr	r4, [r0, #12]
   19a56:	b134      	cbz	r4, 19a66 <z_finalize_fd+0x26>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   19a58:	320c      	adds	r2, #12
   19a5a:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   19a5c:	bc10      	pop	{r4}
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   19a5e:	f240 1205 	movw	r2, #261	; 0x105
   19a62:	f00d ba89 	b.w	26f78 <z_fdtable_call_ioctl.constprop.0>
}
   19a66:	bc10      	pop	{r4}
   19a68:	4770      	bx	lr
   19a6a:	bf00      	nop
   19a6c:	2000d554 	.word	0x2000d554

00019a70 <z_free_fd>:

void z_free_fd(int fd)
{
   19a70:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   19a72:	490d      	ldr	r1, [pc, #52]	; (19aa8 <z_free_fd+0x38>)
   19a74:	0140      	lsls	r0, r0, #5
   19a76:	f100 0308 	add.w	r3, r0, #8
   19a7a:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19a7c:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
   19a80:	b182      	cbz	r2, 19aa4 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   19a82:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19a84:	e8d3 5fef 	ldaex	r5, [r3]
   19a88:	4295      	cmp	r5, r2
   19a8a:	d104      	bne.n	19a96 <z_free_fd+0x26>
   19a8c:	e8c3 4fec 	stlex	ip, r4, [r3]
   19a90:	f1bc 0f00 	cmp.w	ip, #0
   19a94:	d1f6      	bne.n	19a84 <z_free_fd+0x14>
   19a96:	d1f1      	bne.n	19a7c <z_free_fd+0xc>
	if (old_rc != 1) {
   19a98:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
   19a9a:	bf01      	itttt	eq
   19a9c:	2300      	moveq	r3, #0
   19a9e:	180a      	addeq	r2, r1, r0
   19aa0:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
   19aa2:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   19aa4:	bd30      	pop	{r4, r5, pc}
   19aa6:	bf00      	nop
   19aa8:	2000d554 	.word	0x2000d554

00019aac <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   19aac:	4b01      	ldr	r3, [pc, #4]	; (19ab4 <char_out+0x8>)
   19aae:	681b      	ldr	r3, [r3, #0]
   19ab0:	4718      	bx	r3
   19ab2:	bf00      	nop
   19ab4:	2000c580 	.word	0x2000c580

00019ab8 <__printk_hook_install>:
	_char_out = fn;
   19ab8:	4b01      	ldr	r3, [pc, #4]	; (19ac0 <__printk_hook_install+0x8>)
   19aba:	6018      	str	r0, [r3, #0]
}
   19abc:	4770      	bx	lr
   19abe:	bf00      	nop
   19ac0:	2000c580 	.word	0x2000c580

00019ac4 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   19ac4:	b507      	push	{r0, r1, r2, lr}
   19ac6:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   19ac8:	2100      	movs	r1, #0
   19aca:	4602      	mov	r2, r0
   19acc:	9100      	str	r1, [sp, #0]
   19ace:	4803      	ldr	r0, [pc, #12]	; (19adc <vprintk+0x18>)
   19ad0:	f000 f98c 	bl	19dec <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   19ad4:	b003      	add	sp, #12
   19ad6:	f85d fb04 	ldr.w	pc, [sp], #4
   19ada:	bf00      	nop
   19adc:	00019aad 	.word	0x00019aad

00019ae0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   19ae0:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   19ae2:	2500      	movs	r5, #0
{
   19ae4:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   19ae6:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   19aea:	4604      	mov	r4, r0
   19aec:	9500      	str	r5, [sp, #0]
   19aee:	a903      	add	r1, sp, #12
   19af0:	4805      	ldr	r0, [pc, #20]	; (19b08 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   19af2:	9505      	str	r5, [sp, #20]
   19af4:	f000 f97a 	bl	19dec <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   19af8:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   19afc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   19afe:	bfb8      	it	lt
   19b00:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   19b02:	b007      	add	sp, #28
   19b04:	bd30      	pop	{r4, r5, pc}
   19b06:	bf00      	nop
   19b08:	00026f9b 	.word	0x00026f9b

00019b0c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   19b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19b10:	8b05      	ldrh	r5, [r0, #24]
{
   19b12:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   19b14:	0728      	lsls	r0, r5, #28
{
   19b16:	4690      	mov	r8, r2
	if (processing) {
   19b18:	d411      	bmi.n	19b3e <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   19b1a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19b1c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   19b20:	f040 80cd 	bne.w	19cbe <process_event+0x1b2>
			evt = process_recheck(mgr);
   19b24:	4620      	mov	r0, r4
   19b26:	f00d fc39 	bl	2739c <process_recheck>
		}

		if (evt == EVT_NOP) {
   19b2a:	b178      	cbz	r0, 19b4c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   19b2c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19b2e:	8b21      	ldrh	r1, [r4, #24]
   19b30:	2804      	cmp	r0, #4
   19b32:	d811      	bhi.n	19b58 <process_event+0x4c>
   19b34:	e8df f000 	tbb	[pc, r0]
   19b38:	856d10c3 	.word	0x856d10c3
   19b3c:	95          	.byte	0x95
   19b3d:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   19b3e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   19b40:	bf0c      	ite	eq
   19b42:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19b46:	f045 0520 	orrne.w	r5, r5, #32
   19b4a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   19b4c:	f388 8811 	msr	BASEPRI, r8
   19b50:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   19b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19b58:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   19b5c:	45aa      	cmp	sl, r5
   19b5e:	f000 80a6 	beq.w	19cae <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   19b62:	2700      	movs	r7, #0
   19b64:	46b9      	mov	r9, r7
   19b66:	463e      	mov	r6, r7
   19b68:	68a3      	ldr	r3, [r4, #8]
   19b6a:	2b00      	cmp	r3, #0
   19b6c:	f000 80bd 	beq.w	19cea <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   19b70:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   19b74:	8321      	strh	r1, [r4, #24]
   19b76:	f388 8811 	msr	BASEPRI, r8
   19b7a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   19b7e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19b80:	2900      	cmp	r1, #0
   19b82:	f000 80bb 	beq.w	19cfc <process_event+0x1f0>
	return node->next;
   19b86:	680d      	ldr	r5, [r1, #0]
   19b88:	2900      	cmp	r1, #0
   19b8a:	f000 80b7 	beq.w	19cfc <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   19b8e:	4633      	mov	r3, r6
   19b90:	4652      	mov	r2, sl
   19b92:	4620      	mov	r0, r4
   19b94:	f8d1 8004 	ldr.w	r8, [r1, #4]
   19b98:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19b9a:	2d00      	cmp	r5, #0
   19b9c:	d076      	beq.n	19c8c <process_event+0x180>
   19b9e:	682b      	ldr	r3, [r5, #0]
   19ba0:	4629      	mov	r1, r5
   19ba2:	461d      	mov	r5, r3
   19ba4:	e7f0      	b.n	19b88 <process_event+0x7c>
   19ba6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   19baa:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   19bac:	2a01      	cmp	r2, #1
   19bae:	d81b      	bhi.n	19be8 <process_event+0xdc>
	list->head = NULL;
   19bb0:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19bb2:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   19bb6:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   19bb8:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19bba:	b289      	uxth	r1, r1
	list->tail = NULL;
   19bbc:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   19bc0:	d109      	bne.n	19bd6 <process_event+0xca>
   19bc2:	463b      	mov	r3, r7
   19bc4:	e003      	b.n	19bce <process_event+0xc2>
				mgr->refs += 1U;
   19bc6:	8b62      	ldrh	r2, [r4, #26]
   19bc8:	3201      	adds	r2, #1
   19bca:	8362      	strh	r2, [r4, #26]
	return node->next;
   19bcc:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   19bce:	2b00      	cmp	r3, #0
   19bd0:	d1f9      	bne.n	19bc6 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19bd2:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   19bd6:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   19bd8:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   19bda:	f00d fbdf 	bl	2739c <process_recheck>
   19bde:	2800      	cmp	r0, #0
   19be0:	d07b      	beq.n	19cda <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19be2:	f041 0120 	orr.w	r1, r1, #32
   19be6:	e077      	b.n	19cd8 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   19be8:	2b04      	cmp	r3, #4
   19bea:	d10a      	bne.n	19c02 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19bec:	f021 0107 	bic.w	r1, r1, #7
   19bf0:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   19bf2:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   19bf4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   19bf6:	f00d fbd1 	bl	2739c <process_recheck>
   19bfa:	b110      	cbz	r0, 19c02 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19bfc:	f041 0120 	orr.w	r1, r1, #32
   19c00:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19c02:	8b21      	ldrh	r1, [r4, #24]
   19c04:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   19c08:	45aa      	cmp	sl, r5
   19c0a:	d050      	beq.n	19cae <process_event+0x1a2>
   19c0c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   19c0e:	46b9      	mov	r9, r7
   19c10:	e7aa      	b.n	19b68 <process_event+0x5c>
			transit = mgr->transitions->start;
   19c12:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19c14:	f021 0107 	bic.w	r1, r1, #7
   19c18:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   19c1c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   19c1e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   19c22:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   19c24:	d12d      	bne.n	19c82 <process_event+0x176>
		    || (transit != NULL)) {
   19c26:	f1b9 0f00 	cmp.w	r9, #0
   19c2a:	d040      	beq.n	19cae <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   19c2c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   19c30:	8321      	strh	r1, [r4, #24]
   19c32:	f388 8811 	msr	BASEPRI, r8
   19c36:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   19c3a:	4620      	mov	r0, r4
   19c3c:	4939      	ldr	r1, [pc, #228]	; (19d24 <process_event+0x218>)
   19c3e:	47c8      	blx	r9
   19c40:	e029      	b.n	19c96 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19c42:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   19c46:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19c48:	f041 0104 	orr.w	r1, r1, #4
   19c4c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   19c4e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   19c50:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   19c54:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   19c56:	d0e6      	beq.n	19c26 <process_event+0x11a>
   19c58:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19c5a:	f04f 0a04 	mov.w	sl, #4
		res = 0;
   19c5e:	463e      	mov	r6, r7
   19c60:	e782      	b.n	19b68 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19c62:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   19c66:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19c68:	f041 0105 	orr.w	r1, r1, #5
   19c6c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   19c6e:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   19c70:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   19c74:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   19c76:	d0d6      	beq.n	19c26 <process_event+0x11a>
   19c78:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19c7a:	f04f 0a05 	mov.w	sl, #5
		res = 0;
   19c7e:	463e      	mov	r6, r7
   19c80:	e772      	b.n	19b68 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   19c82:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19c84:	f04f 0a06 	mov.w	sl, #6
		res = 0;
   19c88:	463e      	mov	r6, r7
   19c8a:	e76d      	b.n	19b68 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19c8c:	462b      	mov	r3, r5
   19c8e:	e787      	b.n	19ba0 <process_event+0x94>
			if (transit != NULL) {
   19c90:	f1b9 0f00 	cmp.w	r9, #0
   19c94:	d1d1      	bne.n	19c3a <process_event+0x12e>
	__asm__ volatile(
   19c96:	f04f 0320 	mov.w	r3, #32
   19c9a:	f3ef 8811 	mrs	r8, BASEPRI
   19c9e:	f383 8812 	msr	BASEPRI_MAX, r3
   19ca2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   19ca6:	8b23      	ldrh	r3, [r4, #24]
   19ca8:	f023 0308 	bic.w	r3, r3, #8
   19cac:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   19cae:	8b25      	ldrh	r5, [r4, #24]
   19cb0:	06ea      	lsls	r2, r5, #27
   19cb2:	d52e      	bpl.n	19d12 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   19cb4:	f025 0310 	bic.w	r3, r5, #16
   19cb8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   19cba:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   19cbe:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19cc0:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   19cc2:	2e00      	cmp	r6, #0
   19cc4:	f6bf af6f 	bge.w	19ba6 <process_event+0x9a>
	list->head = NULL;
   19cc8:	2300      	movs	r3, #0
		*clients = mgr->clients;
   19cca:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   19ccc:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19cd0:	f021 0107 	bic.w	r1, r1, #7
   19cd4:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19cd8:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19cda:	8b21      	ldrh	r1, [r4, #24]
   19cdc:	f04f 0900 	mov.w	r9, #0
   19ce0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   19ce4:	45aa      	cmp	sl, r5
   19ce6:	f47f af3f 	bne.w	19b68 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   19cea:	2f00      	cmp	r7, #0
   19cec:	d09b      	beq.n	19c26 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   19cee:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   19cf2:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   19cf4:	f388 8811 	msr	BASEPRI, r8
   19cf8:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   19cfc:	2f00      	cmp	r7, #0
   19cfe:	d0c7      	beq.n	19c90 <process_event+0x184>
	return node->next;
   19d00:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   19d02:	4639      	mov	r1, r7
   19d04:	4633      	mov	r3, r6
   19d06:	4652      	mov	r2, sl
   19d08:	4620      	mov	r0, r4
   19d0a:	f00d fb73 	bl	273f4 <notify_one>
	list->head = node;
   19d0e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   19d10:	e7f4      	b.n	19cfc <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   19d12:	06ab      	lsls	r3, r5, #26
   19d14:	f57f af1a 	bpl.w	19b4c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   19d18:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   19d1c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   19d1e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   19d22:	e6ff      	b.n	19b24 <process_event+0x18>
   19d24:	00027421 	.word	0x00027421

00019d28 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   19d28:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d2a:	4602      	mov	r2, r0
   19d2c:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp) != 0) {
		val = 10U * val + *sp++ - '0';
   19d2e:	270a      	movs	r7, #10
	size_t val = 0;
   19d30:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
   19d32:	4e07      	ldr	r6, [pc, #28]	; (19d50 <extract_decimal+0x28>)
   19d34:	460b      	mov	r3, r1
   19d36:	781c      	ldrb	r4, [r3, #0]
   19d38:	3101      	adds	r1, #1
   19d3a:	5d35      	ldrb	r5, [r6, r4]
   19d3c:	076d      	lsls	r5, r5, #29
   19d3e:	d401      	bmi.n	19d44 <extract_decimal+0x1c>
	}
	*str = sp;
   19d40:	6013      	str	r3, [r2, #0]
	return val;
}
   19d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   19d44:	fb07 4300 	mla	r3, r7, r0, r4
   19d48:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   19d4c:	e7f2      	b.n	19d34 <extract_decimal+0xc>
   19d4e:	bf00      	nop
   19d50:	0002e947 	.word	0x0002e947

00019d54 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   19d54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d58:	4615      	mov	r5, r2
   19d5a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   19d5c:	78d3      	ldrb	r3, [r2, #3]
   19d5e:	4a22      	ldr	r2, [pc, #136]	; (19de8 <encode_uint+0x94>)
	switch (specifier) {
   19d60:	2b6f      	cmp	r3, #111	; 0x6f
   19d62:	f812 b003 	ldrb.w	fp, [r2, r3]
{
   19d66:	4680      	mov	r8, r0
   19d68:	460f      	mov	r7, r1
   19d6a:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   19d6e:	d029      	beq.n	19dc4 <encode_uint+0x70>
   19d70:	d824      	bhi.n	19dbc <encode_uint+0x68>
		return 10;
   19d72:	2b58      	cmp	r3, #88	; 0x58
   19d74:	bf0c      	ite	eq
   19d76:	2610      	moveq	r6, #16
   19d78:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   19d7a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   19d7e:	4632      	mov	r2, r6
   19d80:	2300      	movs	r3, #0
   19d82:	4640      	mov	r0, r8
   19d84:	4639      	mov	r1, r7
   19d86:	f7ff f80f 	bl	18da8 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   19d8a:	2a09      	cmp	r2, #9
   19d8c:	b2d4      	uxtb	r4, r2
   19d8e:	d81e      	bhi.n	19dce <encode_uint+0x7a>
   19d90:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   19d92:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19d94:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   19d96:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19d9a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   19d9e:	d301      	bcc.n	19da4 <encode_uint+0x50>
   19da0:	45d1      	cmp	r9, sl
   19da2:	d811      	bhi.n	19dc8 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   19da4:	782b      	ldrb	r3, [r5, #0]
   19da6:	069b      	lsls	r3, r3, #26
   19da8:	d505      	bpl.n	19db6 <encode_uint+0x62>
		if (radix == 8) {
   19daa:	2e08      	cmp	r6, #8
   19dac:	d115      	bne.n	19dda <encode_uint+0x86>
			conv->altform_0 = true;
   19dae:	78ab      	ldrb	r3, [r5, #2]
   19db0:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   19db4:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
   19db6:	4648      	mov	r0, r9
   19db8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   19dbc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   19dc0:	2b70      	cmp	r3, #112	; 0x70
   19dc2:	e7d7      	b.n	19d74 <encode_uint+0x20>
	switch (specifier) {
   19dc4:	2608      	movs	r6, #8
   19dc6:	e7d8      	b.n	19d7a <encode_uint+0x26>
		value /= radix;
   19dc8:	4680      	mov	r8, r0
   19dca:	460f      	mov	r7, r1
   19dcc:	e7d7      	b.n	19d7e <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19dce:	f1bb 0f01 	cmp.w	fp, #1
   19dd2:	bf0c      	ite	eq
   19dd4:	3437      	addeq	r4, #55	; 0x37
   19dd6:	3457      	addne	r4, #87	; 0x57
   19dd8:	e7db      	b.n	19d92 <encode_uint+0x3e>
		} else if (radix == 16) {
   19dda:	2e10      	cmp	r6, #16
   19ddc:	d1eb      	bne.n	19db6 <encode_uint+0x62>
			conv->altform_0c = true;
   19dde:	78ab      	ldrb	r3, [r5, #2]
   19de0:	f043 0310 	orr.w	r3, r3, #16
   19de4:	e7e6      	b.n	19db4 <encode_uint+0x60>
   19de6:	bf00      	nop
   19de8:	0002e947 	.word	0x0002e947

00019dec <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   19dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19df0:	468a      	mov	sl, r1
   19df2:	4616      	mov	r6, r2
   19df4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   19df6:	2500      	movs	r5, #0
{
   19df8:	b097      	sub	sp, #92	; 0x5c
   19dfa:	9003      	str	r0, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   19dfc:	7830      	ldrb	r0, [r6, #0]
   19dfe:	b908      	cbnz	r0, 19e04 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   19e00:	4628      	mov	r0, r5
   19e02:	e34a      	b.n	1a49a <z_cbvprintf_impl+0x6ae>
			OUTC(*fp++);
   19e04:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
   19e06:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   19e08:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
   19e0a:	d007      	beq.n	19e1c <z_cbvprintf_impl+0x30>
			OUTC('%');
   19e0c:	4651      	mov	r1, sl
   19e0e:	9b03      	ldr	r3, [sp, #12]
   19e10:	4798      	blx	r3
   19e12:	2800      	cmp	r0, #0
   19e14:	f2c0 8341 	blt.w	1a49a <z_cbvprintf_impl+0x6ae>
   19e18:	3501      	adds	r5, #1
		if (bps == NULL) {
   19e1a:	e1f0      	b.n	1a1fe <z_cbvprintf_impl+0x412>
		} state = {
   19e1c:	2218      	movs	r2, #24
   19e1e:	2100      	movs	r1, #0
   19e20:	a810      	add	r0, sp, #64	; 0x40
   19e22:	f011 f9ef 	bl	2b204 <memset>
	if (*sp == '%') {
   19e26:	7873      	ldrb	r3, [r6, #1]
   19e28:	2b25      	cmp	r3, #37	; 0x25
   19e2a:	f000 80a3 	beq.w	19f74 <z_cbvprintf_impl+0x188>
   19e2e:	2300      	movs	r3, #0
   19e30:	4698      	mov	r8, r3
   19e32:	469e      	mov	lr, r3
   19e34:	469c      	mov	ip, r3
   19e36:	4618      	mov	r0, r3
   19e38:	1c71      	adds	r1, r6, #1
   19e3a:	460f      	mov	r7, r1
		switch (*sp) {
   19e3c:	f811 2b01 	ldrb.w	r2, [r1], #1
   19e40:	2a2b      	cmp	r2, #43	; 0x2b
   19e42:	f000 80c6 	beq.w	19fd2 <z_cbvprintf_impl+0x1e6>
   19e46:	f200 80bd 	bhi.w	19fc4 <z_cbvprintf_impl+0x1d8>
   19e4a:	2a20      	cmp	r2, #32
   19e4c:	f000 80c4 	beq.w	19fd8 <z_cbvprintf_impl+0x1ec>
   19e50:	2a23      	cmp	r2, #35	; 0x23
   19e52:	f000 80c4 	beq.w	19fde <z_cbvprintf_impl+0x1f2>
   19e56:	b12b      	cbz	r3, 19e64 <z_cbvprintf_impl+0x78>
   19e58:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   19e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19e60:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   19e64:	f1b8 0f00 	cmp.w	r8, #0
   19e68:	d005      	beq.n	19e76 <z_cbvprintf_impl+0x8a>
   19e6a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   19e6e:	f043 0320 	orr.w	r3, r3, #32
   19e72:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   19e76:	f1be 0f00 	cmp.w	lr, #0
   19e7a:	d005      	beq.n	19e88 <z_cbvprintf_impl+0x9c>
   19e7c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   19e80:	f043 0310 	orr.w	r3, r3, #16
   19e84:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   19e88:	f1bc 0f00 	cmp.w	ip, #0
   19e8c:	d005      	beq.n	19e9a <z_cbvprintf_impl+0xae>
   19e8e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   19e92:	f043 0308 	orr.w	r3, r3, #8
   19e96:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   19e9a:	b128      	cbz	r0, 19ea8 <z_cbvprintf_impl+0xbc>
   19e9c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   19ea0:	f043 0304 	orr.w	r3, r3, #4
   19ea4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
   19ea8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   19eac:	f003 0144 	and.w	r1, r3, #68	; 0x44
   19eb0:	2944      	cmp	r1, #68	; 0x44
   19eb2:	d103      	bne.n	19ebc <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
   19eb4:	f36f 1386 	bfc	r3, #6, #1
   19eb8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
   19ebc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   19ec0:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   19ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19ec6:	9709      	str	r7, [sp, #36]	; 0x24
   19ec8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   19ecc:	f040 808c 	bne.w	19fe8 <z_cbvprintf_impl+0x1fc>
		conv->width_star = true;
   19ed0:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   19ed4:	f043 0301 	orr.w	r3, r3, #1
   19ed8:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
   19edc:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
   19ede:	781a      	ldrb	r2, [r3, #0]
   19ee0:	2a2e      	cmp	r2, #46	; 0x2e
   19ee2:	bf0c      	ite	eq
   19ee4:	2101      	moveq	r1, #1
   19ee6:	2100      	movne	r1, #0
   19ee8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   19eec:	f361 0241 	bfi	r2, r1, #1, #1
   19ef0:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
   19ef4:	d10c      	bne.n	19f10 <z_cbvprintf_impl+0x124>
	++sp;
   19ef6:	1c5a      	adds	r2, r3, #1
   19ef8:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
   19efa:	785a      	ldrb	r2, [r3, #1]
   19efc:	2a2a      	cmp	r2, #42	; 0x2a
   19efe:	f040 8083 	bne.w	1a008 <z_cbvprintf_impl+0x21c>
		conv->prec_star = true;
   19f02:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
   19f06:	3302      	adds	r3, #2
		conv->prec_star = true;
   19f08:	f042 0204 	orr.w	r2, r2, #4
   19f0c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
   19f10:	781a      	ldrb	r2, [r3, #0]
   19f12:	2a6c      	cmp	r2, #108	; 0x6c
   19f14:	f000 80a4 	beq.w	1a060 <z_cbvprintf_impl+0x274>
   19f18:	f200 8086 	bhi.w	1a028 <z_cbvprintf_impl+0x23c>
   19f1c:	2a68      	cmp	r2, #104	; 0x68
   19f1e:	f000 808c 	beq.w	1a03a <z_cbvprintf_impl+0x24e>
   19f22:	2a6a      	cmp	r2, #106	; 0x6a
   19f24:	f000 80a5 	beq.w	1a072 <z_cbvprintf_impl+0x286>
   19f28:	2a4c      	cmp	r2, #76	; 0x4c
   19f2a:	f000 80aa 	beq.w	1a082 <z_cbvprintf_impl+0x296>
	conv->specifier = *sp++;
   19f2e:	461a      	mov	r2, r3
   19f30:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
   19f34:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
   19f36:	9204      	str	r2, [sp, #16]
   19f38:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
   19f3c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
   19f40:	f200 8117 	bhi.w	1a172 <z_cbvprintf_impl+0x386>
   19f44:	2b6d      	cmp	r3, #109	; 0x6d
   19f46:	f200 80a9 	bhi.w	1a09c <z_cbvprintf_impl+0x2b0>
   19f4a:	2b69      	cmp	r3, #105	; 0x69
   19f4c:	f200 8111 	bhi.w	1a172 <z_cbvprintf_impl+0x386>
   19f50:	2b57      	cmp	r3, #87	; 0x57
   19f52:	f200 80be 	bhi.w	1a0d2 <z_cbvprintf_impl+0x2e6>
   19f56:	2b41      	cmp	r3, #65	; 0x41
   19f58:	d003      	beq.n	19f62 <z_cbvprintf_impl+0x176>
   19f5a:	3b45      	subs	r3, #69	; 0x45
   19f5c:	2b02      	cmp	r3, #2
   19f5e:	f200 8108 	bhi.w	1a172 <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_FP;
   19f62:	2204      	movs	r2, #4
   19f64:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   19f68:	f362 0302 	bfi	r3, r2, #0, #3
   19f6c:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
   19f70:	2301      	movs	r3, #1
			break;
   19f72:	e0ca      	b.n	1a10a <z_cbvprintf_impl+0x31e>
		conv->specifier = *sp++;
   19f74:	1cb2      	adds	r2, r6, #2
   19f76:	9204      	str	r2, [sp, #16]
   19f78:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
   19f7c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   19f80:	07d9      	lsls	r1, r3, #31
   19f82:	f140 80fd 	bpl.w	1a180 <z_cbvprintf_impl+0x394>
			width = va_arg(ap, int);
   19f86:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   19f8a:	f1b8 0f00 	cmp.w	r8, #0
   19f8e:	da07      	bge.n	19fa0 <z_cbvprintf_impl+0x1b4>
				conv->flag_dash = true;
   19f90:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
   19f94:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
   19f98:	f042 0204 	orr.w	r2, r2, #4
   19f9c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
   19fa0:	075a      	lsls	r2, r3, #29
   19fa2:	f140 80f6 	bpl.w	1a192 <z_cbvprintf_impl+0x3a6>
			int arg = va_arg(ap, int);
   19fa6:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
   19faa:	f1bb 0f00 	cmp.w	fp, #0
   19fae:	f280 80f5 	bge.w	1a19c <z_cbvprintf_impl+0x3b0>
				conv->prec_present = false;
   19fb2:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   19fb6:	f36f 0341 	bfc	r3, #1, #1
   19fba:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
   19fbe:	f04f 3bff 	mov.w	fp, #4294967295
   19fc2:	e0eb      	b.n	1a19c <z_cbvprintf_impl+0x3b0>
		switch (*sp) {
   19fc4:	2a2d      	cmp	r2, #45	; 0x2d
   19fc6:	d00d      	beq.n	19fe4 <z_cbvprintf_impl+0x1f8>
   19fc8:	2a30      	cmp	r2, #48	; 0x30
   19fca:	f47f af44 	bne.w	19e56 <z_cbvprintf_impl+0x6a>
   19fce:	2301      	movs	r3, #1
	} while (loop);
   19fd0:	e733      	b.n	19e3a <z_cbvprintf_impl+0x4e>
		switch (*sp) {
   19fd2:	f04f 0c01 	mov.w	ip, #1
   19fd6:	e730      	b.n	19e3a <z_cbvprintf_impl+0x4e>
   19fd8:	f04f 0e01 	mov.w	lr, #1
   19fdc:	e72d      	b.n	19e3a <z_cbvprintf_impl+0x4e>
   19fde:	f04f 0801 	mov.w	r8, #1
   19fe2:	e72a      	b.n	19e3a <z_cbvprintf_impl+0x4e>
   19fe4:	2001      	movs	r0, #1
   19fe6:	e728      	b.n	19e3a <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
   19fe8:	a809      	add	r0, sp, #36	; 0x24
   19fea:	f7ff fe9d 	bl	19d28 <extract_decimal>
	if (sp != wp) {
   19fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19ff0:	42bb      	cmp	r3, r7
   19ff2:	f43f af74 	beq.w	19ede <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
   19ff6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
   19ffa:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
   19ffc:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
   19ffe:	f360 0241 	bfi	r2, r0, #1, #1
   1a002:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1a006:	e76a      	b.n	19ede <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
   1a008:	a809      	add	r0, sp, #36	; 0x24
   1a00a:	f7ff fe8d 	bl	19d28 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   1a00e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
   1a012:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
   1a014:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1a018:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   1a01c:	f362 0341 	bfi	r3, r2, #1, #1
   1a020:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
   1a024:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a026:	e773      	b.n	19f10 <z_cbvprintf_impl+0x124>
	switch (*sp) {
   1a028:	2a74      	cmp	r2, #116	; 0x74
   1a02a:	d026      	beq.n	1a07a <z_cbvprintf_impl+0x28e>
   1a02c:	2a7a      	cmp	r2, #122	; 0x7a
   1a02e:	f47f af7e 	bne.w	19f2e <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
   1a032:	2106      	movs	r1, #6
   1a034:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a038:	e00c      	b.n	1a054 <z_cbvprintf_impl+0x268>
		if (*++sp == 'h') {
   1a03a:	785a      	ldrb	r2, [r3, #1]
   1a03c:	2a68      	cmp	r2, #104	; 0x68
   1a03e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a042:	d106      	bne.n	1a052 <z_cbvprintf_impl+0x266>
			conv->length_mod = LENGTH_HH;
   1a044:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1a046:	f361 02c6 	bfi	r2, r1, #3, #4
   1a04a:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
   1a04e:	3302      	adds	r3, #2
   1a050:	e76d      	b.n	19f2e <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
   1a052:	2102      	movs	r1, #2
   1a054:	f361 02c6 	bfi	r2, r1, #3, #4
   1a058:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
   1a05c:	3301      	adds	r3, #1
   1a05e:	e766      	b.n	19f2e <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
   1a060:	785a      	ldrb	r2, [r3, #1]
   1a062:	2a6c      	cmp	r2, #108	; 0x6c
   1a064:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a068:	d101      	bne.n	1a06e <z_cbvprintf_impl+0x282>
			conv->length_mod = LENGTH_LL;
   1a06a:	2104      	movs	r1, #4
   1a06c:	e7eb      	b.n	1a046 <z_cbvprintf_impl+0x25a>
			conv->length_mod = LENGTH_L;
   1a06e:	2103      	movs	r1, #3
   1a070:	e7f0      	b.n	1a054 <z_cbvprintf_impl+0x268>
		conv->length_mod = LENGTH_J;
   1a072:	2105      	movs	r1, #5
   1a074:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a078:	e7ec      	b.n	1a054 <z_cbvprintf_impl+0x268>
		conv->length_mod = LENGTH_T;
   1a07a:	2107      	movs	r1, #7
   1a07c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a080:	e7e8      	b.n	1a054 <z_cbvprintf_impl+0x268>
		conv->unsupported = true;
   1a082:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1a086:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   1a08a:	f022 0202 	bic.w	r2, r2, #2
   1a08e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   1a092:	f042 0202 	orr.w	r2, r2, #2
   1a096:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
   1a09a:	e7df      	b.n	1a05c <z_cbvprintf_impl+0x270>
	switch (conv->specifier) {
   1a09c:	3b6e      	subs	r3, #110	; 0x6e
   1a09e:	b2d9      	uxtb	r1, r3
   1a0a0:	2301      	movs	r3, #1
   1a0a2:	408b      	lsls	r3, r1
   1a0a4:	f240 4182 	movw	r1, #1154	; 0x482
   1a0a8:	420b      	tst	r3, r1
   1a0aa:	d138      	bne.n	1a11e <z_cbvprintf_impl+0x332>
   1a0ac:	f013 0f24 	tst.w	r3, #36	; 0x24
   1a0b0:	d152      	bne.n	1a158 <z_cbvprintf_impl+0x36c>
   1a0b2:	07df      	lsls	r7, r3, #31
   1a0b4:	d55d      	bpl.n	1a172 <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_PTR;
   1a0b6:	2103      	movs	r1, #3
   1a0b8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a0bc:	f361 0302 	bfi	r3, r1, #0, #3
   1a0c0:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a0c4:	f002 0378 	and.w	r3, r2, #120	; 0x78
   1a0c8:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
   1a0cc:	4243      	negs	r3, r0
   1a0ce:	4143      	adcs	r3, r0
   1a0d0:	e01b      	b.n	1a10a <z_cbvprintf_impl+0x31e>
   1a0d2:	2001      	movs	r0, #1
	switch (conv->specifier) {
   1a0d4:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   1a0d8:	b2c9      	uxtb	r1, r1
   1a0da:	fa00 f101 	lsl.w	r1, r0, r1
   1a0de:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   1a0e2:	f47f af3e 	bne.w	19f62 <z_cbvprintf_impl+0x176>
   1a0e6:	f640 0701 	movw	r7, #2049	; 0x801
   1a0ea:	4239      	tst	r1, r7
   1a0ec:	d11d      	bne.n	1a12a <z_cbvprintf_impl+0x33e>
   1a0ee:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   1a0f2:	d03e      	beq.n	1a172 <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_SINT;
   1a0f4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a0f8:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a0fc:	f002 0278 	and.w	r2, r2, #120	; 0x78
   1a100:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   1a102:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a106:	d034      	beq.n	1a172 <z_cbvprintf_impl+0x386>
	bool unsupported = false;
   1a108:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   1a10a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   1a10e:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1a112:	430b      	orrs	r3, r1
   1a114:	f363 0241 	bfi	r2, r3, #1, #1
   1a118:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   1a11c:	e72e      	b.n	19f7c <z_cbvprintf_impl+0x190>
		conv->specifier_cat = SPECIFIER_UINT;
   1a11e:	2102      	movs	r1, #2
   1a120:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a124:	f361 0302 	bfi	r3, r1, #0, #3
   1a128:	e7e8      	b.n	1a0fc <z_cbvprintf_impl+0x310>
   1a12a:	2002      	movs	r0, #2
   1a12c:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a130:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1a134:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a138:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   1a13a:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
   1a13e:	bf02      	ittt	eq
   1a140:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
   1a144:	f041 0101 	orreq.w	r1, r1, #1
   1a148:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
   1a14c:	2b63      	cmp	r3, #99	; 0x63
   1a14e:	d1db      	bne.n	1a108 <z_cbvprintf_impl+0x31c>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1a150:	1e13      	subs	r3, r2, #0
   1a152:	bf18      	it	ne
   1a154:	2301      	movne	r3, #1
   1a156:	e7d8      	b.n	1a10a <z_cbvprintf_impl+0x31e>
		conv->specifier_cat = SPECIFIER_PTR;
   1a158:	2103      	movs	r1, #3
   1a15a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   1a15e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   1a162:	f361 0302 	bfi	r3, r1, #0, #3
   1a166:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   1a16a:	bf14      	ite	ne
   1a16c:	2301      	movne	r3, #1
   1a16e:	2300      	moveq	r3, #0
   1a170:	e7cb      	b.n	1a10a <z_cbvprintf_impl+0x31e>
		conv->invalid = true;
   1a172:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a176:	f043 0301 	orr.w	r3, r3, #1
   1a17a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
   1a17e:	e7c3      	b.n	1a108 <z_cbvprintf_impl+0x31c>
		} else if (conv->width_present) {
   1a180:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
   1a184:	2a00      	cmp	r2, #0
		int width = -1;
   1a186:	bfac      	ite	ge
   1a188:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
   1a18c:	f8dd 804c 	ldrlt.w	r8, [sp, #76]	; 0x4c
   1a190:	e706      	b.n	19fa0 <z_cbvprintf_impl+0x1b4>
		} else if (conv->prec_present) {
   1a192:	079f      	lsls	r7, r3, #30
   1a194:	f57f af13 	bpl.w	19fbe <z_cbvprintf_impl+0x1d2>
			precision = conv->prec_value;
   1a198:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
   1a19c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   1a19e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
   1a1a2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
   1a1a6:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
   1a1aa:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1a1ae:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1a1b0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1a1b4:	d133      	bne.n	1a21e <z_cbvprintf_impl+0x432>
			switch (length_mod) {
   1a1b6:	1ecb      	subs	r3, r1, #3
   1a1b8:	2b04      	cmp	r3, #4
   1a1ba:	d804      	bhi.n	1a1c6 <z_cbvprintf_impl+0x3da>
   1a1bc:	e8df f003 	tbb	[pc, r3]
   1a1c0:	21464621 	.word	0x21464621
   1a1c4:	21          	.byte	0x21
   1a1c5:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   1a1c6:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   1a1c8:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   1a1ca:	ea4f 72e3 	mov.w	r2, r3, asr #31
   1a1ce:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   1a1d2:	d11c      	bne.n	1a20e <z_cbvprintf_impl+0x422>
				value->sint = (signed char)value->sint;
   1a1d4:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
   1a1d8:	17da      	asrs	r2, r3, #31
   1a1da:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
   1a1de:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   1a1e0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a1e4:	f013 0703 	ands.w	r7, r3, #3
   1a1e8:	d050      	beq.n	1a28c <z_cbvprintf_impl+0x4a0>
			OUTS(sp, fp);
   1a1ea:	4632      	mov	r2, r6
   1a1ec:	4651      	mov	r1, sl
   1a1ee:	9b04      	ldr	r3, [sp, #16]
   1a1f0:	9803      	ldr	r0, [sp, #12]
   1a1f2:	f00d f9bb 	bl	2756c <outs>
   1a1f6:	2800      	cmp	r0, #0
   1a1f8:	f2c0 814f 	blt.w	1a49a <z_cbvprintf_impl+0x6ae>
   1a1fc:	4405      	add	r5, r0
			continue;
   1a1fe:	9e04      	ldr	r6, [sp, #16]
   1a200:	e5fc      	b.n	19dfc <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1a202:	f854 3b04 	ldr.w	r3, [r4], #4
   1a206:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   1a208:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
   1a20c:	e7e8      	b.n	1a1e0 <z_cbvprintf_impl+0x3f4>
			} else if (length_mod == LENGTH_H) {
   1a20e:	2902      	cmp	r1, #2
   1a210:	d1e5      	bne.n	1a1de <z_cbvprintf_impl+0x3f2>
				value->sint = (short)value->sint;
   1a212:	b21a      	sxth	r2, r3
   1a214:	f343 33c0 	sbfx	r3, r3, #15, #1
   1a218:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   1a21c:	e7df      	b.n	1a1de <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1a21e:	2b02      	cmp	r3, #2
   1a220:	d124      	bne.n	1a26c <z_cbvprintf_impl+0x480>
			switch (length_mod) {
   1a222:	1ecb      	subs	r3, r1, #3
   1a224:	2b04      	cmp	r3, #4
   1a226:	d804      	bhi.n	1a232 <z_cbvprintf_impl+0x446>
   1a228:	e8df f003 	tbb	[pc, r3]
   1a22c:	18101018 	.word	0x18101018
   1a230:	18          	.byte	0x18
   1a231:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   1a232:	2901      	cmp	r1, #1
   1a234:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
   1a238:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1a23c:	d014      	beq.n	1a268 <z_cbvprintf_impl+0x47c>
			} else if (length_mod == LENGTH_H) {
   1a23e:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   1a240:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
   1a244:	d1cc      	bne.n	1a1e0 <z_cbvprintf_impl+0x3f4>
				value->uint = (unsigned short)value->uint;
   1a246:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   1a248:	9310      	str	r3, [sp, #64]	; 0x40
   1a24a:	e7c9      	b.n	1a1e0 <z_cbvprintf_impl+0x3f4>
					(uint_value_type)va_arg(ap,
   1a24c:	3407      	adds	r4, #7
   1a24e:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   1a252:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1a256:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   1a25a:	e7c1      	b.n	1a1e0 <z_cbvprintf_impl+0x3f4>
					(uint_value_type)va_arg(ap, size_t);
   1a25c:	f854 3b04 	ldr.w	r3, [r4], #4
   1a260:	9310      	str	r3, [sp, #64]	; 0x40
   1a262:	2300      	movs	r3, #0
   1a264:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
   1a266:	e7bb      	b.n	1a1e0 <z_cbvprintf_impl+0x3f4>
				value->uint = (unsigned char)value->uint;
   1a268:	b2db      	uxtb	r3, r3
   1a26a:	e7cd      	b.n	1a208 <z_cbvprintf_impl+0x41c>
		} else if (specifier_cat == SPECIFIER_FP) {
   1a26c:	2b04      	cmp	r3, #4
   1a26e:	d108      	bne.n	1a282 <z_cbvprintf_impl+0x496>
					(sint_value_type)va_arg(ap, long long);
   1a270:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   1a272:	f024 0407 	bic.w	r4, r4, #7
   1a276:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a27a:	3408      	adds	r4, #8
   1a27c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   1a280:	e7ae      	b.n	1a1e0 <z_cbvprintf_impl+0x3f4>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1a282:	2b03      	cmp	r3, #3
   1a284:	d1ac      	bne.n	1a1e0 <z_cbvprintf_impl+0x3f4>
			value->ptr = va_arg(ap, void *);
   1a286:	f854 3b04 	ldr.w	r3, [r4], #4
   1a28a:	e7dd      	b.n	1a248 <z_cbvprintf_impl+0x45c>
		switch (conv->specifier) {
   1a28c:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1a290:	2878      	cmp	r0, #120	; 0x78
   1a292:	d8b4      	bhi.n	1a1fe <z_cbvprintf_impl+0x412>
   1a294:	2862      	cmp	r0, #98	; 0x62
   1a296:	d81d      	bhi.n	1a2d4 <z_cbvprintf_impl+0x4e8>
   1a298:	2825      	cmp	r0, #37	; 0x25
   1a29a:	f43f adb7 	beq.w	19e0c <z_cbvprintf_impl+0x20>
   1a29e:	2858      	cmp	r0, #88	; 0x58
   1a2a0:	d1ad      	bne.n	1a1fe <z_cbvprintf_impl+0x412>
			bps = encode_uint(value->uint, conv, buf, bpe);
   1a2a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1a2a6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   1a2aa:	9300      	str	r3, [sp, #0]
   1a2ac:	aa12      	add	r2, sp, #72	; 0x48
   1a2ae:	ab0a      	add	r3, sp, #40	; 0x28
   1a2b0:	f7ff fd50 	bl	19d54 <encode_uint>
			if (precision >= 0) {
   1a2b4:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   1a2b8:	4681      	mov	r9, r0
			if (precision >= 0) {
   1a2ba:	f280 8098 	bge.w	1a3ee <z_cbvprintf_impl+0x602>
		if (bps == NULL) {
   1a2be:	f1b9 0f00 	cmp.w	r9, #0
   1a2c2:	d09c      	beq.n	1a1fe <z_cbvprintf_impl+0x412>
		size_t nj_len = (bpe - bps);
   1a2c4:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
   1a2c8:	eba6 0309 	sub.w	r3, r6, r9
		if (sign != 0) {
   1a2cc:	2f00      	cmp	r7, #0
   1a2ce:	d050      	beq.n	1a372 <z_cbvprintf_impl+0x586>
			nj_len += 1U;
   1a2d0:	3301      	adds	r3, #1
   1a2d2:	e04e      	b.n	1a372 <z_cbvprintf_impl+0x586>
		switch (conv->specifier) {
   1a2d4:	3863      	subs	r0, #99	; 0x63
   1a2d6:	2815      	cmp	r0, #21
   1a2d8:	d891      	bhi.n	1a1fe <z_cbvprintf_impl+0x412>
   1a2da:	a201      	add	r2, pc, #4	; (adr r2, 1a2e0 <z_cbvprintf_impl+0x4f4>)
   1a2dc:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   1a2e0:	0001a361 	.word	0x0001a361
   1a2e4:	0001a3c5 	.word	0x0001a3c5
   1a2e8:	0001a1ff 	.word	0x0001a1ff
   1a2ec:	0001a1ff 	.word	0x0001a1ff
   1a2f0:	0001a1ff 	.word	0x0001a1ff
   1a2f4:	0001a1ff 	.word	0x0001a1ff
   1a2f8:	0001a3c5 	.word	0x0001a3c5
   1a2fc:	0001a1ff 	.word	0x0001a1ff
   1a300:	0001a1ff 	.word	0x0001a1ff
   1a304:	0001a1ff 	.word	0x0001a1ff
   1a308:	0001a1ff 	.word	0x0001a1ff
   1a30c:	0001a44f 	.word	0x0001a44f
   1a310:	0001a3e9 	.word	0x0001a3e9
   1a314:	0001a411 	.word	0x0001a411
   1a318:	0001a1ff 	.word	0x0001a1ff
   1a31c:	0001a1ff 	.word	0x0001a1ff
   1a320:	0001a339 	.word	0x0001a339
   1a324:	0001a1ff 	.word	0x0001a1ff
   1a328:	0001a3e9 	.word	0x0001a3e9
   1a32c:	0001a1ff 	.word	0x0001a1ff
   1a330:	0001a1ff 	.word	0x0001a1ff
   1a334:	0001a3e9 	.word	0x0001a3e9
			if (precision >= 0) {
   1a338:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
   1a33c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
			if (precision >= 0) {
   1a340:	db0a      	blt.n	1a358 <z_cbvprintf_impl+0x56c>
				len = strnlen(bps, precision);
   1a342:	4659      	mov	r1, fp
   1a344:	4648      	mov	r0, r9
   1a346:	f010 ffe4 	bl	2b312 <strnlen>
		if (bps == NULL) {
   1a34a:	f1b9 0f00 	cmp.w	r9, #0
   1a34e:	f43f af56 	beq.w	1a1fe <z_cbvprintf_impl+0x412>
			bpe = bps + len;
   1a352:	eb09 0600 	add.w	r6, r9, r0
   1a356:	e076      	b.n	1a446 <z_cbvprintf_impl+0x65a>
				len = strlen(bps);
   1a358:	4648      	mov	r0, r9
   1a35a:	f7fe fe97 	bl	1908c <strlen>
   1a35e:	e7f8      	b.n	1a352 <z_cbvprintf_impl+0x566>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1a360:	9b10      	ldr	r3, [sp, #64]	; 0x40
		char sign = 0;
   1a362:	2700      	movs	r7, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1a364:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		size_t nj_len = (bpe - bps);
   1a368:	2301      	movs	r3, #1
			bpe = buf + 1;
   1a36a:	f10d 0629 	add.w	r6, sp, #41	; 0x29
			bps = buf;
   1a36e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
		if (conv->altform_0c) {
   1a372:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
   1a376:	f011 0210 	ands.w	r2, r1, #16
   1a37a:	9206      	str	r2, [sp, #24]
   1a37c:	f000 8081 	beq.w	1a482 <z_cbvprintf_impl+0x696>
			nj_len += 2U;
   1a380:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
   1a382:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a384:	4413      	add	r3, r2
   1a386:	9205      	str	r2, [sp, #20]
		if (conv->pad_fp) {
   1a388:	064a      	lsls	r2, r1, #25
			nj_len += conv->pad0_pre_exp;
   1a38a:	bf44      	itt	mi
   1a38c:	9914      	ldrmi	r1, [sp, #80]	; 0x50
   1a38e:	185b      	addmi	r3, r3, r1
		if (width > 0) {
   1a390:	f1b8 0f00 	cmp.w	r8, #0
   1a394:	f340 808e 	ble.w	1a4b4 <z_cbvprintf_impl+0x6c8>
			width -= (int)nj_len;
   1a398:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   1a39c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a3a0:	0758      	lsls	r0, r3, #29
   1a3a2:	f3c3 0b80 	ubfx	fp, r3, #2, #1
   1a3a6:	f100 8085 	bmi.w	1a4b4 <z_cbvprintf_impl+0x6c8>
				if (conv->flag_zero) {
   1a3aa:	0659      	lsls	r1, r3, #25
   1a3ac:	d578      	bpl.n	1a4a0 <z_cbvprintf_impl+0x6b4>
					if (sign != 0) {
   1a3ae:	b13f      	cbz	r7, 1a3c0 <z_cbvprintf_impl+0x5d4>
						OUTC(sign);
   1a3b0:	4651      	mov	r1, sl
   1a3b2:	4638      	mov	r0, r7
   1a3b4:	9b03      	ldr	r3, [sp, #12]
   1a3b6:	4798      	blx	r3
   1a3b8:	2800      	cmp	r0, #0
   1a3ba:	db6e      	blt.n	1a49a <z_cbvprintf_impl+0x6ae>
   1a3bc:	465f      	mov	r7, fp
   1a3be:	3501      	adds	r5, #1
					pad = '0';
   1a3c0:	2330      	movs	r3, #48	; 0x30
   1a3c2:	e06e      	b.n	1a4a2 <z_cbvprintf_impl+0x6b6>
			if (conv->flag_plus) {
   1a3c4:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
   1a3c6:	bf5a      	itte	pl
   1a3c8:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   1a3cc:	015f      	lslpl	r7, r3, #5
				sign = '+';
   1a3ce:	272b      	movmi	r7, #43	; 0x2b
			sint = value->sint;
   1a3d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
   1a3d4:	2b00      	cmp	r3, #0
   1a3d6:	f6bf af64 	bge.w	1a2a2 <z_cbvprintf_impl+0x4b6>
				value->uint = (uint_value_type)-sint;
   1a3da:	4252      	negs	r2, r2
   1a3dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
   1a3e0:	272d      	movs	r7, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   1a3e2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   1a3e6:	e75c      	b.n	1a2a2 <z_cbvprintf_impl+0x4b6>
		switch (conv->specifier) {
   1a3e8:	2700      	movs	r7, #0
   1a3ea:	e75a      	b.n	1a2a2 <z_cbvprintf_impl+0x4b6>
		char sign = 0;
   1a3ec:	2700      	movs	r7, #0
				conv->flag_zero = false;
   1a3ee:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
				size_t len = bpe - bps;
   1a3f2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   1a3f6:	eba3 0309 	sub.w	r3, r3, r9
				conv->flag_zero = false;
   1a3fa:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
   1a3fe:	459b      	cmp	fp, r3
				conv->flag_zero = false;
   1a400:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
   1a404:	f67f af5b 	bls.w	1a2be <z_cbvprintf_impl+0x4d2>
					conv->pad0_value = precision - (int)len;
   1a408:	ebab 0303 	sub.w	r3, fp, r3
   1a40c:	9313      	str	r3, [sp, #76]	; 0x4c
   1a40e:	e756      	b.n	1a2be <z_cbvprintf_impl+0x4d2>
			if (value->ptr != NULL) {
   1a410:	9810      	ldr	r0, [sp, #64]	; 0x40
   1a412:	b380      	cbz	r0, 1a476 <z_cbvprintf_impl+0x68a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1a414:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
   1a418:	ab0a      	add	r3, sp, #40	; 0x28
   1a41a:	2100      	movs	r1, #0
   1a41c:	9600      	str	r6, [sp, #0]
   1a41e:	aa12      	add	r2, sp, #72	; 0x48
   1a420:	f7ff fc98 	bl	19d54 <encode_uint>
				conv->altform_0c = true;
   1a424:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
   1a428:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
   1a42c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1a430:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1a434:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1a438:	4681      	mov	r9, r0
				conv->altform_0c = true;
   1a43a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
   1a43e:	dad5      	bge.n	1a3ec <z_cbvprintf_impl+0x600>
		if (bps == NULL) {
   1a440:	2800      	cmp	r0, #0
   1a442:	f43f aedc 	beq.w	1a1fe <z_cbvprintf_impl+0x412>
		char sign = 0;
   1a446:	2700      	movs	r7, #0
		size_t nj_len = (bpe - bps);
   1a448:	eba6 0309 	sub.w	r3, r6, r9
		if (sign != 0) {
   1a44c:	e791      	b.n	1a372 <z_cbvprintf_impl+0x586>
				store_count(conv, value->ptr, count);
   1a44e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
   1a450:	2907      	cmp	r1, #7
   1a452:	f63f aed4 	bhi.w	1a1fe <z_cbvprintf_impl+0x412>
   1a456:	e8df f001 	tbb	[pc, r1]
   1a45a:	040c      	.short	0x040c
   1a45c:	08080c06 	.word	0x08080c06
   1a460:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   1a462:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   1a464:	e6cb      	b.n	1a1fe <z_cbvprintf_impl+0x412>
		*(short *)dp = (short)count;
   1a466:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   1a468:	e6c9      	b.n	1a1fe <z_cbvprintf_impl+0x412>
		*(intmax_t *)dp = (intmax_t)count;
   1a46a:	17ea      	asrs	r2, r5, #31
   1a46c:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   1a470:	e6c5      	b.n	1a1fe <z_cbvprintf_impl+0x412>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1a472:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   1a474:	e6c3      	b.n	1a1fe <z_cbvprintf_impl+0x412>
			bpe = bps + 5;
   1a476:	4e31      	ldr	r6, [pc, #196]	; (1a53c <z_cbvprintf_impl+0x750>)
		char sign = 0;
   1a478:	4607      	mov	r7, r0
		size_t nj_len = (bpe - bps);
   1a47a:	2305      	movs	r3, #5
   1a47c:	f1a6 0905 	sub.w	r9, r6, #5
   1a480:	e777      	b.n	1a372 <z_cbvprintf_impl+0x586>
		} else if (conv->altform_0) {
   1a482:	0708      	lsls	r0, r1, #28
			nj_len += 1U;
   1a484:	bf48      	it	mi
   1a486:	3301      	addmi	r3, #1
   1a488:	e77b      	b.n	1a382 <z_cbvprintf_impl+0x596>
					OUTC(pad);
   1a48a:	4618      	mov	r0, r3
   1a48c:	9307      	str	r3, [sp, #28]
   1a48e:	4651      	mov	r1, sl
   1a490:	9b03      	ldr	r3, [sp, #12]
   1a492:	4798      	blx	r3
   1a494:	2800      	cmp	r0, #0
   1a496:	9b07      	ldr	r3, [sp, #28]
   1a498:	da04      	bge.n	1a4a4 <z_cbvprintf_impl+0x6b8>
#undef OUTS
#undef OUTC
}
   1a49a:	b017      	add	sp, #92	; 0x5c
   1a49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1a4a0:	2320      	movs	r3, #32
					pad = '0';
   1a4a2:	46c3      	mov	fp, r8
				while (width-- > 0) {
   1a4a4:	4659      	mov	r1, fp
   1a4a6:	2900      	cmp	r1, #0
   1a4a8:	f10b 3bff 	add.w	fp, fp, #4294967295
   1a4ac:	dced      	bgt.n	1a48a <z_cbvprintf_impl+0x69e>
   1a4ae:	4445      	add	r5, r8
   1a4b0:	46d8      	mov	r8, fp
   1a4b2:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
   1a4b4:	b137      	cbz	r7, 1a4c4 <z_cbvprintf_impl+0x6d8>
			OUTC(sign);
   1a4b6:	4651      	mov	r1, sl
   1a4b8:	4638      	mov	r0, r7
   1a4ba:	9b03      	ldr	r3, [sp, #12]
   1a4bc:	4798      	blx	r3
   1a4be:	2800      	cmp	r0, #0
   1a4c0:	dbeb      	blt.n	1a49a <z_cbvprintf_impl+0x6ae>
   1a4c2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1a4c4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a4c8:	06da      	lsls	r2, r3, #27
   1a4ca:	d401      	bmi.n	1a4d0 <z_cbvprintf_impl+0x6e4>
   1a4cc:	071b      	lsls	r3, r3, #28
   1a4ce:	d506      	bpl.n	1a4de <z_cbvprintf_impl+0x6f2>
				OUTC('0');
   1a4d0:	4651      	mov	r1, sl
   1a4d2:	2030      	movs	r0, #48	; 0x30
   1a4d4:	9b03      	ldr	r3, [sp, #12]
   1a4d6:	4798      	blx	r3
   1a4d8:	2800      	cmp	r0, #0
   1a4da:	dbde      	blt.n	1a49a <z_cbvprintf_impl+0x6ae>
   1a4dc:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   1a4de:	9b06      	ldr	r3, [sp, #24]
   1a4e0:	b13b      	cbz	r3, 1a4f2 <z_cbvprintf_impl+0x706>
				OUTC(conv->specifier);
   1a4e2:	4651      	mov	r1, sl
   1a4e4:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1a4e8:	9b03      	ldr	r3, [sp, #12]
   1a4ea:	4798      	blx	r3
   1a4ec:	2800      	cmp	r0, #0
   1a4ee:	dbd4      	blt.n	1a49a <z_cbvprintf_impl+0x6ae>
   1a4f0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1a4f2:	9f05      	ldr	r7, [sp, #20]
   1a4f4:	442f      	add	r7, r5
   1a4f6:	e006      	b.n	1a506 <z_cbvprintf_impl+0x71a>
				OUTC('0');
   1a4f8:	4651      	mov	r1, sl
   1a4fa:	2030      	movs	r0, #48	; 0x30
   1a4fc:	9b03      	ldr	r3, [sp, #12]
   1a4fe:	4798      	blx	r3
   1a500:	2800      	cmp	r0, #0
   1a502:	dbca      	blt.n	1a49a <z_cbvprintf_impl+0x6ae>
   1a504:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1a506:	1b7b      	subs	r3, r7, r5
   1a508:	2b00      	cmp	r3, #0
   1a50a:	dcf5      	bgt.n	1a4f8 <z_cbvprintf_impl+0x70c>
			OUTS(bps, bpe);
   1a50c:	4633      	mov	r3, r6
   1a50e:	464a      	mov	r2, r9
   1a510:	4651      	mov	r1, sl
   1a512:	9803      	ldr	r0, [sp, #12]
   1a514:	f00d f82a 	bl	2756c <outs>
   1a518:	2800      	cmp	r0, #0
   1a51a:	dbbe      	blt.n	1a49a <z_cbvprintf_impl+0x6ae>
   1a51c:	4405      	add	r5, r0
		while (width > 0) {
   1a51e:	44a8      	add	r8, r5
   1a520:	eba8 0305 	sub.w	r3, r8, r5
   1a524:	2b00      	cmp	r3, #0
   1a526:	f77f ae6a 	ble.w	1a1fe <z_cbvprintf_impl+0x412>
			OUTC(' ');
   1a52a:	4651      	mov	r1, sl
   1a52c:	2020      	movs	r0, #32
   1a52e:	9b03      	ldr	r3, [sp, #12]
   1a530:	4798      	blx	r3
   1a532:	2800      	cmp	r0, #0
   1a534:	dbb1      	blt.n	1a49a <z_cbvprintf_impl+0x6ae>
   1a536:	3501      	adds	r5, #1
			--width;
   1a538:	e7f2      	b.n	1a520 <z_cbvprintf_impl+0x734>
   1a53a:	bf00      	nop
   1a53c:	0002d154 	.word	0x0002d154

0001a540 <lexer_string>:

	return chr;
}

static void *lexer_string(struct json_lexer *lex)
{
   1a540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a542:	4601      	mov	r1, r0
			emit(lex, JSON_TOK_ERROR);
			return NULL;
		}

		if (chr == '\\') {
			switch (next(lex)) {
   1a544:	2601      	movs	r6, #1
	lex->start = lex->pos;
   1a546:	6884      	ldr	r4, [r0, #8]
			switch (next(lex)) {
   1a548:	4f2a      	ldr	r7, [pc, #168]	; (1a5f4 <lexer_string+0xb4>)
	lex->start = lex->pos;
   1a54a:	6044      	str	r4, [r0, #4]
		int chr = next(lex);
   1a54c:	4608      	mov	r0, r1
   1a54e:	f00d f824 	bl	2759a <next>
		if (chr == '\0') {
   1a552:	b930      	cbnz	r0, 1a562 <lexer_string+0x22>
	lex->tok.type = token;
   1a554:	2321      	movs	r3, #33	; 0x21
   1a556:	740b      	strb	r3, [r1, #16]
	lex->tok.end = lex->pos;
   1a558:	688b      	ldr	r3, [r1, #8]
	lex->tok.start = lex->start;
   1a55a:	614c      	str	r4, [r1, #20]
	lex->tok.end = lex->pos;
   1a55c:	618b      	str	r3, [r1, #24]
	lex->start = lex->pos;
   1a55e:	604b      	str	r3, [r1, #4]
	}

error:
	emit(lex, JSON_TOK_ERROR);
	return NULL;
}
   1a560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (chr == '\\') {
   1a562:	285c      	cmp	r0, #92	; 0x5c
   1a564:	d137      	bne.n	1a5d6 <lexer_string+0x96>
			switch (next(lex)) {
   1a566:	4608      	mov	r0, r1
   1a568:	f00d f817 	bl	2759a <next>
   1a56c:	2875      	cmp	r0, #117	; 0x75
   1a56e:	dc05      	bgt.n	1a57c <lexer_string+0x3c>
   1a570:	285b      	cmp	r0, #91	; 0x5b
   1a572:	dc0a      	bgt.n	1a58a <lexer_string+0x4a>
   1a574:	2822      	cmp	r0, #34	; 0x22
   1a576:	d0e9      	beq.n	1a54c <lexer_string+0xc>
   1a578:	282f      	cmp	r0, #47	; 0x2f
   1a57a:	d0e7      	beq.n	1a54c <lexer_string+0xc>
	lex->tok.type = token;
   1a57c:	2321      	movs	r3, #33	; 0x21
   1a57e:	740b      	strb	r3, [r1, #16]
	lex->tok.end = lex->pos;
   1a580:	688b      	ldr	r3, [r1, #8]
			return NULL;
   1a582:	2000      	movs	r0, #0
	lex->tok.start = lex->start;
   1a584:	614c      	str	r4, [r1, #20]
	lex->tok.end = lex->pos;
   1a586:	618b      	str	r3, [r1, #24]
	return NULL;
   1a588:	e7e9      	b.n	1a55e <lexer_string+0x1e>
			switch (next(lex)) {
   1a58a:	f1a0 035c 	sub.w	r3, r0, #92	; 0x5c
   1a58e:	fa06 f303 	lsl.w	r3, r6, r3
   1a592:	423b      	tst	r3, r7
   1a594:	d1da      	bne.n	1a54c <lexer_string+0xc>
   1a596:	2875      	cmp	r0, #117	; 0x75
   1a598:	d1f0      	bne.n	1a57c <lexer_string+0x3c>
				if (isxdigit(next(lex)) == 0) {
   1a59a:	4608      	mov	r0, r1
   1a59c:	f00c fffd 	bl	2759a <next>
   1a5a0:	4d15      	ldr	r5, [pc, #84]	; (1a5f8 <lexer_string+0xb8>)
   1a5a2:	5c2b      	ldrb	r3, [r5, r0]
   1a5a4:	f013 0f44 	tst.w	r3, #68	; 0x44
   1a5a8:	d0e8      	beq.n	1a57c <lexer_string+0x3c>
				if (isxdigit(next(lex)) == 0) {
   1a5aa:	4608      	mov	r0, r1
   1a5ac:	f00c fff5 	bl	2759a <next>
   1a5b0:	5c2b      	ldrb	r3, [r5, r0]
   1a5b2:	f013 0f44 	tst.w	r3, #68	; 0x44
   1a5b6:	d0e1      	beq.n	1a57c <lexer_string+0x3c>
				if (isxdigit(next(lex)) == 0) {
   1a5b8:	4608      	mov	r0, r1
   1a5ba:	f00c ffee 	bl	2759a <next>
   1a5be:	5c2b      	ldrb	r3, [r5, r0]
   1a5c0:	f013 0f44 	tst.w	r3, #68	; 0x44
   1a5c4:	d0da      	beq.n	1a57c <lexer_string+0x3c>
				if (isxdigit(next(lex)) == 0) {
   1a5c6:	4608      	mov	r0, r1
   1a5c8:	f00c ffe7 	bl	2759a <next>
   1a5cc:	5c2b      	ldrb	r3, [r5, r0]
   1a5ce:	f013 0f44 	tst.w	r3, #68	; 0x44
   1a5d2:	d1bb      	bne.n	1a54c <lexer_string+0xc>
   1a5d4:	e7d2      	b.n	1a57c <lexer_string+0x3c>
		if (chr == '"') {
   1a5d6:	2822      	cmp	r0, #34	; 0x22
   1a5d8:	d1b8      	bne.n	1a54c <lexer_string+0xc>
	lex->pos--;
   1a5da:	688b      	ldr	r3, [r1, #8]
	lex->tok.type = token;
   1a5dc:	7408      	strb	r0, [r1, #16]
	lex->pos--;
   1a5de:	3b01      	subs	r3, #1
	lex->tok.end = lex->pos;
   1a5e0:	e9c1 4305 	strd	r4, r3, [r1, #20]
	lex->pos--;
   1a5e4:	608b      	str	r3, [r1, #8]
	lex->start = lex->pos;
   1a5e6:	604b      	str	r3, [r1, #4]
			next(lex);
   1a5e8:	4608      	mov	r0, r1
   1a5ea:	f00c ffd6 	bl	2759a <next>
	lex->start = lex->pos;
   1a5ee:	688b      	ldr	r3, [r1, #8]
			return lexer_json;
   1a5f0:	4802      	ldr	r0, [pc, #8]	; (1a5fc <lexer_string+0xbc>)
   1a5f2:	e7b4      	b.n	1a55e <lexer_string+0x1e>
   1a5f4:	01440441 	.word	0x01440441
   1a5f8:	0002e947 	.word	0x0002e947
   1a5fc:	0001a685 	.word	0x0001a685

0001a600 <lexer_boolean>:

	return 0;
}

static void *lexer_boolean(struct json_lexer *lex)
{
   1a600:	b538      	push	{r3, r4, r5, lr}
	lex->pos--;
   1a602:	6883      	ldr	r3, [r0, #8]
{
   1a604:	4604      	mov	r4, r0
	lex->pos--;
   1a606:	3b01      	subs	r3, #1
   1a608:	6083      	str	r3, [r0, #8]
	backup(lex);

	switch (next(lex)) {
   1a60a:	f00c ffc6 	bl	2759a <next>
   1a60e:	2866      	cmp	r0, #102	; 0x66
   1a610:	4605      	mov	r5, r0
   1a612:	d00e      	beq.n	1a632 <lexer_boolean+0x32>
   1a614:	2874      	cmp	r0, #116	; 0x74
   1a616:	d10e      	bne.n	1a636 <lexer_boolean+0x36>
	case 't':
		if (!accept_run(lex, "rue")) {
   1a618:	490a      	ldr	r1, [pc, #40]	; (1a644 <lexer_boolean+0x44>)
			emit(lex, JSON_TOK_TRUE);
			return lexer_json;
		}
		break;
	case 'f':
		if (!accept_run(lex, "alse")) {
   1a61a:	4620      	mov	r0, r4
   1a61c:	f00c ffc9 	bl	275b2 <accept_run>
   1a620:	b948      	cbnz	r0, 1a636 <lexer_boolean+0x36>
	lex->tok.start = lex->start;
   1a622:	6863      	ldr	r3, [r4, #4]
			return lexer_json;
   1a624:	4808      	ldr	r0, [pc, #32]	; (1a648 <lexer_boolean+0x48>)
	lex->tok.start = lex->start;
   1a626:	6163      	str	r3, [r4, #20]
	lex->tok.end = lex->pos;
   1a628:	68a3      	ldr	r3, [r4, #8]
	lex->tok.type = token;
   1a62a:	7425      	strb	r5, [r4, #16]
	lex->tok.end = lex->pos;
   1a62c:	61a3      	str	r3, [r4, #24]
	lex->start = lex->pos;
   1a62e:	6063      	str	r3, [r4, #4]
		break;
	}

	emit(lex, JSON_TOK_ERROR);
	return NULL;
}
   1a630:	bd38      	pop	{r3, r4, r5, pc}
		if (!accept_run(lex, "alse")) {
   1a632:	4906      	ldr	r1, [pc, #24]	; (1a64c <lexer_boolean+0x4c>)
   1a634:	e7f1      	b.n	1a61a <lexer_boolean+0x1a>
	lex->tok.type = token;
   1a636:	2321      	movs	r3, #33	; 0x21
   1a638:	7423      	strb	r3, [r4, #16]
	lex->tok.start = lex->start;
   1a63a:	6863      	ldr	r3, [r4, #4]
	return NULL;
   1a63c:	2000      	movs	r0, #0
	lex->tok.start = lex->start;
   1a63e:	6163      	str	r3, [r4, #20]
	lex->tok.end = lex->pos;
   1a640:	68a3      	ldr	r3, [r4, #8]
	return NULL;
   1a642:	e7f3      	b.n	1a62c <lexer_boolean+0x2c>
   1a644:	0002d155 	.word	0x0002d155
   1a648:	0001a685 	.word	0x0001a685
   1a64c:	0002d159 	.word	0x0002d159

0001a650 <lexer_number>:
	emit(lex, JSON_TOK_NULL);
	return lexer_json;
}

static void *lexer_number(struct json_lexer *lex)
{
   1a650:	4601      	mov	r1, r0
   1a652:	b510      	push	{r4, lr}
	while (true) {
		int chr = next(lex);

		if (isdigit(chr) != 0 || chr == '.') {
   1a654:	4c09      	ldr	r4, [pc, #36]	; (1a67c <lexer_number+0x2c>)
		int chr = next(lex);
   1a656:	4608      	mov	r0, r1
   1a658:	f00c ff9f 	bl	2759a <next>
		if (isdigit(chr) != 0 || chr == '.') {
   1a65c:	5c23      	ldrb	r3, [r4, r0]
   1a65e:	075b      	lsls	r3, r3, #29
   1a660:	d4f9      	bmi.n	1a656 <lexer_number+0x6>
   1a662:	282e      	cmp	r0, #46	; 0x2e
   1a664:	d0f7      	beq.n	1a656 <lexer_number+0x6>
	lex->tok.type = token;
   1a666:	2230      	movs	r2, #48	; 0x30
	lex->pos--;
   1a668:	688b      	ldr	r3, [r1, #8]
	lex->tok.type = token;
   1a66a:	740a      	strb	r2, [r1, #16]
	lex->tok.start = lex->start;
   1a66c:	684a      	ldr	r2, [r1, #4]
	lex->pos--;
   1a66e:	3b01      	subs	r3, #1
	lex->tok.end = lex->pos;
   1a670:	e9c1 2305 	strd	r2, r3, [r1, #20]
		backup(lex);
		emit(lex, JSON_TOK_NUMBER);

		return lexer_json;
	}
}
   1a674:	4802      	ldr	r0, [pc, #8]	; (1a680 <lexer_number+0x30>)
	lex->pos--;
   1a676:	608b      	str	r3, [r1, #8]
	lex->start = lex->pos;
   1a678:	604b      	str	r3, [r1, #4]
}
   1a67a:	bd10      	pop	{r4, pc}
   1a67c:	0002e947 	.word	0x0002e947
   1a680:	0001a685 	.word	0x0001a685

0001a684 <lexer_json>:

static void *lexer_json(struct json_lexer *lex)
{
   1a684:	4601      	mov	r1, r0
   1a686:	b510      	push	{r4, lr}
	while (true) {
		int chr = next(lex);
   1a688:	4608      	mov	r0, r1
   1a68a:	f00c ff86 	bl	2759a <next>

		switch (chr) {
   1a68e:	282d      	cmp	r0, #45	; 0x2d
		int chr = next(lex);
   1a690:	4604      	mov	r4, r0
		switch (chr) {
   1a692:	d030      	beq.n	1a6f6 <lexer_json+0x72>
   1a694:	dc0b      	bgt.n	1a6ae <lexer_json+0x2a>
   1a696:	2822      	cmp	r0, #34	; 0x22
   1a698:	d03e      	beq.n	1a718 <lexer_json+0x94>
   1a69a:	282c      	cmp	r0, #44	; 0x2c
   1a69c:	d013      	beq.n	1a6c6 <lexer_json+0x42>
   1a69e:	b310      	cbz	r0, 1a6e6 <lexer_json+0x62>
				return lexer_number;
			}

			__fallthrough;
		default:
			if (isspace(chr) != 0) {
   1a6a0:	4b20      	ldr	r3, [pc, #128]	; (1a724 <lexer_json+0xa0>)
   1a6a2:	5d1b      	ldrb	r3, [r3, r4]
   1a6a4:	071a      	lsls	r2, r3, #28
   1a6a6:	d532      	bpl.n	1a70e <lexer_json+0x8a>
	lex->start = lex->pos;
   1a6a8:	688b      	ldr	r3, [r1, #8]
   1a6aa:	604b      	str	r3, [r1, #4]
	while (true) {
   1a6ac:	e7ec      	b.n	1a688 <lexer_json+0x4>
		switch (chr) {
   1a6ae:	286e      	cmp	r0, #110	; 0x6e
   1a6b0:	d034      	beq.n	1a71c <lexer_json+0x98>
   1a6b2:	dc10      	bgt.n	1a6d6 <lexer_json+0x52>
   1a6b4:	2866      	cmp	r0, #102	; 0x66
   1a6b6:	d033      	beq.n	1a720 <lexer_json+0x9c>
   1a6b8:	dcf2      	bgt.n	1a6a0 <lexer_json+0x1c>
   1a6ba:	285b      	cmp	r0, #91	; 0x5b
   1a6bc:	d003      	beq.n	1a6c6 <lexer_json+0x42>
   1a6be:	285d      	cmp	r0, #93	; 0x5d
   1a6c0:	d001      	beq.n	1a6c6 <lexer_json+0x42>
   1a6c2:	283a      	cmp	r0, #58	; 0x3a
   1a6c4:	d1ec      	bne.n	1a6a0 <lexer_json+0x1c>
	lex->tok.start = lex->start;
   1a6c6:	684b      	ldr	r3, [r1, #4]
			return lexer_json;
   1a6c8:	4817      	ldr	r0, [pc, #92]	; (1a728 <lexer_json+0xa4>)
	lex->tok.start = lex->start;
   1a6ca:	614b      	str	r3, [r1, #20]
	lex->tok.end = lex->pos;
   1a6cc:	688b      	ldr	r3, [r1, #8]
			emit(lex, (enum json_tokens)chr);
   1a6ce:	740c      	strb	r4, [r1, #16]
	lex->tok.end = lex->pos;
   1a6d0:	618b      	str	r3, [r1, #24]
	lex->start = lex->pos;
   1a6d2:	604b      	str	r3, [r1, #4]

			emit(lex, JSON_TOK_ERROR);
			return NULL;
		}
	}
}
   1a6d4:	bd10      	pop	{r4, pc}
		switch (chr) {
   1a6d6:	2874      	cmp	r0, #116	; 0x74
   1a6d8:	d022      	beq.n	1a720 <lexer_json+0x9c>
   1a6da:	2873      	cmp	r0, #115	; 0x73
   1a6dc:	dde0      	ble.n	1a6a0 <lexer_json+0x1c>
   1a6de:	287b      	cmp	r0, #123	; 0x7b
   1a6e0:	d0f1      	beq.n	1a6c6 <lexer_json+0x42>
   1a6e2:	287d      	cmp	r0, #125	; 0x7d
   1a6e4:	e7ee      	b.n	1a6c4 <lexer_json+0x40>
	lex->tok.type = token;
   1a6e6:	7408      	strb	r0, [r1, #16]
	lex->tok.start = lex->start;
   1a6e8:	684b      	ldr	r3, [r1, #4]
			return NULL;
   1a6ea:	2000      	movs	r0, #0
	lex->tok.start = lex->start;
   1a6ec:	614b      	str	r3, [r1, #20]
	lex->tok.end = lex->pos;
   1a6ee:	688b      	ldr	r3, [r1, #8]
   1a6f0:	618b      	str	r3, [r1, #24]
	lex->start = lex->pos;
   1a6f2:	604b      	str	r3, [r1, #4]
   1a6f4:	e7ee      	b.n	1a6d4 <lexer_json+0x50>
	int chr = next(lex);
   1a6f6:	4608      	mov	r0, r1
   1a6f8:	f00c ff4f 	bl	2759a <next>
	lex->pos--;
   1a6fc:	688b      	ldr	r3, [r1, #8]
   1a6fe:	3b01      	subs	r3, #1
   1a700:	608b      	str	r3, [r1, #8]
			if (isdigit(peek(lex)) != 0) {
   1a702:	4b08      	ldr	r3, [pc, #32]	; (1a724 <lexer_json+0xa0>)
   1a704:	5c1b      	ldrb	r3, [r3, r0]
   1a706:	0758      	lsls	r0, r3, #29
   1a708:	d5ca      	bpl.n	1a6a0 <lexer_json+0x1c>
				return lexer_number;
   1a70a:	4808      	ldr	r0, [pc, #32]	; (1a72c <lexer_json+0xa8>)
   1a70c:	e7e2      	b.n	1a6d4 <lexer_json+0x50>
			if (isdigit(chr) != 0) {
   1a70e:	075b      	lsls	r3, r3, #29
   1a710:	d4fb      	bmi.n	1a70a <lexer_json+0x86>
	lex->tok.type = token;
   1a712:	2321      	movs	r3, #33	; 0x21
   1a714:	740b      	strb	r3, [r1, #16]
   1a716:	e7e7      	b.n	1a6e8 <lexer_json+0x64>
			return lexer_string;
   1a718:	4805      	ldr	r0, [pc, #20]	; (1a730 <lexer_json+0xac>)
   1a71a:	e7db      	b.n	1a6d4 <lexer_json+0x50>
		switch (chr) {
   1a71c:	4805      	ldr	r0, [pc, #20]	; (1a734 <lexer_json+0xb0>)
   1a71e:	e7d9      	b.n	1a6d4 <lexer_json+0x50>
			return lexer_boolean;
   1a720:	4805      	ldr	r0, [pc, #20]	; (1a738 <lexer_json+0xb4>)
   1a722:	e7d7      	b.n	1a6d4 <lexer_json+0x50>
   1a724:	0002e947 	.word	0x0002e947
   1a728:	0001a685 	.word	0x0001a685
   1a72c:	0001a651 	.word	0x0001a651
   1a730:	0001a541 	.word	0x0001a541
   1a734:	0001a781 	.word	0x0001a781
   1a738:	0001a601 	.word	0x0001a601

0001a73c <element_token>:
	return 0;
}

static int element_token(enum json_tokens token)
{
	switch (token) {
   1a73c:	287b      	cmp	r0, #123	; 0x7b
   1a73e:	d818      	bhi.n	1a772 <element_token+0x36>
   1a740:	2865      	cmp	r0, #101	; 0x65
   1a742:	d809      	bhi.n	1a758 <element_token+0x1c>
   1a744:	2833      	cmp	r0, #51	; 0x33
   1a746:	d812      	bhi.n	1a76e <element_token+0x32>
   1a748:	282f      	cmp	r0, #47	; 0x2f
   1a74a:	d815      	bhi.n	1a778 <element_token+0x3c>
   1a74c:	2822      	cmp	r0, #34	; 0x22
   1a74e:	bf0c      	ite	eq
   1a750:	2000      	moveq	r0, #0
   1a752:	f06f 0015 	mvnne.w	r0, #21
   1a756:	4770      	bx	lr
   1a758:	4b08      	ldr	r3, [pc, #32]	; (1a77c <element_token+0x40>)
   1a75a:	3866      	subs	r0, #102	; 0x66
   1a75c:	b2c0      	uxtb	r0, r0
   1a75e:	40c3      	lsrs	r3, r0
   1a760:	f013 0f01 	tst.w	r3, #1
   1a764:	bf14      	ite	ne
   1a766:	2000      	movne	r0, #0
   1a768:	f06f 0015 	mvneq.w	r0, #21
   1a76c:	4770      	bx	lr
   1a76e:	285b      	cmp	r0, #91	; 0x5b
   1a770:	e7ed      	b.n	1a74e <element_token+0x12>
   1a772:	f06f 0015 	mvn.w	r0, #21
   1a776:	4770      	bx	lr
	case JSON_TOK_FLOAT:
	case JSON_TOK_OPAQUE:
	case JSON_TOK_OBJ_ARRAY:
	case JSON_TOK_TRUE:
	case JSON_TOK_FALSE:
		return 0;
   1a778:	2000      	movs	r0, #0
	default:
		return -EINVAL;
	}
}
   1a77a:	4770      	bx	lr
   1a77c:	00204001 	.word	0x00204001

0001a780 <lexer_null>:
	if (accept_run(lex, "ull") < 0) {
   1a780:	490a      	ldr	r1, [pc, #40]	; (1a7ac <lexer_null+0x2c>)
{
   1a782:	b510      	push	{r4, lr}
   1a784:	4604      	mov	r4, r0
	if (accept_run(lex, "ull") < 0) {
   1a786:	f00c ff14 	bl	275b2 <accept_run>
   1a78a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a78e:	2800      	cmp	r0, #0
	lex->tok.type = token;
   1a790:	bfb7      	itett	lt
   1a792:	2121      	movlt	r1, #33	; 0x21
   1a794:	216e      	movge	r1, #110	; 0x6e
   1a796:	7421      	strblt	r1, [r4, #16]
	lex->tok.start = lex->start;
   1a798:	6162      	strlt	r2, [r4, #20]
	lex->tok.type = token;
   1a79a:	bfa4      	itt	ge
   1a79c:	7421      	strbge	r1, [r4, #16]
	lex->tok.start = lex->start;
   1a79e:	6162      	strge	r2, [r4, #20]
	lex->tok.end = lex->pos;
   1a7a0:	61a3      	str	r3, [r4, #24]
	lex->start = lex->pos;
   1a7a2:	6063      	str	r3, [r4, #4]
	lex->tok.end = lex->pos;
   1a7a4:	bfb4      	ite	lt
   1a7a6:	2000      	movlt	r0, #0
	return lexer_json;
   1a7a8:	4801      	ldrge	r0, [pc, #4]	; (1a7b0 <lexer_null+0x30>)
}
   1a7aa:	bd10      	pop	{r4, pc}
   1a7ac:	0002d15e 	.word	0x0002d15e
   1a7b0:	0001a685 	.word	0x0001a685

0001a7b4 <decode_value>:
static int arr_data_parse(struct json_obj *obj, struct json_obj_token *val);

static int64_t decode_value(struct json_obj *obj,
			    const struct json_obj_descr *descr,
			    struct json_token *value, void *field, void *val)
{
   1a7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a7b6:	4616      	mov	r6, r2

	if (!equivalent_types(value->type, descr->type)) {
   1a7b8:	7835      	ldrb	r5, [r6, #0]
{
   1a7ba:	461c      	mov	r4, r3
	if (!equivalent_types(value->type, descr->type)) {
   1a7bc:	794b      	ldrb	r3, [r1, #5]
{
   1a7be:	b085      	sub	sp, #20
	if (type1 == JSON_TOK_TRUE || type1 == JSON_TOK_FALSE) {
   1a7c0:	2d74      	cmp	r5, #116	; 0x74
{
   1a7c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	if (!equivalent_types(value->type, descr->type)) {
   1a7c4:	ea4f 0353 	mov.w	r3, r3, lsr #1
	if (type1 == JSON_TOK_TRUE || type1 == JSON_TOK_FALSE) {
   1a7c8:	d001      	beq.n	1a7ce <decode_value+0x1a>
   1a7ca:	2d66      	cmp	r5, #102	; 0x66
   1a7cc:	d10b      	bne.n	1a7e6 <decode_value+0x32>
		return type2 == JSON_TOK_TRUE || type2 == JSON_TOK_FALSE;
   1a7ce:	2b74      	cmp	r3, #116	; 0x74
   1a7d0:	d001      	beq.n	1a7d6 <decode_value+0x22>
		return -EINVAL;
	}

	switch (descr->type) {
   1a7d2:	2b66      	cmp	r3, #102	; 0x66
   1a7d4:	d123      	bne.n	1a81e <decode_value+0x6a>

	case JSON_TOK_FALSE:
	case JSON_TOK_TRUE: {
		bool *v = field;

		*v = value->type == JSON_TOK_TRUE;
   1a7d6:	f1a5 0374 	sub.w	r3, r5, #116	; 0x74
   1a7da:	425d      	negs	r5, r3
   1a7dc:	415d      	adcs	r5, r3
   1a7de:	7025      	strb	r5, [r4, #0]

		return 0;
   1a7e0:	2000      	movs	r0, #0
   1a7e2:	4601      	mov	r1, r0
   1a7e4:	e031      	b.n	1a84a <decode_value+0x96>
	if (type1 == JSON_TOK_NUMBER && type2 == JSON_TOK_FLOAT) {
   1a7e6:	2d30      	cmp	r5, #48	; 0x30
   1a7e8:	d107      	bne.n	1a7fa <decode_value+0x46>
   1a7ea:	2b31      	cmp	r3, #49	; 0x31
   1a7ec:	d12f      	bne.n	1a84e <decode_value+0x9a>
	}
	case JSON_TOK_OPAQUE:
	case JSON_TOK_FLOAT: {
		struct json_obj_token *obj_token = field;

		obj_token->start = value->start;
   1a7ee:	6872      	ldr	r2, [r6, #4]
   1a7f0:	6022      	str	r2, [r4, #0]
		obj_token->length = value->end - value->start;
   1a7f2:	68b3      	ldr	r3, [r6, #8]
   1a7f4:	1a9b      	subs	r3, r3, r2
   1a7f6:	6063      	str	r3, [r4, #4]
		return 0;
   1a7f8:	e7f2      	b.n	1a7e0 <decode_value+0x2c>
	if (type1 == JSON_TOK_STRING && type2 == JSON_TOK_OPAQUE) {
   1a7fa:	2d22      	cmp	r5, #34	; 0x22
   1a7fc:	d109      	bne.n	1a812 <decode_value+0x5e>
   1a7fe:	2b32      	cmp	r3, #50	; 0x32
   1a800:	d0f5      	beq.n	1a7ee <decode_value+0x3a>
	if (!equivalent_types(value->type, descr->type)) {
   1a802:	2b22      	cmp	r3, #34	; 0x22
	switch (descr->type) {
   1a804:	d10b      	bne.n	1a81e <decode_value+0x6a>
	}
	case JSON_TOK_STRING: {
		char **str = field;

		*value->end = '\0';
   1a806:	2200      	movs	r2, #0
   1a808:	68b3      	ldr	r3, [r6, #8]
   1a80a:	701a      	strb	r2, [r3, #0]
		*str = value->start;
   1a80c:	6873      	ldr	r3, [r6, #4]
   1a80e:	6023      	str	r3, [r4, #0]

		return 0;
   1a810:	e7e6      	b.n	1a7e0 <decode_value+0x2c>
	if (type1 == JSON_TOK_ARRAY_START && type2 == JSON_TOK_OBJ_ARRAY) {
   1a812:	2d5b      	cmp	r5, #91	; 0x5b
   1a814:	d108      	bne.n	1a828 <decode_value+0x74>
   1a816:	2b33      	cmp	r3, #51	; 0x33
   1a818:	d042      	beq.n	1a8a0 <decode_value+0xec>
	if (!equivalent_types(value->type, descr->type)) {
   1a81a:	2b5b      	cmp	r3, #91	; 0x5b
   1a81c:	d00e      	beq.n	1a83c <decode_value+0x88>
		return -EINVAL;
   1a81e:	f06f 0015 	mvn.w	r0, #21
   1a822:	f04f 31ff 	mov.w	r1, #4294967295
   1a826:	e010      	b.n	1a84a <decode_value+0x96>
	if (!equivalent_types(value->type, descr->type)) {
   1a828:	429d      	cmp	r5, r3
   1a82a:	d1f8      	bne.n	1a81e <decode_value+0x6a>
	switch (descr->type) {
   1a82c:	2d33      	cmp	r5, #51	; 0x33
   1a82e:	d037      	beq.n	1a8a0 <decode_value+0xec>
   1a830:	d928      	bls.n	1a884 <decode_value+0xd0>
   1a832:	2d74      	cmp	r5, #116	; 0x74
   1a834:	d0cf      	beq.n	1a7d6 <decode_value+0x22>
   1a836:	d829      	bhi.n	1a88c <decode_value+0xd8>
   1a838:	2b5b      	cmp	r3, #91	; 0x5b
   1a83a:	d1ca      	bne.n	1a7d2 <decode_value+0x1e>
		return arr_parse(obj, descr->array.element_descr,
   1a83c:	9200      	str	r2, [sp, #0]
   1a83e:	4623      	mov	r3, r4
   1a840:	e9d1 1202 	ldrd	r1, r2, [r1, #8]
   1a844:	f00c ff24 	bl	27690 <arr_parse>
		return decode_num(value, num);
   1a848:	17c1      	asrs	r1, r0, #31
	}
	default:
		return -EINVAL;
	}
}
   1a84a:	b005      	add	sp, #20
   1a84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!equivalent_types(value->type, descr->type)) {
   1a84e:	2b30      	cmp	r3, #48	; 0x30
   1a850:	d1e5      	bne.n	1a81e <decode_value+0x6a>
	*token->end = '\0';
   1a852:	2500      	movs	r5, #0
	prev_end = *token->end;
   1a854:	68b3      	ldr	r3, [r6, #8]
   1a856:	781f      	ldrb	r7, [r3, #0]
	*token->end = '\0';
   1a858:	701d      	strb	r5, [r3, #0]
	errno = 0;
   1a85a:	f00d f9f1 	bl	27c40 <__errno>
   1a85e:	6005      	str	r5, [r0, #0]
	*num = strtol(token->start, &endptr, 10);
   1a860:	220a      	movs	r2, #10
   1a862:	a903      	add	r1, sp, #12
   1a864:	6870      	ldr	r0, [r6, #4]
   1a866:	f00b f973 	bl	25b50 <strtol>
   1a86a:	6020      	str	r0, [r4, #0]
	*token->end = prev_end;
   1a86c:	68b3      	ldr	r3, [r6, #8]
   1a86e:	701f      	strb	r7, [r3, #0]
	if (errno != 0) {
   1a870:	f00d f9e6 	bl	27c40 <__errno>
   1a874:	6800      	ldr	r0, [r0, #0]
   1a876:	2800      	cmp	r0, #0
   1a878:	d043      	beq.n	1a902 <decode_value+0x14e>
		return -errno;
   1a87a:	f00d f9e1 	bl	27c40 <__errno>
   1a87e:	6800      	ldr	r0, [r0, #0]
   1a880:	4240      	negs	r0, r0
   1a882:	e7e1      	b.n	1a848 <decode_value+0x94>
	switch (descr->type) {
   1a884:	2d30      	cmp	r5, #48	; 0x30
   1a886:	d8b2      	bhi.n	1a7ee <decode_value+0x3a>
   1a888:	2d22      	cmp	r5, #34	; 0x22
   1a88a:	e7bb      	b.n	1a804 <decode_value+0x50>
   1a88c:	2b7b      	cmp	r3, #123	; 0x7b
   1a88e:	d1c6      	bne.n	1a81e <decode_value+0x6a>
		return obj_parse(obj, descr->object.sub_descr,
   1a890:	e9d1 1202 	ldrd	r1, r2, [r1, #8]
   1a894:	4623      	mov	r3, r4
}
   1a896:	b005      	add	sp, #20
   1a898:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return obj_parse(obj, descr->object.sub_descr,
   1a89c:	f00c bf40 	b.w	27720 <obj_parse>
{
	bool string_state = false;
	int array_in_array = 1;

	/* Init length to zero */
	val->length = 0;
   1a8a0:	2100      	movs	r1, #0
	int array_in_array = 1;
   1a8a2:	2201      	movs	r2, #1
		obj_token->start = value->start;
   1a8a4:	6873      	ldr	r3, [r6, #4]
	val->length = 0;
   1a8a6:	6061      	str	r1, [r4, #4]
		obj_token->start = value->start;
   1a8a8:	6023      	str	r3, [r4, #0]

	while (obj->lex.pos != obj->lex.end) {
   1a8aa:	68c6      	ldr	r6, [r0, #12]
   1a8ac:	6883      	ldr	r3, [r0, #8]
   1a8ae:	42b3      	cmp	r3, r6
   1a8b0:	d102      	bne.n	1a8b8 <decode_value+0x104>
			}
		}
		obj->lex.pos++;
	}

	return -EINVAL;
   1a8b2:	f06f 0215 	mvn.w	r2, #21
   1a8b6:	e01a      	b.n	1a8ee <decode_value+0x13a>
			if (*obj->lex.pos == JSON_TOK_STRING) {
   1a8b8:	781d      	ldrb	r5, [r3, #0]
		if (string_state) {
   1a8ba:	b131      	cbz	r1, 1a8ca <decode_value+0x116>
			if (*obj->lex.pos == JSON_TOK_STRING) {
   1a8bc:	f1b5 0122 	subs.w	r1, r5, #34	; 0x22
   1a8c0:	bf18      	it	ne
   1a8c2:	2101      	movne	r1, #1
		obj->lex.pos++;
   1a8c4:	3301      	adds	r3, #1
   1a8c6:	6083      	str	r3, [r0, #8]
   1a8c8:	e7f0      	b.n	1a8ac <decode_value+0xf8>
			if (*obj->lex.pos == JSON_TOK_ARRAY_END) {
   1a8ca:	2d5d      	cmp	r5, #93	; 0x5d
   1a8cc:	d111      	bne.n	1a8f2 <decode_value+0x13e>
				if (array_in_array == 0) {
   1a8ce:	3a01      	subs	r2, #1
   1a8d0:	d1f8      	bne.n	1a8c4 <decode_value+0x110>
					val->length = obj->lex.pos - val->start + 1;
   1a8d2:	6821      	ldr	r1, [r4, #0]
   1a8d4:	1a5b      	subs	r3, r3, r1
   1a8d6:	3301      	adds	r3, #1
   1a8d8:	6063      	str	r3, [r4, #4]
					obj->lex.state = lexer_json;
   1a8da:	4b0d      	ldr	r3, [pc, #52]	; (1a910 <decode_value+0x15c>)
   1a8dc:	6003      	str	r3, [r0, #0]
					obj->lex.pos--;
   1a8de:	6883      	ldr	r3, [r0, #8]
   1a8e0:	3b01      	subs	r3, #1
   1a8e2:	6083      	str	r3, [r0, #8]
					obj->lex.tok.end = obj->lex.pos;
   1a8e4:	6183      	str	r3, [r0, #24]
					obj->lex.tok.start = val->start;
   1a8e6:	6823      	ldr	r3, [r4, #0]
   1a8e8:	6143      	str	r3, [r0, #20]
					obj->lex.tok.type = JSON_TOK_NONE;
   1a8ea:	235f      	movs	r3, #95	; 0x5f
   1a8ec:	7403      	strb	r3, [r0, #16]
		return arr_data_parse(obj, obj_token);
   1a8ee:	4610      	mov	r0, r2
   1a8f0:	e7aa      	b.n	1a848 <decode_value+0x94>
			} else if (*obj->lex.pos == JSON_TOK_STRING) {
   1a8f2:	2d22      	cmp	r5, #34	; 0x22
   1a8f4:	d003      	beq.n	1a8fe <decode_value+0x14a>
			} else if (*obj->lex.pos == JSON_TOK_ARRAY_START) {
   1a8f6:	2d5b      	cmp	r5, #91	; 0x5b
   1a8f8:	d1e4      	bne.n	1a8c4 <decode_value+0x110>
				array_in_array++;
   1a8fa:	3201      	adds	r2, #1
   1a8fc:	e7e2      	b.n	1a8c4 <decode_value+0x110>
				string_state = true;
   1a8fe:	2101      	movs	r1, #1
   1a900:	e7e0      	b.n	1a8c4 <decode_value+0x110>
	if (endptr != token->end) {
   1a902:	68b2      	ldr	r2, [r6, #8]
   1a904:	9b03      	ldr	r3, [sp, #12]
		return -EINVAL;
   1a906:	429a      	cmp	r2, r3
   1a908:	bf18      	it	ne
   1a90a:	f06f 0015 	mvnne.w	r0, #21
   1a90e:	e79b      	b.n	1a848 <decode_value+0x94>
   1a910:	0001a685 	.word	0x0001a685

0001a914 <json_obj_parse>:
}

int64_t json_obj_parse(char *payload, size_t len,
		       const struct json_obj_descr *descr, size_t descr_len,
		       void *val)
{
   1a914:	b530      	push	{r4, r5, lr}
   1a916:	461d      	mov	r5, r3
	lex->state = lexer_json;
   1a918:	4b10      	ldr	r3, [pc, #64]	; (1a95c <json_obj_parse+0x48>)
{
   1a91a:	b08b      	sub	sp, #44	; 0x2c
	lex->start = data;
   1a91c:	e9cd 3003 	strd	r3, r0, [sp, #12]
	lex->tok.type = JSON_TOK_NONE;
   1a920:	235f      	movs	r3, #95	; 0x5f
	lex->pos = data;
   1a922:	9005      	str	r0, [sp, #20]
	lex->end = data + len;
   1a924:	4408      	add	r0, r1
   1a926:	9006      	str	r0, [sp, #24]
	if (!lexer_next(&json->lex, &tok)) {
   1a928:	4669      	mov	r1, sp
   1a92a:	a803      	add	r0, sp, #12
{
   1a92c:	4614      	mov	r4, r2
	lex->tok.type = JSON_TOK_NONE;
   1a92e:	f88d 301c 	strb.w	r3, [sp, #28]
	if (!lexer_next(&json->lex, &tok)) {
   1a932:	f00c fe96 	bl	27662 <lexer_next>
   1a936:	b928      	cbnz	r0, 1a944 <json_obj_parse+0x30>
	struct json_obj obj;
	int64_t ret;

	__ASSERT_NO_MSG(descr_len < (sizeof(ret) * CHAR_BIT - 1));

	ret = obj_init(&obj, payload, len);
   1a938:	f06f 0015 	mvn.w	r0, #21
   1a93c:	f04f 31ff 	mov.w	r1, #4294967295
	if (ret < 0) {
		return ret;
	}

	return obj_parse(&obj, descr, descr_len, val);
}
   1a940:	b00b      	add	sp, #44	; 0x2c
   1a942:	bd30      	pop	{r4, r5, pc}
	if (tok.type != JSON_TOK_OBJECT_START) {
   1a944:	f89d 3000 	ldrb.w	r3, [sp]
   1a948:	2b7b      	cmp	r3, #123	; 0x7b
   1a94a:	d1f5      	bne.n	1a938 <json_obj_parse+0x24>
	return obj_parse(&obj, descr, descr_len, val);
   1a94c:	462a      	mov	r2, r5
   1a94e:	4621      	mov	r1, r4
   1a950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a952:	a803      	add	r0, sp, #12
   1a954:	f00c fee4 	bl	27720 <obj_parse>
   1a958:	e7f2      	b.n	1a940 <json_obj_parse+0x2c>
   1a95a:	bf00      	nop
   1a95c:	0001a685 	.word	0x0001a685

0001a960 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   1a960:	f04f 0220 	mov.w	r2, #32
   1a964:	f3ef 8311 	mrs	r3, BASEPRI
   1a968:	f382 8812 	msr	BASEPRI_MAX, r2
   1a96c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1a970:	2101      	movs	r1, #1
   1a972:	4a04      	ldr	r2, [pc, #16]	; (1a984 <nordicsemi_nrf91_init+0x24>)
   1a974:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   1a978:	f383 8811 	msr	BASEPRI, r3
   1a97c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1a980:	2000      	movs	r0, #0
   1a982:	4770      	bx	lr
   1a984:	40039000 	.word	0x40039000

0001a988 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1a988:	b120      	cbz	r0, 1a994 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1a98a:	4b03      	ldr	r3, [pc, #12]	; (1a998 <arch_busy_wait+0x10>)
   1a98c:	0180      	lsls	r0, r0, #6
   1a98e:	f043 0301 	orr.w	r3, r3, #1
   1a992:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   1a994:	4770      	bx	lr
   1a996:	bf00      	nop
   1a998:	0002bf50 	.word	0x0002bf50

0001a99c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1a99c:	f00f b8c2 	b.w	29b24 <SystemInit>

0001a9a0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   1a9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a9a4:	4605      	mov	r5, r0
	__asm__ volatile(
   1a9a6:	f04f 0320 	mov.w	r3, #32
   1a9aa:	f3ef 8611 	mrs	r6, BASEPRI
   1a9ae:	f383 8812 	msr	BASEPRI_MAX, r3
   1a9b2:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1a9b6:	f04f 090c 	mov.w	r9, #12
	return list->head;
   1a9ba:	4b0d      	ldr	r3, [pc, #52]	; (1a9f0 <pm_state_notify+0x50>)
   1a9bc:	4f0d      	ldr	r7, [pc, #52]	; (1a9f4 <pm_state_notify+0x54>)
   1a9be:	681c      	ldr	r4, [r3, #0]
   1a9c0:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1a9f8 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1a9c4:	b92c      	cbnz	r4, 1a9d2 <pm_state_notify+0x32>
	__asm__ volatile(
   1a9c6:	f386 8811 	msr	BASEPRI, r6
   1a9ca:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1a9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   1a9d2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   1a9d6:	2d00      	cmp	r5, #0
   1a9d8:	bf18      	it	ne
   1a9da:	4613      	movne	r3, r2
		if (callback) {
   1a9dc:	b12b      	cbz	r3, 1a9ea <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1a9de:	f898 2010 	ldrb.w	r2, [r8, #16]
   1a9e2:	fb09 f202 	mul.w	r2, r9, r2
   1a9e6:	5cb8      	ldrb	r0, [r7, r2]
   1a9e8:	4798      	blx	r3
	return node->next;
   1a9ea:	6824      	ldr	r4, [r4, #0]
   1a9ec:	e7ea      	b.n	1a9c4 <pm_state_notify+0x24>
   1a9ee:	bf00      	nop
   1a9f0:	2000d5ec 	.word	0x2000d5ec
   1a9f4:	2000d5e0 	.word	0x2000d5e0
   1a9f8:	2000dd44 	.word	0x2000dd44

0001a9fc <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1a9fc:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   1a9fe:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   1aa00:	4b16      	ldr	r3, [pc, #88]	; (1aa5c <pm_system_resume+0x60>)
   1aa02:	7c1c      	ldrb	r4, [r3, #16]
   1aa04:	f004 031f 	and.w	r3, r4, #31
   1aa08:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1aa0a:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1aa0c:	4b14      	ldr	r3, [pc, #80]	; (1aa60 <pm_system_resume+0x64>)
   1aa0e:	0961      	lsrs	r1, r4, #5
   1aa10:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1aa14:	e8d3 1fef 	ldaex	r1, [r3]
   1aa18:	ea01 0500 	and.w	r5, r1, r0
   1aa1c:	e8c3 5fe6 	stlex	r6, r5, [r3]
   1aa20:	2e00      	cmp	r6, #0
   1aa22:	d1f7      	bne.n	1aa14 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   1aa24:	420a      	tst	r2, r1
   1aa26:	d013      	beq.n	1aa50 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
   1aa28:	4b0e      	ldr	r3, [pc, #56]	; (1aa64 <pm_system_resume+0x68>)
   1aa2a:	4d0f      	ldr	r5, [pc, #60]	; (1aa68 <pm_system_resume+0x6c>)
   1aa2c:	b18b      	cbz	r3, 1aa52 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
   1aa2e:	230c      	movs	r3, #12
   1aa30:	4363      	muls	r3, r4
   1aa32:	18ea      	adds	r2, r5, r3
   1aa34:	7851      	ldrb	r1, [r2, #1]
   1aa36:	5ce8      	ldrb	r0, [r5, r3]
   1aa38:	f00c ff1b 	bl	27872 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   1aa3c:	2000      	movs	r0, #0
   1aa3e:	f7ff ffaf 	bl	1a9a0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1aa42:	230c      	movs	r3, #12
   1aa44:	435c      	muls	r4, r3
   1aa46:	2300      	movs	r3, #0
   1aa48:	192a      	adds	r2, r5, r4
   1aa4a:	512b      	str	r3, [r5, r4]
   1aa4c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   1aa50:	bd70      	pop	{r4, r5, r6, pc}
   1aa52:	f383 8811 	msr	BASEPRI, r3
   1aa56:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1aa5a:	e7ef      	b.n	1aa3c <pm_system_resume+0x40>
   1aa5c:	2000dd44 	.word	0x2000dd44
   1aa60:	2000d5f4 	.word	0x2000d5f4
   1aa64:	00027873 	.word	0x00027873
   1aa68:	2000d5e0 	.word	0x2000d5e0

0001aa6c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   1aa6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   1aa70:	4b32      	ldr	r3, [pc, #200]	; (1ab3c <pm_system_suspend+0xd0>)
{
   1aa72:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   1aa74:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
   1aa76:	f04f 0320 	mov.w	r3, #32
   1aa7a:	f3ef 8811 	mrs	r8, BASEPRI
   1aa7e:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa82:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   1aa86:	240c      	movs	r4, #12
   1aa88:	436c      	muls	r4, r5
   1aa8a:	4b2d      	ldr	r3, [pc, #180]	; (1ab40 <pm_system_suspend+0xd4>)
   1aa8c:	4e2d      	ldr	r6, [pc, #180]	; (1ab44 <pm_system_suspend+0xd8>)
   1aa8e:	5d19      	ldrb	r1, [r3, r4]
   1aa90:	191a      	adds	r2, r3, r4
   1aa92:	2900      	cmp	r1, #0
   1aa94:	d047      	beq.n	1ab26 <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   1aa96:	ca07      	ldmia	r2, {r0, r1, r2}
   1aa98:	eb06 0c04 	add.w	ip, r6, r4
   1aa9c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   1aaa0:	2200      	movs	r2, #0
   1aaa2:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   1aaa4:	f388 8811 	msr	BASEPRI, r8
   1aaa8:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   1aaac:	230c      	movs	r3, #12
   1aaae:	436b      	muls	r3, r5
   1aab0:	5cf0      	ldrb	r0, [r6, r3]
   1aab2:	18f2      	adds	r2, r6, r3
   1aab4:	b3a8      	cbz	r0, 1ab22 <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   1aab6:	1c7b      	adds	r3, r7, #1
   1aab8:	d010      	beq.n	1aadc <pm_system_suspend+0x70>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   1aaba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1aabe:	2100      	movs	r1, #0
   1aac0:	f8d2 c008 	ldr.w	ip, [r2, #8]
   1aac4:	4c20      	ldr	r4, [pc, #128]	; (1ab48 <pm_system_suspend+0xdc>)
   1aac6:	2300      	movs	r3, #0
   1aac8:	fbec 4100 	umlal	r4, r1, ip, r0
   1aacc:	4a1f      	ldr	r2, [pc, #124]	; (1ab4c <pm_system_suspend+0xe0>)
   1aace:	4620      	mov	r0, r4
   1aad0:	f7fe f96a 	bl	18da8 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
   1aad4:	2101      	movs	r1, #1
   1aad6:	1a38      	subs	r0, r7, r0
   1aad8:	f004 f84a 	bl	1eb70 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1aadc:	f00a faf6 	bl	250cc <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   1aae0:	2001      	movs	r0, #1
   1aae2:	f7ff ff5d 	bl	1a9a0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1aae6:	4b1a      	ldr	r3, [pc, #104]	; (1ab50 <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1aae8:	096a      	lsrs	r2, r5, #5
   1aaea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   1aaee:	2201      	movs	r2, #1
   1aaf0:	f005 011f 	and.w	r1, r5, #31
   1aaf4:	408a      	lsls	r2, r1
   1aaf6:	e8d3 0fef 	ldaex	r0, [r3]
   1aafa:	4310      	orrs	r0, r2
   1aafc:	e8c3 0fe1 	stlex	r1, r0, [r3]
   1ab00:	2900      	cmp	r1, #0
   1ab02:	d1f8      	bne.n	1aaf6 <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
   1ab04:	4b13      	ldr	r3, [pc, #76]	; (1ab54 <pm_system_suspend+0xe8>)
   1ab06:	b13b      	cbz	r3, 1ab18 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
   1ab08:	230c      	movs	r3, #12
   1ab0a:	fb03 f005 	mul.w	r0, r3, r5
   1ab0e:	1833      	adds	r3, r6, r0
   1ab10:	7859      	ldrb	r1, [r3, #1]
   1ab12:	5c30      	ldrb	r0, [r6, r0]
   1ab14:	f00c fea1 	bl	2785a <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   1ab18:	f7ff ff70 	bl	1a9fc <pm_system_resume>
	k_sched_unlock();
   1ab1c:	f00a faea 	bl	250f4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   1ab20:	2001      	movs	r0, #1
}
   1ab22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   1ab26:	4601      	mov	r1, r0
   1ab28:	4628      	mov	r0, r5
   1ab2a:	f000 f815 	bl	1ab58 <pm_policy_next_state>
		if (info != NULL) {
   1ab2e:	2800      	cmp	r0, #0
   1ab30:	d0b8      	beq.n	1aaa4 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   1ab32:	c807      	ldmia	r0, {r0, r1, r2}
   1ab34:	4434      	add	r4, r6
   1ab36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   1ab3a:	e7b3      	b.n	1aaa4 <pm_system_suspend+0x38>
   1ab3c:	2000dd44 	.word	0x2000dd44
   1ab40:	2000d5d4 	.word	0x2000d5d4
   1ab44:	2000d5e0 	.word	0x2000d5e0
   1ab48:	000f423f 	.word	0x000f423f
   1ab4c:	000f4240 	.word	0x000f4240
   1ab50:	2000d5f4 	.word	0x2000d5f4
   1ab54:	0002785b 	.word	0x0002785b

0001ab58 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   1ab58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab5c:	b085      	sub	sp, #20
   1ab5e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   1ab60:	a903      	add	r1, sp, #12
   1ab62:	f000 f843 	bl	1abec <pm_state_cpu_get_all>
   1ab66:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1ab6a:	4604      	mov	r4, r0
   1ab6c:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1ab70:	4b1b      	ldr	r3, [pc, #108]	; (1abe0 <pm_policy_next_state+0x88>)
   1ab72:	9d03      	ldr	r5, [sp, #12]
   1ab74:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1ab78:	1e43      	subs	r3, r0, #1
   1ab7a:	b21b      	sxth	r3, r3
   1ab7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1ab80:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1abe4 <pm_policy_next_state+0x8c>
   1ab84:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1ab88:	b924      	cbnz	r4, 1ab94 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   1ab8a:	46a1      	mov	r9, r4
}
   1ab8c:	4648      	mov	r0, r9
   1ab8e:	b005      	add	sp, #20
   1ab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab94:	46c4      	mov	ip, r8
   1ab96:	4659      	mov	r1, fp
   1ab98:	6868      	ldr	r0, [r5, #4]
   1ab9a:	2300      	movs	r3, #0
   1ab9c:	fbe0 c107 	umlal	ip, r1, r0, r7
   1aba0:	4a11      	ldr	r2, [pc, #68]	; (1abe8 <pm_policy_next_state+0x90>)
   1aba2:	4660      	mov	r0, ip
   1aba4:	f7fe f900 	bl	18da8 <__aeabi_uldivmod>
   1aba8:	46c4      	mov	ip, r8
   1abaa:	4659      	mov	r1, fp
   1abac:	9001      	str	r0, [sp, #4]
   1abae:	68a8      	ldr	r0, [r5, #8]
   1abb0:	2300      	movs	r3, #0
   1abb2:	fbe0 c107 	umlal	ip, r1, r0, r7
   1abb6:	4a0c      	ldr	r2, [pc, #48]	; (1abe8 <pm_policy_next_state+0x90>)
   1abb8:	4660      	mov	r0, ip
   1abba:	f7fe f8f5 	bl	18da8 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1abbe:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   1abc2:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1abc4:	d001      	beq.n	1abca <pm_policy_next_state+0x72>
   1abc6:	4582      	cmp	sl, r0
   1abc8:	d905      	bls.n	1abd6 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   1abca:	1c73      	adds	r3, r6, #1
   1abcc:	d0de      	beq.n	1ab8c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   1abce:	9b01      	ldr	r3, [sp, #4]
   1abd0:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   1abd2:	42b0      	cmp	r0, r6
   1abd4:	d9da      	bls.n	1ab8c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1abd6:	3c01      	subs	r4, #1
   1abd8:	b2a4      	uxth	r4, r4
   1abda:	3d0c      	subs	r5, #12
   1abdc:	e7d4      	b.n	1ab88 <pm_policy_next_state+0x30>
   1abde:	bf00      	nop
   1abe0:	2000c584 	.word	0x2000c584
   1abe4:	000f423f 	.word	0x000f423f
   1abe8:	000f4240 	.word	0x000f4240

0001abec <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   1abec:	b908      	cbnz	r0, 1abf2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   1abee:	4b02      	ldr	r3, [pc, #8]	; (1abf8 <pm_state_cpu_get_all+0xc>)
   1abf0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1abf2:	2000      	movs	r0, #0
   1abf4:	4770      	bx	lr
   1abf6:	bf00      	nop
   1abf8:	0002c108 	.word	0x0002c108

0001abfc <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   1abfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac00:	4605      	mov	r5, r0
   1ac02:	460e      	mov	r6, r1
   1ac04:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1ac06:	4c10      	ldr	r4, [pc, #64]	; (1ac48 <z_impl_zsock_socket+0x4c>)
   1ac08:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1ac4c <z_impl_zsock_socket+0x50>
   1ac0c:	4544      	cmp	r4, r8
   1ac0e:	d307      	bcc.n	1ac20 <z_impl_zsock_socket+0x24>
		}

		return sock_family->handler(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   1ac10:	f00d f816 	bl	27c40 <__errno>
   1ac14:	236a      	movs	r3, #106	; 0x6a
   1ac16:	6003      	str	r3, [r0, #0]
	return -1;
}
   1ac18:	f04f 30ff 	mov.w	r0, #4294967295
   1ac1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sock_family->family != family &&
   1ac20:	6823      	ldr	r3, [r4, #0]
   1ac22:	42ab      	cmp	r3, r5
   1ac24:	d000      	beq.n	1ac28 <z_impl_zsock_socket+0x2c>
   1ac26:	b963      	cbnz	r3, 1ac42 <z_impl_zsock_socket+0x46>
		if (!sock_family->is_supported(family, type, proto)) {
   1ac28:	463a      	mov	r2, r7
   1ac2a:	4631      	mov	r1, r6
   1ac2c:	4628      	mov	r0, r5
   1ac2e:	68a3      	ldr	r3, [r4, #8]
   1ac30:	4798      	blx	r3
   1ac32:	b130      	cbz	r0, 1ac42 <z_impl_zsock_socket+0x46>
		return sock_family->handler(family, type, proto);
   1ac34:	463a      	mov	r2, r7
   1ac36:	4631      	mov	r1, r6
   1ac38:	4628      	mov	r0, r5
   1ac3a:	68e3      	ldr	r3, [r4, #12]
}
   1ac3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sock_family->handler(family, type, proto);
   1ac40:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1ac42:	3410      	adds	r4, #16
   1ac44:	e7e2      	b.n	1ac0c <z_impl_zsock_socket+0x10>
   1ac46:	bf00      	nop
   1ac48:	0002bd90 	.word	0x0002bd90
   1ac4c:	0002bda0 	.word	0x0002bda0

0001ac50 <zsock_poll_internal>:

	return timeout - elapsed;
}

int zsock_poll_internal(struct zsock_pollfd *fds, int nfds, k_timeout_t timeout)
{
   1ac50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac54:	460f      	mov	r7, r1
	const struct fd_op_vtable *vtable;
	struct k_mutex *lock;
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;
   1ac56:	2600      	movs	r6, #0
{
   1ac58:	b09b      	sub	sp, #108	; 0x6c
   1ac5a:	9003      	str	r0, [sp, #12]

	end = sys_clock_timeout_end_calc(timeout);
   1ac5c:	4619      	mov	r1, r3
   1ac5e:	4610      	mov	r0, r2
{
   1ac60:	e9cd 2306 	strd	r2, r3, [sp, #24]
	end = sys_clock_timeout_end_calc(timeout);
   1ac64:	f010 f8f9 	bl	2ae5a <sys_clock_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   1ac68:	46bb      	mov	fp, r7
	bool offload = false;
   1ac6a:	4634      	mov	r4, r6
	end = sys_clock_timeout_end_calc(timeout);
   1ac6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
	pev = poll_events;
   1ac70:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	for (pfd = fds, i = nfds; i--; pfd++) {
   1ac74:	f8dd 900c 	ldr.w	r9, [sp, #12]
	pev = poll_events;
   1ac78:	f8cd 8020 	str.w	r8, [sp, #32]
	const struct fd_op_vtable *offl_vtable = NULL;
   1ac7c:	9602      	str	r6, [sp, #8]
	for (pfd = fds, i = nfds; i--; pfd++) {
   1ac7e:	f1bb 0f00 	cmp.w	fp, #0
   1ac82:	d121      	bne.n	1acc8 <zsock_poll_internal+0x78>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   1ac84:	2c00      	cmp	r4, #0
   1ac86:	d066      	beq.n	1ad56 <zsock_poll_internal+0x106>
		int poll_timeout;

		if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ac88:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   1ac8c:	f1b2 3fff 	cmp.w	r2, #4294967295
   1ac90:	bf08      	it	eq
   1ac92:	f1b3 3fff 	cmpeq.w	r3, #4294967295
   1ac96:	bf17      	itett	ne
   1ac98:	f44f 727a 	movne.w	r2, #1000	; 0x3e8
			poll_timeout = SYS_FOREVER_MS;
   1ac9c:	f04f 33ff 	moveq.w	r3, #4294967295
   1aca0:	fba3 3202 	umullne	r3, r2, r3, r2
   1aca4:	0bdb      	lsrne	r3, r3, #15
   1aca6:	bf18      	it	ne
   1aca8:	ea43 4342 	orrne.w	r3, r3, r2, lsl #17
		} else {
			poll_timeout = k_ticks_to_ms_floor32(timeout.ticks);
		}

		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   1acac:	e9cd 7300 	strd	r7, r3, [sp]
   1acb0:	f44f 7282 	mov.w	r2, #260	; 0x104
   1acb4:	4631      	mov	r1, r6
   1acb6:	9b03      	ldr	r3, [sp, #12]
   1acb8:	9802      	ldr	r0, [sp, #8]
   1acba:	f00c fde4 	bl	27886 <z_fdtable_call_ioctl>
   1acbe:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
   1acc0:	4620      	mov	r0, r4
   1acc2:	b01b      	add	sp, #108	; 0x6c
   1acc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pfd->fd < 0) {
   1acc8:	f8d9 0000 	ldr.w	r0, [r9]
   1accc:	2800      	cmp	r0, #0
   1acce:	db22      	blt.n	1ad16 <zsock_poll_internal+0xc6>
	ctx = z_get_fd_obj_and_vtable(sock,
   1acd0:	aa0a      	add	r2, sp, #40	; 0x28
   1acd2:	a909      	add	r1, sp, #36	; 0x24
   1acd4:	f7fe fe64 	bl	199a0 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   1acd8:	4605      	mov	r5, r0
   1acda:	b1e0      	cbz	r0, 1ad16 <zsock_poll_internal+0xc6>
		(void)k_mutex_lock(lock, K_FOREVER);
   1acdc:	f04f 32ff 	mov.w	r2, #4294967295
   1ace0:	f04f 33ff 	mov.w	r3, #4294967295
   1ace4:	980a      	ldr	r0, [sp, #40]	; 0x28
   1ace6:	f00c fdfb 	bl	278e0 <k_mutex_lock.constprop.0.isra.0>
		result = z_fdtable_call_ioctl(vtable, ctx,
   1acea:	ab1a      	add	r3, sp, #104	; 0x68
   1acec:	9301      	str	r3, [sp, #4]
   1acee:	ab08      	add	r3, sp, #32
   1acf0:	9300      	str	r3, [sp, #0]
   1acf2:	f44f 7281 	mov.w	r2, #258	; 0x102
   1acf6:	464b      	mov	r3, r9
   1acf8:	4629      	mov	r1, r5
   1acfa:	9809      	ldr	r0, [sp, #36]	; 0x24
   1acfc:	f00c fdc3 	bl	27886 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   1ad00:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   1ad04:	4682      	mov	sl, r0
		if (result == -EALREADY) {
   1ad06:	d10b      	bne.n	1ad20 <zsock_poll_internal+0xd0>
			timeout = K_NO_WAIT;
   1ad08:	2200      	movs	r2, #0
   1ad0a:	2300      	movs	r3, #0
		k_mutex_unlock(lock);
   1ad0c:	980a      	ldr	r0, [sp, #40]	; 0x28
			timeout = K_NO_WAIT;
   1ad0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
		k_mutex_unlock(lock);
   1ad12:	f00c fde7 	bl	278e4 <k_mutex_unlock.isra.0>
	for (pfd = fds, i = nfds; i--; pfd++) {
   1ad16:	f109 0908 	add.w	r9, r9, #8
   1ad1a:	f10b 3bff 	add.w	fp, fp, #4294967295
   1ad1e:	e7ae      	b.n	1ac7e <zsock_poll_internal+0x2e>
		} else if (result == -EXDEV) {
   1ad20:	f11a 0f12 	cmn.w	sl, #18
		k_mutex_unlock(lock);
   1ad24:	980a      	ldr	r0, [sp, #40]	; 0x28
		} else if (result == -EXDEV) {
   1ad26:	d10b      	bne.n	1ad40 <zsock_poll_internal+0xf0>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   1ad28:	9b02      	ldr	r3, [sp, #8]
   1ad2a:	b11b      	cbz	r3, 1ad34 <zsock_poll_internal+0xe4>
		k_mutex_unlock(lock);
   1ad2c:	f00c fdda 	bl	278e4 <k_mutex_unlock.isra.0>
			offload = true;
   1ad30:	2401      	movs	r4, #1
   1ad32:	e7f0      	b.n	1ad16 <zsock_poll_internal+0xc6>
				offl_vtable = vtable;
   1ad34:	9b09      	ldr	r3, [sp, #36]	; 0x24
		k_mutex_unlock(lock);
   1ad36:	462e      	mov	r6, r5
				offl_vtable = vtable;
   1ad38:	9302      	str	r3, [sp, #8]
		k_mutex_unlock(lock);
   1ad3a:	f00c fdd3 	bl	278e4 <k_mutex_unlock.isra.0>
		if (result < 0) {
   1ad3e:	e7f7      	b.n	1ad30 <zsock_poll_internal+0xe0>
		k_mutex_unlock(lock);
   1ad40:	f00c fdd0 	bl	278e4 <k_mutex_unlock.isra.0>
		if (result < 0) {
   1ad44:	f1ba 0f00 	cmp.w	sl, #0
   1ad48:	dae5      	bge.n	1ad16 <zsock_poll_internal+0xc6>
			errno = -result;
   1ad4a:	f00c ff79 	bl	27c40 <__errno>
   1ad4e:	f1ca 0300 	rsb	r3, sl, #0
				errno = -result;
   1ad52:	6003      	str	r3, [r0, #0]
				return -1;
   1ad54:	e020      	b.n	1ad98 <zsock_poll_internal+0x148>
	timeout_recalc(end, &timeout);
   1ad56:	aa06      	add	r2, sp, #24
   1ad58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
		ret = k_poll(poll_events, pev - poll_events, timeout);
   1ad5c:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 1ae38 <zsock_poll_internal+0x1e8>
	timeout_recalc(end, &timeout);
   1ad60:	f00c fda0 	bl	278a4 <timeout_recalc>
		retry = false;
   1ad64:	9402      	str	r4, [sp, #8]
		ret = k_poll(poll_events, pev - poll_events, timeout);
   1ad66:	9908      	ldr	r1, [sp, #32]
   1ad68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1ad6c:	eba1 0108 	sub.w	r1, r1, r8
   1ad70:	1089      	asrs	r1, r1, #2
   1ad72:	fb0a f101 	mul.w	r1, sl, r1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1ad76:	4640      	mov	r0, r8
   1ad78:	f00a fc4e 	bl	25618 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   1ad7c:	f100 030b 	add.w	r3, r0, #11
   1ad80:	2b0b      	cmp	r3, #11
   1ad82:	4605      	mov	r5, r0
   1ad84:	d804      	bhi.n	1ad90 <zsock_poll_internal+0x140>
   1ad86:	4c2d      	ldr	r4, [pc, #180]	; (1ae3c <zsock_poll_internal+0x1ec>)
   1ad88:	411c      	asrs	r4, r3
   1ad8a:	f014 0401 	ands.w	r4, r4, #1
   1ad8e:	d006      	beq.n	1ad9e <zsock_poll_internal+0x14e>
			errno = -ret;
   1ad90:	f00c ff56 	bl	27c40 <__errno>
   1ad94:	426d      	negs	r5, r5
   1ad96:	6005      	str	r5, [r0, #0]
			return -1;
   1ad98:	f04f 34ff 	mov.w	r4, #4294967295
   1ad9c:	e790      	b.n	1acc0 <zsock_poll_internal+0x70>
		for (pfd = fds, i = nfds; i--; pfd++) {
   1ad9e:	46b9      	mov	r9, r7
		retry = false;
   1ada0:	46a3      	mov	fp, r4
		for (pfd = fds, i = nfds; i--; pfd++) {
   1ada2:	9d03      	ldr	r5, [sp, #12]
		pev = poll_events;
   1ada4:	f8cd 8020 	str.w	r8, [sp, #32]
		for (pfd = fds, i = nfds; i--; pfd++) {
   1ada8:	f1b9 0f00 	cmp.w	r9, #0
   1adac:	d10e      	bne.n	1adcc <zsock_poll_internal+0x17c>
		if (retry) {
   1adae:	f1bb 0f00 	cmp.w	fp, #0
   1adb2:	d085      	beq.n	1acc0 <zsock_poll_internal+0x70>
			if (ret > 0) {
   1adb4:	2c00      	cmp	r4, #0
   1adb6:	d183      	bne.n	1acc0 <zsock_poll_internal+0x70>
			timeout_recalc(end, &timeout);
   1adb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1adbc:	aa06      	add	r2, sp, #24
   1adbe:	f00c fd71 	bl	278a4 <timeout_recalc>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1adc2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   1adc6:	4313      	orrs	r3, r2
   1adc8:	d1cd      	bne.n	1ad66 <zsock_poll_internal+0x116>
   1adca:	e779      	b.n	1acc0 <zsock_poll_internal+0x70>
			if (pfd->fd < 0) {
   1adcc:	6828      	ldr	r0, [r5, #0]
			pfd->revents = 0;
   1adce:	9b02      	ldr	r3, [sp, #8]
			if (pfd->fd < 0) {
   1add0:	2800      	cmp	r0, #0
			pfd->revents = 0;
   1add2:	80eb      	strh	r3, [r5, #6]
			if (pfd->fd < 0) {
   1add4:	db29      	blt.n	1ae2a <zsock_poll_internal+0x1da>
	ctx = z_get_fd_obj_and_vtable(sock,
   1add6:	aa0a      	add	r2, sp, #40	; 0x28
   1add8:	a909      	add	r1, sp, #36	; 0x24
   1adda:	f7fe fde1 	bl	199a0 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   1adde:	4606      	mov	r6, r0
   1ade0:	b918      	cbnz	r0, 1adea <zsock_poll_internal+0x19a>
				pfd->revents = ZSOCK_POLLNVAL;
   1ade2:	2320      	movs	r3, #32
   1ade4:	80eb      	strh	r3, [r5, #6]
				ret++;
   1ade6:	3401      	adds	r4, #1
   1ade8:	e01f      	b.n	1ae2a <zsock_poll_internal+0x1da>
			(void)k_mutex_lock(lock, K_FOREVER);
   1adea:	f04f 32ff 	mov.w	r2, #4294967295
   1adee:	f04f 33ff 	mov.w	r3, #4294967295
   1adf2:	980a      	ldr	r0, [sp, #40]	; 0x28
   1adf4:	f00c fd74 	bl	278e0 <k_mutex_lock.constprop.0.isra.0>
			result = z_fdtable_call_ioctl(vtable, ctx,
   1adf8:	ab08      	add	r3, sp, #32
   1adfa:	4631      	mov	r1, r6
   1adfc:	f240 1203 	movw	r2, #259	; 0x103
   1ae00:	9300      	str	r3, [sp, #0]
   1ae02:	9809      	ldr	r0, [sp, #36]	; 0x24
   1ae04:	462b      	mov	r3, r5
   1ae06:	f00c fd3e 	bl	27886 <z_fdtable_call_ioctl>
   1ae0a:	4606      	mov	r6, r0
			k_mutex_unlock(lock);
   1ae0c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1ae0e:	f00c fd69 	bl	278e4 <k_mutex_unlock.isra.0>
			if (result == -EAGAIN) {
   1ae12:	f116 0f0b 	cmn.w	r6, #11
   1ae16:	d00c      	beq.n	1ae32 <zsock_poll_internal+0x1e2>
			} else if (result != 0) {
   1ae18:	b11e      	cbz	r6, 1ae22 <zsock_poll_internal+0x1d2>
				errno = -result;
   1ae1a:	f00c ff11 	bl	27c40 <__errno>
   1ae1e:	4273      	negs	r3, r6
   1ae20:	e797      	b.n	1ad52 <zsock_poll_internal+0x102>
			if (pfd->revents != 0) {
   1ae22:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   1ae26:	2b00      	cmp	r3, #0
   1ae28:	d1dd      	bne.n	1ade6 <zsock_poll_internal+0x196>
		for (pfd = fds, i = nfds; i--; pfd++) {
   1ae2a:	3508      	adds	r5, #8
   1ae2c:	f109 39ff 	add.w	r9, r9, #4294967295
   1ae30:	e7ba      	b.n	1ada8 <zsock_poll_internal+0x158>
				retry = true;
   1ae32:	f04f 0b01 	mov.w	fp, #1
   1ae36:	e7f8      	b.n	1ae2a <zsock_poll_internal+0x1da>
   1ae38:	cccccccd 	.word	0xcccccccd
   1ae3c:	fffff77e 	.word	0xfffff77e

0001ae40 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   1ae40:	4b01      	ldr	r3, [pc, #4]	; (1ae48 <socket_offload_dns_register+0x8>)
   1ae42:	6018      	str	r0, [r3, #0]
}
   1ae44:	4770      	bx	lr
   1ae46:	bf00      	nop
   1ae48:	2000d5f8 	.word	0x2000d5f8

0001ae4c <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   1ae4c:	b410      	push	{r4}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);

	return dns_offload->getaddrinfo(node, service, hints, res);
   1ae4e:	4c03      	ldr	r4, [pc, #12]	; (1ae5c <socket_offload_getaddrinfo+0x10>)
   1ae50:	6824      	ldr	r4, [r4, #0]
   1ae52:	6824      	ldr	r4, [r4, #0]
   1ae54:	46a4      	mov	ip, r4
}
   1ae56:	bc10      	pop	{r4}
	return dns_offload->getaddrinfo(node, service, hints, res);
   1ae58:	4760      	bx	ip
   1ae5a:	bf00      	nop
   1ae5c:	2000d5f8 	.word	0x2000d5f8

0001ae60 <socket_offload_freeaddrinfo>:
void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);

	return dns_offload->freeaddrinfo(res);
   1ae60:	4b01      	ldr	r3, [pc, #4]	; (1ae68 <socket_offload_freeaddrinfo+0x8>)
   1ae62:	681b      	ldr	r3, [r3, #0]
   1ae64:	685b      	ldr	r3, [r3, #4]
   1ae66:	4718      	bx	r3
   1ae68:	2000d5f8 	.word	0x2000d5f8

0001ae6c <adp536x_reg_read>:
#define ADP536X_FUEL_GAUGE_EN_FG(x)			((x) & 0x01)

static const struct device *i2c_dev;

static int adp536x_reg_read(uint8_t reg, uint8_t *buff)
{
   1ae6c:	4603      	mov	r3, r0
   1ae6e:	b510      	push	{r4, lr}
   1ae70:	b088      	sub	sp, #32
   1ae72:	f88d 3007 	strb.w	r3, [sp, #7]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
   1ae76:	f10d 0307 	add.w	r3, sp, #7
   1ae7a:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
   1ae7c:	2301      	movs	r3, #1
	return i2c_reg_read_byte(i2c_dev, ADP536X_I2C_ADDR, reg, buff);
   1ae7e:	4a09      	ldr	r2, [pc, #36]	; (1aea4 <adp536x_reg_read+0x38>)
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
   1ae80:	e9cd 1305 	strd	r1, r3, [sp, #20]
   1ae84:	6810      	ldr	r0, [r2, #0]
	msg[0].len = num_write;
   1ae86:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   1ae88:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1ae8a:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
   1ae8c:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1ae90:	f88d 301c 	strb.w	r3, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1ae94:	6883      	ldr	r3, [r0, #8]
   1ae96:	2202      	movs	r2, #2
   1ae98:	689c      	ldr	r4, [r3, #8]
   1ae9a:	a902      	add	r1, sp, #8
   1ae9c:	2346      	movs	r3, #70	; 0x46
   1ae9e:	47a0      	blx	r4
}
   1aea0:	b008      	add	sp, #32
   1aea2:	bd10      	pop	{r4, pc}
   1aea4:	2000d5fc 	.word	0x2000d5fc

0001aea8 <adp536x_reg_write_mask>:
}

static int adp536x_reg_write_mask(uint8_t reg_addr,
			       uint32_t mask,
			       uint8_t data)
{
   1aea8:	b570      	push	{r4, r5, r6, lr}
   1aeaa:	b086      	sub	sp, #24
   1aeac:	460e      	mov	r6, r1
	int err;
	uint8_t tmp;

	err = adp536x_reg_read(reg_addr, &tmp);
   1aeae:	f10d 0107 	add.w	r1, sp, #7
{
   1aeb2:	4605      	mov	r5, r0
   1aeb4:	4614      	mov	r4, r2
	err = adp536x_reg_read(reg_addr, &tmp);
   1aeb6:	f7ff ffd9 	bl	1ae6c <adp536x_reg_read>
	if (err) {
   1aeba:	b9c8      	cbnz	r0, 1aef0 <adp536x_reg_write_mask+0x48>
		return err;
	}

	tmp &= ~mask;
   1aebc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   1aec0:	f88d 5008 	strb.w	r5, [sp, #8]
   1aec4:	ea23 0106 	bic.w	r1, r3, r6
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
   1aec8:	4b0a      	ldr	r3, [pc, #40]	; (1aef4 <adp536x_reg_write_mask+0x4c>)
	tmp |= data;
   1aeca:	ea44 0201 	orr.w	r2, r4, r1
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
   1aece:	6818      	ldr	r0, [r3, #0]
	msg.buf = (uint8_t *)buf;
   1aed0:	ab02      	add	r3, sp, #8
   1aed2:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   1aed4:	2302      	movs	r3, #2
	tmp |= data;
   1aed6:	f88d 2007 	strb.w	r2, [sp, #7]
	uint8_t tx_buf[2] = {reg_addr, value};
   1aeda:	f88d 2009 	strb.w	r2, [sp, #9]
	msg.len = num_bytes;
   1aede:	9304      	str	r3, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1aee0:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1aee4:	6883      	ldr	r3, [r0, #8]
   1aee6:	2201      	movs	r2, #1
   1aee8:	689c      	ldr	r4, [r3, #8]
   1aeea:	a903      	add	r1, sp, #12
   1aeec:	2346      	movs	r3, #70	; 0x46
   1aeee:	47a0      	blx	r4

	return adp536x_reg_write(reg_addr, tmp);
}
   1aef0:	b006      	add	sp, #24
   1aef2:	bd70      	pop	{r4, r5, r6, pc}
   1aef4:	2000d5fc 	.word	0x2000d5fc

0001aef8 <adp536x_init>:

	return 0;
}

int adp536x_init(const struct device *dev)
{
   1aef8:	b510      	push	{r4, lr}
   1aefa:	4604      	mov	r4, r0
   1aefc:	f00f fcfc 	bl	2a8f8 <z_device_is_ready>
	if (!device_is_ready(dev)) {
   1af00:	b118      	cbz	r0, 1af0a <adp536x_init+0x12>
		return -ENODEV;
	}

	i2c_dev = dev;

	return 0;
   1af02:	2000      	movs	r0, #0
	i2c_dev = dev;
   1af04:	4b02      	ldr	r3, [pc, #8]	; (1af10 <adp536x_init+0x18>)
   1af06:	601c      	str	r4, [r3, #0]
}
   1af08:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1af0a:	f06f 0012 	mvn.w	r0, #18
   1af0e:	e7fb      	b.n	1af08 <adp536x_init+0x10>
   1af10:	2000d5fc 	.word	0x2000d5fc

0001af14 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1af14:	4901      	ldr	r1, [pc, #4]	; (1af1c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1af16:	2210      	movs	r2, #16
	str	r2, [r1]
   1af18:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1af1a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1af1c:	e000ed10 	.word	0xe000ed10

0001af20 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1af20:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1af22:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1af24:	f380 8811 	msr	BASEPRI, r0
	isb
   1af28:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   1af2c:	f3bf 8f4f 	dsb	sy
   1af30:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1af32:	b662      	cpsie	i
	isb
   1af34:	f3bf 8f6f 	isb	sy

	bx	lr
   1af38:	4770      	bx	lr
   1af3a:	bf00      	nop

0001af3c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1af3c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1af3e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1af40:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   1af44:	f3bf 8f4f 	dsb	sy
   1af48:	bf20      	wfe

	msr	BASEPRI, r0
   1af4a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1af4e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1af50:	4770      	bx	lr
   1af52:	bf00      	nop

0001af54 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1af54:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1af56:	2800      	cmp	r0, #0
   1af58:	db07      	blt.n	1af6a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1af5a:	2301      	movs	r3, #1
   1af5c:	0941      	lsrs	r1, r0, #5
   1af5e:	4a03      	ldr	r2, [pc, #12]	; (1af6c <arch_irq_enable+0x18>)
   1af60:	f000 001f 	and.w	r0, r0, #31
   1af64:	4083      	lsls	r3, r0
   1af66:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   1af6a:	4770      	bx	lr
   1af6c:	e000e100 	.word	0xe000e100

0001af70 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   1af70:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1af72:	2800      	cmp	r0, #0
   1af74:	db0c      	blt.n	1af90 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1af76:	2201      	movs	r2, #1
   1af78:	4906      	ldr	r1, [pc, #24]	; (1af94 <arch_irq_disable+0x24>)
   1af7a:	0943      	lsrs	r3, r0, #5
   1af7c:	f000 001f 	and.w	r0, r0, #31
   1af80:	4082      	lsls	r2, r0
   1af82:	3320      	adds	r3, #32
   1af84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1af88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1af8c:	f3bf 8f6f 	isb	sy
}
   1af90:	4770      	bx	lr
   1af92:	bf00      	nop
   1af94:	e000e100 	.word	0xe000e100

0001af98 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1af98:	4b05      	ldr	r3, [pc, #20]	; (1afb0 <arch_irq_is_enabled+0x18>)
   1af9a:	0942      	lsrs	r2, r0, #5
   1af9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1afa0:	2301      	movs	r3, #1
   1afa2:	f000 001f 	and.w	r0, r0, #31
   1afa6:	fa03 f000 	lsl.w	r0, r3, r0
}
   1afaa:	4010      	ands	r0, r2
   1afac:	4770      	bx	lr
   1afae:	bf00      	nop
   1afb0:	e000e100 	.word	0xe000e100

0001afb4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1afb4:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1afb6:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
   1afb8:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1afbc:	bfac      	ite	ge
   1afbe:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1afc2:	4b06      	ldrlt	r3, [pc, #24]	; (1afdc <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1afc4:	ea4f 1141 	mov.w	r1, r1, lsl #5
   1afc8:	b2c9      	uxtb	r1, r1
   1afca:	bfab      	itete	ge
   1afcc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1afd0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1afd4:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1afd8:	5419      	strblt	r1, [r3, r0]
}
   1afda:	4770      	bx	lr
   1afdc:	e000ed14 	.word	0xe000ed14

0001afe0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1afe0:	bf30      	wfi
    b z_SysNmiOnReset
   1afe2:	f7ff bffd 	b.w	1afe0 <z_SysNmiOnReset>
   1afe6:	bf00      	nop

0001afe8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1afe8:	4a0b      	ldr	r2, [pc, #44]	; (1b018 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   1afea:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1afec:	4b0b      	ldr	r3, [pc, #44]	; (1b01c <z_arm_prep_c+0x34>)
   1afee:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1aff2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1aff4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1aff8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1affc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1b000:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1b004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1b008:	f009 fa34 	bl	24474 <z_bss_zero>
	z_data_copy();
   1b00c:	f00a f9aa 	bl	25364 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1b010:	f000 fa10 	bl	1b434 <z_arm_interrupt_init>
	z_cstart();
   1b014:	f009 fa6e 	bl	244f4 <z_cstart>
   1b018:	00018000 	.word	0x00018000
   1b01c:	e000ed00 	.word	0xe000ed00

0001b020 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1b020:	4a09      	ldr	r2, [pc, #36]	; (1b048 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1b022:	490a      	ldr	r1, [pc, #40]	; (1b04c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1b024:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1b026:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   1b028:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   1b02a:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1b02c:	4908      	ldr	r1, [pc, #32]	; (1b050 <arch_swap+0x30>)
   1b02e:	684b      	ldr	r3, [r1, #4]
   1b030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1b034:	604b      	str	r3, [r1, #4]
   1b036:	2300      	movs	r3, #0
   1b038:	f383 8811 	msr	BASEPRI, r3
   1b03c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1b040:	6893      	ldr	r3, [r2, #8]
}
   1b042:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   1b044:	4770      	bx	lr
   1b046:	bf00      	nop
   1b048:	2000dd44 	.word	0x2000dd44
   1b04c:	0002cb0c 	.word	0x0002cb0c
   1b050:	e000ed00 	.word	0xe000ed00

0001b054 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1b054:	4915      	ldr	r1, [pc, #84]	; (1b0ac <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1b056:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   1b058:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1b05c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1b060:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1b062:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1b066:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1b06a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   1b06c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1b070:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1b074:	4f0e      	ldr	r7, [pc, #56]	; (1b0b0 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1b076:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1b07a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   1b07c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1b07e:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   1b080:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1b084:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1b086:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1b088:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1b08a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1b08e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1b092:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1b096:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1b09a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1b09e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1b0a0:	f00c fd72 	bl	27b88 <configure_builtin_stack_guard>
    pop {r2, lr}
   1b0a4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1b0a8:	4770      	bx	lr
   1b0aa:	0000      	.short	0x0000
    ldr r1, =_kernel
   1b0ac:	2000dd44 	.word	0x2000dd44
    ldr v4, =_SCS_ICSR
   1b0b0:	e000ed04 	.word	0xe000ed04

0001b0b4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   1b0b4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1b0b8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1b0ba:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1b0be:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1b0c2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1b0c4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1b0c8:	2902      	cmp	r1, #2
    beq _oops
   1b0ca:	d0ff      	beq.n	1b0cc <_oops>

0001b0cc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1b0cc:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   1b0ce:	f00c fd4c 	bl	27b6a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   1b0d2:	bd01      	pop	{r0, pc}

0001b0d4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1b0d4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1b0d8:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   1b0da:	490d      	ldr	r1, [pc, #52]	; (1b110 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   1b0dc:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1b0e0:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   1b0e2:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   1b0e6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1b0ea:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   1b0ec:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   1b0f0:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1b0f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1b0f8:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   1b0fc:	2300      	movs	r3, #0
   1b0fe:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   1b100:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1b104:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1b106:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   1b108:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1b10c:	4770      	bx	lr
   1b10e:	bf00      	nop
   1b110:	00026ff5 	.word	0x00026ff5

0001b114 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1b114:	4b08      	ldr	r3, [pc, #32]	; (1b138 <arch_switch_to_main_thread+0x24>)
   1b116:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1b118:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1b11a:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1b11e:	4610      	mov	r0, r2
   1b120:	f381 8809 	msr	PSP, r1
   1b124:	2100      	movs	r1, #0
   1b126:	b663      	cpsie	if
   1b128:	f381 8811 	msr	BASEPRI, r1
   1b12c:	f3bf 8f6f 	isb	sy
   1b130:	2200      	movs	r2, #0
   1b132:	2300      	movs	r3, #0
   1b134:	f00b ff5e 	bl	26ff4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1b138:	2000dd44 	.word	0x2000dd44

0001b13c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1b13c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1b13e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1b140:	4a0b      	ldr	r2, [pc, #44]	; (1b170 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1b142:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   1b144:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1b146:	bf1e      	ittt	ne
	movne	r1, #0
   1b148:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1b14a:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
   1b14c:	f00f fc85 	blne	2aa5a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1b150:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1b152:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1b156:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1b15a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1b15e:	4905      	ldr	r1, [pc, #20]	; (1b174 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1b160:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1b162:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1b164:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1b166:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1b16a:	4903      	ldr	r1, [pc, #12]	; (1b178 <_isr_wrapper+0x3c>)
	bx r1
   1b16c:	4708      	bx	r1
   1b16e:	0000      	.short	0x0000
	ldr r2, =_kernel
   1b170:	2000dd44 	.word	0x2000dd44
	ldr r1, =_sw_isr_table
   1b174:	0002bb34 	.word	0x0002bb34
	ldr r1, =z_arm_int_exit
   1b178:	0001b17d 	.word	0x0001b17d

0001b17c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1b17c:	4b04      	ldr	r3, [pc, #16]	; (1b190 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1b17e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1b180:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
   1b182:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1b184:	d003      	beq.n	1b18e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1b186:	4903      	ldr	r1, [pc, #12]	; (1b194 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1b188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1b18c:	600a      	str	r2, [r1, #0]

0001b18e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1b18e:	4770      	bx	lr
	ldr r3, =_kernel
   1b190:	2000dd44 	.word	0x2000dd44
	ldr r1, =_SCS_ICSR
   1b194:	e000ed04 	.word	0xe000ed04

0001b198 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1b198:	4b15      	ldr	r3, [pc, #84]	; (1b1f0 <usage_fault.constprop.0+0x58>)
   1b19a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   1b19c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1b1a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   1b1a2:	bf14      	ite	ne
   1b1a4:	201e      	movne	r0, #30
   1b1a6:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   1b1a8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   1b1ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   1b1ae:	bf18      	it	ne
   1b1b0:	201f      	movne	r0, #31
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   1b1b2:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1b1b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
   1b1b8:	bf18      	it	ne
   1b1ba:	2002      	movne	r0, #2
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   1b1bc:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1b1c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   1b1c2:	bf18      	it	ne
   1b1c4:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   1b1c6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1b1ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   1b1cc:	bf18      	it	ne
   1b1ce:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   1b1d0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1b1d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   1b1d6:	bf18      	it	ne
   1b1d8:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   1b1da:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1b1de:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	return reason;
}
   1b1e0:	bf18      	it	ne
   1b1e2:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1b1e4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   1b1e8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   1b1ec:	629a      	str	r2, [r3, #40]	; 0x28
}
   1b1ee:	4770      	bx	lr
   1b1f0:	e000ed00 	.word	0xe000ed00

0001b1f4 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1b1f4:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1b1f6:	4b19      	ldr	r3, [pc, #100]	; (1b25c <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1b1f8:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1b1fa:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1b1fc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   1b1fe:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   1b202:	bf14      	ite	ne
   1b204:	2017      	movne	r0, #23
   1b206:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
   1b208:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1b20c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
   1b20e:	bf18      	it	ne
   1b210:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1b212:	05a4      	lsls	r4, r4, #22
   1b214:	d509      	bpl.n	1b22a <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
   1b216:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1b218:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1b21a:	0400      	lsls	r0, r0, #16
   1b21c:	d504      	bpl.n	1b228 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
   1b21e:	b11a      	cbz	r2, 1b228 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1b220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1b222:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1b226:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   1b228:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1b22a:	4b0c      	ldr	r3, [pc, #48]	; (1b25c <bus_fault.constprop.0+0x68>)
   1b22c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   1b22e:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1b232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   1b234:	bf18      	it	ne
   1b236:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1b238:	05d2      	lsls	r2, r2, #23
   1b23a:	d40c      	bmi.n	1b256 <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1b23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   1b23e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1b242:	bf18      	it	ne
   1b244:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1b246:	4a05      	ldr	r2, [pc, #20]	; (1b25c <bus_fault.constprop.0+0x68>)
   1b248:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1b24a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1b24e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1b250:	2300      	movs	r3, #0
   1b252:	700b      	strb	r3, [r1, #0]
}
   1b254:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   1b256:	201b      	movs	r0, #27
   1b258:	e7f5      	b.n	1b246 <bus_fault.constprop.0+0x52>
   1b25a:	bf00      	nop
   1b25c:	e000ed00 	.word	0xe000ed00

0001b260 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1b260:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1b262:	4b1c      	ldr	r3, [pc, #112]	; (1b2d4 <mem_manage_fault.constprop.0+0x74>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1b264:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1b266:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1b268:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   1b26a:	f010 0f10 	tst.w	r0, #16
   1b26e:	bf14      	ite	ne
   1b270:	2011      	movne	r0, #17
   1b272:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
   1b274:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1b278:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
   1b27a:	bf18      	it	ne
   1b27c:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1b27e:	07a4      	lsls	r4, r4, #30
   1b280:	d509      	bpl.n	1b296 <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
   1b282:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1b284:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1b286:	0600      	lsls	r0, r0, #24
   1b288:	d504      	bpl.n	1b294 <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
   1b28a:	b11a      	cbz	r2, 1b294 <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1b28c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1b28e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1b292:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   1b294:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1b296:	4b0f      	ldr	r3, [pc, #60]	; (1b2d4 <mem_manage_fault.constprop.0+0x74>)
   1b298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   1b29a:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1b29e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   1b2a0:	bf18      	it	ne
   1b2a2:	2014      	movne	r0, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   1b2a4:	f012 0f20 	tst.w	r2, #32
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1b2a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   1b2aa:	bf18      	it	ne
   1b2ac:	2015      	movne	r0, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1b2ae:	06d4      	lsls	r4, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1b2b0:	bf58      	it	pl
   1b2b2:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1b2b4:	4b07      	ldr	r3, [pc, #28]	; (1b2d4 <mem_manage_fault.constprop.0+0x74>)
   1b2b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1b2b8:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   1b2ba:	bf42      	ittt	mi
   1b2bc:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   1b2be:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   1b2c2:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1b2c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1b2c6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   1b2ca:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1b2cc:	2300      	movs	r3, #0
   1b2ce:	700b      	strb	r3, [r1, #0]
}
   1b2d0:	bd10      	pop	{r4, pc}
   1b2d2:	bf00      	nop
   1b2d4:	e000ed00 	.word	0xe000ed00

0001b2d8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   1b2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1b2da:	4b4a      	ldr	r3, [pc, #296]	; (1b404 <z_arm_fault+0x12c>)
{
   1b2dc:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1b2de:	685b      	ldr	r3, [r3, #4]
   1b2e0:	2500      	movs	r5, #0
{
   1b2e2:	b08b      	sub	sp, #44	; 0x2c
   1b2e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1b2e8:	f385 8811 	msr	BASEPRI, r5
   1b2ec:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1b2f0:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
   1b2f4:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
   1b2f8:	d116      	bne.n	1b328 <z_arm_fault+0x50>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1b2fa:	07d6      	lsls	r6, r2, #31
   1b2fc:	d414      	bmi.n	1b328 <z_arm_fault+0x50>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1b2fe:	0655      	lsls	r5, r2, #25
   1b300:	d403      	bmi.n	1b30a <z_arm_fault+0x32>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1b302:	0710      	lsls	r0, r2, #28
   1b304:	d404      	bmi.n	1b310 <z_arm_fault+0x38>
			*nested_exc = true;
   1b306:	2501      	movs	r5, #1
   1b308:	e004      	b.n	1b314 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1b30a:	f012 0204 	ands.w	r2, r2, #4
   1b30e:	d000      	beq.n	1b312 <z_arm_fault+0x3a>
			ptr_esf = (z_arch_esf_t *)psp;
   1b310:	460c      	mov	r4, r1
	*nested_exc = false;
   1b312:	2500      	movs	r5, #0
	*recoverable = false;
   1b314:	2200      	movs	r2, #0
	switch (fault) {
   1b316:	3b03      	subs	r3, #3
	*recoverable = false;
   1b318:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   1b31c:	2b03      	cmp	r3, #3
   1b31e:	d805      	bhi.n	1b32c <z_arm_fault+0x54>
   1b320:	e8df f003 	tbb	[pc, r3]
   1b324:	5f666224 	.word	0x5f666224
		return NULL;
   1b328:	462c      	mov	r4, r5
   1b32a:	e7f3      	b.n	1b314 <z_arm_fault+0x3c>
   1b32c:	2300      	movs	r3, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1b32e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1b332:	b9ca      	cbnz	r2, 1b368 <z_arm_fault+0x90>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1b334:	ae02      	add	r6, sp, #8
   1b336:	f104 0720 	add.w	r7, r4, #32
   1b33a:	4632      	mov	r2, r6
   1b33c:	6820      	ldr	r0, [r4, #0]
   1b33e:	6861      	ldr	r1, [r4, #4]
   1b340:	3408      	adds	r4, #8
   1b342:	c203      	stmia	r2!, {r0, r1}
   1b344:	42bc      	cmp	r4, r7
   1b346:	4616      	mov	r6, r2
   1b348:	d1f7      	bne.n	1b33a <z_arm_fault+0x62>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1b34a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b34c:	2d00      	cmp	r5, #0
   1b34e:	d053      	beq.n	1b3f8 <z_arm_fault+0x120>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1b350:	f3c2 0108 	ubfx	r1, r2, #0, #9
   1b354:	b921      	cbnz	r1, 1b360 <z_arm_fault+0x88>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1b356:	ea6f 2252 	mvn.w	r2, r2, lsr #9
   1b35a:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1b35e:	9209      	str	r2, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
   1b360:	4618      	mov	r0, r3
   1b362:	a902      	add	r1, sp, #8
   1b364:	f00c fbff 	bl	27b66 <z_arm_fatal_error>
}
   1b368:	b00b      	add	sp, #44	; 0x2c
   1b36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1b36c:	4b25      	ldr	r3, [pc, #148]	; (1b404 <z_arm_fault+0x12c>)
   1b36e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b370:	0791      	lsls	r1, r2, #30
   1b372:	d4db      	bmi.n	1b32c <z_arm_fault+0x54>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1b374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b376:	2a00      	cmp	r2, #0
   1b378:	dbd8      	blt.n	1b32c <z_arm_fault+0x54>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1b37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b37c:	0052      	lsls	r2, r2, #1
   1b37e:	d5d5      	bpl.n	1b32c <z_arm_fault+0x54>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1b380:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   1b382:	69a1      	ldr	r1, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1b384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1b388:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1b38a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1b38e:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1b392:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   1b394:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1b398:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   1b39c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1b39e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1b3a2:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   1b3a6:	f64d 7202 	movw	r2, #57090	; 0xdf02
   1b3aa:	4291      	cmp	r1, r2
   1b3ac:	d101      	bne.n	1b3b2 <z_arm_fault+0xda>
			reason = esf->basic.r0;
   1b3ae:	6823      	ldr	r3, [r4, #0]
   1b3b0:	e7bd      	b.n	1b32e <z_arm_fault+0x56>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   1b3b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1b3b4:	b2d2      	uxtb	r2, r2
   1b3b6:	b132      	cbz	r2, 1b3c6 <z_arm_fault+0xee>
			reason = mem_manage_fault(esf, 1, recoverable);
   1b3b8:	2001      	movs	r0, #1
   1b3ba:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   1b3be:	f7ff ff4f 	bl	1b260 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
   1b3c2:	4603      	mov	r3, r0
		break;
   1b3c4:	e7b3      	b.n	1b32e <z_arm_fault+0x56>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   1b3c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1b3c8:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
   1b3cc:	d005      	beq.n	1b3da <z_arm_fault+0x102>
			reason = bus_fault(esf, 1, recoverable);
   1b3ce:	2001      	movs	r0, #1
   1b3d0:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   1b3d4:	f7ff ff0e 	bl	1b1f4 <bus_fault.constprop.0>
   1b3d8:	e7f3      	b.n	1b3c2 <z_arm_fault+0xea>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   1b3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b3dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1b3e0:	d3a4      	bcc.n	1b32c <z_arm_fault+0x54>
		reason = usage_fault(esf);
   1b3e2:	f7ff fed9 	bl	1b198 <usage_fault.constprop.0>
   1b3e6:	e7ec      	b.n	1b3c2 <z_arm_fault+0xea>
		reason = mem_manage_fault(esf, 0, recoverable);
   1b3e8:	2000      	movs	r0, #0
   1b3ea:	f10d 0107 	add.w	r1, sp, #7
   1b3ee:	e7e6      	b.n	1b3be <z_arm_fault+0xe6>
		reason = bus_fault(esf, 0, recoverable);
   1b3f0:	2000      	movs	r0, #0
   1b3f2:	f10d 0107 	add.w	r1, sp, #7
   1b3f6:	e7ed      	b.n	1b3d4 <z_arm_fault+0xfc>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1b3f8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
   1b3fc:	f022 0201 	bic.w	r2, r2, #1
   1b400:	e7ad      	b.n	1b35e <z_arm_fault+0x86>
   1b402:	bf00      	nop
   1b404:	e000ed00 	.word	0xe000ed00

0001b408 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1b408:	4b04      	ldr	r3, [pc, #16]	; (1b41c <z_arm_fault_init+0x14>)
   1b40a:	695a      	ldr	r2, [r3, #20]
   1b40c:	f042 0210 	orr.w	r2, r2, #16
   1b410:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   1b412:	695a      	ldr	r2, [r3, #20]
   1b414:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1b418:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   1b41a:	4770      	bx	lr
   1b41c:	e000ed00 	.word	0xe000ed00

0001b420 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1b420:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1b424:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1b428:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1b42a:	4672      	mov	r2, lr
	bl z_arm_fault
   1b42c:	f7ff ff54 	bl	1b2d8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1b430:	bd01      	pop	{r0, pc}
   1b432:	bf00      	nop

0001b434 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1b434:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b436:	2120      	movs	r1, #32
   1b438:	4803      	ldr	r0, [pc, #12]	; (1b448 <z_arm_interrupt_init+0x14>)
   1b43a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1b43c:	3301      	adds	r3, #1
   1b43e:	2b41      	cmp	r3, #65	; 0x41
   1b440:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1b444:	d1f9      	bne.n	1b43a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1b446:	4770      	bx	lr
   1b448:	e000e100 	.word	0xe000e100

0001b44c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   1b44c:	2000      	movs	r0, #0
    msr CONTROL, r0
   1b44e:	f380 8814 	msr	CONTROL, r0
    isb
   1b452:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   1b456:	2000      	movs	r0, #0
    msr MSPLIM, r0
   1b458:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   1b45c:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1b460:	f7ff fa9c 	bl	1a99c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1b464:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   1b466:	490e      	ldr	r1, [pc, #56]	; (1b4a0 <__start+0x54>)
    str r0, [r1]
   1b468:	6008      	str	r0, [r1, #0]
    dsb
   1b46a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1b46e:	480d      	ldr	r0, [pc, #52]	; (1b4a4 <__start+0x58>)
    msr msp, r0
   1b470:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1b474:	f000 f83e 	bl	1b4f4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1b478:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1b47a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1b47e:	480a      	ldr	r0, [pc, #40]	; (1b4a8 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1b480:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   1b484:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1b486:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1b48a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1b48e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1b490:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1b492:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1b496:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1b49a:	f7ff fda5 	bl	1afe8 <z_arm_prep_c>
   1b49e:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   1b4a0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1b4a4:	200144e0 	.word	0x200144e0
    ldr r0, =z_interrupt_stacks
   1b4a8:	2000fc00 	.word	0x2000fc00

0001b4ac <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   1b4ac:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1b4b0:	4905      	ldr	r1, [pc, #20]	; (1b4c8 <sys_arch_reboot+0x1c>)
   1b4b2:	4b06      	ldr	r3, [pc, #24]	; (1b4cc <sys_arch_reboot+0x20>)
   1b4b4:	68ca      	ldr	r2, [r1, #12]
   1b4b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1b4ba:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1b4bc:	60cb      	str	r3, [r1, #12]
   1b4be:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1b4c2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1b4c4:	e7fd      	b.n	1b4c2 <sys_arch_reboot+0x16>
   1b4c6:	bf00      	nop
   1b4c8:	e000ed00 	.word	0xe000ed00
   1b4cc:	05fa0004 	.word	0x05fa0004

0001b4d0 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   1b4d0:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   1b4d2:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   1b4d4:	4906      	ldr	r1, [pc, #24]	; (1b4f0 <z_arm_clear_arm_mpu_config+0x20>)
   1b4d6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   1b4da:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   1b4de:	4293      	cmp	r3, r2
   1b4e0:	db00      	blt.n	1b4e4 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1b4e2:	4770      	bx	lr
  mpu->RNR = rnr;
   1b4e4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   1b4e8:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   1b4ec:	3301      	adds	r3, #1
   1b4ee:	e7f6      	b.n	1b4de <z_arm_clear_arm_mpu_config+0xe>
   1b4f0:	e000ed00 	.word	0xe000ed00

0001b4f4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1b4f4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1b4f6:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   1b4f8:	2400      	movs	r4, #0
   1b4fa:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1b4fe:	f7ff ffe7 	bl	1b4d0 <z_arm_clear_arm_mpu_config>
   1b502:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1b504:	f04f 30ff 	mov.w	r0, #4294967295
   1b508:	4a0c      	ldr	r2, [pc, #48]	; (1b53c <z_arm_init_arch_hw_at_boot+0x48>)
   1b50a:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1b50e:	3301      	adds	r3, #1
   1b510:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   1b512:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1b516:	d1f8      	bne.n	1b50a <z_arm_init_arch_hw_at_boot+0x16>
   1b518:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1b51a:	f04f 30ff 	mov.w	r0, #4294967295
   1b51e:	4a07      	ldr	r2, [pc, #28]	; (1b53c <z_arm_init_arch_hw_at_boot+0x48>)
   1b520:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1b524:	3301      	adds	r3, #1
   1b526:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1b528:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1b52c:	d1f8      	bne.n	1b520 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   1b52e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1b530:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1b534:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1b538:	bd10      	pop	{r4, pc}
   1b53a:	bf00      	nop
   1b53c:	e000e100 	.word	0xe000e100

0001b540 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   1b540:	4b08      	ldr	r3, [pc, #32]	; (1b564 <z_impl_k_thread_abort+0x24>)
   1b542:	689b      	ldr	r3, [r3, #8]
   1b544:	4283      	cmp	r3, r0
   1b546:	d10b      	bne.n	1b560 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1b548:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1b54c:	b143      	cbz	r3, 1b560 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1b54e:	4b06      	ldr	r3, [pc, #24]	; (1b568 <z_impl_k_thread_abort+0x28>)
   1b550:	685a      	ldr	r2, [r3, #4]
   1b552:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1b556:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   1b558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1b55a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1b55e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   1b560:	f009 be8e 	b.w	25280 <z_thread_abort>
   1b564:	2000dd44 	.word	0x2000dd44
   1b568:	e000ed00 	.word	0xe000ed00

0001b56c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   1b56c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1b56e:	4c09      	ldr	r4, [pc, #36]	; (1b594 <z_arm_configure_static_mpu_regions+0x28>)
   1b570:	4a09      	ldr	r2, [pc, #36]	; (1b598 <z_arm_configure_static_mpu_regions+0x2c>)
   1b572:	4623      	mov	r3, r4
   1b574:	2101      	movs	r1, #1
   1b576:	4809      	ldr	r0, [pc, #36]	; (1b59c <z_arm_configure_static_mpu_regions+0x30>)
   1b578:	f000 f8ea 	bl	1b750 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1b57c:	2300      	movs	r3, #0
   1b57e:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1b580:	4b07      	ldr	r3, [pc, #28]	; (1b5a0 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1b582:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1b584:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1b586:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1b588:	9301      	str	r3, [sp, #4]
   1b58a:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1b58c:	f000 f8ea 	bl	1b764 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1b590:	b004      	add	sp, #16
   1b592:	bd10      	pop	{r4, pc}
   1b594:	20040000 	.word	0x20040000
   1b598:	2000c580 	.word	0x2000c580
   1b59c:	0002c108 	.word	0x0002c108
   1b5a0:	2000c9d0 	.word	0x2000c9d0

0001b5a4 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   1b5a4:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   1b5a6:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1b5a8:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1b5aa:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1b5ae:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   1b5b2:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1b5b4:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1b5b6:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1b5b8:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   1b5bc:	4905      	ldr	r1, [pc, #20]	; (1b5d4 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1b5be:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   1b5c2:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   1b5c6:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   1b5ca:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   1b5ce:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   1b5d2:	bd10      	pop	{r4, pc}
   1b5d4:	e000ed00 	.word	0xe000ed00

0001b5d8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1b5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5dc:	460f      	mov	r7, r1
   1b5de:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1b5e0:	4606      	mov	r6, r0
   1b5e2:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
   1b5e6:	4d4e      	ldr	r5, [pc, #312]	; (1b720 <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1b5e8:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   1b5ea:	45b8      	cmp	r8, r7
   1b5ec:	f280 8094 	bge.w	1b718 <mpu_configure_regions_and_partition.constprop.0+0x140>
		if (regions[i].size == 0U) {
   1b5f0:	f8d6 9004 	ldr.w	r9, [r6, #4]
   1b5f4:	f1b9 0f00 	cmp.w	r9, #0
   1b5f8:	d036      	beq.n	1b668 <mpu_configure_regions_and_partition.constprop.0+0x90>
		&&
   1b5fa:	f1b9 0f1f 	cmp.w	r9, #31
   1b5fe:	f240 8089 	bls.w	1b714 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		&&
   1b602:	f019 0f1f 	tst.w	r9, #31
   1b606:	f040 8085 	bne.w	1b714 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		((part->start &
   1b60a:	f8d6 a000 	ldr.w	sl, [r6]
		&&
   1b60e:	f01a 0f1f 	tst.w	sl, #31
   1b612:	d17f      	bne.n	1b714 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1b614:	4650      	mov	r0, sl
   1b616:	f00c fabd 	bl	27b94 <arm_cmse_mpu_region_get>
   1b61a:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1b61c:	eb09 000a 	add.w	r0, r9, sl
   1b620:	3801      	subs	r0, #1
   1b622:	f00c fab7 	bl	27b94 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1b626:	4583      	cmp	fp, r0
   1b628:	d174      	bne.n	1b714 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
   1b62a:	f11b 0f16 	cmn.w	fp, #22
   1b62e:	d071      	beq.n	1b714 <mpu_configure_regions_and_partition.constprop.0+0x13c>
   1b630:	455c      	cmp	r4, fp
   1b632:	dd6f      	ble.n	1b714 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
   1b634:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
   1b638:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   1b63c:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
   1b640:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1b644:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1b648:	f043 0a1f 	orr.w	sl, r3, #31
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1b64c:	e9d6 3200 	ldrd	r3, r2, [r6]
   1b650:	441a      	add	r2, r3

		if ((regions[i].start == u_reg_base) &&
   1b652:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1b654:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   1b658:	d11e      	bne.n	1b698 <mpu_configure_regions_and_partition.constprop.0+0xc0>
   1b65a:	45ca      	cmp	sl, r9
   1b65c:	d108      	bne.n	1b670 <mpu_configure_regions_and_partition.constprop.0+0x98>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
   1b65e:	4631      	mov	r1, r6
   1b660:	fa5f f08b 	uxtb.w	r0, fp
   1b664:	f00c fa9f 	bl	27ba6 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   1b668:	f108 0801 	add.w	r8, r8, #1
   1b66c:	360c      	adds	r6, #12
   1b66e:	e7bc      	b.n	1b5ea <mpu_configure_regions_and_partition.constprop.0+0x12>
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
   1b670:	4631      	mov	r1, r6
	MPU->RNR = rnr;
   1b672:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
   1b676:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   1b67a:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   1b67e:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   1b682:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
   1b684:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   1b688:	b2e0      	uxtb	r0, r4
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
   1b68a:	f00c fa8c 	bl	27ba6 <mpu_configure_region>

			if (reg_index == -EINVAL) {
   1b68e:	f110 0f16 	cmn.w	r0, #22
   1b692:	d03f      	beq.n	1b714 <mpu_configure_regions_and_partition.constprop.0+0x13c>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
   1b694:	1c44      	adds	r4, r0, #1
   1b696:	e7e7      	b.n	1b668 <mpu_configure_regions_and_partition.constprop.0+0x90>
	MPU->RNR = rnr;
   1b698:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
   1b69c:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
   1b6a0:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1b6a2:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   1b6a6:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1b6aa:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   1b6ac:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
   1b6ae:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
   1b6b0:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
   1b6b2:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
   1b6b6:	d0e8      	beq.n	1b68a <mpu_configure_regions_and_partition.constprop.0+0xb2>
				mpu_configure_region(reg_index, &regions[i]);
   1b6b8:	f00c fa75 	bl	27ba6 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1b6bc:	f110 0f16 	cmn.w	r0, #22
   1b6c0:	d028      	beq.n	1b714 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
   1b6c2:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
   1b6c6:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   1b6ca:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   1b6ce:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = mpu_get_rbar() &
   1b6d2:	f362 0304 	bfi	r3, r2, #0, #5
   1b6d6:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
   1b6da:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1b6de:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1b6e2:	085b      	lsrs	r3, r3, #1
   1b6e4:	f363 1247 	bfi	r2, r3, #5, #3
   1b6e8:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
   1b6ec:	e9d6 3200 	ldrd	r3, r2, [r6]
   1b6f0:	4413      	add	r3, r2
   1b6f2:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   1b6f4:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   1b6f8:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   1b6fa:	4453      	add	r3, sl
   1b6fc:	eba3 0309 	sub.w	r3, r3, r9
   1b700:	b2c8      	uxtb	r0, r1
   1b702:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   1b706:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   1b708:	9303      	str	r3, [sp, #12]
   1b70a:	d803      	bhi.n	1b714 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   1b70c:	4669      	mov	r1, sp
   1b70e:	f7ff ff49 	bl	1b5a4 <region_init>
   1b712:	e7bf      	b.n	1b694 <mpu_configure_regions_and_partition.constprop.0+0xbc>
			return -EINVAL;
   1b714:	f06f 0415 	mvn.w	r4, #21
		}
	}

	return reg_index;
}
   1b718:	4620      	mov	r0, r4
   1b71a:	b005      	add	sp, #20
   1b71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b720:	e000ed00 	.word	0xe000ed00

0001b724 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1b724:	2205      	movs	r2, #5
   1b726:	4b04      	ldr	r3, [pc, #16]	; (1b738 <arm_core_mpu_enable+0x14>)
   1b728:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   1b72c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1b730:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1b734:	4770      	bx	lr
   1b736:	bf00      	nop
   1b738:	e000ed00 	.word	0xe000ed00

0001b73c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1b73c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1b740:	2200      	movs	r2, #0
   1b742:	4b02      	ldr	r3, [pc, #8]	; (1b74c <arm_core_mpu_disable+0x10>)
   1b744:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   1b748:	4770      	bx	lr
   1b74a:	bf00      	nop
   1b74c:	e000ed00 	.word	0xe000ed00

0001b750 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   1b750:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1b752:	4c03      	ldr	r4, [pc, #12]	; (1b760 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1b754:	7822      	ldrb	r2, [r4, #0]
   1b756:	f7ff ff3f 	bl	1b5d8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1b75a:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   1b75c:	bd10      	pop	{r4, pc}
   1b75e:	bf00      	nop
   1b760:	2000e59c 	.word	0x2000e59c

0001b764 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   1b764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b768:	4d29      	ldr	r5, [pc, #164]	; (1b810 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
   1b76a:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
   1b76c:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1b76e:	f04f 0800 	mov.w	r8, #0
   1b772:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
   1b774:	4f27      	ldr	r7, [pc, #156]	; (1b814 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1b776:	45d0      	cmp	r8, sl
   1b778:	da1b      	bge.n	1b7b2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   1b77a:	f8d6 9004 	ldr.w	r9, [r6, #4]
   1b77e:	f1b9 0f00 	cmp.w	r9, #0
   1b782:	d03f      	beq.n	1b804 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1b784:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1b786:	4608      	mov	r0, r1
   1b788:	9101      	str	r1, [sp, #4]
   1b78a:	f00c fa03 	bl	27b94 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1b78e:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1b790:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1b792:	eb09 0001 	add.w	r0, r9, r1
   1b796:	3801      	subs	r0, #1
   1b798:	f00c f9fc 	bl	27b94 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1b79c:	4284      	cmp	r4, r0
   1b79e:	f04f 0214 	mov.w	r2, #20
   1b7a2:	4b1d      	ldr	r3, [pc, #116]	; (1b818 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
   1b7a4:	d008      	beq.n	1b7b8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   1b7a6:	fb02 f308 	mul.w	r3, r2, r8
   1b7aa:	f06f 0215 	mvn.w	r2, #21
   1b7ae:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   1b7b2:	b003      	add	sp, #12
   1b7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   1b7b8:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   1b7bc:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1b7be:	d0f8      	beq.n	1b7b2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1b7c0:	7819      	ldrb	r1, [r3, #0]
   1b7c2:	42a1      	cmp	r1, r4
   1b7c4:	ddf5      	ble.n	1b7b2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
   1b7c6:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   1b7ca:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   1b7ce:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   1b7d2:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   1b7d6:	f100 0108 	add.w	r1, r0, #8
   1b7da:	7b00      	ldrb	r0, [r0, #12]
   1b7dc:	f364 0004 	bfi	r0, r4, #0, #5
   1b7e0:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   1b7e2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1b7e6:	790c      	ldrb	r4, [r1, #4]
   1b7e8:	0840      	lsrs	r0, r0, #1
   1b7ea:	f360 1447 	bfi	r4, r0, #5, #3
   1b7ee:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   1b7f0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1b7f4:	f021 011f 	bic.w	r1, r1, #31
   1b7f8:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
   1b7fa:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   1b7fe:	f021 011f 	bic.w	r1, r1, #31
   1b802:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1b804:	f108 0801 	add.w	r8, r8, #1
   1b808:	3514      	adds	r5, #20
   1b80a:	360c      	adds	r6, #12
   1b80c:	e7b3      	b.n	1b776 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   1b80e:	bf00      	nop
   1b810:	2000d600 	.word	0x2000d600
   1b814:	e000ed00 	.word	0xe000ed00
   1b818:	2000e59c 	.word	0x2000e59c

0001b81c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   1b81c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1b81e:	4d0e      	ldr	r5, [pc, #56]	; (1b858 <z_arm_mpu_init+0x3c>)
   1b820:	682c      	ldr	r4, [r5, #0]
   1b822:	2c10      	cmp	r4, #16
   1b824:	d815      	bhi.n	1b852 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1b826:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   1b828:	f7ff ff88 	bl	1b73c <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   1b82c:	4b0b      	ldr	r3, [pc, #44]	; (1b85c <z_arm_mpu_init+0x40>)
   1b82e:	4a0c      	ldr	r2, [pc, #48]	; (1b860 <z_arm_mpu_init+0x44>)
   1b830:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1b834:	4284      	cmp	r4, r0
   1b836:	d105      	bne.n	1b844 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1b838:	4b0a      	ldr	r3, [pc, #40]	; (1b864 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   1b83a:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
   1b83c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   1b83e:	f7ff ff71 	bl	1b724 <arm_core_mpu_enable>
}
   1b842:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1b844:	6869      	ldr	r1, [r5, #4]
   1b846:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   1b84a:	f7ff feab 	bl	1b5a4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1b84e:	3001      	adds	r0, #1
   1b850:	e7f0      	b.n	1b834 <z_arm_mpu_init+0x18>
		return -1;
   1b852:	f04f 30ff 	mov.w	r0, #4294967295
   1b856:	e7f4      	b.n	1b842 <z_arm_mpu_init+0x26>
   1b858:	0002c114 	.word	0x0002c114
   1b85c:	e000ed00 	.word	0xe000ed00
   1b860:	0044ffaa 	.word	0x0044ffaa
   1b864:	2000e59c 	.word	0x2000e59c

0001b868 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1b868:	4b01      	ldr	r3, [pc, #4]	; (1b870 <__stdout_hook_install+0x8>)
   1b86a:	6018      	str	r0, [r3, #0]
}
   1b86c:	4770      	bx	lr
   1b86e:	bf00      	nop
   1b870:	2000c58c 	.word	0x2000c58c

0001b874 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   1b874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b876:	4606      	mov	r6, r0
   1b878:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   1b87a:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   1b87c:	4f06      	ldr	r7, [pc, #24]	; (1b898 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   1b87e:	42ac      	cmp	r4, r5
   1b880:	da08      	bge.n	1b894 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   1b882:	683b      	ldr	r3, [r7, #0]
   1b884:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1b886:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   1b888:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   1b88a:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1b88e:	d001      	beq.n	1b894 <z_impl_zephyr_read_stdin+0x20>
   1b890:	280d      	cmp	r0, #13
   1b892:	d1f4      	bne.n	1b87e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   1b894:	4620      	mov	r0, r4
   1b896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b898:	2000c588 	.word	0x2000c588

0001b89c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   1b89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b89e:	460d      	mov	r5, r1
   1b8a0:	4f09      	ldr	r7, [pc, #36]	; (1b8c8 <z_impl_zephyr_write_stdout+0x2c>)
   1b8a2:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   1b8a4:	f1c0 0401 	rsb	r4, r0, #1
   1b8a8:	19a3      	adds	r3, r4, r6
   1b8aa:	429d      	cmp	r5, r3
   1b8ac:	dc01      	bgt.n	1b8b2 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   1b8ae:	4628      	mov	r0, r5
   1b8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   1b8b2:	7873      	ldrb	r3, [r6, #1]
   1b8b4:	2b0a      	cmp	r3, #10
   1b8b6:	d102      	bne.n	1b8be <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   1b8b8:	200d      	movs	r0, #13
   1b8ba:	683b      	ldr	r3, [r7, #0]
   1b8bc:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   1b8be:	683b      	ldr	r3, [r7, #0]
   1b8c0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   1b8c4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   1b8c6:	e7ef      	b.n	1b8a8 <z_impl_zephyr_write_stdout+0xc>
   1b8c8:	2000c58c 	.word	0x2000c58c

0001b8cc <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   1b8cc:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   1b8ce:	4c07      	ldr	r4, [pc, #28]	; (1b8ec <_sbrk+0x20>)
   1b8d0:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1b8d2:	18c2      	adds	r2, r0, r3
   1b8d4:	4806      	ldr	r0, [pc, #24]	; (1b8f0 <_sbrk+0x24>)
   1b8d6:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1b8da:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   1b8de:	428a      	cmp	r2, r1
		heap_sz += count;
   1b8e0:	bf36      	itet	cc
   1b8e2:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   1b8e4:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1b8e8:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   1b8ea:	bd10      	pop	{r4, pc}
   1b8ec:	2000d614 	.word	0x2000d614
   1b8f0:	2001af90 	.word	0x2001af90

0001b8f4 <thingy91_board_init>:

	return 0;
}

static int thingy91_board_init(void)
{
   1b8f4:	b508      	push	{r3, lr}
	err = adp536x_init(ADP536X_I2C_DEVICE);
   1b8f6:	4814      	ldr	r0, [pc, #80]	; (1b948 <thingy91_board_init+0x54>)
   1b8f8:	f7ff fafe 	bl	1aef8 <adp536x_init>
	if (err) {
   1b8fc:	bb18      	cbnz	r0, 1b946 <thingy91_board_init+0x52>
	err = adp536x_buck_1v8_set();
   1b8fe:	f00c f912 	bl	27b26 <adp536x_buck_1v8_set>
	if (err) {
   1b902:	bb00      	cbnz	r0, 1b946 <thingy91_board_init+0x52>
	err = adp536x_buckbst_3v3_set();
   1b904:	f00c f91b 	bl	27b3e <adp536x_buckbst_3v3_set>
	if (err) {
   1b908:	b9e8      	cbnz	r0, 1b946 <thingy91_board_init+0x52>
	err = adp536x_buckbst_enable(true);
   1b90a:	2001      	movs	r0, #1
   1b90c:	f00c f91c 	bl	27b48 <adp536x_buckbst_enable>
	if (err) {
   1b910:	b9c8      	cbnz	r0, 1b946 <thingy91_board_init+0x52>
	err = adp536x_buck_discharge_set(true);
   1b912:	2001      	movs	r0, #1
   1b914:	f00c f90c 	bl	27b30 <adp536x_buck_discharge_set>
	if (err) {
   1b918:	b9a8      	cbnz	r0, 1b946 <thingy91_board_init+0x52>
	err = adp536x_vbus_current_set(ADP536X_VBUS_ILIM_500mA);
   1b91a:	2007      	movs	r0, #7
   1b91c:	f00c f8f1 	bl	27b02 <adp536x_vbus_current_set>
	if (err) {
   1b920:	b988      	cbnz	r0, 1b946 <thingy91_board_init+0x52>
	err = adp536x_charger_current_set(ADP536X_CHG_CURRENT_320mA);
   1b922:	201f      	movs	r0, #31
   1b924:	f00c f8e7 	bl	27af6 <adp536x_charger_current_set>
	if (err) {
   1b928:	b968      	cbnz	r0, 1b946 <thingy91_board_init+0x52>
	err = adp536x_oc_chg_current_set(ADP536X_OC_CHG_THRESHOLD_400mA);
   1b92a:	2007      	movs	r0, #7
   1b92c:	f00c f8f4 	bl	27b18 <adp536x_oc_chg_current_set>
	if (err) {
   1b930:	b948      	cbnz	r0, 1b946 <thingy91_board_init+0x52>
	err = adp536x_charging_enable(true);
   1b932:	2001      	movs	r0, #1
   1b934:	f00c f8eb 	bl	27b0e <adp536x_charging_enable>
	if (err) {
   1b938:	b928      	cbnz	r0, 1b946 <thingy91_board_init+0x52>
		LOG_ERR("power_mgmt_init failed with error: %d", err);
		return err;
	}

	return 0;
}
   1b93a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = adp536x_fg_set_mode(ADP566X_FG_ENABLED, ADP566X_FG_MODE_SLEEP);
   1b93e:	2101      	movs	r1, #1
   1b940:	4608      	mov	r0, r1
   1b942:	f00c b906 	b.w	27b52 <adp536x_fg_set_mode>
}
   1b946:	bd08      	pop	{r3, pc}
   1b948:	0002babc 	.word	0x0002babc

0001b94c <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   1b94c:	4602      	mov	r2, r0
   1b94e:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1b950:	4801      	ldr	r0, [pc, #4]	; (1b958 <k_mutex_lock.constprop.0.isra.0+0xc>)
   1b952:	f008 bf25 	b.w	247a0 <z_impl_k_mutex_lock>
   1b956:	bf00      	nop
   1b958:	2000c8fc 	.word	0x2000c8fc

0001b95c <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1b95c:	4801      	ldr	r0, [pc, #4]	; (1b964 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   1b95e:	f008 bf99 	b.w	24894 <z_impl_k_mutex_unlock>
   1b962:	bf00      	nop
   1b964:	2000c8fc 	.word	0x2000c8fc

0001b968 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   1b968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
   1b96a:	f04f 30ff 	mov.w	r0, #4294967295
   1b96e:	f04f 31ff 	mov.w	r1, #4294967295
   1b972:	f7ff ffeb 	bl	1b94c <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   1b976:	4c0c      	ldr	r4, [pc, #48]	; (1b9a8 <net_if_init+0x40>)
   1b978:	4e0c      	ldr	r6, [pc, #48]	; (1b9ac <net_if_init+0x44>)
   1b97a:	42b4      	cmp	r4, r6
   1b97c:	4627      	mov	r7, r4
   1b97e:	d303      	bcc.n	1b988 <net_if_init+0x20>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   1b980:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
   1b984:	f7ff bfea 	b.w	1b95c <k_mutex_unlock.constprop.0.isra.0>
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   1b988:	f854 0b04 	ldr.w	r0, [r4], #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   1b98c:	6803      	ldr	r3, [r0, #0]
   1b98e:	689d      	ldr	r5, [r3, #8]
	if (!api || !api->init) {
   1b990:	2d00      	cmp	r5, #0
   1b992:	d0f2      	beq.n	1b97a <net_if_init+0x12>
   1b994:	682b      	ldr	r3, [r5, #0]
   1b996:	2b00      	cmp	r3, #0
   1b998:	d0ef      	beq.n	1b97a <net_if_init+0x12>
	net_if_flag_test_and_set(iface, NET_IF_LOWER_UP);
   1b99a:	2109      	movs	r1, #9
   1b99c:	f00c f9da 	bl	27d54 <net_if_flag_test_and_set.isra.0>
	api->init(iface);
   1b9a0:	4638      	mov	r0, r7
   1b9a2:	682b      	ldr	r3, [r5, #0]
   1b9a4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1b9a6:	e7e8      	b.n	1b97a <net_if_init+0x12>
   1b9a8:	2000c998 	.word	0x2000c998
   1b9ac:	2000c99c 	.word	0x2000c99c

0001b9b0 <net_if_post_init>:

void net_if_post_init(void)
{
   1b9b0:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1b9b2:	4c07      	ldr	r4, [pc, #28]	; (1b9d0 <net_if_post_init+0x20>)
   1b9b4:	4d07      	ldr	r5, [pc, #28]	; (1b9d4 <net_if_post_init+0x24>)
   1b9b6:	42ac      	cmp	r4, r5
   1b9b8:	d300      	bcc.n	1b9bc <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   1b9ba:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1b9bc:	2103      	movs	r1, #3
   1b9be:	4620      	mov	r0, r4
   1b9c0:	f00c f974 	bl	27cac <net_if_flag_is_set>
   1b9c4:	b910      	cbnz	r0, 1b9cc <net_if_post_init+0x1c>
			net_if_up(iface);
   1b9c6:	4620      	mov	r0, r4
   1b9c8:	f00c f9d6 	bl	27d78 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1b9cc:	3404      	adds	r4, #4
   1b9ce:	e7f2      	b.n	1b9b6 <net_if_post_init+0x6>
   1b9d0:	2000c998 	.word	0x2000c998
   1b9d4:	2000c99c 	.word	0x2000c99c

0001b9d8 <http_parser_execute>:
}

size_t http_parser_execute(struct http_parser *parser,
			   const struct http_parser_settings *settings,
			   const char *data, size_t len)
{
   1b9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9dc:	b091      	sub	sp, #68	; 0x44
   1b9de:	9305      	str	r3, [sp, #20]
	const unsigned int lenient = parser->lenient_http_headers;
   1b9e0:	78c3      	ldrb	r3, [r0, #3]
{
   1b9e2:	4617      	mov	r7, r2
	const unsigned int lenient = parser->lenient_http_headers;
   1b9e4:	09db      	lsrs	r3, r3, #7
   1b9e6:	9306      	str	r3, [sp, #24]
	enum state p_state = (enum state) parser->state;
   1b9e8:	6803      	ldr	r3, [r0, #0]
{
   1b9ea:	4688      	mov	r8, r1
	enum state p_state = (enum state) parser->state;
   1b9ec:	f3c3 2286 	ubfx	r2, r3, #10, #7
   1b9f0:	4613      	mov	r3, r2
   1b9f2:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	const char *header_field_mark = 0;
   1b9f6:	2200      	movs	r2, #0
	const char *header_value_mark = 0;
   1b9f8:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
	const char *body_mark = 0;
   1b9fc:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
	const char *status_mark = 0;
   1ba00:	920e      	str	r2, [sp, #56]	; 0x38
	*parsed = 0;
   1ba02:	9209      	str	r2, [sp, #36]	; 0x24
	if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {
   1ba04:	7dc2      	ldrb	r2, [r0, #23]
{
   1ba06:	4604      	mov	r4, r0
	if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {
   1ba08:	0651      	lsls	r1, r2, #25
   1ba0a:	d109      	bne.n	1ba20 <http_parser_execute+0x48>
	if (len == 0) {
   1ba0c:	9a05      	ldr	r2, [sp, #20]
   1ba0e:	b9fa      	cbnz	r2, 1ba50 <http_parser_execute+0x78>
		switch (CURRENT_STATE()) {
   1ba10:	2b12      	cmp	r3, #18
   1ba12:	d809      	bhi.n	1ba28 <http_parser_execute+0x50>
   1ba14:	b1b3      	cbz	r3, 1ba44 <http_parser_execute+0x6c>
   1ba16:	4abc      	ldr	r2, [pc, #752]	; (1bd08 <http_parser_execute+0x330>)
   1ba18:	fa22 f303 	lsr.w	r3, r2, r3
   1ba1c:	07da      	lsls	r2, r3, #31
   1ba1e:	d511      	bpl.n	1ba44 <http_parser_execute+0x6c>
	size_t parsed;

	parser_execute(parser, settings, data, len, &parsed);
	return parsed;
   1ba20:	9809      	ldr	r0, [sp, #36]	; 0x24
}
   1ba22:	b011      	add	sp, #68	; 0x44
   1ba24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (CURRENT_STATE()) {
   1ba28:	2b3d      	cmp	r3, #61	; 0x3d
   1ba2a:	d10b      	bne.n	1ba44 <http_parser_execute+0x6c>
			cb_notify(parser, &p_state,
   1ba2c:	9b05      	ldr	r3, [sp, #20]
   1ba2e:	f10d 0123 	add.w	r1, sp, #35	; 0x23
   1ba32:	9301      	str	r3, [sp, #4]
   1ba34:	ab09      	add	r3, sp, #36	; 0x24
   1ba36:	9300      	str	r3, [sp, #0]
   1ba38:	f8d8 201c 	ldr.w	r2, [r8, #28]
   1ba3c:	2307      	movs	r3, #7
   1ba3e:	f00c f9c3 	bl	27dc8 <cb_notify>
			return 0;
   1ba42:	e7ed      	b.n	1ba20 <http_parser_execute+0x48>
			SET_ERRNO(HPE_INVALID_EOF_STATE);
   1ba44:	220b      	movs	r2, #11
   1ba46:	7de3      	ldrb	r3, [r4, #23]
   1ba48:	f362 0306 	bfi	r3, r2, #0, #7
   1ba4c:	75e3      	strb	r3, [r4, #23]
			return 1;
   1ba4e:	e7e7      	b.n	1ba20 <http_parser_execute+0x48>
	if (CURRENT_STATE() == s_header_field) {
   1ba50:	2b2b      	cmp	r3, #43	; 0x2b
   1ba52:	d105      	bne.n	1ba60 <http_parser_execute+0x88>
		header_field_mark = data;
   1ba54:	970a      	str	r7, [sp, #40]	; 0x28
	for (p = data; p != data + len; p++) {
   1ba56:	9b05      	ldr	r3, [sp, #20]
   1ba58:	463e      	mov	r6, r7
   1ba5a:	eb07 0b03 	add.w	fp, r7, r3
   1ba5e:	e18c      	b.n	1bd7a <http_parser_execute+0x3a2>
	if (CURRENT_STATE() == s_header_value) {
   1ba60:	2b30      	cmp	r3, #48	; 0x30
   1ba62:	d101      	bne.n	1ba68 <http_parser_execute+0x90>
		header_value_mark = data;
   1ba64:	970b      	str	r7, [sp, #44]	; 0x2c
	switch (CURRENT_STATE()) {
   1ba66:	e7f6      	b.n	1ba56 <http_parser_execute+0x7e>
   1ba68:	2b10      	cmp	r3, #16
   1ba6a:	d006      	beq.n	1ba7a <http_parser_execute+0xa2>
   1ba6c:	336b      	adds	r3, #107	; 0x6b
   1ba6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ba72:	2b0a      	cmp	r3, #10
   1ba74:	d8ef      	bhi.n	1ba56 <http_parser_execute+0x7e>
		url_mark = data;
   1ba76:	970c      	str	r7, [sp, #48]	; 0x30
		break;
   1ba78:	e7ed      	b.n	1ba56 <http_parser_execute+0x7e>
		status_mark = data;
   1ba7a:	970e      	str	r7, [sp, #56]	; 0x38
		break;
   1ba7c:	e7eb      	b.n	1ba56 <http_parser_execute+0x7e>
		if (PARSING_HEADER(CURRENT_STATE())) {
   1ba7e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
		ch = *p;
   1ba82:	7835      	ldrb	r5, [r6, #0]
		if (PARSING_HEADER(CURRENT_STATE())) {
   1ba84:	2b38      	cmp	r3, #56	; 0x38
   1ba86:	d84f      	bhi.n	1bb28 <http_parser_execute+0x150>
	parser->nread += bytes;
   1ba88:	6863      	ldr	r3, [r4, #4]
   1ba8a:	3301      	adds	r3, #1
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   1ba8c:	f5b3 3fa0 	cmp.w	r3, #81920	; 0x14000
	parser->nread += bytes;
   1ba90:	6063      	str	r3, [r4, #4]
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   1ba92:	d949      	bls.n	1bb28 <http_parser_execute+0x150>
		parser->http_errno = HPE_HEADER_OVERFLOW;
   1ba94:	220c      	movs	r2, #12
   1ba96:	7de3      	ldrb	r3, [r4, #23]
			SET_ERRNO(HPE_INVALID_INTERNAL_STATE);
   1ba98:	f362 0306 	bfi	r3, r2, #0, #7
   1ba9c:	75e3      	strb	r3, [r4, #23]
			goto error;
   1ba9e:	f000 be49 	b.w	1c734 <http_parser_execute+0xd5c>
   1baa2:	4631      	mov	r1, r6
				c = TOKEN(ch);
   1baa4:	4899      	ldr	r0, [pc, #612]	; (1bd0c <http_parser_execute+0x334>)
			for (; p != data + len; p++) {
   1baa6:	458b      	cmp	fp, r1
   1baa8:	4689      	mov	r9, r1
   1baaa:	d008      	beq.n	1babe <http_parser_execute+0xe6>
				ch = *p;
   1baac:	f811 5b01 	ldrb.w	r5, [r1], #1
				c = TOKEN(ch);
   1bab0:	2d20      	cmp	r5, #32
   1bab2:	f000 841d 	beq.w	1c2f0 <http_parser_execute+0x918>
   1bab6:	5d43      	ldrb	r3, [r0, r5]
				if (!c) {
   1bab8:	2b00      	cmp	r3, #0
   1baba:	f040 841a 	bne.w	1c2f2 <http_parser_execute+0x91a>
	parser->nread += bytes;
   1babe:	6863      	ldr	r3, [r4, #4]
			rc = count_header_size(parser, p - start);
   1bac0:	eba9 0606 	sub.w	r6, r9, r6
	parser->nread += bytes;
   1bac4:	441e      	add	r6, r3
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   1bac6:	f5b6 3fa0 	cmp.w	r6, #81920	; 0x14000
	parser->nread += bytes;
   1baca:	6066      	str	r6, [r4, #4]
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   1bacc:	f201 8135 	bhi.w	1cd3a <http_parser_execute+0x1362>
			if (p == data + len) {
   1bad0:	45cb      	cmp	fp, r9
   1bad2:	f040 84da 	bne.w	1c48a <http_parser_execute+0xab2>
				--p;
   1bad6:	f10b 36ff 	add.w	r6, fp, #4294967295
   1bada:	e14d      	b.n	1bd78 <http_parser_execute+0x3a0>
			if (LIKELY(ch == CR || ch == LF)) {
   1badc:	2d0d      	cmp	r5, #13
   1bade:	f000 814b 	beq.w	1bd78 <http_parser_execute+0x3a0>
   1bae2:	2d0a      	cmp	r5, #10
   1bae4:	f000 8148 	beq.w	1bd78 <http_parser_execute+0x3a0>
			SET_ERRNO(HPE_CLOSED_CONNECTION);
   1bae8:	220d      	movs	r2, #13
   1baea:	7de3      	ldrb	r3, [r4, #23]
   1baec:	e7d4      	b.n	1ba98 <http_parser_execute+0xc0>
			if (ch == CR || ch == LF) {
   1baee:	2d0d      	cmp	r5, #13
   1baf0:	f000 8142 	beq.w	1bd78 <http_parser_execute+0x3a0>
   1baf4:	2d0a      	cmp	r5, #10
   1baf6:	f000 813f 	beq.w	1bd78 <http_parser_execute+0x3a0>
			parser->flags = 0U;
   1bafa:	8823      	ldrh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   1bafc:	f04f 32ff 	mov.w	r2, #4294967295
			parser->flags = 0U;
   1bb00:	f36f 0389 	bfc	r3, #2, #8
   1bb04:	8023      	strh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   1bb06:	f04f 33ff 	mov.w	r3, #4294967295
			if (ch == 'H') {
   1bb0a:	2d48      	cmp	r5, #72	; 0x48
			parser->content_length = ULLONG_MAX;
   1bb0c:	e9c4 2302 	strd	r2, r3, [r4, #8]
			if (ch == 'H') {
   1bb10:	d103      	bne.n	1bb1a <http_parser_execute+0x142>
				UPDATE_STATE(s_res_or_resp_H);
   1bb12:	2303      	movs	r3, #3
			UPDATE_STATE(s_req_method);
   1bb14:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   1bb18:	e0b8      	b.n	1bc8c <http_parser_execute+0x2b4>
				parser->type = HTTP_REQUEST;
   1bb1a:	7823      	ldrb	r3, [r4, #0]
   1bb1c:	f36f 0301 	bfc	r3, #0, #2
   1bb20:	7023      	strb	r3, [r4, #0]
				UPDATE_STATE(s_start_req);
   1bb22:	2312      	movs	r3, #18
				UPDATE_STATE(s_headers_almost_done);
   1bb24:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		switch (CURRENT_STATE()) {
   1bb28:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1bb2c:	1e43      	subs	r3, r0, #1
   1bb2e:	2b3d      	cmp	r3, #61	; 0x3d
   1bb30:	f201 80ff 	bhi.w	1cd32 <http_parser_execute+0x135a>
   1bb34:	a201      	add	r2, pc, #4	; (adr r2, 1bb3c <http_parser_execute+0x164>)
   1bb36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1bb3a:	bf00      	nop
   1bb3c:	0001badd 	.word	0x0001badd
   1bb40:	0001baef 	.word	0x0001baef
   1bb44:	0001bc35 	.word	0x0001bc35
   1bb48:	0001bc6d 	.word	0x0001bc6d
   1bb4c:	0001bc43 	.word	0x0001bc43
   1bb50:	0001bcad 	.word	0x0001bcad
   1bb54:	0001bcb1 	.word	0x0001bcb1
   1bb58:	0001bcb5 	.word	0x0001bcb5
   1bb5c:	0001bcb9 	.word	0x0001bcb9
   1bb60:	0001bccd 	.word	0x0001bccd
   1bb64:	0001bcd7 	.word	0x0001bcd7
   1bb68:	0001bce5 	.word	0x0001bce5
   1bb6c:	0001bcef 	.word	0x0001bcef
   1bb70:	0001bd11 	.word	0x0001bd11
   1bb74:	0001be57 	.word	0x0001be57
   1bb78:	0001bebb 	.word	0x0001bebb
   1bb7c:	0001bd5f 	.word	0x0001bd5f
   1bb80:	0001befb 	.word	0x0001befb
   1bb84:	0001bfd1 	.word	0x0001bfd1
   1bb88:	0001c101 	.word	0x0001c101
   1bb8c:	0001c12f 	.word	0x0001c12f
   1bb90:	0001c12f 	.word	0x0001c12f
   1bb94:	0001c12f 	.word	0x0001c12f
   1bb98:	0001c12f 	.word	0x0001c12f
   1bb9c:	0001c149 	.word	0x0001c149
   1bba0:	0001c149 	.word	0x0001c149
   1bba4:	0001c149 	.word	0x0001c149
   1bba8:	0001c149 	.word	0x0001c149
   1bbac:	0001c149 	.word	0x0001c149
   1bbb0:	0001c149 	.word	0x0001c149
   1bbb4:	0001c149 	.word	0x0001c149
   1bbb8:	0001c18f 	.word	0x0001c18f
   1bbbc:	0001c19f 	.word	0x0001c19f
   1bbc0:	0001c1a3 	.word	0x0001c1a3
   1bbc4:	0001c1a7 	.word	0x0001c1a7
   1bbc8:	0001c1ab 	.word	0x0001c1ab
   1bbcc:	0001c1af 	.word	0x0001c1af
   1bbd0:	0001c1c1 	.word	0x0001c1c1
   1bbd4:	0001c1ed 	.word	0x0001c1ed
   1bbd8:	0001c1fd 	.word	0x0001c1fd
   1bbdc:	0001c227 	.word	0x0001c227
   1bbe0:	0001c233 	.word	0x0001c233
   1bbe4:	0001baa3 	.word	0x0001baa3
   1bbe8:	0001c4c9 	.word	0x0001c4c9
   1bbec:	0001c4e3 	.word	0x0001c4e3
   1bbf0:	0001c91b 	.word	0x0001c91b
   1bbf4:	0001c4e9 	.word	0x0001c4e9
   1bbf8:	0001c59b 	.word	0x0001c59b
   1bbfc:	0001c8d5 	.word	0x0001c8d5
   1bc00:	0001c8c9 	.word	0x0001c8c9
   1bc04:	0001cc17 	.word	0x0001cc17
   1bc08:	0001cc33 	.word	0x0001cc33
   1bc0c:	0001cc79 	.word	0x0001cc79
   1bc10:	0001cc81 	.word	0x0001cc81
   1bc14:	0001c98b 	.word	0x0001c98b
   1bc18:	0001ca4f 	.word	0x0001ca4f
   1bc1c:	0001ccb3 	.word	0x0001ccb3
   1bc20:	0001cced 	.word	0x0001cced
   1bc24:	0001cd15 	.word	0x0001cd15
   1bc28:	0001cb63 	.word	0x0001cb63
   1bc2c:	0001cbbb 	.word	0x0001cbbb
   1bc30:	0001cbcb 	.word	0x0001cbcb
			if (ch == 'T') {
   1bc34:	2d54      	cmp	r5, #84	; 0x54
   1bc36:	d106      	bne.n	1bc46 <http_parser_execute+0x26e>
				parser->type = HTTP_RESPONSE;
   1bc38:	2201      	movs	r2, #1
   1bc3a:	7823      	ldrb	r3, [r4, #0]
   1bc3c:	f362 0301 	bfi	r3, r2, #0, #2
   1bc40:	7023      	strb	r3, [r4, #0]
			UPDATE_STATE(s_res_HT);
   1bc42:	2306      	movs	r3, #6
   1bc44:	e00f      	b.n	1bc66 <http_parser_execute+0x28e>
				if (UNLIKELY(ch != 'E')) {
   1bc46:	2d45      	cmp	r5, #69	; 0x45
   1bc48:	d002      	beq.n	1bc50 <http_parser_execute+0x278>
				SET_ERRNO(HPE_INVALID_CONSTANT);
   1bc4a:	221c      	movs	r2, #28
   1bc4c:	7de3      	ldrb	r3, [r4, #23]
   1bc4e:	e723      	b.n	1ba98 <http_parser_execute+0xc0>
				parser->method = HTTP_HEAD;
   1bc50:	2302      	movs	r3, #2
   1bc52:	75a3      	strb	r3, [r4, #22]
				parser->type = HTTP_REQUEST;
   1bc54:	6823      	ldr	r3, [r4, #0]
   1bc56:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
   1bc5a:	f023 0303 	bic.w	r3, r3, #3
   1bc5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1bc62:	6023      	str	r3, [r4, #0]
   1bc64:	2313      	movs	r3, #19
				UPDATE_STATE(s_chunk_size_almost_done);
   1bc66:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				break;
   1bc6a:	e085      	b.n	1bd78 <http_parser_execute+0x3a0>
			parser->flags = 0U;
   1bc6c:	8823      	ldrh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   1bc6e:	f04f 32ff 	mov.w	r2, #4294967295
			parser->flags = 0U;
   1bc72:	f36f 0389 	bfc	r3, #2, #8
   1bc76:	8023      	strh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   1bc78:	f04f 33ff 	mov.w	r3, #4294967295
   1bc7c:	2d0d      	cmp	r5, #13
   1bc7e:	e9c4 2302 	strd	r2, r3, [r4, #8]
			switch (ch) {
   1bc82:	d003      	beq.n	1bc8c <http_parser_execute+0x2b4>
   1bc84:	2d48      	cmp	r5, #72	; 0x48
   1bc86:	d00f      	beq.n	1bca8 <http_parser_execute+0x2d0>
   1bc88:	2d0a      	cmp	r5, #10
   1bc8a:	d1de      	bne.n	1bc4a <http_parser_execute+0x272>
				       p - data + 1);
   1bc8c:	1bf3      	subs	r3, r6, r7
   1bc8e:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
   1bc90:	9301      	str	r3, [sp, #4]
   1bc92:	ab09      	add	r3, sp, #36	; 0x24
   1bc94:	9300      	str	r3, [sp, #0]
   1bc96:	2301      	movs	r3, #1
   1bc98:	f8d8 2000 	ldr.w	r2, [r8]
			rc = cb_notify(parser, &p_state,
   1bc9c:	4620      	mov	r0, r4
   1bc9e:	f10d 0123 	add.w	r1, sp, #35	; 0x23
   1bca2:	f00c f891 	bl	27dc8 <cb_notify>
   1bca6:	e11f      	b.n	1bee8 <http_parser_execute+0x510>
				UPDATE_STATE(s_res_H);
   1bca8:	2305      	movs	r3, #5
   1bcaa:	e733      	b.n	1bb14 <http_parser_execute+0x13c>
			UPDATE_STATE(s_res_HTT);
   1bcac:	2307      	movs	r3, #7
   1bcae:	e7da      	b.n	1bc66 <http_parser_execute+0x28e>
			UPDATE_STATE(s_res_HTTP);
   1bcb0:	2308      	movs	r3, #8
   1bcb2:	e7d8      	b.n	1bc66 <http_parser_execute+0x28e>
			UPDATE_STATE(s_res_first_http_major);
   1bcb4:	2309      	movs	r3, #9
   1bcb6:	e7d6      	b.n	1bc66 <http_parser_execute+0x28e>
			if (UNLIKELY(ch < '0' || ch > '9')) {
   1bcb8:	3d30      	subs	r5, #48	; 0x30
   1bcba:	b2eb      	uxtb	r3, r5
   1bcbc:	2b09      	cmp	r3, #9
   1bcbe:	d902      	bls.n	1bcc6 <http_parser_execute+0x2ee>
				SET_ERRNO(HPE_INVALID_VERSION);
   1bcc0:	220e      	movs	r2, #14
   1bcc2:	7de3      	ldrb	r3, [r4, #23]
   1bcc4:	e6e8      	b.n	1ba98 <http_parser_execute+0xc0>
			UPDATE_STATE(s_res_http_major);
   1bcc6:	230a      	movs	r3, #10
			parser->http_major = ch - '0';
   1bcc8:	8225      	strh	r5, [r4, #16]
			UPDATE_STATE(s_res_http_major);
   1bcca:	e7cc      	b.n	1bc66 <http_parser_execute+0x28e>
			if (ch == '.') {
   1bccc:	2d2e      	cmp	r5, #46	; 0x2e
   1bcce:	f040 827b 	bne.w	1c1c8 <http_parser_execute+0x7f0>
				UPDATE_STATE(s_res_first_http_minor);
   1bcd2:	230b      	movs	r3, #11
   1bcd4:	e7c7      	b.n	1bc66 <http_parser_execute+0x28e>
			if (UNLIKELY(!IS_NUM(ch))) {
   1bcd6:	3d30      	subs	r5, #48	; 0x30
   1bcd8:	b2eb      	uxtb	r3, r5
   1bcda:	2b09      	cmp	r3, #9
   1bcdc:	d8f0      	bhi.n	1bcc0 <http_parser_execute+0x2e8>
			UPDATE_STATE(s_res_http_minor);
   1bcde:	230c      	movs	r3, #12
			parser->http_minor = ch - '0';
   1bce0:	8265      	strh	r5, [r4, #18]
			UPDATE_STATE(s_res_http_minor);
   1bce2:	e7c0      	b.n	1bc66 <http_parser_execute+0x28e>
			if (ch == ' ') {
   1bce4:	2d20      	cmp	r5, #32
   1bce6:	f040 8290 	bne.w	1c20a <http_parser_execute+0x832>
				UPDATE_STATE(s_res_first_status_code);
   1bcea:	230d      	movs	r3, #13
   1bcec:	e7bb      	b.n	1bc66 <http_parser_execute+0x28e>
			if (!IS_NUM(ch)) {
   1bcee:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   1bcf2:	b2da      	uxtb	r2, r3
   1bcf4:	2a09      	cmp	r2, #9
   1bcf6:	d904      	bls.n	1bd02 <http_parser_execute+0x32a>
				if (ch == ' ') {
   1bcf8:	2d20      	cmp	r5, #32
   1bcfa:	d03d      	beq.n	1bd78 <http_parser_execute+0x3a0>
				SET_ERRNO(HPE_INVALID_STATUS);
   1bcfc:	220f      	movs	r2, #15
   1bcfe:	7de3      	ldrb	r3, [r4, #23]
   1bd00:	e6ca      	b.n	1ba98 <http_parser_execute+0xc0>
			parser->status_code = ch - '0';
   1bd02:	82a3      	strh	r3, [r4, #20]
			UPDATE_STATE(s_res_status_code);
   1bd04:	230e      	movs	r3, #14
   1bd06:	e7ae      	b.n	1bc66 <http_parser_execute+0x28e>
   1bd08:	00040016 	.word	0x00040016
   1bd0c:	0002dab1 	.word	0x0002dab1
			if (!IS_NUM(ch)) {
   1bd10:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   1bd14:	2b09      	cmp	r3, #9
   1bd16:	d924      	bls.n	1bd62 <http_parser_execute+0x38a>
				if ((ch == CR) || (ch == LF)) {
   1bd18:	2d0d      	cmp	r5, #13
   1bd1a:	d002      	beq.n	1bd22 <http_parser_execute+0x34a>
   1bd1c:	2d0a      	cmp	r5, #10
   1bd1e:	f041 8015 	bne.w	1cd4c <http_parser_execute+0x1374>
					const char *no_status_txt = "";
   1bd22:	4bb8      	ldr	r3, [pc, #736]	; (1c004 <http_parser_execute+0x62c>)
					rc = cb_data(parser,
   1bd24:	2208      	movs	r2, #8
					const char *no_status_txt = "";
   1bd26:	930f      	str	r3, [sp, #60]	; 0x3c
					rc = cb_data(parser,
   1bd28:	2300      	movs	r3, #0
   1bd2a:	9303      	str	r3, [sp, #12]
   1bd2c:	ab0f      	add	r3, sp, #60	; 0x3c
   1bd2e:	9302      	str	r3, [sp, #8]
					     p - data + 1, &no_status_txt, 0);
   1bd30:	1bf3      	subs	r3, r6, r7
   1bd32:	3301      	adds	r3, #1
					rc = cb_data(parser,
   1bd34:	9301      	str	r3, [sp, #4]
   1bd36:	ab09      	add	r3, sp, #36	; 0x24
   1bd38:	9300      	str	r3, [sp, #0]
   1bd3a:	4620      	mov	r0, r4
   1bd3c:	f8d8 1008 	ldr.w	r1, [r8, #8]
   1bd40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1bd44:	f00c f861 	bl	27e0a <cb_data>
					if (rc != 0) {
   1bd48:	2800      	cmp	r0, #0
   1bd4a:	f47f ae69 	bne.w	1ba20 <http_parser_execute+0x48>
				switch (ch) {
   1bd4e:	2d0d      	cmp	r5, #13
   1bd50:	f000 80b1 	beq.w	1beb6 <http_parser_execute+0x4de>
   1bd54:	2d20      	cmp	r5, #32
   1bd56:	f000 87fc 	beq.w	1cd52 <http_parser_execute+0x137a>
   1bd5a:	2d0a      	cmp	r5, #10
   1bd5c:	d1ce      	bne.n	1bcfc <http_parser_execute+0x324>
			UPDATE_STATE(s_header_field_start);
   1bd5e:	232a      	movs	r3, #42	; 0x2a
   1bd60:	e781      	b.n	1bc66 <http_parser_execute+0x28e>
			parser->status_code *= 10U;
   1bd62:	8aa3      	ldrh	r3, [r4, #20]
   1bd64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
			parser->status_code += ch - '0';
   1bd68:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1bd6c:	3b30      	subs	r3, #48	; 0x30
   1bd6e:	b29b      	uxth	r3, r3
			if (UNLIKELY(parser->status_code > 999)) {
   1bd70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
			parser->status_code += ch - '0';
   1bd74:	82a3      	strh	r3, [r4, #20]
			if (UNLIKELY(parser->status_code > 999)) {
   1bd76:	d2c1      	bcs.n	1bcfc <http_parser_execute+0x324>
	for (p = data; p != data + len; p++) {
   1bd78:	3601      	adds	r6, #1
   1bd7a:	45b3      	cmp	fp, r6
   1bd7c:	f47f ae7f 	bne.w	1ba7e <http_parser_execute+0xa6>
		     p - header_field_mark);
   1bd80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		     &p_state, parsed, p - data, &header_field_mark,
   1bd82:	ebab 0707 	sub.w	r7, fp, r7
		     p - header_field_mark);
   1bd86:	ebab 0303 	sub.w	r3, fp, r3
	rc = cb_data(parser, settings->on_header_field, HPE_CB_header_field,
   1bd8a:	9303      	str	r3, [sp, #12]
   1bd8c:	ab0a      	add	r3, sp, #40	; 0x28
   1bd8e:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1bd92:	ad09      	add	r5, sp, #36	; 0x24
   1bd94:	9500      	str	r5, [sp, #0]
   1bd96:	2203      	movs	r2, #3
   1bd98:	4620      	mov	r0, r4
   1bd9a:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1bd9e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1bda2:	f00c f832 	bl	27e0a <cb_data>
	if (rc != 0) {
   1bda6:	2800      	cmp	r0, #0
   1bda8:	f47f ae3a 	bne.w	1ba20 <http_parser_execute+0x48>
		     p - header_value_mark);
   1bdac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	rc = cb_data(parser, settings->on_header_value, HPE_CB_header_value,
   1bdae:	9500      	str	r5, [sp, #0]
		     p - header_value_mark);
   1bdb0:	ebab 0303 	sub.w	r3, fp, r3
	rc = cb_data(parser, settings->on_header_value, HPE_CB_header_value,
   1bdb4:	9303      	str	r3, [sp, #12]
   1bdb6:	ab0b      	add	r3, sp, #44	; 0x2c
   1bdb8:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1bdbc:	2204      	movs	r2, #4
   1bdbe:	4620      	mov	r0, r4
   1bdc0:	f8d8 1010 	ldr.w	r1, [r8, #16]
   1bdc4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1bdc8:	f00c f81f 	bl	27e0a <cb_data>
	if (rc != 0) {
   1bdcc:	2800      	cmp	r0, #0
   1bdce:	f47f ae27 	bne.w	1ba20 <http_parser_execute+0x48>
		     p - data, &url_mark, p - url_mark);
   1bdd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	rc = cb_data(parser, settings->on_url, HPE_CB_url, &p_state, parsed,
   1bdd4:	9500      	str	r5, [sp, #0]
		     p - data, &url_mark, p - url_mark);
   1bdd6:	ebab 0303 	sub.w	r3, fp, r3
	rc = cb_data(parser, settings->on_url, HPE_CB_url, &p_state, parsed,
   1bdda:	9303      	str	r3, [sp, #12]
   1bddc:	ab0c      	add	r3, sp, #48	; 0x30
   1bdde:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1bde2:	2202      	movs	r2, #2
   1bde4:	4620      	mov	r0, r4
   1bde6:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1bdea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1bdee:	f00c f80c 	bl	27e0a <cb_data>
	if (rc != 0) {
   1bdf2:	2800      	cmp	r0, #0
   1bdf4:	f47f ae14 	bne.w	1ba20 <http_parser_execute+0x48>
		     p - data, &body_mark, p - body_mark);
   1bdf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	rc = cb_data(parser, settings->on_body, HPE_CB_body, &p_state, parsed,
   1bdfa:	9500      	str	r5, [sp, #0]
		     p - data, &body_mark, p - body_mark);
   1bdfc:	ebab 0303 	sub.w	r3, fp, r3
	rc = cb_data(parser, settings->on_body, HPE_CB_body, &p_state, parsed,
   1be00:	9303      	str	r3, [sp, #12]
   1be02:	ab0d      	add	r3, sp, #52	; 0x34
   1be04:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1be08:	2206      	movs	r2, #6
   1be0a:	4620      	mov	r0, r4
   1be0c:	f8d8 1018 	ldr.w	r1, [r8, #24]
   1be10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1be14:	f00b fff9 	bl	27e0a <cb_data>
	if (rc != 0) {
   1be18:	2800      	cmp	r0, #0
   1be1a:	f47f ae01 	bne.w	1ba20 <http_parser_execute+0x48>
		     parsed, p - data, &status_mark, p - status_mark);
   1be1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	rc = cb_data(parser, settings->on_status, HPE_CB_status, &p_state,
   1be20:	9500      	str	r5, [sp, #0]
		     parsed, p - data, &status_mark, p - status_mark);
   1be22:	ebab 0303 	sub.w	r3, fp, r3
	rc = cb_data(parser, settings->on_status, HPE_CB_status, &p_state,
   1be26:	9303      	str	r3, [sp, #12]
   1be28:	ab0e      	add	r3, sp, #56	; 0x38
   1be2a:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1be2e:	2208      	movs	r2, #8
   1be30:	4620      	mov	r0, r4
   1be32:	f8d8 1008 	ldr.w	r1, [r8, #8]
   1be36:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1be3a:	f00b ffe6 	bl	27e0a <cb_data>
	if (rc != 0) {
   1be3e:	2800      	cmp	r0, #0
   1be40:	f47f adee 	bne.w	1ba20 <http_parser_execute+0x48>
	parser->state = CURRENT_STATE();
   1be44:	6823      	ldr	r3, [r4, #0]
   1be46:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   1be4a:	f362 2390 	bfi	r3, r2, #10, #7
   1be4e:	6023      	str	r3, [r4, #0]
	*parsed = len;
   1be50:	9b05      	ldr	r3, [sp, #20]
   1be52:	9309      	str	r3, [sp, #36]	; 0x24
	return 0;
   1be54:	e5e4      	b.n	1ba20 <http_parser_execute+0x48>
			if (!status_mark && ((ch == CR) || (ch == LF))) {
   1be56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1be58:	bb03      	cbnz	r3, 1be9c <http_parser_execute+0x4c4>
   1be5a:	2d0d      	cmp	r5, #13
   1be5c:	d001      	beq.n	1be62 <http_parser_execute+0x48a>
   1be5e:	2d0a      	cmp	r5, #10
   1be60:	d11a      	bne.n	1be98 <http_parser_execute+0x4c0>
				const char *no_status_txt = "";
   1be62:	4b68      	ldr	r3, [pc, #416]	; (1c004 <http_parser_execute+0x62c>)
				rc = cb_data(parser,
   1be64:	2208      	movs	r2, #8
				const char *no_status_txt = "";
   1be66:	930f      	str	r3, [sp, #60]	; 0x3c
				rc = cb_data(parser,
   1be68:	2300      	movs	r3, #0
   1be6a:	9303      	str	r3, [sp, #12]
   1be6c:	ab0f      	add	r3, sp, #60	; 0x3c
   1be6e:	9302      	str	r3, [sp, #8]
					p - data + 1, &no_status_txt, 0);
   1be70:	1bf3      	subs	r3, r6, r7
   1be72:	3301      	adds	r3, #1
				rc = cb_data(parser,
   1be74:	9301      	str	r3, [sp, #4]
   1be76:	ab09      	add	r3, sp, #36	; 0x24
   1be78:	9300      	str	r3, [sp, #0]
   1be7a:	4620      	mov	r0, r4
   1be7c:	f8d8 1008 	ldr.w	r1, [r8, #8]
   1be80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1be84:	f00b ffc1 	bl	27e0a <cb_data>
				if (rc != 0) {
   1be88:	2800      	cmp	r0, #0
   1be8a:	f47f adc9 	bne.w	1ba20 <http_parser_execute+0x48>
			if (ch == CR) {
   1be8e:	2d0d      	cmp	r5, #13
   1be90:	d011      	beq.n	1beb6 <http_parser_execute+0x4de>
			if (ch == LF) {
   1be92:	2d0a      	cmp	r5, #10
   1be94:	f43f af63 	beq.w	1bd5e <http_parser_execute+0x386>
			MARK(status);
   1be98:	960e      	str	r6, [sp, #56]	; 0x38
   1be9a:	e004      	b.n	1bea6 <http_parser_execute+0x4ce>
			if (ch == CR) {
   1be9c:	2d0d      	cmp	r5, #13
   1be9e:	d00a      	beq.n	1beb6 <http_parser_execute+0x4de>
			if (ch == LF) {
   1bea0:	2d0a      	cmp	r5, #10
   1bea2:	f43f af5c 	beq.w	1bd5e <http_parser_execute+0x386>
			UPDATE_STATE(s_res_status);
   1bea6:	2310      	movs	r3, #16
   1bea8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			parser->index = 0U;
   1beac:	78e3      	ldrb	r3, [r4, #3]
   1beae:	f36f 0306 	bfc	r3, #0, #7
   1beb2:	70e3      	strb	r3, [r4, #3]
			break;
   1beb4:	e760      	b.n	1bd78 <http_parser_execute+0x3a0>
				UPDATE_STATE(s_res_line_almost_done);
   1beb6:	2311      	movs	r3, #17
   1beb8:	e6d5      	b.n	1bc66 <http_parser_execute+0x28e>
			if (ch == CR) {
   1beba:	2d0d      	cmp	r5, #13
   1bebc:	d118      	bne.n	1bef0 <http_parser_execute+0x518>
				UPDATE_STATE(s_res_line_almost_done);
   1bebe:	2311      	movs	r3, #17
				rc = cb_data(parser, settings->on_status,
   1bec0:	2208      	movs	r2, #8
				UPDATE_STATE(s_header_field_start);
   1bec2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
					     p - status_mark);
   1bec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bec8:	1af3      	subs	r3, r6, r3
				rc = cb_data(parser, settings->on_status,
   1beca:	9303      	str	r3, [sp, #12]
   1becc:	ab0e      	add	r3, sp, #56	; 0x38
   1bece:	9302      	str	r3, [sp, #8]
					     p - data + 1, &status_mark,
   1bed0:	1bf3      	subs	r3, r6, r7
   1bed2:	3301      	adds	r3, #1
				rc = cb_data(parser, settings->on_status,
   1bed4:	9301      	str	r3, [sp, #4]
   1bed6:	ab09      	add	r3, sp, #36	; 0x24
   1bed8:	9300      	str	r3, [sp, #0]
   1beda:	f8d8 1008 	ldr.w	r1, [r8, #8]
   1bede:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1bee2:	4620      	mov	r0, r4
   1bee4:	f00b ff91 	bl	27e0a <cb_data>
			if (rc != 0) {
   1bee8:	2800      	cmp	r0, #0
   1beea:	f43f af45 	beq.w	1bd78 <http_parser_execute+0x3a0>
   1beee:	e597      	b.n	1ba20 <http_parser_execute+0x48>
			if (ch == LF) {
   1bef0:	2d0a      	cmp	r5, #10
   1bef2:	f47f af41 	bne.w	1bd78 <http_parser_execute+0x3a0>
				UPDATE_STATE(s_header_field_start);
   1bef6:	232a      	movs	r3, #42	; 0x2a
   1bef8:	e7e2      	b.n	1bec0 <http_parser_execute+0x4e8>
			if (ch == CR || ch == LF) {
   1befa:	2d0d      	cmp	r5, #13
   1befc:	f43f af3c 	beq.w	1bd78 <http_parser_execute+0x3a0>
   1bf00:	2d0a      	cmp	r5, #10
   1bf02:	f43f af39 	beq.w	1bd78 <http_parser_execute+0x3a0>
			parser->flags = 0U;
   1bf06:	8823      	ldrh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   1bf08:	f04f 32ff 	mov.w	r2, #4294967295
			parser->flags = 0U;
   1bf0c:	f36f 0389 	bfc	r3, #2, #8
   1bf10:	8023      	strh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   1bf12:	f04f 33ff 	mov.w	r3, #4294967295
   1bf16:	e9c4 2302 	strd	r2, r3, [r4, #8]
			if (UNLIKELY(!IS_ALPHA(ch))) {
   1bf1a:	f045 0320 	orr.w	r3, r5, #32
   1bf1e:	3b61      	subs	r3, #97	; 0x61
   1bf20:	2b19      	cmp	r3, #25
   1bf22:	d902      	bls.n	1bf2a <http_parser_execute+0x552>
				SET_ERRNO(HPE_INVALID_METHOD);
   1bf24:	2210      	movs	r2, #16
   1bf26:	7de3      	ldrb	r3, [r4, #23]
   1bf28:	e5b6      	b.n	1ba98 <http_parser_execute+0xc0>
			parser->method = (enum http_method) 0;
   1bf2a:	2300      	movs	r3, #0
   1bf2c:	75a3      	strb	r3, [r4, #22]
			parser->index = 1U;
   1bf2e:	2301      	movs	r3, #1
   1bf30:	78e2      	ldrb	r2, [r4, #3]
   1bf32:	3d41      	subs	r5, #65	; 0x41
   1bf34:	f363 0206 	bfi	r2, r3, #0, #7
   1bf38:	70e2      	strb	r2, [r4, #3]
			switch (ch) {
   1bf3a:	2d14      	cmp	r5, #20
   1bf3c:	d8f2      	bhi.n	1bf24 <http_parser_execute+0x54c>
   1bf3e:	a201      	add	r2, pc, #4	; (adr r2, 1bf44 <http_parser_execute+0x56c>)
   1bf40:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
   1bf44:	0001bf99 	.word	0x0001bf99
   1bf48:	0001bfa1 	.word	0x0001bfa1
   1bf4c:	0001bfa5 	.word	0x0001bfa5
   1bf50:	0001bf9d 	.word	0x0001bf9d
   1bf54:	0001bf25 	.word	0x0001bf25
   1bf58:	0001bf25 	.word	0x0001bf25
   1bf5c:	0001bf9b 	.word	0x0001bf9b
   1bf60:	0001bfa9 	.word	0x0001bfa9
   1bf64:	0001bf25 	.word	0x0001bf25
   1bf68:	0001bf25 	.word	0x0001bf25
   1bf6c:	0001bf25 	.word	0x0001bf25
   1bf70:	0001bfad 	.word	0x0001bfad
   1bf74:	0001bfb1 	.word	0x0001bfb1
   1bf78:	0001bfb5 	.word	0x0001bfb5
   1bf7c:	0001bfb9 	.word	0x0001bfb9
   1bf80:	0001bfbd 	.word	0x0001bfbd
   1bf84:	0001bf25 	.word	0x0001bf25
   1bf88:	0001bfc1 	.word	0x0001bfc1
   1bf8c:	0001bfc5 	.word	0x0001bfc5
   1bf90:	0001bfc9 	.word	0x0001bfc9
   1bf94:	0001bfcd 	.word	0x0001bfcd
				parser->method = HTTP_ACL;
   1bf98:	2313      	movs	r3, #19
				parser->method = HTTP_UNLOCK;
   1bf9a:	75a3      	strb	r3, [r4, #22]
			UPDATE_STATE(s_req_method);
   1bf9c:	2313      	movs	r3, #19
   1bf9e:	e5b9      	b.n	1bb14 <http_parser_execute+0x13c>
				parser->method = HTTP_BIND;
   1bfa0:	2310      	movs	r3, #16
   1bfa2:	e7fa      	b.n	1bf9a <http_parser_execute+0x5c2>
				parser->method = HTTP_CONNECT;
   1bfa4:	2305      	movs	r3, #5
   1bfa6:	e7f8      	b.n	1bf9a <http_parser_execute+0x5c2>
				parser->method = HTTP_HEAD;
   1bfa8:	2302      	movs	r3, #2
   1bfaa:	e7f6      	b.n	1bf9a <http_parser_execute+0x5c2>
				parser->method = HTTP_LOCK; /* or LINK */
   1bfac:	2309      	movs	r3, #9
   1bfae:	e7f4      	b.n	1bf9a <http_parser_execute+0x5c2>
				parser->method =
   1bfb0:	230a      	movs	r3, #10
   1bfb2:	e7f2      	b.n	1bf9a <http_parser_execute+0x5c2>
				parser->method = HTTP_NOTIFY;
   1bfb4:	2319      	movs	r3, #25
   1bfb6:	e7f0      	b.n	1bf9a <http_parser_execute+0x5c2>
				parser->method = HTTP_OPTIONS;
   1bfb8:	2306      	movs	r3, #6
   1bfba:	e7ee      	b.n	1bf9a <http_parser_execute+0x5c2>
				parser->method = HTTP_POST;
   1bfbc:	2303      	movs	r3, #3
   1bfbe:	e7ec      	b.n	1bf9a <http_parser_execute+0x5c2>
				parser->method = HTTP_REPORT; /* or REBIND */
   1bfc0:	2314      	movs	r3, #20
   1bfc2:	e7ea      	b.n	1bf9a <http_parser_execute+0x5c2>
				parser->method = HTTP_SUBSCRIBE; /* or SEARCH */
   1bfc4:	231a      	movs	r3, #26
   1bfc6:	e7e8      	b.n	1bf9a <http_parser_execute+0x5c2>
				parser->method = HTTP_TRACE;
   1bfc8:	2307      	movs	r3, #7
   1bfca:	e7e6      	b.n	1bf9a <http_parser_execute+0x5c2>
				parser->method = HTTP_UNLOCK;
   1bfcc:	230f      	movs	r3, #15
   1bfce:	e7e4      	b.n	1bf9a <http_parser_execute+0x5c2>
			if (UNLIKELY(ch == '\0')) {
   1bfd0:	2d00      	cmp	r5, #0
   1bfd2:	d0a7      	beq.n	1bf24 <http_parser_execute+0x54c>
			matcher = method_strings[parser->method];
   1bfd4:	7da0      	ldrb	r0, [r4, #22]
   1bfd6:	4b0c      	ldr	r3, [pc, #48]	; (1c008 <http_parser_execute+0x630>)
			if (ch == ' ' && matcher[parser->index] == '\0') {
   1bfd8:	78e2      	ldrb	r2, [r4, #3]
   1bfda:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1bfde:	f002 017f 	and.w	r1, r2, #127	; 0x7f
   1bfe2:	2d20      	cmp	r5, #32
   1bfe4:	5c5b      	ldrb	r3, [r3, r1]
   1bfe6:	d111      	bne.n	1c00c <http_parser_execute+0x634>
   1bfe8:	b943      	cbnz	r3, 1bffc <http_parser_execute+0x624>
				UPDATE_STATE(s_req_spaces_before_url);
   1bfea:	2314      	movs	r3, #20
   1bfec:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			++parser->index;
   1bff0:	78e2      	ldrb	r2, [r4, #3]
   1bff2:	1c4b      	adds	r3, r1, #1
   1bff4:	f363 0206 	bfi	r2, r3, #0, #7
   1bff8:	70e2      	strb	r2, [r4, #3]
			break;
   1bffa:	e6bd      	b.n	1bd78 <http_parser_execute+0x3a0>
			} else if (ch == matcher[parser->index]) {
   1bffc:	2b20      	cmp	r3, #32
   1bffe:	d191      	bne.n	1bf24 <http_parser_execute+0x54c>
   1c000:	e7f6      	b.n	1bff0 <http_parser_execute+0x618>
   1c002:	bf00      	nop
   1c004:	0002df5c 	.word	0x0002df5c
   1c008:	0002c13c 	.word	0x0002c13c
   1c00c:	429d      	cmp	r5, r3
   1c00e:	d0ef      	beq.n	1bff0 <http_parser_execute+0x618>
			} else if (IS_ALPHA(ch)) {
   1c010:	f045 0320 	orr.w	r3, r5, #32
   1c014:	3b61      	subs	r3, #97	; 0x61
   1c016:	2b19      	cmp	r3, #25
   1c018:	d865      	bhi.n	1c0e6 <http_parser_execute+0x70e>
						     parser->index << 8 | ch;
   1c01a:	020b      	lsls	r3, r1, #8
   1c01c:	4a9e      	ldr	r2, [pc, #632]	; (1c298 <http_parser_execute+0x8c0>)
				uint64_t sw_option = parser->method << 16 |
   1c01e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
						     parser->index << 8 | ch;
   1c022:	432b      	orrs	r3, r5
				switch (sw_option) {
   1c024:	4293      	cmp	r3, r2
   1c026:	d04e      	beq.n	1c0c6 <http_parser_execute+0x6ee>
   1c028:	dc22      	bgt.n	1c070 <http_parser_execute+0x698>
   1c02a:	4a9c      	ldr	r2, [pc, #624]	; (1c29c <http_parser_execute+0x8c4>)
   1c02c:	4293      	cmp	r3, r2
   1c02e:	d048      	beq.n	1c0c2 <http_parser_execute+0x6ea>
   1c030:	dc12      	bgt.n	1c058 <http_parser_execute+0x680>
   1c032:	4a9b      	ldr	r2, [pc, #620]	; (1c2a0 <http_parser_execute+0x8c8>)
   1c034:	4293      	cmp	r3, r2
   1c036:	d03f      	beq.n	1c0b8 <http_parser_execute+0x6e0>
   1c038:	dc08      	bgt.n	1c04c <http_parser_execute+0x674>
   1c03a:	3a14      	subs	r2, #20
   1c03c:	4293      	cmp	r3, r2
   1c03e:	d03e      	beq.n	1c0be <http_parser_execute+0x6e6>
   1c040:	3211      	adds	r2, #17
   1c042:	4293      	cmp	r3, r2
   1c044:	f47f af6e 	bne.w	1bf24 <http_parser_execute+0x54c>
					parser->method = HTTP_PROPFIND;
   1c048:	230c      	movs	r3, #12
   1c04a:	e036      	b.n	1c0ba <http_parser_execute+0x6e2>
   1c04c:	4a95      	ldr	r2, [pc, #596]	; (1c2a4 <http_parser_execute+0x8cc>)
   1c04e:	4293      	cmp	r3, r2
   1c050:	f47f af68 	bne.w	1bf24 <http_parser_execute+0x54c>
					parser->method = HTTP_PURGE;
   1c054:	231d      	movs	r3, #29
   1c056:	e030      	b.n	1c0ba <http_parser_execute+0x6e2>
   1c058:	4a93      	ldr	r2, [pc, #588]	; (1c2a8 <http_parser_execute+0x8d0>)
   1c05a:	4293      	cmp	r3, r2
   1c05c:	d03f      	beq.n	1c0de <http_parser_execute+0x706>
   1c05e:	4a93      	ldr	r2, [pc, #588]	; (1c2ac <http_parser_execute+0x8d4>)
   1c060:	4293      	cmp	r3, r2
   1c062:	d032      	beq.n	1c0ca <http_parser_execute+0x6f2>
   1c064:	4a92      	ldr	r2, [pc, #584]	; (1c2b0 <http_parser_execute+0x8d8>)
   1c066:	4293      	cmp	r3, r2
   1c068:	f47f af5c 	bne.w	1bf24 <http_parser_execute+0x54c>
					parser->method = HTTP_COPY;
   1c06c:	2308      	movs	r3, #8
   1c06e:	e024      	b.n	1c0ba <http_parser_execute+0x6e2>
   1c070:	4a90      	ldr	r2, [pc, #576]	; (1c2b4 <http_parser_execute+0x8dc>)
   1c072:	4293      	cmp	r3, r2
   1c074:	d035      	beq.n	1c0e2 <http_parser_execute+0x70a>
   1c076:	dc13      	bgt.n	1c0a0 <http_parser_execute+0x6c8>
   1c078:	4a8f      	ldr	r2, [pc, #572]	; (1c2b8 <http_parser_execute+0x8e0>)
   1c07a:	4293      	cmp	r3, r2
   1c07c:	d02d      	beq.n	1c0da <http_parser_execute+0x702>
   1c07e:	dc09      	bgt.n	1c094 <http_parser_execute+0x6bc>
   1c080:	4a8e      	ldr	r2, [pc, #568]	; (1c2bc <http_parser_execute+0x8e4>)
   1c082:	4293      	cmp	r3, r2
   1c084:	d023      	beq.n	1c0ce <http_parser_execute+0x6f6>
   1c086:	f502 7280 	add.w	r2, r2, #256	; 0x100
   1c08a:	4293      	cmp	r3, r2
   1c08c:	f47f af4a 	bne.w	1bf24 <http_parser_execute+0x54c>
					parser->method = HTTP_MKCALENDAR;
   1c090:	231e      	movs	r3, #30
   1c092:	e012      	b.n	1c0ba <http_parser_execute+0x6e2>
   1c094:	4a8a      	ldr	r2, [pc, #552]	; (1c2c0 <http_parser_execute+0x8e8>)
   1c096:	4293      	cmp	r3, r2
   1c098:	f47f af44 	bne.w	1bf24 <http_parser_execute+0x54c>
					parser->method = HTTP_UNBIND;
   1c09c:	2312      	movs	r3, #18
   1c09e:	e00c      	b.n	1c0ba <http_parser_execute+0x6e2>
   1c0a0:	4a88      	ldr	r2, [pc, #544]	; (1c2c4 <http_parser_execute+0x8ec>)
   1c0a2:	4293      	cmp	r3, r2
   1c0a4:	d017      	beq.n	1c0d6 <http_parser_execute+0x6fe>
   1c0a6:	4a88      	ldr	r2, [pc, #544]	; (1c2c8 <http_parser_execute+0x8f0>)
   1c0a8:	4293      	cmp	r3, r2
   1c0aa:	d012      	beq.n	1c0d2 <http_parser_execute+0x6fa>
   1c0ac:	4a87      	ldr	r2, [pc, #540]	; (1c2cc <http_parser_execute+0x8f4>)
   1c0ae:	4293      	cmp	r3, r2
   1c0b0:	f47f af38 	bne.w	1bf24 <http_parser_execute+0x54c>
					parser->method = HTTP_UNLINK;
   1c0b4:	2320      	movs	r3, #32
   1c0b6:	e000      	b.n	1c0ba <http_parser_execute+0x6e2>
					parser->method = HTTP_PUT;
   1c0b8:	2304      	movs	r3, #4
					parser->method = HTTP_PATCH;
   1c0ba:	75a3      	strb	r3, [r4, #22]
					break;
   1c0bc:	e798      	b.n	1bff0 <http_parser_execute+0x618>
					parser->method = HTTP_PATCH;
   1c0be:	231c      	movs	r3, #28
   1c0c0:	e7fb      	b.n	1c0ba <http_parser_execute+0x6e2>
					parser->method = HTTP_CHECKOUT;
   1c0c2:	2316      	movs	r3, #22
   1c0c4:	e7f9      	b.n	1c0ba <http_parser_execute+0x6e2>
					parser->method = HTTP_MOVE;
   1c0c6:	230b      	movs	r3, #11
   1c0c8:	e7f7      	b.n	1c0ba <http_parser_execute+0x6e2>
					parser->method = HTTP_MERGE;
   1c0ca:	2317      	movs	r3, #23
   1c0cc:	e7f5      	b.n	1c0ba <http_parser_execute+0x6e2>
					parser->method = HTTP_MKACTIVITY;
   1c0ce:	2315      	movs	r3, #21
   1c0d0:	e7f3      	b.n	1c0ba <http_parser_execute+0x6e2>
					parser->method = HTTP_SEARCH;
   1c0d2:	230e      	movs	r3, #14
   1c0d4:	e7f1      	b.n	1c0ba <http_parser_execute+0x6e2>
					parser->method = HTTP_REBIND;
   1c0d6:	2311      	movs	r3, #17
   1c0d8:	e7ef      	b.n	1c0ba <http_parser_execute+0x6e2>
					parser->method = HTTP_PROPPATCH;
   1c0da:	230d      	movs	r3, #13
   1c0dc:	e7ed      	b.n	1c0ba <http_parser_execute+0x6e2>
					parser->method = HTTP_LINK;
   1c0de:	231f      	movs	r3, #31
   1c0e0:	e7eb      	b.n	1c0ba <http_parser_execute+0x6e2>
					parser->method = HTTP_UNSUBSCRIBE;
   1c0e2:	231b      	movs	r3, #27
   1c0e4:	e7e9      	b.n	1c0ba <http_parser_execute+0x6e2>
			} else if (ch == '-' &&
   1c0e6:	2d2d      	cmp	r5, #45	; 0x2d
   1c0e8:	f47f af1c 	bne.w	1bf24 <http_parser_execute+0x54c>
   1c0ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1c0f0:	2a01      	cmp	r2, #1
   1c0f2:	f47f af17 	bne.w	1bf24 <http_parser_execute+0x54c>
					parser->index == 1U &&
   1c0f6:	280a      	cmp	r0, #10
   1c0f8:	f47f af14 	bne.w	1bf24 <http_parser_execute+0x54c>
				parser->method = HTTP_MSEARCH;
   1c0fc:	2318      	movs	r3, #24
   1c0fe:	e7dc      	b.n	1c0ba <http_parser_execute+0x6e2>
			if (ch == ' ') {
   1c100:	2d20      	cmp	r5, #32
   1c102:	f43f ae39 	beq.w	1bd78 <http_parser_execute+0x3a0>
			MARK(url);
   1c106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c108:	b903      	cbnz	r3, 1c10c <http_parser_execute+0x734>
   1c10a:	960c      	str	r6, [sp, #48]	; 0x30
			if (parser->method == HTTP_CONNECT) {
   1c10c:	7da3      	ldrb	r3, [r4, #22]
			UPDATE_STATE(parse_url_char(CURRENT_STATE(), ch));
   1c10e:	4629      	mov	r1, r5
			if (parser->method == HTTP_CONNECT) {
   1c110:	2b05      	cmp	r3, #5
				UPDATE_STATE(s_req_server_start);
   1c112:	bf04      	itt	eq
   1c114:	2318      	moveq	r3, #24
   1c116:	f88d 3023 	strbeq.w	r3, [sp, #35]	; 0x23
			UPDATE_STATE(parse_url_char(CURRENT_STATE(), ch));
   1c11a:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
				UPDATE_STATE
   1c11e:	f000 fe29 	bl	1cd74 <parse_url_char>
				if (UNLIKELY(CURRENT_STATE() == s_dead)) {
   1c122:	2801      	cmp	r0, #1
				UPDATE_STATE
   1c124:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
				if (UNLIKELY(CURRENT_STATE() == s_dead)) {
   1c128:	f47f ae26 	bne.w	1bd78 <http_parser_execute+0x3a0>
   1c12c:	e009      	b.n	1c142 <http_parser_execute+0x76a>
			switch (ch) {
   1c12e:	f1a5 030a 	sub.w	r3, r5, #10
   1c132:	b2db      	uxtb	r3, r3
   1c134:	2b16      	cmp	r3, #22
   1c136:	d828      	bhi.n	1c18a <http_parser_execute+0x7b2>
   1c138:	4a65      	ldr	r2, [pc, #404]	; (1c2d0 <http_parser_execute+0x8f8>)
   1c13a:	fa22 f303 	lsr.w	r3, r2, r3
   1c13e:	07db      	lsls	r3, r3, #31
   1c140:	d523      	bpl.n	1c18a <http_parser_execute+0x7b2>
					SET_ERRNO(HPE_INVALID_URL);
   1c142:	2211      	movs	r2, #17
   1c144:	7de3      	ldrb	r3, [r4, #23]
   1c146:	e4a7      	b.n	1ba98 <http_parser_execute+0xc0>
			switch (ch) {
   1c148:	2d0d      	cmp	r5, #13
   1c14a:	d017      	beq.n	1c17c <http_parser_execute+0x7a4>
   1c14c:	2d20      	cmp	r5, #32
   1c14e:	d003      	beq.n	1c158 <http_parser_execute+0x780>
   1c150:	2d0a      	cmp	r5, #10
   1c152:	d11a      	bne.n	1c18a <http_parser_execute+0x7b2>
				UPDATE_STATE((ch == CR) ?
   1c154:	232a      	movs	r3, #42	; 0x2a
   1c156:	e012      	b.n	1c17e <http_parser_execute+0x7a6>
				UPDATE_STATE(s_req_http_start);
   1c158:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
					     p - url_mark);
   1c15c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
				rc = cb_data(parser, settings->on_url,
   1c15e:	2202      	movs	r2, #2
					     p - url_mark);
   1c160:	1af3      	subs	r3, r6, r3
				rc = cb_data(parser, settings->on_url,
   1c162:	9303      	str	r3, [sp, #12]
   1c164:	ab0c      	add	r3, sp, #48	; 0x30
   1c166:	9302      	str	r3, [sp, #8]
					     p - data + 1, &url_mark,
   1c168:	1bf3      	subs	r3, r6, r7
   1c16a:	3301      	adds	r3, #1
				rc = cb_data(parser, settings->on_url,
   1c16c:	9301      	str	r3, [sp, #4]
   1c16e:	ab09      	add	r3, sp, #36	; 0x24
   1c170:	9300      	str	r3, [sp, #0]
   1c172:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1c176:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1c17a:	e6b2      	b.n	1bee2 <http_parser_execute+0x50a>
				UPDATE_STATE((ch == CR) ?
   1c17c:	2329      	movs	r3, #41	; 0x29
				parser->http_major = 0U;
   1c17e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
				UPDATE_STATE((ch == CR) ?
   1c182:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				parser->http_major = 0U;
   1c186:	6122      	str	r2, [r4, #16]
   1c188:	e7e8      	b.n	1c15c <http_parser_execute+0x784>
				UPDATE_STATE
   1c18a:	4629      	mov	r1, r5
   1c18c:	e7c7      	b.n	1c11e <http_parser_execute+0x746>
			switch (ch) {
   1c18e:	2d20      	cmp	r5, #32
   1c190:	f43f adf2 	beq.w	1bd78 <http_parser_execute+0x3a0>
   1c194:	2d48      	cmp	r5, #72	; 0x48
   1c196:	f47f ad58 	bne.w	1bc4a <http_parser_execute+0x272>
				UPDATE_STATE(s_req_http_H);
   1c19a:	2321      	movs	r3, #33	; 0x21
   1c19c:	e563      	b.n	1bc66 <http_parser_execute+0x28e>
			UPDATE_STATE(s_req_http_HT);
   1c19e:	2322      	movs	r3, #34	; 0x22
   1c1a0:	e561      	b.n	1bc66 <http_parser_execute+0x28e>
			UPDATE_STATE(s_req_http_HTT);
   1c1a2:	2323      	movs	r3, #35	; 0x23
   1c1a4:	e55f      	b.n	1bc66 <http_parser_execute+0x28e>
			UPDATE_STATE(s_req_http_HTTP);
   1c1a6:	2324      	movs	r3, #36	; 0x24
   1c1a8:	e55d      	b.n	1bc66 <http_parser_execute+0x28e>
			UPDATE_STATE(s_req_first_http_major);
   1c1aa:	2325      	movs	r3, #37	; 0x25
   1c1ac:	e55b      	b.n	1bc66 <http_parser_execute+0x28e>
			if (UNLIKELY(ch < '1' || ch > '9')) {
   1c1ae:	f1a5 0331 	sub.w	r3, r5, #49	; 0x31
   1c1b2:	2b08      	cmp	r3, #8
   1c1b4:	f63f ad84 	bhi.w	1bcc0 <http_parser_execute+0x2e8>
			parser->http_major = ch - '0';
   1c1b8:	3d30      	subs	r5, #48	; 0x30
			UPDATE_STATE(s_req_http_major);
   1c1ba:	2326      	movs	r3, #38	; 0x26
			parser->http_major = ch - '0';
   1c1bc:	8225      	strh	r5, [r4, #16]
			UPDATE_STATE(s_req_http_major);
   1c1be:	e552      	b.n	1bc66 <http_parser_execute+0x28e>
			if (ch == '.') {
   1c1c0:	2d2e      	cmp	r5, #46	; 0x2e
   1c1c2:	d101      	bne.n	1c1c8 <http_parser_execute+0x7f0>
				UPDATE_STATE(s_req_first_http_minor);
   1c1c4:	2327      	movs	r3, #39	; 0x27
   1c1c6:	e54e      	b.n	1bc66 <http_parser_execute+0x28e>
			if (UNLIKELY(!IS_NUM(ch))) {
   1c1c8:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   1c1cc:	2b09      	cmp	r3, #9
   1c1ce:	f63f ad77 	bhi.w	1bcc0 <http_parser_execute+0x2e8>
			parser->http_major *= 10U;
   1c1d2:	8a23      	ldrh	r3, [r4, #16]
   1c1d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
			parser->http_major += ch - '0';
   1c1d8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1c1dc:	3b30      	subs	r3, #48	; 0x30
   1c1de:	b29b      	uxth	r3, r3
   1c1e0:	8223      	strh	r3, [r4, #16]
			if (UNLIKELY(parser->http_minor > 999)) {
   1c1e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1c1e6:	f4ff adc7 	bcc.w	1bd78 <http_parser_execute+0x3a0>
   1c1ea:	e569      	b.n	1bcc0 <http_parser_execute+0x2e8>
			if (UNLIKELY(!IS_NUM(ch))) {
   1c1ec:	3d30      	subs	r5, #48	; 0x30
   1c1ee:	b2eb      	uxtb	r3, r5
   1c1f0:	2b09      	cmp	r3, #9
   1c1f2:	f63f ad65 	bhi.w	1bcc0 <http_parser_execute+0x2e8>
			UPDATE_STATE(s_req_http_minor);
   1c1f6:	2328      	movs	r3, #40	; 0x28
			parser->http_minor = ch - '0';
   1c1f8:	8265      	strh	r5, [r4, #18]
			UPDATE_STATE(s_req_http_minor);
   1c1fa:	e534      	b.n	1bc66 <http_parser_execute+0x28e>
			if (ch == CR) {
   1c1fc:	2d0d      	cmp	r5, #13
   1c1fe:	d101      	bne.n	1c204 <http_parser_execute+0x82c>
				UPDATE_STATE(s_req_line_almost_done);
   1c200:	2329      	movs	r3, #41	; 0x29
   1c202:	e530      	b.n	1bc66 <http_parser_execute+0x28e>
			if (ch == LF) {
   1c204:	2d0a      	cmp	r5, #10
   1c206:	f43f adaa 	beq.w	1bd5e <http_parser_execute+0x386>
			if (UNLIKELY(!IS_NUM(ch))) {
   1c20a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   1c20e:	2b09      	cmp	r3, #9
   1c210:	f63f ad56 	bhi.w	1bcc0 <http_parser_execute+0x2e8>
			parser->http_minor *= 10U;
   1c214:	8a63      	ldrh	r3, [r4, #18]
   1c216:	eb03 0383 	add.w	r3, r3, r3, lsl #2
			parser->http_minor += ch - '0';
   1c21a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1c21e:	3b30      	subs	r3, #48	; 0x30
   1c220:	b29b      	uxth	r3, r3
   1c222:	8263      	strh	r3, [r4, #18]
   1c224:	e7dd      	b.n	1c1e2 <http_parser_execute+0x80a>
			if (UNLIKELY(ch != LF)) {
   1c226:	2d0a      	cmp	r5, #10
   1c228:	f43f ad99 	beq.w	1bd5e <http_parser_execute+0x386>
				SET_ERRNO(HPE_LF_EXPECTED);
   1c22c:	2217      	movs	r2, #23
   1c22e:	7de3      	ldrb	r3, [r4, #23]
   1c230:	e432      	b.n	1ba98 <http_parser_execute+0xc0>
			if (ch == CR) {
   1c232:	2d0d      	cmp	r5, #13
   1c234:	d101      	bne.n	1c23a <http_parser_execute+0x862>
				UPDATE_STATE(s_headers_almost_done);
   1c236:	2337      	movs	r3, #55	; 0x37
   1c238:	e515      	b.n	1bc66 <http_parser_execute+0x28e>
			if (ch == LF) {
   1c23a:	2d0a      	cmp	r5, #10
   1c23c:	d101      	bne.n	1c242 <http_parser_execute+0x86a>
				UPDATE_STATE(s_headers_almost_done);
   1c23e:	2337      	movs	r3, #55	; 0x37
   1c240:	e470      	b.n	1bb24 <http_parser_execute+0x14c>
			c = TOKEN(ch);
   1c242:	2d20      	cmp	r5, #32
   1c244:	d005      	beq.n	1c252 <http_parser_execute+0x87a>
   1c246:	4b23      	ldr	r3, [pc, #140]	; (1c2d4 <http_parser_execute+0x8fc>)
   1c248:	5d5b      	ldrb	r3, [r3, r5]
			if (UNLIKELY(!c)) {
   1c24a:	b98b      	cbnz	r3, 1c270 <http_parser_execute+0x898>
				SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
   1c24c:	2218      	movs	r2, #24
   1c24e:	7de3      	ldrb	r3, [r4, #23]
   1c250:	e422      	b.n	1ba98 <http_parser_execute+0xc0>
			MARK(header_field);
   1c252:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c254:	78e3      	ldrb	r3, [r4, #3]
   1c256:	b13a      	cbz	r2, 1c268 <http_parser_execute+0x890>
			parser->index = 0U;
   1c258:	f36f 0306 	bfc	r3, #0, #7
   1c25c:	70e3      	strb	r3, [r4, #3]
			UPDATE_STATE(s_header_field);
   1c25e:	232b      	movs	r3, #43	; 0x2b
   1c260:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				break;
   1c264:	2300      	movs	r3, #0
   1c266:	e03a      	b.n	1c2de <http_parser_execute+0x906>
			MARK(header_field);
   1c268:	960a      	str	r6, [sp, #40]	; 0x28
			parser->index = 0U;
   1c26a:	f362 0306 	bfi	r3, r2, #0, #7
   1c26e:	e7f5      	b.n	1c25c <http_parser_execute+0x884>
			MARK(header_field);
   1c270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c272:	b902      	cbnz	r2, 1c276 <http_parser_execute+0x89e>
   1c274:	960a      	str	r6, [sp, #40]	; 0x28
			parser->index = 0U;
   1c276:	78e2      	ldrb	r2, [r4, #3]
   1c278:	2b74      	cmp	r3, #116	; 0x74
   1c27a:	f36f 0206 	bfc	r2, #0, #7
   1c27e:	70e2      	strb	r2, [r4, #3]
			UPDATE_STATE(s_header_field);
   1c280:	f04f 022b 	mov.w	r2, #43	; 0x2b
   1c284:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
			switch (c) {
   1c288:	d02e      	beq.n	1c2e8 <http_parser_execute+0x910>
   1c28a:	d825      	bhi.n	1c2d8 <http_parser_execute+0x900>
   1c28c:	2b63      	cmp	r3, #99	; 0x63
   1c28e:	d02d      	beq.n	1c2ec <http_parser_execute+0x914>
   1c290:	2b70      	cmp	r3, #112	; 0x70
   1c292:	d1e7      	bne.n	1c264 <http_parser_execute+0x88c>
   1c294:	2305      	movs	r3, #5
   1c296:	e022      	b.n	1c2de <http_parser_execute+0x906>
   1c298:	000a014f 	.word	0x000a014f
   1c29c:	00050148 	.word	0x00050148
   1c2a0:	00030155 	.word	0x00030155
   1c2a4:	00040252 	.word	0x00040252
   1c2a8:	00090149 	.word	0x00090149
   1c2ac:	000a0145 	.word	0x000a0145
   1c2b0:	00050250 	.word	0x00050250
   1c2b4:	000f0253 	.word	0x000f0253
   1c2b8:	000c0450 	.word	0x000c0450
   1c2bc:	000a0241 	.word	0x000a0241
   1c2c0:	000f0242 	.word	0x000f0242
   1c2c4:	00140242 	.word	0x00140242
   1c2c8:	001a0145 	.word	0x001a0145
   1c2cc:	000f0349 	.word	0x000f0349
   1c2d0:	00400009 	.word	0x00400009
   1c2d4:	0002dab1 	.word	0x0002dab1
   1c2d8:	2b75      	cmp	r3, #117	; 0x75
   1c2da:	d1c3      	bne.n	1c264 <http_parser_execute+0x88c>
   1c2dc:	2308      	movs	r3, #8
				parser->header_state = h_C;
   1c2de:	78a2      	ldrb	r2, [r4, #2]
   1c2e0:	f363 0247 	bfi	r2, r3, #1, #7
   1c2e4:	70a2      	strb	r2, [r4, #2]
   1c2e6:	e547      	b.n	1bd78 <http_parser_execute+0x3a0>
   1c2e8:	2307      	movs	r3, #7
   1c2ea:	e7f8      	b.n	1c2de <http_parser_execute+0x906>
   1c2ec:	2301      	movs	r3, #1
   1c2ee:	e7f6      	b.n	1c2de <http_parser_execute+0x906>
				c = TOKEN(ch);
   1c2f0:	462b      	mov	r3, r5
	switch (parser->header_state) {
   1c2f2:	78a2      	ldrb	r2, [r4, #2]
   1c2f4:	0852      	lsrs	r2, r2, #1
   1c2f6:	3a01      	subs	r2, #1
   1c2f8:	2a0b      	cmp	r2, #11
   1c2fa:	f63f abd4 	bhi.w	1baa6 <http_parser_execute+0xce>
   1c2fe:	e8df f002 	tbb	[pc, r2]
   1c302:	1d06      	.short	0x1d06
   1c304:	7560412b 	.word	0x7560412b
   1c308:	c0c0a78e 	.word	0xc0c0a78e
   1c30c:	c0c0      	.short	0xc0c0
		parser->index++;
   1c30e:	78e2      	ldrb	r2, [r4, #3]
		parser->header_state = (c == 'o' ? h_CO : h_general);
   1c310:	f1a3 0c6f 	sub.w	ip, r3, #111	; 0x6f
   1c314:	f1dc 0300 	rsbs	r3, ip, #0
		parser->index++;
   1c318:	f102 0201 	add.w	r2, r2, #1
		parser->header_state = (c == 'o' ? h_CO : h_general);
   1c31c:	eb43 030c 	adc.w	r3, r3, ip
   1c320:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1c324:	009b      	lsls	r3, r3, #2
   1c326:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1c32a:	8862      	ldrh	r2, [r4, #2]
   1c32c:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
   1c330:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
   1c334:	4313      	orrs	r3, r2
   1c336:	8063      	strh	r3, [r4, #2]
		break;
   1c338:	f7ff bbb5 	b.w	1baa6 <http_parser_execute+0xce>
		parser->index++;
   1c33c:	78e2      	ldrb	r2, [r4, #3]
		parser->header_state = (c == 'n' ? h_CON : h_general);
   1c33e:	2b6e      	cmp	r3, #110	; 0x6e
		parser->index++;
   1c340:	f102 0c01 	add.w	ip, r2, #1
   1c344:	f36c 0206 	bfi	r2, ip, #0, #7
   1c348:	70e2      	strb	r2, [r4, #3]
		parser->header_state = (c == 'n' ? h_CON : h_general);
   1c34a:	bf14      	ite	ne
   1c34c:	2200      	movne	r2, #0
   1c34e:	2203      	moveq	r2, #3
   1c350:	78a3      	ldrb	r3, [r4, #2]
			parser->header_state = h_upgrade;
   1c352:	f362 0347 	bfi	r3, r2, #1, #7
   1c356:	e028      	b.n	1c3aa <http_parser_execute+0x9d2>
		parser->index++;
   1c358:	78e2      	ldrb	r2, [r4, #3]
   1c35a:	2b6e      	cmp	r3, #110	; 0x6e
   1c35c:	f102 0c01 	add.w	ip, r2, #1
   1c360:	f36c 0206 	bfi	r2, ip, #0, #7
   1c364:	70e2      	strb	r2, [r4, #3]
		switch (c) {
   1c366:	78a2      	ldrb	r2, [r4, #2]
   1c368:	d004      	beq.n	1c374 <http_parser_execute+0x99c>
   1c36a:	2b74      	cmp	r3, #116	; 0x74
   1c36c:	d008      	beq.n	1c380 <http_parser_execute+0x9a8>
			parser->header_state = h_general;
   1c36e:	f36f 0247 	bfc	r2, #1, #7
   1c372:	e002      	b.n	1c37a <http_parser_execute+0x9a2>
			parser->header_state = h_matching_connection;
   1c374:	2304      	movs	r3, #4
			parser->header_state = h_matching_content_length;
   1c376:	f363 0247 	bfi	r2, r3, #1, #7
   1c37a:	70a2      	strb	r2, [r4, #2]
			break;
   1c37c:	f7ff bb93 	b.w	1baa6 <http_parser_execute+0xce>
			parser->header_state = h_matching_content_length;
   1c380:	2306      	movs	r3, #6
   1c382:	e7f8      	b.n	1c376 <http_parser_execute+0x99e>
		parser->index++;
   1c384:	78e2      	ldrb	r2, [r4, #3]
   1c386:	f102 0c01 	add.w	ip, r2, #1
   1c38a:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   1c38e:	f36c 0206 	bfi	r2, ip, #0, #7
		if (cond1 || c != CONNECTION[parser->index]) {
   1c392:	f1bc 0f0a 	cmp.w	ip, #10
		parser->index++;
   1c396:	70e2      	strb	r2, [r4, #3]
		if (cond1 || c != CONNECTION[parser->index]) {
   1c398:	d804      	bhi.n	1c3a4 <http_parser_execute+0x9cc>
   1c39a:	4ab1      	ldr	r2, [pc, #708]	; (1c660 <http_parser_execute+0xc88>)
   1c39c:	f812 200c 	ldrb.w	r2, [r2, ip]
   1c3a0:	429a      	cmp	r2, r3
   1c3a2:	d005      	beq.n	1c3b0 <http_parser_execute+0x9d8>
			parser->header_state = h_general;
   1c3a4:	78a3      	ldrb	r3, [r4, #2]
   1c3a6:	f36f 0347 	bfc	r3, #1, #7
			parser->header_state = h_upgrade;
   1c3aa:	70a3      	strb	r3, [r4, #2]
   1c3ac:	f7ff bb7b 	b.w	1baa6 <http_parser_execute+0xce>
		} else if (parser->index == sizeof(CONNECTION) - 2) {
   1c3b0:	78e3      	ldrb	r3, [r4, #3]
   1c3b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c3b6:	2b09      	cmp	r3, #9
   1c3b8:	f47f ab75 	bne.w	1baa6 <http_parser_execute+0xce>
			parser->header_state = h_connection;
   1c3bc:	2209      	movs	r2, #9
   1c3be:	78a3      	ldrb	r3, [r4, #2]
   1c3c0:	e7c7      	b.n	1c352 <http_parser_execute+0x97a>
		parser->index++;
   1c3c2:	78e2      	ldrb	r2, [r4, #3]
   1c3c4:	f102 0c01 	add.w	ip, r2, #1
   1c3c8:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   1c3cc:	f36c 0206 	bfi	r2, ip, #0, #7
		if (cond1 || c != PROXY_CONNECTION[parser->index]) {
   1c3d0:	f1bc 0f10 	cmp.w	ip, #16
		parser->index++;
   1c3d4:	70e2      	strb	r2, [r4, #3]
		if (cond1 || c != PROXY_CONNECTION[parser->index]) {
   1c3d6:	d8e5      	bhi.n	1c3a4 <http_parser_execute+0x9cc>
   1c3d8:	4aa2      	ldr	r2, [pc, #648]	; (1c664 <http_parser_execute+0xc8c>)
   1c3da:	f812 200c 	ldrb.w	r2, [r2, ip]
   1c3de:	429a      	cmp	r2, r3
   1c3e0:	d1e0      	bne.n	1c3a4 <http_parser_execute+0x9cc>
		} else if (parser->index == sizeof(PROXY_CONNECTION) - 2) {
   1c3e2:	78e3      	ldrb	r3, [r4, #3]
   1c3e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c3e8:	2b0f      	cmp	r3, #15
   1c3ea:	e7e5      	b.n	1c3b8 <http_parser_execute+0x9e0>
		parser->index++;
   1c3ec:	78e2      	ldrb	r2, [r4, #3]
   1c3ee:	f102 0c01 	add.w	ip, r2, #1
   1c3f2:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   1c3f6:	f36c 0206 	bfi	r2, ip, #0, #7
		if (cond1 || c != CONTENT_LENGTH[parser->index]) {
   1c3fa:	f1bc 0f0e 	cmp.w	ip, #14
		parser->index++;
   1c3fe:	70e2      	strb	r2, [r4, #3]
		if (cond1 || c != CONTENT_LENGTH[parser->index]) {
   1c400:	d8d0      	bhi.n	1c3a4 <http_parser_execute+0x9cc>
   1c402:	4a99      	ldr	r2, [pc, #612]	; (1c668 <http_parser_execute+0xc90>)
   1c404:	f812 200c 	ldrb.w	r2, [r2, ip]
   1c408:	429a      	cmp	r2, r3
   1c40a:	d1cb      	bne.n	1c3a4 <http_parser_execute+0x9cc>
		} else if (parser->index == sizeof(CONTENT_LENGTH) - 2) {
   1c40c:	78e3      	ldrb	r3, [r4, #3]
   1c40e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c412:	2b0d      	cmp	r3, #13
   1c414:	f47f ab47 	bne.w	1baa6 <http_parser_execute+0xce>
			parser->header_state = h_content_length;
   1c418:	220a      	movs	r2, #10
   1c41a:	78a3      	ldrb	r3, [r4, #2]
   1c41c:	e799      	b.n	1c352 <http_parser_execute+0x97a>
		parser->index++;
   1c41e:	78e2      	ldrb	r2, [r4, #3]
   1c420:	f102 0c01 	add.w	ip, r2, #1
   1c424:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   1c428:	f36c 0206 	bfi	r2, ip, #0, #7
		if (cond1 || c != TRANSFER_ENCODING[parser->index]) {
   1c42c:	f1bc 0f11 	cmp.w	ip, #17
		parser->index++;
   1c430:	70e2      	strb	r2, [r4, #3]
		if (cond1 || c != TRANSFER_ENCODING[parser->index]) {
   1c432:	d8b7      	bhi.n	1c3a4 <http_parser_execute+0x9cc>
   1c434:	4a8d      	ldr	r2, [pc, #564]	; (1c66c <http_parser_execute+0xc94>)
   1c436:	f812 200c 	ldrb.w	r2, [r2, ip]
   1c43a:	429a      	cmp	r2, r3
   1c43c:	d1b2      	bne.n	1c3a4 <http_parser_execute+0x9cc>
		} else if (parser->index == sizeof(TRANSFER_ENCODING) - 2) {
   1c43e:	78e3      	ldrb	r3, [r4, #3]
   1c440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c444:	2b10      	cmp	r3, #16
   1c446:	f47f ab2e 	bne.w	1baa6 <http_parser_execute+0xce>
			parser->header_state = h_transfer_encoding;
   1c44a:	220b      	movs	r2, #11
   1c44c:	78a3      	ldrb	r3, [r4, #2]
   1c44e:	e780      	b.n	1c352 <http_parser_execute+0x97a>
		parser->index++;
   1c450:	78e2      	ldrb	r2, [r4, #3]
   1c452:	f102 0c01 	add.w	ip, r2, #1
   1c456:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   1c45a:	f36c 0206 	bfi	r2, ip, #0, #7
		if (cond1 || c != UPGRADE[parser->index]) {
   1c45e:	f1bc 0f07 	cmp.w	ip, #7
		parser->index++;
   1c462:	70e2      	strb	r2, [r4, #3]
		if (cond1 || c != UPGRADE[parser->index]) {
   1c464:	d89e      	bhi.n	1c3a4 <http_parser_execute+0x9cc>
   1c466:	4a82      	ldr	r2, [pc, #520]	; (1c670 <http_parser_execute+0xc98>)
   1c468:	f812 200c 	ldrb.w	r2, [r2, ip]
   1c46c:	429a      	cmp	r2, r3
   1c46e:	d199      	bne.n	1c3a4 <http_parser_execute+0x9cc>
		} else if (parser->index == sizeof(UPGRADE) - 2) {
   1c470:	78e3      	ldrb	r3, [r4, #3]
   1c472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c476:	2b06      	cmp	r3, #6
   1c478:	f47f ab15 	bne.w	1baa6 <http_parser_execute+0xce>
			parser->header_state = h_upgrade;
   1c47c:	220c      	movs	r2, #12
   1c47e:	78a3      	ldrb	r3, [r4, #2]
   1c480:	e767      	b.n	1c352 <http_parser_execute+0x97a>
		if (ch != ' ') {
   1c482:	2d20      	cmp	r5, #32
   1c484:	d18e      	bne.n	1c3a4 <http_parser_execute+0x9cc>
   1c486:	f7ff bb0e 	b.w	1baa6 <http_parser_execute+0xce>
			if (ch == ':') {
   1c48a:	2d3a      	cmp	r5, #58	; 0x3a
					     parsed, p - data + 1,
   1c48c:	eba9 0307 	sub.w	r3, r9, r7
			if (ch == ':') {
   1c490:	f040 845a 	bne.w	1cd48 <http_parser_execute+0x1370>
				UPDATE_STATE(s_header_value_discard_ws);
   1c494:	222c      	movs	r2, #44	; 0x2c
   1c496:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
					     p - header_field_mark);
   1c49a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
					     parsed, p - data + 1,
   1c49c:	3301      	adds	r3, #1
					     p - header_field_mark);
   1c49e:	eba9 0202 	sub.w	r2, r9, r2
				rc = cb_data(parser, settings->on_header_field,
   1c4a2:	9203      	str	r2, [sp, #12]
   1c4a4:	9301      	str	r3, [sp, #4]
   1c4a6:	aa0a      	add	r2, sp, #40	; 0x28
   1c4a8:	ab09      	add	r3, sp, #36	; 0x24
   1c4aa:	9202      	str	r2, [sp, #8]
   1c4ac:	9300      	str	r3, [sp, #0]
   1c4ae:	2203      	movs	r2, #3
   1c4b0:	4620      	mov	r0, r4
   1c4b2:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1c4b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1c4ba:	f00b fca6 	bl	27e0a <cb_data>
				if (rc != 0) {
   1c4be:	2800      	cmp	r0, #0
   1c4c0:	f47f aaae 	bne.w	1ba20 <http_parser_execute+0x48>
   1c4c4:	464e      	mov	r6, r9
   1c4c6:	e457      	b.n	1bd78 <http_parser_execute+0x3a0>
			if (ch == ' ' || ch == '\t') {
   1c4c8:	2d20      	cmp	r5, #32
   1c4ca:	f43f ac55 	beq.w	1bd78 <http_parser_execute+0x3a0>
   1c4ce:	2d09      	cmp	r5, #9
   1c4d0:	f43f ac52 	beq.w	1bd78 <http_parser_execute+0x3a0>
			if (ch == CR) {
   1c4d4:	2d0d      	cmp	r5, #13
   1c4d6:	d102      	bne.n	1c4de <http_parser_execute+0xb06>
				UPDATE_STATE
   1c4d8:	232d      	movs	r3, #45	; 0x2d
   1c4da:	f7ff bbc4 	b.w	1bc66 <http_parser_execute+0x28e>
			if (ch == LF) {
   1c4de:	2d0a      	cmp	r5, #10
   1c4e0:	d102      	bne.n	1c4e8 <http_parser_execute+0xb10>
			UPDATE_STATE(s_header_value_discard_lws);
   1c4e2:	232e      	movs	r3, #46	; 0x2e
   1c4e4:	f7ff bbbf 	b.w	1bc66 <http_parser_execute+0x28e>
			MARK(header_value);
   1c4e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c4ea:	b903      	cbnz	r3, 1c4ee <http_parser_execute+0xb16>
   1c4ec:	960b      	str	r6, [sp, #44]	; 0x2c
			UPDATE_STATE(s_header_value);
   1c4ee:	2330      	movs	r3, #48	; 0x30
   1c4f0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			parser->index = 0U;
   1c4f4:	78e3      	ldrb	r3, [r4, #3]
			c = LOWER(ch);
   1c4f6:	f045 0220 	orr.w	r2, r5, #32
			parser->index = 0U;
   1c4fa:	f36f 0306 	bfc	r3, #0, #7
   1c4fe:	70e3      	strb	r3, [r4, #3]
			switch (parser->header_state) {
   1c500:	78a3      	ldrb	r3, [r4, #2]
   1c502:	085b      	lsrs	r3, r3, #1
   1c504:	3b09      	subs	r3, #9
   1c506:	2b05      	cmp	r3, #5
   1c508:	d812      	bhi.n	1c530 <http_parser_execute+0xb58>
   1c50a:	a101      	add	r1, pc, #4	; (adr r1, 1c510 <http_parser_execute+0xb38>)
   1c50c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1c510:	0001c57f 	.word	0x0001c57f
   1c514:	0001c549 	.word	0x0001c549
   1c518:	0001c539 	.word	0x0001c539
   1c51c:	0001c529 	.word	0x0001c529
   1c520:	0001c531 	.word	0x0001c531
   1c524:	0001bd79 	.word	0x0001bd79
				parser->flags |= F_UPGRADE;
   1c528:	8823      	ldrh	r3, [r4, #0]
   1c52a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1c52e:	8023      	strh	r3, [r4, #0]
				parser->header_state = h_general;
   1c530:	78a3      	ldrb	r3, [r4, #2]
   1c532:	f36f 0347 	bfc	r3, #1, #7
   1c536:	e005      	b.n	1c544 <http_parser_execute+0xb6c>
				if ('c' == c) {
   1c538:	2a63      	cmp	r2, #99	; 0x63
   1c53a:	78a3      	ldrb	r3, [r4, #2]
   1c53c:	d1f9      	bne.n	1c532 <http_parser_execute+0xb5a>
					parser->header_state =
   1c53e:	220d      	movs	r2, #13
					parser->header_state =
   1c540:	f362 0347 	bfi	r3, r2, #1, #7
				parser->header_state = h_general;
   1c544:	70a3      	strb	r3, [r4, #2]
				break;
   1c546:	e417      	b.n	1bd78 <http_parser_execute+0x3a0>
				if (UNLIKELY(!IS_NUM(ch))) {
   1c548:	3d30      	subs	r5, #48	; 0x30
   1c54a:	b2eb      	uxtb	r3, r5
   1c54c:	2b09      	cmp	r3, #9
   1c54e:	d903      	bls.n	1c558 <http_parser_execute+0xb80>
				SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
   1c550:	2219      	movs	r2, #25
   1c552:	7de3      	ldrb	r3, [r4, #23]
   1c554:	f7ff baa0 	b.w	1ba98 <http_parser_execute+0xc0>
				if (parser->flags & F_CONTENTLENGTH) {
   1c558:	8823      	ldrh	r3, [r4, #0]
   1c55a:	0599      	lsls	r1, r3, #22
   1c55c:	f3c3 0287 	ubfx	r2, r3, #2, #8
   1c560:	d503      	bpl.n	1c56a <http_parser_execute+0xb92>
					SET_ERRNO
   1c562:	7de3      	ldrb	r3, [r4, #23]
				SET_ERRNO(HPE_UNEXPECTED_CONTENT_LENGTH);
   1c564:	221a      	movs	r2, #26
   1c566:	f7ff ba97 	b.w	1ba98 <http_parser_execute+0xc0>
				parser->flags |= F_CONTENTLENGTH;
   1c56a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1c56e:	f362 0389 	bfi	r3, r2, #2, #8
   1c572:	8023      	strh	r3, [r4, #0]
				parser->content_length = ch - '0';
   1c574:	60a5      	str	r5, [r4, #8]
   1c576:	17eb      	asrs	r3, r5, #31
			parser->content_length = t;
   1c578:	60e3      	str	r3, [r4, #12]
			break;
   1c57a:	f7ff bbfd 	b.w	1bd78 <http_parser_execute+0x3a0>
				if (c == 'k') {
   1c57e:	2a6b      	cmp	r2, #107	; 0x6b
   1c580:	78a3      	ldrb	r3, [r4, #2]
   1c582:	d101      	bne.n	1c588 <http_parser_execute+0xbb0>
					parser->header_state =
   1c584:	220f      	movs	r2, #15
   1c586:	e7db      	b.n	1c540 <http_parser_execute+0xb68>
				} else if (c == 'c') {
   1c588:	2a63      	cmp	r2, #99	; 0x63
   1c58a:	d101      	bne.n	1c590 <http_parser_execute+0xbb8>
					parser->header_state =
   1c58c:	2210      	movs	r2, #16
   1c58e:	e7d7      	b.n	1c540 <http_parser_execute+0xb68>
				} else if (c == 'u') {
   1c590:	2a75      	cmp	r2, #117	; 0x75
					parser->header_state =
   1c592:	bf0c      	ite	eq
   1c594:	2211      	moveq	r2, #17
					parser->header_state =
   1c596:	2212      	movne	r2, #18
   1c598:	e7d2      	b.n	1c540 <http_parser_execute+0xb68>
			for (; p != data + len; p++) {
   1c59a:	46b2      	mov	sl, r6
				(enum header_states)parser->header_state;
   1c59c:	f894 9002 	ldrb.w	r9, [r4, #2]
   1c5a0:	ea4f 0959 	mov.w	r9, r9, lsr #1
			for (; p != data + len; p++) {
   1c5a4:	45d3      	cmp	fp, sl
   1c5a6:	d021      	beq.n	1c5ec <http_parser_execute+0xc14>
				ch = *p;
   1c5a8:	f89a 5000 	ldrb.w	r5, [sl]
				if (ch == CR) {
   1c5ac:	2d0d      	cmp	r5, #13
   1c5ae:	d12d      	bne.n	1c60c <http_parser_execute+0xc34>
					UPDATE_STATE(s_header_almost_done);
   1c5b0:	2332      	movs	r3, #50	; 0x32
   1c5b2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
					parser->header_state = h_state;
   1c5b6:	78a3      	ldrb	r3, [r4, #2]
					rc = cb_data(parser,
   1c5b8:	2204      	movs	r2, #4
					parser->header_state = h_state;
   1c5ba:	f369 0347 	bfi	r3, r9, #1, #7
   1c5be:	70a3      	strb	r3, [r4, #2]
						     p - header_value_mark);
   1c5c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					rc = cb_data(parser,
   1c5c2:	4620      	mov	r0, r4
						     p - header_value_mark);
   1c5c4:	ebaa 0303 	sub.w	r3, sl, r3
					rc = cb_data(parser,
   1c5c8:	9303      	str	r3, [sp, #12]
   1c5ca:	ab0b      	add	r3, sp, #44	; 0x2c
   1c5cc:	9302      	str	r3, [sp, #8]
						     p - data + 1,
   1c5ce:	ebaa 0307 	sub.w	r3, sl, r7
   1c5d2:	3301      	adds	r3, #1
					rc = cb_data(parser,
   1c5d4:	9301      	str	r3, [sp, #4]
   1c5d6:	ab09      	add	r3, sp, #36	; 0x24
   1c5d8:	9300      	str	r3, [sp, #0]
   1c5da:	f8d8 1010 	ldr.w	r1, [r8, #16]
   1c5de:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1c5e2:	f00b fc12 	bl	27e0a <cb_data>
					if (rc != 0) {
   1c5e6:	2800      	cmp	r0, #0
   1c5e8:	f47f aa1a 	bne.w	1ba20 <http_parser_execute+0x48>
			parser->header_state = h_state;
   1c5ec:	78a3      	ldrb	r3, [r4, #2]
			rc = count_header_size(parser, p - start);
   1c5ee:	ebaa 0606 	sub.w	r6, sl, r6
			parser->header_state = h_state;
   1c5f2:	f369 0347 	bfi	r3, r9, #1, #7
   1c5f6:	70a3      	strb	r3, [r4, #2]
	parser->nread += bytes;
   1c5f8:	6863      	ldr	r3, [r4, #4]
   1c5fa:	441e      	add	r6, r3
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   1c5fc:	f5b6 3fa0 	cmp.w	r6, #81920	; 0x14000
	parser->nread += bytes;
   1c600:	6066      	str	r6, [r4, #4]
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   1c602:	f240 815b 	bls.w	1c8bc <http_parser_execute+0xee4>
		parser->http_errno = HPE_HEADER_OVERFLOW;
   1c606:	220c      	movs	r2, #12
   1c608:	7de3      	ldrb	r3, [r4, #23]
   1c60a:	e03d      	b.n	1c688 <http_parser_execute+0xcb0>
				if (ch == LF) {
   1c60c:	2d0a      	cmp	r5, #10
   1c60e:	d131      	bne.n	1c674 <http_parser_execute+0xc9c>
					UPDATE_STATE(s_header_almost_done);
   1c610:	2332      	movs	r3, #50	; 0x32
   1c612:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	parser->nread += bytes;
   1c616:	6863      	ldr	r3, [r4, #4]
					rc = count_header_size(parser,
   1c618:	ebaa 0606 	sub.w	r6, sl, r6
	parser->nread += bytes;
   1c61c:	441e      	add	r6, r3
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   1c61e:	f5b6 3fa0 	cmp.w	r6, #81920	; 0x14000
	parser->nread += bytes;
   1c622:	6066      	str	r6, [r4, #4]
						     p - data + 1,
   1c624:	ebaa 0207 	sub.w	r2, sl, r7
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   1c628:	d8ed      	bhi.n	1c606 <http_parser_execute+0xc2e>
					parser->header_state = h_state;
   1c62a:	78a3      	ldrb	r3, [r4, #2]
					rc = cb_data(parser,
   1c62c:	4620      	mov	r0, r4
					parser->header_state = h_state;
   1c62e:	f369 0347 	bfi	r3, r9, #1, #7
   1c632:	70a3      	strb	r3, [r4, #2]
						     p - header_value_mark);
   1c634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c636:	ebaa 0303 	sub.w	r3, sl, r3
					rc = cb_data(parser,
   1c63a:	9303      	str	r3, [sp, #12]
   1c63c:	ab0b      	add	r3, sp, #44	; 0x2c
   1c63e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1c642:	ab09      	add	r3, sp, #36	; 0x24
   1c644:	9300      	str	r3, [sp, #0]
   1c646:	2204      	movs	r2, #4
   1c648:	f8d8 1010 	ldr.w	r1, [r8, #16]
   1c64c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1c650:	f00b fbdb 	bl	27e0a <cb_data>
					if (rc != 0) {
   1c654:	2800      	cmp	r0, #0
   1c656:	f47f a9e3 	bne.w	1ba20 <http_parser_execute+0x48>
   1c65a:	4656      	mov	r6, sl
   1c65c:	f7ff ba64 	b.w	1bb28 <http_parser_execute+0x150>
   1c660:	0002d26e 	.word	0x0002d26e
   1c664:	0002d268 	.word	0x0002d268
   1c668:	0002d279 	.word	0x0002d279
   1c66c:	0002d288 	.word	0x0002d288
   1c670:	0002d29a 	.word	0x0002d29a
				if (!lenient && !IS_HEADER_CHAR(ch)) {
   1c674:	9b06      	ldr	r3, [sp, #24]
   1c676:	b95b      	cbnz	r3, 1c690 <http_parser_execute+0xcb8>
   1c678:	2d09      	cmp	r5, #9
   1c67a:	d009      	beq.n	1c690 <http_parser_execute+0xcb8>
   1c67c:	2d1f      	cmp	r5, #31
   1c67e:	d901      	bls.n	1c684 <http_parser_execute+0xcac>
   1c680:	2d7f      	cmp	r5, #127	; 0x7f
   1c682:	d105      	bne.n	1c690 <http_parser_execute+0xcb8>
					SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
   1c684:	2218      	movs	r2, #24
   1c686:	7de3      	ldrb	r3, [r4, #23]
		parser->http_errno = HPE_HEADER_OVERFLOW;
   1c688:	f362 0306 	bfi	r3, r2, #0, #7
   1c68c:	75e3      	strb	r3, [r4, #23]
			if (rc != 0) {
   1c68e:	e050      	b.n	1c732 <http_parser_execute+0xd5a>
				c = LOWER(ch);
   1c690:	f045 0320 	orr.w	r3, r5, #32
	switch (h_state) {
   1c694:	f1b9 0f16 	cmp.w	r9, #22
   1c698:	f200 8103 	bhi.w	1c8a2 <http_parser_execute+0xeca>
   1c69c:	e8df f019 	tbh	[pc, r9, lsl #1]
   1c6a0:	01010017 	.word	0x01010017
   1c6a4:	01010101 	.word	0x01010101
   1c6a8:	01010101 	.word	0x01010101
   1c6ac:	01010101 	.word	0x01010101
   1c6b0:	00300101 	.word	0x00300101
   1c6b4:	00300038 	.word	0x00300038
   1c6b8:	00710101 	.word	0x00710101
   1c6bc:	00950086 	.word	0x00950086
   1c6c0:	00c200ad 	.word	0x00c200ad
   1c6c4:	00e000d7 	.word	0x00e000d7
   1c6c8:	00e300e3 	.word	0x00e300e3
   1c6cc:	00e3      	.short	0x00e3
		size_t limit = data + len - p;
   1c6ce:	ebab 020a 	sub.w	r2, fp, sl
		limit = MIN(limit, HTTP_MAX_HEADER_SIZE);
   1c6d2:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1c6d6:	bf28      	it	cs
   1c6d8:	f44f 32a0 	movcs.w	r2, #81920	; 0x14000
		p_cr = (const char *)memchr(p, CR, limit);
   1c6dc:	210d      	movs	r1, #13
   1c6de:	4650      	mov	r0, sl
   1c6e0:	9207      	str	r2, [sp, #28]
   1c6e2:	f00e fd64 	bl	2b1ae <memchr>
   1c6e6:	4605      	mov	r5, r0
		p_lf = (const char *)memchr(p, LF, limit);
   1c6e8:	210a      	movs	r1, #10
   1c6ea:	4650      	mov	r0, sl
   1c6ec:	9a07      	ldr	r2, [sp, #28]
   1c6ee:	f00e fd5e 	bl	2b1ae <memchr>
		if (p_cr != NULL) {
   1c6f2:	b145      	cbz	r5, 1c706 <http_parser_execute+0xd2e>
			if (p_lf != NULL && p_cr >= p_lf) {
   1c6f4:	b110      	cbz	r0, 1c6fc <http_parser_execute+0xd24>
   1c6f6:	4285      	cmp	r5, r0
   1c6f8:	bf28      	it	cs
   1c6fa:	4605      	movcs	r5, r0
		--p;
   1c6fc:	f105 3aff 	add.w	sl, r5, #4294967295
			for (; p != data + len; p++) {
   1c700:	f10a 0a01 	add.w	sl, sl, #1
   1c704:	e74e      	b.n	1c5a4 <http_parser_execute+0xbcc>
		} else if (UNLIKELY(p_lf != NULL)) {
   1c706:	2800      	cmp	r0, #0
   1c708:	bf14      	ite	ne
   1c70a:	4605      	movne	r5, r0
   1c70c:	465d      	moveq	r5, fp
   1c70e:	e7f5      	b.n	1c6fc <http_parser_execute+0xd24>
		if (ch == ' ') {
   1c710:	2d20      	cmp	r5, #32
   1c712:	d0f5      	beq.n	1c700 <http_parser_execute+0xd28>
		if (UNLIKELY(!IS_NUM(ch))) {
   1c714:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   1c718:	b2da      	uxtb	r2, r3
   1c71a:	2a09      	cmp	r2, #9
   1c71c:	d915      	bls.n	1c74a <http_parser_execute+0xd72>
			SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
   1c71e:	2219      	movs	r2, #25
   1c720:	7de3      	ldrb	r3, [r4, #23]
   1c722:	f362 0306 	bfi	r3, r2, #0, #7
			parser->header_state = h_state;
   1c726:	220a      	movs	r2, #10
			SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
   1c728:	75e3      	strb	r3, [r4, #23]
			parser->header_state = h_state;
   1c72a:	78a3      	ldrb	r3, [r4, #2]
   1c72c:	f362 0347 	bfi	r3, r2, #1, #7
			parser->header_state = h_state;
   1c730:	70a3      	strb	r3, [r4, #2]
   1c732:	4656      	mov	r6, sl
	if (HTTP_PARSER_ERRNO(parser) == HPE_OK) {
   1c734:	7de3      	ldrb	r3, [r4, #23]
   1c736:	065a      	lsls	r2, r3, #25
		SET_ERRNO(HPE_UNKNOWN);
   1c738:	bf02      	ittt	eq
   1c73a:	2220      	moveq	r2, #32
   1c73c:	f362 0306 	bfieq	r3, r2, #0, #7
   1c740:	75e3      	strbeq	r3, [r4, #23]
	parser->state = CURRENT_STATE();
   1c742:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   1c746:	6823      	ldr	r3, [r4, #0]
   1c748:	e17c      	b.n	1ca44 <http_parser_execute+0x106c>
		t *= 10U;
   1c74a:	210a      	movs	r1, #10
		t = parser->content_length;
   1c74c:	e9d4 0c02 	ldrd	r0, ip, [r4, #8]
		t *= 10U;
   1c750:	fba0 2501 	umull	r2, r5, r0, r1
   1c754:	fb01 550c 	mla	r5, r1, ip, r5
		t += ch - '0';
   1c758:	189a      	adds	r2, r3, r2
   1c75a:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
		if (UNLIKELY(value < parser->content_length)) {
   1c75e:	4b98      	ldr	r3, [pc, #608]	; (1c9c0 <http_parser_execute+0xfe8>)
   1c760:	f1b0 3f99 	cmp.w	r0, #2576980377	; 0x99999999
   1c764:	eb7c 0303 	sbcs.w	r3, ip, r3
   1c768:	d308      	bcc.n	1c77c <http_parser_execute+0xda4>
			SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
   1c76a:	2219      	movs	r2, #25
   1c76c:	7de3      	ldrb	r3, [r4, #23]
   1c76e:	f362 0306 	bfi	r3, r2, #0, #7
   1c772:	75e3      	strb	r3, [r4, #23]
			parser->header_state = h_state;
   1c774:	78a3      	ldrb	r3, [r4, #2]
   1c776:	f361 0347 	bfi	r3, r1, #1, #7
   1c77a:	e7d9      	b.n	1c730 <http_parser_execute+0xd58>
		parser->content_length = t;
   1c77c:	e9c4 2502 	strd	r2, r5, [r4, #8]
				if (rc != 0) {
   1c780:	e7be      	b.n	1c700 <http_parser_execute+0xd28>
		parser->index++;
   1c782:	78e1      	ldrb	r1, [r4, #3]
   1c784:	1c4a      	adds	r2, r1, #1
   1c786:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1c78a:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != CHUNKED[parser->index]) {
   1c78e:	2a07      	cmp	r2, #7
		parser->index++;
   1c790:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != CHUNKED[parser->index]) {
   1c792:	d817      	bhi.n	1c7c4 <http_parser_execute+0xdec>
   1c794:	498b      	ldr	r1, [pc, #556]	; (1c9c4 <http_parser_execute+0xfec>)
   1c796:	5c8a      	ldrb	r2, [r1, r2]
   1c798:	429a      	cmp	r2, r3
   1c79a:	d113      	bne.n	1c7c4 <http_parser_execute+0xdec>
		} else if (parser->index == sizeof(CHUNKED) - 2) {
   1c79c:	78e3      	ldrb	r3, [r4, #3]
   1c79e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			h_state = h_transfer_encoding_chunked;
   1c7a2:	2b06      	cmp	r3, #6
   1c7a4:	bf08      	it	eq
   1c7a6:	f04f 0913 	moveq.w	r9, #19
   1c7aa:	e7a9      	b.n	1c700 <http_parser_execute+0xd28>
		if (c == 'k') {
   1c7ac:	2b6b      	cmp	r3, #107	; 0x6b
   1c7ae:	d07c      	beq.n	1c8aa <http_parser_execute+0xed2>
		} else if (c == 'c') {
   1c7b0:	2b63      	cmp	r3, #99	; 0x63
   1c7b2:	d07d      	beq.n	1c8b0 <http_parser_execute+0xed8>
		} else if (c == 'u') {
   1c7b4:	2b75      	cmp	r3, #117	; 0x75
   1c7b6:	d07e      	beq.n	1c8b6 <http_parser_execute+0xede>
		} else if (STRICT_TOKEN(c)) {
   1c7b8:	4a83      	ldr	r2, [pc, #524]	; (1c9c8 <http_parser_execute+0xff0>)
   1c7ba:	5cd3      	ldrb	r3, [r2, r3]
   1c7bc:	b993      	cbnz	r3, 1c7e4 <http_parser_execute+0xe0c>
		} else if (c == ' ' || c == '\t') {
   1c7be:	f015 0fdf 	tst.w	r5, #223	; 0xdf
   1c7c2:	d04a      	beq.n	1c85a <http_parser_execute+0xe82>
			h_state = h_general;
   1c7c4:	f04f 0900 	mov.w	r9, #0
   1c7c8:	e79a      	b.n	1c700 <http_parser_execute+0xd28>
		parser->index++;
   1c7ca:	78e1      	ldrb	r1, [r4, #3]
   1c7cc:	1c4a      	adds	r2, r1, #1
   1c7ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1c7d2:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != KEEP_ALIVE[parser->index]) {
   1c7d6:	2a0a      	cmp	r2, #10
		parser->index++;
   1c7d8:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != KEEP_ALIVE[parser->index]) {
   1c7da:	d803      	bhi.n	1c7e4 <http_parser_execute+0xe0c>
   1c7dc:	497b      	ldr	r1, [pc, #492]	; (1c9cc <http_parser_execute+0xff4>)
   1c7de:	5c8a      	ldrb	r2, [r1, r2]
   1c7e0:	429a      	cmp	r2, r3
   1c7e2:	d002      	beq.n	1c7ea <http_parser_execute+0xe12>
			h_state = h_matching_connection_token;
   1c7e4:	f04f 0912 	mov.w	r9, #18
   1c7e8:	e78a      	b.n	1c700 <http_parser_execute+0xd28>
		} else if (parser->index == sizeof(KEEP_ALIVE) - 2) {
   1c7ea:	78e3      	ldrb	r3, [r4, #3]
   1c7ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			h_state = h_connection_keep_alive;
   1c7f0:	2b09      	cmp	r3, #9
   1c7f2:	bf08      	it	eq
   1c7f4:	f04f 0914 	moveq.w	r9, #20
   1c7f8:	e782      	b.n	1c700 <http_parser_execute+0xd28>
		parser->index++;
   1c7fa:	78e1      	ldrb	r1, [r4, #3]
   1c7fc:	1c4a      	adds	r2, r1, #1
   1c7fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1c802:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != CLOSE[parser->index]) {
   1c806:	2a05      	cmp	r2, #5
		parser->index++;
   1c808:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != CLOSE[parser->index]) {
   1c80a:	d8eb      	bhi.n	1c7e4 <http_parser_execute+0xe0c>
   1c80c:	4970      	ldr	r1, [pc, #448]	; (1c9d0 <http_parser_execute+0xff8>)
   1c80e:	5c8a      	ldrb	r2, [r1, r2]
   1c810:	429a      	cmp	r2, r3
   1c812:	d1e7      	bne.n	1c7e4 <http_parser_execute+0xe0c>
		} else if (parser->index == sizeof(CLOSE) - 2) {
   1c814:	78e3      	ldrb	r3, [r4, #3]
   1c816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			h_state = h_connection_close;
   1c81a:	2b04      	cmp	r3, #4
   1c81c:	bf08      	it	eq
   1c81e:	f04f 0915 	moveq.w	r9, #21
   1c822:	e76d      	b.n	1c700 <http_parser_execute+0xd28>
		parser->index++;
   1c824:	78e1      	ldrb	r1, [r4, #3]
   1c826:	1c4a      	adds	r2, r1, #1
   1c828:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1c82c:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != UPGRADE[parser->index]) {
   1c830:	2a07      	cmp	r2, #7
		parser->index++;
   1c832:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != UPGRADE[parser->index]) {
   1c834:	d8d6      	bhi.n	1c7e4 <http_parser_execute+0xe0c>
   1c836:	4967      	ldr	r1, [pc, #412]	; (1c9d4 <http_parser_execute+0xffc>)
   1c838:	5c8a      	ldrb	r2, [r1, r2]
   1c83a:	429a      	cmp	r2, r3
   1c83c:	d1d2      	bne.n	1c7e4 <http_parser_execute+0xe0c>
		} else if (parser->index == sizeof(UPGRADE) - 2) {
   1c83e:	78e3      	ldrb	r3, [r4, #3]
   1c840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			h_state = h_connection_upgrade;
   1c844:	2b06      	cmp	r3, #6
   1c846:	bf08      	it	eq
   1c848:	f04f 0916 	moveq.w	r9, #22
   1c84c:	e758      	b.n	1c700 <http_parser_execute+0xd28>
		if (ch == ',') {
   1c84e:	2d2c      	cmp	r5, #44	; 0x2c
   1c850:	d1c8      	bne.n	1c7e4 <http_parser_execute+0xe0c>
			parser->index = 0U;
   1c852:	78e3      	ldrb	r3, [r4, #3]
   1c854:	f36f 0306 	bfc	r3, #0, #7
   1c858:	70e3      	strb	r3, [r4, #3]
			h_state = h_matching_connection_token_start;
   1c85a:	f04f 090e 	mov.w	r9, #14
   1c85e:	e74f      	b.n	1c700 <http_parser_execute+0xd28>
		if (ch != ' ') {
   1c860:	2d20      	cmp	r5, #32
   1c862:	d1af      	bne.n	1c7c4 <http_parser_execute+0xdec>
   1c864:	e74c      	b.n	1c700 <http_parser_execute+0xd28>
		if (ch == ',') {
   1c866:	2d2c      	cmp	r5, #44	; 0x2c
   1c868:	d118      	bne.n	1c89c <http_parser_execute+0xec4>
				parser->flags |= F_CONNECTION_KEEP_ALIVE;
   1c86a:	8823      	ldrh	r3, [r4, #0]
			if (h_state == h_connection_keep_alive) {
   1c86c:	f1b9 0f14 	cmp.w	r9, #20
				parser->flags |= F_CONNECTION_KEEP_ALIVE;
   1c870:	f3c3 0387 	ubfx	r3, r3, #2, #8
			if (h_state == h_connection_keep_alive) {
   1c874:	d10a      	bne.n	1c88c <http_parser_execute+0xeb4>
				parser->flags |= F_CONNECTION_KEEP_ALIVE;
   1c876:	f043 0302 	orr.w	r3, r3, #2
   1c87a:	6822      	ldr	r2, [r4, #0]
   1c87c:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
   1c880:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   1c884:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
   1c888:	6022      	str	r2, [r4, #0]
   1c88a:	e7e6      	b.n	1c85a <http_parser_execute+0xe82>
			} else if (h_state == h_connection_close) {
   1c88c:	f1b9 0f15 	cmp.w	r9, #21
				parser->flags |= F_CONNECTION_CLOSE;
   1c890:	bf0c      	ite	eq
   1c892:	f043 0304 	orreq.w	r3, r3, #4
				parser->flags |= F_CONNECTION_UPGRADE;
   1c896:	f043 0308 	orrne.w	r3, r3, #8
   1c89a:	e7ee      	b.n	1c87a <http_parser_execute+0xea2>
		} else if (ch != ' ') {
   1c89c:	2d20      	cmp	r5, #32
   1c89e:	d1a1      	bne.n	1c7e4 <http_parser_execute+0xe0c>
   1c8a0:	e72e      	b.n	1c700 <http_parser_execute+0xd28>
		*p_state = s_header_value;
   1c8a2:	2330      	movs	r3, #48	; 0x30
   1c8a4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				if (rc != 0) {
   1c8a8:	e78c      	b.n	1c7c4 <http_parser_execute+0xdec>
	enum header_states h_state = *header_state;
   1c8aa:	f04f 090f 	mov.w	r9, #15
   1c8ae:	e727      	b.n	1c700 <http_parser_execute+0xd28>
			h_state = h_matching_connection_close;
   1c8b0:	f04f 0910 	mov.w	r9, #16
   1c8b4:	e724      	b.n	1c700 <http_parser_execute+0xd28>
	enum header_states h_state = *header_state;
   1c8b6:	f04f 0911 	mov.w	r9, #17
   1c8ba:	e721      	b.n	1c700 <http_parser_execute+0xd28>
			if (p == data + len) {
   1c8bc:	45d3      	cmp	fp, sl
   1c8be:	f43f a90a 	beq.w	1bad6 <http_parser_execute+0xfe>
   1c8c2:	4656      	mov	r6, sl
   1c8c4:	f7ff ba58 	b.w	1bd78 <http_parser_execute+0x3a0>
			if (UNLIKELY(ch != LF)) {
   1c8c8:	2d0a      	cmp	r5, #10
   1c8ca:	f47f acaf 	bne.w	1c22c <http_parser_execute+0x854>
			UPDATE_STATE(s_header_value_lws);
   1c8ce:	2331      	movs	r3, #49	; 0x31
   1c8d0:	f7ff b9c9 	b.w	1bc66 <http_parser_execute+0x28e>
			if (ch == ' ' || ch == '\t') {
   1c8d4:	2d20      	cmp	r5, #32
   1c8d6:	d001      	beq.n	1c8dc <http_parser_execute+0xf04>
   1c8d8:	2d09      	cmp	r5, #9
   1c8da:	d102      	bne.n	1c8e2 <http_parser_execute+0xf0a>
				UPDATE_STATE(s_header_value_start);
   1c8dc:	232f      	movs	r3, #47	; 0x2f
   1c8de:	f7ff b921 	b.w	1bb24 <http_parser_execute+0x14c>
			switch (parser->header_state) {
   1c8e2:	78a3      	ldrb	r3, [r4, #2]
   1c8e4:	085b      	lsrs	r3, r3, #1
   1c8e6:	3b13      	subs	r3, #19
   1c8e8:	2b03      	cmp	r3, #3
   1c8ea:	d807      	bhi.n	1c8fc <http_parser_execute+0xf24>
   1c8ec:	e8df f003 	tbb	[pc, r3]
   1c8f0:	1109020d 	.word	0x1109020d
				parser->flags |= F_CONNECTION_KEEP_ALIVE;
   1c8f4:	8823      	ldrh	r3, [r4, #0]
   1c8f6:	f043 0308 	orr.w	r3, r3, #8
				parser->flags |= F_CONNECTION_UPGRADE;
   1c8fa:	8023      	strh	r3, [r4, #0]
			UPDATE_STATE(s_header_field_start);
   1c8fc:	232a      	movs	r3, #42	; 0x2a
   1c8fe:	f7ff b911 	b.w	1bb24 <http_parser_execute+0x14c>
				parser->flags |= F_CONNECTION_CLOSE;
   1c902:	8823      	ldrh	r3, [r4, #0]
   1c904:	f043 0310 	orr.w	r3, r3, #16
   1c908:	e7f7      	b.n	1c8fa <http_parser_execute+0xf22>
				parser->flags |= F_CHUNKED;
   1c90a:	8823      	ldrh	r3, [r4, #0]
   1c90c:	f043 0304 	orr.w	r3, r3, #4
   1c910:	e7f3      	b.n	1c8fa <http_parser_execute+0xf22>
				parser->flags |= F_CONNECTION_UPGRADE;
   1c912:	8823      	ldrh	r3, [r4, #0]
   1c914:	f043 0320 	orr.w	r3, r3, #32
   1c918:	e7ef      	b.n	1c8fa <http_parser_execute+0xf22>
			if (ch == ' ' || ch == '\t') {
   1c91a:	2d20      	cmp	r5, #32
   1c91c:	d001      	beq.n	1c922 <http_parser_execute+0xf4a>
   1c91e:	2d09      	cmp	r5, #9
   1c920:	d102      	bne.n	1c928 <http_parser_execute+0xf50>
				UPDATE_STATE(s_header_value_discard_ws);
   1c922:	232c      	movs	r3, #44	; 0x2c
   1c924:	f7ff b99f 	b.w	1bc66 <http_parser_execute+0x28e>
			switch (parser->header_state) {
   1c928:	78a3      	ldrb	r3, [r4, #2]
   1c92a:	085b      	lsrs	r3, r3, #1
   1c92c:	3b13      	subs	r3, #19
   1c92e:	2b03      	cmp	r3, #3
   1c930:	d807      	bhi.n	1c942 <http_parser_execute+0xf6a>
   1c932:	e8df f003 	tbb	[pc, r3]
   1c936:	0226      	.short	0x0226
   1c938:	221e      	.short	0x221e
				parser->flags |=
   1c93a:	8823      	ldrh	r3, [r4, #0]
   1c93c:	f043 0308 	orr.w	r3, r3, #8
				parser->flags |= F_CHUNKED;
   1c940:	8023      	strh	r3, [r4, #0]
			MARK(header_value);
   1c942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c944:	b903      	cbnz	r3, 1c948 <http_parser_execute+0xf70>
   1c946:	960b      	str	r6, [sp, #44]	; 0x2c
			UPDATE_STATE(s_header_field_start);
   1c948:	232a      	movs	r3, #42	; 0x2a
			rc = cb_data(parser, settings->on_header_value,
   1c94a:	2204      	movs	r2, #4
			UPDATE_STATE(s_header_field_start);
   1c94c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				     p - header_value_mark);
   1c950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c952:	1af3      	subs	r3, r6, r3
			rc = cb_data(parser, settings->on_header_value,
   1c954:	9303      	str	r3, [sp, #12]
   1c956:	ab0b      	add	r3, sp, #44	; 0x2c
   1c958:	9302      	str	r3, [sp, #8]
				     p - data, &header_value_mark,
   1c95a:	1bf3      	subs	r3, r6, r7
			rc = cb_data(parser, settings->on_header_value,
   1c95c:	9301      	str	r3, [sp, #4]
   1c95e:	ab09      	add	r3, sp, #36	; 0x24
   1c960:	9300      	str	r3, [sp, #0]
   1c962:	f8d8 1010 	ldr.w	r1, [r8, #16]
   1c966:	f10d 0323 	add.w	r3, sp, #35	; 0x23
				rc = cb_data(parser, settings->on_body,
   1c96a:	4620      	mov	r0, r4
   1c96c:	f00b fa4d 	bl	27e0a <cb_data>
   1c970:	e020      	b.n	1c9b4 <http_parser_execute+0xfdc>
				parser->flags |= F_CONNECTION_CLOSE;
   1c972:	8823      	ldrh	r3, [r4, #0]
   1c974:	f043 0310 	orr.w	r3, r3, #16
   1c978:	e7e2      	b.n	1c940 <http_parser_execute+0xf68>
				parser->flags |= F_CONNECTION_UPGRADE;
   1c97a:	8823      	ldrh	r3, [r4, #0]
   1c97c:	f043 0320 	orr.w	r3, r3, #32
   1c980:	e7de      	b.n	1c940 <http_parser_execute+0xf68>
				parser->flags |= F_CHUNKED;
   1c982:	8823      	ldrh	r3, [r4, #0]
   1c984:	f043 0304 	orr.w	r3, r3, #4
   1c988:	e7da      	b.n	1c940 <http_parser_execute+0xf68>
			if (parser->flags & F_TRAILING) {
   1c98a:	8823      	ldrh	r3, [r4, #0]
   1c98c:	f3c3 0187 	ubfx	r1, r3, #2, #8
   1c990:	065b      	lsls	r3, r3, #25
   1c992:	460a      	mov	r2, r1
   1c994:	d520      	bpl.n	1c9d8 <http_parser_execute+0x1000>
				UPDATE_STATE(s_message_done);
   1c996:	233e      	movs	r3, #62	; 0x3e
   1c998:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
					       p - data);
   1c99c:	1bf3      	subs	r3, r6, r7
				rc = cb_notify(parser, &p_state,
   1c99e:	9301      	str	r3, [sp, #4]
   1c9a0:	ab09      	add	r3, sp, #36	; 0x24
   1c9a2:	9300      	str	r3, [sp, #0]
   1c9a4:	4620      	mov	r0, r4
   1c9a6:	230a      	movs	r3, #10
   1c9a8:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
   1c9ac:	f10d 0123 	add.w	r1, sp, #35	; 0x23
   1c9b0:	f00b fa0a 	bl	27dc8 <cb_notify>
				if (rc != 0) {
   1c9b4:	2800      	cmp	r0, #0
   1c9b6:	f43f a8b7 	beq.w	1bb28 <http_parser_execute+0x150>
   1c9ba:	f7ff b831 	b.w	1ba20 <http_parser_execute+0x48>
   1c9be:	bf00      	nop
   1c9c0:	19999999 	.word	0x19999999
   1c9c4:	0002d2a2 	.word	0x0002d2a2
   1c9c8:	0002dab1 	.word	0x0002dab1
   1c9cc:	0002d2aa 	.word	0x0002d2aa
   1c9d0:	0002d2b5 	.word	0x0002d2b5
   1c9d4:	0002d29a 	.word	0x0002d29a
			if ((parser->flags & F_CHUNKED) &&
   1c9d8:	f011 0f01 	tst.w	r1, #1
   1c9dc:	7de3      	ldrb	r3, [r4, #23]
   1c9de:	d002      	beq.n	1c9e6 <http_parser_execute+0x100e>
   1c9e0:	0608      	lsls	r0, r1, #24
   1c9e2:	f53f adbf 	bmi.w	1c564 <http_parser_execute+0xb8c>
			UPDATE_STATE(s_headers_done);
   1c9e6:	2138      	movs	r1, #56	; 0x38
				((parser->flags & flags) == flags ||
   1c9e8:	f002 0228 	and.w	r2, r2, #40	; 0x28
   1c9ec:	2a28      	cmp	r2, #40	; 0x28
			UPDATE_STATE(s_headers_done);
   1c9ee:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
				((parser->flags & flags) == flags ||
   1c9f2:	d015      	beq.n	1ca20 <http_parser_execute+0x1048>
   1c9f4:	7da2      	ldrb	r2, [r4, #22]
   1c9f6:	1f51      	subs	r1, r2, #5
   1c9f8:	424a      	negs	r2, r1
   1c9fa:	414a      	adcs	r2, r1
			parser->upgrade =
   1c9fc:	f362 13c7 	bfi	r3, r2, #7, #1
   1ca00:	75e3      	strb	r3, [r4, #23]
			if (settings->on_headers_complete) {
   1ca02:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1ca06:	b133      	cbz	r3, 1ca16 <http_parser_execute+0x103e>
				switch (settings->on_headers_complete(parser)) {
   1ca08:	4620      	mov	r0, r4
   1ca0a:	4798      	blx	r3
   1ca0c:	2801      	cmp	r0, #1
   1ca0e:	d00d      	beq.n	1ca2c <http_parser_execute+0x1054>
   1ca10:	2802      	cmp	r0, #2
   1ca12:	d007      	beq.n	1ca24 <http_parser_execute+0x104c>
   1ca14:	b978      	cbnz	r0, 1ca36 <http_parser_execute+0x105e>
			if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {
   1ca16:	7de3      	ldrb	r3, [r4, #23]
   1ca18:	065b      	lsls	r3, r3, #25
   1ca1a:	f43f a885 	beq.w	1bb28 <http_parser_execute+0x150>
   1ca1e:	e00f      	b.n	1ca40 <http_parser_execute+0x1068>
				((parser->flags & flags) == flags ||
   1ca20:	2201      	movs	r2, #1
   1ca22:	e7eb      	b.n	1c9fc <http_parser_execute+0x1024>
					parser->upgrade = 1U;
   1ca24:	7de3      	ldrb	r3, [r4, #23]
   1ca26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1ca2a:	75e3      	strb	r3, [r4, #23]
					parser->flags |= F_SKIPBODY;
   1ca2c:	8823      	ldrh	r3, [r4, #0]
   1ca2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1ca32:	8023      	strh	r3, [r4, #0]
					break;
   1ca34:	e7ef      	b.n	1ca16 <http_parser_execute+0x103e>
					SET_ERRNO(HPE_CB_headers_complete);
   1ca36:	2205      	movs	r2, #5
   1ca38:	7de3      	ldrb	r3, [r4, #23]
   1ca3a:	f362 0306 	bfi	r3, r2, #0, #7
   1ca3e:	75e3      	strb	r3, [r4, #23]
				parser->state = CURRENT_STATE();
   1ca40:	2238      	movs	r2, #56	; 0x38
   1ca42:	6823      	ldr	r3, [r4, #0]
	parser->state = CURRENT_STATE();
   1ca44:	f362 2390 	bfi	r3, r2, #10, #7
   1ca48:	6023      	str	r3, [r4, #0]
	*parsed = p - data; /* Error */
   1ca4a:	1bf6      	subs	r6, r6, r7
   1ca4c:	e067      	b.n	1cb1e <http_parser_execute+0x1146>
			parser->nread = 0U;
   1ca4e:	2300      	movs	r3, #0
   1ca50:	6063      	str	r3, [r4, #4]
			hasBody = parser->flags & F_CHUNKED ||
   1ca52:	8823      	ldrh	r3, [r4, #0]
   1ca54:	f994 2017 	ldrsb.w	r2, [r4, #23]
   1ca58:	f013 0f04 	tst.w	r3, #4
   1ca5c:	f3c3 0587 	ubfx	r5, r3, #2, #8
   1ca60:	d133      	bne.n	1caca <http_parser_execute+0x10f2>
				  (parser->content_length > 0 &&
   1ca62:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   1ca66:	f113 3cff 	adds.w	ip, r3, #4294967295
   1ca6a:	f141 30ff 	adc.w	r0, r1, #4294967295
			hasBody = parser->flags & F_CHUNKED ||
   1ca6e:	f11c 0f02 	cmn.w	ip, #2
   1ca72:	f170 30ff 	sbcs.w	r0, r0, #4294967295
   1ca76:	d320      	bcc.n	1caba <http_parser_execute+0x10e2>
			if (parser->upgrade &&
   1ca78:	2a00      	cmp	r2, #0
   1ca7a:	db32      	blt.n	1cae2 <http_parser_execute+0x110a>
			if (parser->flags & F_SKIPBODY) {
   1ca7c:	0668      	lsls	r0, r5, #25
   1ca7e:	d457      	bmi.n	1cb30 <http_parser_execute+0x1158>
	if (parser->content_length == 0U) {
   1ca80:	430b      	orrs	r3, r1
   1ca82:	d167      	bne.n	1cb54 <http_parser_execute+0x117c>
			UPDATE_STATE(NEW_MESSAGE());
   1ca84:	7823      	ldrb	r3, [r4, #0]
			rc = cb_notify(parser, &p_state,
   1ca86:	4620      	mov	r0, r4
			UPDATE_STATE(NEW_MESSAGE());
   1ca88:	f013 0f03 	tst.w	r3, #3
   1ca8c:	bf14      	ite	ne
   1ca8e:	2304      	movne	r3, #4
   1ca90:	2312      	moveq	r3, #18
   1ca92:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
				       p - data + 1);
   1ca96:	1bf3      	subs	r3, r6, r7
   1ca98:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
   1ca9a:	9301      	str	r3, [sp, #4]
   1ca9c:	ab09      	add	r3, sp, #36	; 0x24
   1ca9e:	9300      	str	r3, [sp, #0]
   1caa0:	f8d8 201c 	ldr.w	r2, [r8, #28]
   1caa4:	2307      	movs	r3, #7
   1caa6:	a90f      	add	r1, sp, #60	; 0x3c
   1caa8:	f00b f98e 	bl	27dc8 <cb_notify>
			if (rc != 0) {
   1caac:	2800      	cmp	r0, #0
   1caae:	f47e afb7 	bne.w	1ba20 <http_parser_execute+0x48>
	*current_state = p_state;
   1cab2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   1cab6:	f7ff b8d6 	b.w	1bc66 <http_parser_execute+0x28e>
			if (parser->upgrade &&
   1caba:	2a00      	cmp	r2, #0
   1cabc:	db32      	blt.n	1cb24 <http_parser_execute+0x114c>
			if (parser->flags & F_SKIPBODY) {
   1cabe:	0669      	lsls	r1, r5, #25
   1cac0:	d436      	bmi.n	1cb30 <http_parser_execute+0x1158>
		UPDATE_STATE(s_body_identity);
   1cac2:	233c      	movs	r3, #60	; 0x3c
			UPDATE_STATE(s_body_identity_eof);
   1cac4:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   1cac8:	e7f3      	b.n	1cab2 <http_parser_execute+0x10da>
			if (parser->upgrade &&
   1caca:	2a00      	cmp	r2, #0
   1cacc:	db04      	blt.n	1cad8 <http_parser_execute+0x1100>
			if (parser->flags & F_SKIPBODY) {
   1cace:	066a      	lsls	r2, r5, #25
   1cad0:	d42e      	bmi.n	1cb30 <http_parser_execute+0x1158>
				UPDATE_STATE(s_chunk_size_start);
   1cad2:	2333      	movs	r3, #51	; 0x33
   1cad4:	f7ff b8c7 	b.w	1bc66 <http_parser_execute+0x28e>
			if (parser->upgrade &&
   1cad8:	7da3      	ldrb	r3, [r4, #22]
   1cada:	2b05      	cmp	r3, #5
   1cadc:	d001      	beq.n	1cae2 <http_parser_execute+0x110a>
				(parser->method == HTTP_CONNECT ||
   1cade:	066b      	lsls	r3, r5, #25
   1cae0:	d5f7      	bpl.n	1cad2 <http_parser_execute+0x10fa>
				UPDATE_STATE(NEW_MESSAGE());
   1cae2:	7823      	ldrb	r3, [r4, #0]
					       p - data + 1);
   1cae4:	1bf6      	subs	r6, r6, r7
				UPDATE_STATE(NEW_MESSAGE());
   1cae6:	f013 0f03 	tst.w	r3, #3
   1caea:	bf14      	ite	ne
   1caec:	2304      	movne	r3, #4
   1caee:	2312      	moveq	r3, #18
					       p - data + 1);
   1caf0:	3601      	adds	r6, #1
				UPDATE_STATE(NEW_MESSAGE());
   1caf2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				rc = cb_notify(parser, &p_state,
   1caf6:	ab09      	add	r3, sp, #36	; 0x24
   1caf8:	9300      	str	r3, [sp, #0]
   1cafa:	9601      	str	r6, [sp, #4]
   1cafc:	2307      	movs	r3, #7
   1cafe:	4620      	mov	r0, r4
   1cb00:	f8d8 201c 	ldr.w	r2, [r8, #28]
   1cb04:	f10d 0123 	add.w	r1, sp, #35	; 0x23
   1cb08:	f00b f95e 	bl	27dc8 <cb_notify>
				if (rc != 0) {
   1cb0c:	2800      	cmp	r0, #0
   1cb0e:	f47e af87 	bne.w	1ba20 <http_parser_execute+0x48>
				parser->state = CURRENT_STATE();
   1cb12:	6823      	ldr	r3, [r4, #0]
   1cb14:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   1cb18:	f362 2390 	bfi	r3, r2, #10, #7
   1cb1c:	6023      	str	r3, [r4, #0]
				*parsed = p - data + 1;
   1cb1e:	9609      	str	r6, [sp, #36]	; 0x24
				return 0;
   1cb20:	f7fe bf7e 	b.w	1ba20 <http_parser_execute+0x48>
			if (parser->upgrade &&
   1cb24:	7da3      	ldrb	r3, [r4, #22]
   1cb26:	2b05      	cmp	r3, #5
   1cb28:	d0db      	beq.n	1cae2 <http_parser_execute+0x110a>
				(parser->method == HTTP_CONNECT ||
   1cb2a:	066d      	lsls	r5, r5, #25
   1cb2c:	d5c9      	bpl.n	1cac2 <http_parser_execute+0x10ea>
   1cb2e:	e7d8      	b.n	1cae2 <http_parser_execute+0x110a>
				UPDATE_STATE(NEW_MESSAGE());
   1cb30:	7823      	ldrb	r3, [r4, #0]
   1cb32:	f013 0f03 	tst.w	r3, #3
   1cb36:	bf14      	ite	ne
   1cb38:	2304      	movne	r3, #4
   1cb3a:	2312      	moveq	r3, #18
   1cb3c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
					       p - data + 1);
   1cb40:	1bf3      	subs	r3, r6, r7
   1cb42:	3301      	adds	r3, #1
				rc = cb_notify(parser, &p_state,
   1cb44:	9301      	str	r3, [sp, #4]
   1cb46:	ab09      	add	r3, sp, #36	; 0x24
   1cb48:	9300      	str	r3, [sp, #0]
   1cb4a:	f8d8 201c 	ldr.w	r2, [r8, #28]
   1cb4e:	2307      	movs	r3, #7
   1cb50:	f7ff b8a4 	b.w	1bc9c <http_parser_execute+0x2c4>
		if (!http_message_needs_eof(parser)) {
   1cb54:	4620      	mov	r0, r4
   1cb56:	f00b f983 	bl	27e60 <http_message_needs_eof>
   1cb5a:	2800      	cmp	r0, #0
   1cb5c:	d092      	beq.n	1ca84 <http_parser_execute+0x10ac>
			UPDATE_STATE(s_body_identity_eof);
   1cb5e:	233d      	movs	r3, #61	; 0x3d
   1cb60:	e7b0      	b.n	1cac4 <http_parser_execute+0x10ec>
			uint64_t to_read = MIN(parser->content_length,
   1cb62:	ebab 0206 	sub.w	r2, fp, r6
   1cb66:	e9d4 e102 	ldrd	lr, r1, [r4, #8]
   1cb6a:	17d0      	asrs	r0, r2, #31
   1cb6c:	4596      	cmp	lr, r2
			MARK(body);
   1cb6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			uint64_t to_read = MIN(parser->content_length,
   1cb70:	eb71 0c00 	sbcs.w	ip, r1, r0
   1cb74:	bf3c      	itt	cc
   1cb76:	4672      	movcc	r2, lr
   1cb78:	4608      	movcc	r0, r1
			MARK(body);
   1cb7a:	b903      	cbnz	r3, 1cb7e <http_parser_execute+0x11a6>
   1cb7c:	960d      	str	r6, [sp, #52]	; 0x34
			parser->content_length -= to_read;
   1cb7e:	ebbe 0302 	subs.w	r3, lr, r2
   1cb82:	eb61 0100 	sbc.w	r1, r1, r0
   1cb86:	e9c4 3102 	strd	r3, r1, [r4, #8]
			p += to_read - 1;
   1cb8a:	3a01      	subs	r2, #1
			if (parser->content_length == 0U) {
   1cb8c:	430b      	orrs	r3, r1
			p += to_read - 1;
   1cb8e:	4416      	add	r6, r2
			if (parser->content_length == 0U) {
   1cb90:	f47f a8f2 	bne.w	1bd78 <http_parser_execute+0x3a0>
				UPDATE_STATE(s_message_done);
   1cb94:	233e      	movs	r3, #62	; 0x3e
   1cb96:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
					     p - body_mark + 1);
   1cb9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				rc = cb_data(parser, settings->on_body,
   1cb9c:	2206      	movs	r2, #6
					     p - body_mark + 1);
   1cb9e:	1af3      	subs	r3, r6, r3
   1cba0:	3301      	adds	r3, #1
				rc = cb_data(parser, settings->on_body,
   1cba2:	9303      	str	r3, [sp, #12]
   1cba4:	ab0d      	add	r3, sp, #52	; 0x34
   1cba6:	9302      	str	r3, [sp, #8]
					     p - data, &body_mark,
   1cba8:	1bf3      	subs	r3, r6, r7
				rc = cb_data(parser, settings->on_body,
   1cbaa:	9301      	str	r3, [sp, #4]
   1cbac:	ab09      	add	r3, sp, #36	; 0x24
   1cbae:	9300      	str	r3, [sp, #0]
   1cbb0:	f8d8 1018 	ldr.w	r1, [r8, #24]
   1cbb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1cbb8:	e6d7      	b.n	1c96a <http_parser_execute+0xf92>
			MARK(body);
   1cbba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1cbbc:	b903      	cbnz	r3, 1cbc0 <http_parser_execute+0x11e8>
   1cbbe:	960d      	str	r6, [sp, #52]	; 0x34
			p = data + len - 1;
   1cbc0:	9b05      	ldr	r3, [sp, #20]
   1cbc2:	1e5e      	subs	r6, r3, #1
   1cbc4:	443e      	add	r6, r7
			break;
   1cbc6:	f7ff b8d7 	b.w	1bd78 <http_parser_execute+0x3a0>
			UPDATE_STATE(NEW_MESSAGE());
   1cbca:	7823      	ldrb	r3, [r4, #0]
				       p - data + 1);
   1cbcc:	1bf5      	subs	r5, r6, r7
			UPDATE_STATE(NEW_MESSAGE());
   1cbce:	f013 0f03 	tst.w	r3, #3
   1cbd2:	bf14      	ite	ne
   1cbd4:	2304      	movne	r3, #4
   1cbd6:	2312      	moveq	r3, #18
				       p - data + 1);
   1cbd8:	3501      	adds	r5, #1
			UPDATE_STATE(NEW_MESSAGE());
   1cbda:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			rc = cb_notify(parser, &p_state,
   1cbde:	ab09      	add	r3, sp, #36	; 0x24
   1cbe0:	9300      	str	r3, [sp, #0]
   1cbe2:	9501      	str	r5, [sp, #4]
   1cbe4:	2307      	movs	r3, #7
   1cbe6:	4620      	mov	r0, r4
   1cbe8:	f8d8 201c 	ldr.w	r2, [r8, #28]
   1cbec:	f10d 0123 	add.w	r1, sp, #35	; 0x23
   1cbf0:	f00b f8ea 	bl	27dc8 <cb_notify>
			if (rc != 0) {
   1cbf4:	2800      	cmp	r0, #0
   1cbf6:	f47e af13 	bne.w	1ba20 <http_parser_execute+0x48>
			if (parser->upgrade) {
   1cbfa:	f994 3017 	ldrsb.w	r3, [r4, #23]
   1cbfe:	2b00      	cmp	r3, #0
   1cc00:	f6bf a8ba 	bge.w	1bd78 <http_parser_execute+0x3a0>
				parser->state = CURRENT_STATE();
   1cc04:	6823      	ldr	r3, [r4, #0]
   1cc06:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   1cc0a:	f362 2390 	bfi	r3, r2, #10, #7
   1cc0e:	6023      	str	r3, [r4, #0]
				*parsed = p - data + 1;
   1cc10:	9509      	str	r5, [sp, #36]	; 0x24
				return 0;
   1cc12:	f7fe bf05 	b.w	1ba20 <http_parser_execute+0x48>
			unhex_val = unhex[(unsigned char)ch];
   1cc16:	4b50      	ldr	r3, [pc, #320]	; (1cd58 <http_parser_execute+0x1380>)
   1cc18:	575b      	ldrsb	r3, [r3, r5]
			if (UNLIKELY(unhex_val == -1)) {
   1cc1a:	1c58      	adds	r0, r3, #1
   1cc1c:	d103      	bne.n	1cc26 <http_parser_execute+0x124e>
				SET_ERRNO(HPE_INVALID_CHUNK_SIZE);
   1cc1e:	221b      	movs	r2, #27
   1cc20:	7de3      	ldrb	r3, [r4, #23]
   1cc22:	f7fe bf39 	b.w	1ba98 <http_parser_execute+0xc0>
			parser->content_length = unhex_val;
   1cc26:	17da      	asrs	r2, r3, #31
   1cc28:	e9c4 3202 	strd	r3, r2, [r4, #8]
			UPDATE_STATE(s_chunk_size);
   1cc2c:	2334      	movs	r3, #52	; 0x34
   1cc2e:	f7ff b81a 	b.w	1bc66 <http_parser_execute+0x28e>
			if (ch == CR) {
   1cc32:	2d0d      	cmp	r5, #13
   1cc34:	d102      	bne.n	1cc3c <http_parser_execute+0x1264>
				UPDATE_STATE(s_chunk_size_almost_done);
   1cc36:	2336      	movs	r3, #54	; 0x36
   1cc38:	f7ff b815 	b.w	1bc66 <http_parser_execute+0x28e>
			unhex_val = unhex[(unsigned char)ch];
   1cc3c:	4b46      	ldr	r3, [pc, #280]	; (1cd58 <http_parser_execute+0x1380>)
   1cc3e:	575a      	ldrsb	r2, [r3, r5]
			if (unhex_val == -1) {
   1cc40:	1c51      	adds	r1, r2, #1
   1cc42:	d106      	bne.n	1cc52 <http_parser_execute+0x127a>
				if (ch == ';' || ch == ' ') {
   1cc44:	2d3b      	cmp	r5, #59	; 0x3b
   1cc46:	d001      	beq.n	1cc4c <http_parser_execute+0x1274>
   1cc48:	2d20      	cmp	r5, #32
   1cc4a:	d1e8      	bne.n	1cc1e <http_parser_execute+0x1246>
					UPDATE_STATE(s_chunk_parameters);
   1cc4c:	2335      	movs	r3, #53	; 0x35
   1cc4e:	f7ff b80a 	b.w	1bc66 <http_parser_execute+0x28e>
			t = parser->content_length;
   1cc52:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
			t *= 16U;
   1cc56:	0103      	lsls	r3, r0, #4
   1cc58:	0129      	lsls	r1, r5, #4
			t += unhex_val;
   1cc5a:	1851      	adds	r1, r2, r1
			t *= 16U;
   1cc5c:	ea43 7315 	orr.w	r3, r3, r5, lsr #28
			t += unhex_val;
   1cc60:	eb43 73e2 	adc.w	r3, r3, r2, asr #31
			if (UNLIKELY(ulong_value < parser->content_length)) {
   1cc64:	f06f 0201 	mvn.w	r2, #1
   1cc68:	42aa      	cmp	r2, r5
   1cc6a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   1cc6e:	4182      	sbcs	r2, r0
   1cc70:	f4ff ac6e 	bcc.w	1c550 <http_parser_execute+0xb78>
			parser->content_length = t;
   1cc74:	60a1      	str	r1, [r4, #8]
   1cc76:	e47f      	b.n	1c578 <http_parser_execute+0xba0>
			if (ch == CR) {
   1cc78:	2d0d      	cmp	r5, #13
   1cc7a:	f47f a87d 	bne.w	1bd78 <http_parser_execute+0x3a0>
   1cc7e:	e7da      	b.n	1cc36 <http_parser_execute+0x125e>
			parser->nread = 0U;
   1cc80:	2300      	movs	r3, #0
   1cc82:	6063      	str	r3, [r4, #4]
			if (parser->content_length == 0U) {
   1cc84:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1cc88:	4313      	orrs	r3, r2
				parser->flags |= F_TRAILING;
   1cc8a:	bf09      	itett	eq
   1cc8c:	8823      	ldrheq	r3, [r4, #0]
   1cc8e:	2339      	movne	r3, #57	; 0x39
   1cc90:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   1cc94:	8023      	strheq	r3, [r4, #0]
				UPDATE_STATE(s_header_field_start);
   1cc96:	bf08      	it	eq
   1cc98:	232a      	moveq	r3, #42	; 0x2a
   1cc9a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				       p - data + 1);
   1cc9e:	1bf3      	subs	r3, r6, r7
   1cca0:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
   1cca2:	9301      	str	r3, [sp, #4]
   1cca4:	ab09      	add	r3, sp, #36	; 0x24
   1cca6:	9300      	str	r3, [sp, #0]
   1cca8:	f8d8 2020 	ldr.w	r2, [r8, #32]
   1ccac:	2309      	movs	r3, #9
   1ccae:	f7fe bff5 	b.w	1bc9c <http_parser_execute+0x2c4>
			uint64_t to_read = MIN(parser->content_length,
   1ccb2:	ebab 0306 	sub.w	r3, fp, r6
   1ccb6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   1ccba:	17dd      	asrs	r5, r3, #31
   1ccbc:	429a      	cmp	r2, r3
   1ccbe:	eb71 0005 	sbcs.w	r0, r1, r5
			MARK(body);
   1ccc2:	980d      	ldr	r0, [sp, #52]	; 0x34
			uint64_t to_read = MIN(parser->content_length,
   1ccc4:	bf3c      	itt	cc
   1ccc6:	4613      	movcc	r3, r2
   1ccc8:	460d      	movcc	r5, r1
			MARK(body);
   1ccca:	b900      	cbnz	r0, 1ccce <http_parser_execute+0x12f6>
   1cccc:	960d      	str	r6, [sp, #52]	; 0x34
			parser->content_length -= to_read;
   1ccce:	1ad2      	subs	r2, r2, r3
   1ccd0:	eb61 0105 	sbc.w	r1, r1, r5
   1ccd4:	e9c4 2102 	strd	r2, r1, [r4, #8]
			if (parser->content_length == 0U) {
   1ccd8:	430a      	orrs	r2, r1
   1ccda:	d003      	beq.n	1cce4 <http_parser_execute+0x130c>
			p += to_read - 1;
   1ccdc:	3b01      	subs	r3, #1
   1ccde:	441e      	add	r6, r3
   1cce0:	f7ff b84a 	b.w	1bd78 <http_parser_execute+0x3a0>
				UPDATE_STATE(s_chunk_data_almost_done);
   1cce4:	223a      	movs	r2, #58	; 0x3a
   1cce6:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
   1ccea:	e7f7      	b.n	1ccdc <http_parser_execute+0x1304>
			UPDATE_STATE(s_chunk_data_done);
   1ccec:	233b      	movs	r3, #59	; 0x3b
   1ccee:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				     p - body_mark);
   1ccf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			rc = cb_data(parser, settings->on_body, HPE_CB_body,
   1ccf4:	2206      	movs	r2, #6
				     p - body_mark);
   1ccf6:	1af3      	subs	r3, r6, r3
			rc = cb_data(parser, settings->on_body, HPE_CB_body,
   1ccf8:	9303      	str	r3, [sp, #12]
   1ccfa:	ab0d      	add	r3, sp, #52	; 0x34
   1ccfc:	9302      	str	r3, [sp, #8]
				     &p_state, parsed, p - data + 1, &body_mark,
   1ccfe:	1bf3      	subs	r3, r6, r7
   1cd00:	3301      	adds	r3, #1
			rc = cb_data(parser, settings->on_body, HPE_CB_body,
   1cd02:	9301      	str	r3, [sp, #4]
   1cd04:	ab09      	add	r3, sp, #36	; 0x24
   1cd06:	9300      	str	r3, [sp, #0]
   1cd08:	f8d8 1018 	ldr.w	r1, [r8, #24]
   1cd0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1cd10:	f7ff b8e7 	b.w	1bee2 <http_parser_execute+0x50a>
			parser->nread = 0U;
   1cd14:	2300      	movs	r3, #0
   1cd16:	6063      	str	r3, [r4, #4]
			UPDATE_STATE(s_chunk_size_start);
   1cd18:	2333      	movs	r3, #51	; 0x33
   1cd1a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				       p - data + 1);
   1cd1e:	1bf3      	subs	r3, r6, r7
   1cd20:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
   1cd22:	9301      	str	r3, [sp, #4]
   1cd24:	ab09      	add	r3, sp, #36	; 0x24
   1cd26:	9300      	str	r3, [sp, #0]
   1cd28:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
   1cd2c:	230a      	movs	r3, #10
   1cd2e:	f7fe bfb5 	b.w	1bc9c <http_parser_execute+0x2c4>
			SET_ERRNO(HPE_INVALID_INTERNAL_STATE);
   1cd32:	221d      	movs	r2, #29
   1cd34:	7de3      	ldrb	r3, [r4, #23]
   1cd36:	f7fe beaf 	b.w	1ba98 <http_parser_execute+0xc0>
   1cd3a:	220c      	movs	r2, #12
		parser->http_errno = HPE_HEADER_OVERFLOW;
   1cd3c:	7de3      	ldrb	r3, [r4, #23]
   1cd3e:	464e      	mov	r6, r9
   1cd40:	f362 0306 	bfi	r3, r2, #0, #7
   1cd44:	75e3      	strb	r3, [r4, #23]
   1cd46:	e4f5      	b.n	1c734 <http_parser_execute+0xd5c>
   1cd48:	2218      	movs	r2, #24
   1cd4a:	e7f7      	b.n	1cd3c <http_parser_execute+0x1364>
				switch (ch) {
   1cd4c:	2d20      	cmp	r5, #32
   1cd4e:	f47e afd5 	bne.w	1bcfc <http_parser_execute+0x324>
					UPDATE_STATE(s_res_status_start);
   1cd52:	230f      	movs	r3, #15
   1cd54:	f7fe bf87 	b.w	1bc66 <http_parser_execute+0x28e>
   1cd58:	0002d9b1 	.word	0x0002d9b1

0001cd5c <http_method_str>:
}


const char *http_method_str(enum http_method m)
{
	return ELEM_AT(method_strings, m, "<unknown>");
   1cd5c:	2820      	cmp	r0, #32
   1cd5e:	bf9a      	itte	ls
   1cd60:	4b02      	ldrls	r3, [pc, #8]	; (1cd6c <http_method_str+0x10>)
   1cd62:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   1cd66:	4802      	ldrhi	r0, [pc, #8]	; (1cd70 <http_method_str+0x14>)
}
   1cd68:	4770      	bx	lr
   1cd6a:	bf00      	nop
   1cd6c:	0002c13c 	.word	0x0002c13c
   1cd70:	0002d2bb 	.word	0x0002d2bb

0001cd74 <parse_url_char>:
 * assumed that the caller cares about (and can detect) the transition between
 * URL and non-URL states by looking for these.
 */
enum state parse_url_char(enum state s, const char ch)
{
	if (ch == ' ' || ch == '\r' || ch == '\n') {
   1cd74:	f1a1 030a 	sub.w	r3, r1, #10
   1cd78:	b2db      	uxtb	r3, r3
   1cd7a:	2b16      	cmp	r3, #22
{
   1cd7c:	b510      	push	{r4, lr}
   1cd7e:	d807      	bhi.n	1cd90 <parse_url_char+0x1c>
   1cd80:	4a7a      	ldr	r2, [pc, #488]	; (1cf6c <parse_url_char+0x1f8>)
   1cd82:	fa22 f303 	lsr.w	r3, r2, r3
   1cd86:	07db      	lsls	r3, r3, #31
   1cd88:	f140 80d7 	bpl.w	1cf3a <parse_url_char+0x1c6>
		return s_dead;
   1cd8c:	2001      	movs	r0, #1
   1cd8e:	e018      	b.n	1cdc2 <parse_url_char+0x4e>
	if (ch == '\t' || ch == '\f') {
		return s_dead;
	}
#endif

	switch (s) {
   1cd90:	f1a0 0314 	sub.w	r3, r0, #20
   1cd94:	2b0b      	cmp	r3, #11
   1cd96:	d8f9      	bhi.n	1cd8c <parse_url_char+0x18>
   1cd98:	e8df f003 	tbb	[pc, r3]
   1cd9c:	231e1406 	.word	0x231e1406
   1cda0:	68283131 	.word	0x68283131
   1cda4:	b89e8383 	.word	0xb89e8383
		/* Proxied requests are followed by scheme of an absolute URI
		 * (alpha).
		 * All methods except CONNECT are followed by '/' or '*'.
		 */

		if (ch == '/' || ch == '*') {
   1cda8:	292f      	cmp	r1, #47	; 0x2f
   1cdaa:	f000 80bc 	beq.w	1cf26 <parse_url_char+0x1b2>
   1cdae:	292a      	cmp	r1, #42	; 0x2a
   1cdb0:	f000 80b9 	beq.w	1cf26 <parse_url_char+0x1b2>
			return s_req_path;
		}

		if (IS_ALPHA(ch)) {
   1cdb4:	f041 0120 	orr.w	r1, r1, #32
   1cdb8:	3961      	subs	r1, #97	; 0x61
			return s_req_schema;
   1cdba:	2919      	cmp	r1, #25
   1cdbc:	bf8c      	ite	hi
   1cdbe:	2001      	movhi	r0, #1
   1cdc0:	2015      	movls	r0, #21

	/* We should never fall out of the switch above unless there's
	 * an error
	 */
	return s_dead;
}
   1cdc2:	bd10      	pop	{r4, pc}
		if (IS_ALPHA(ch)) {
   1cdc4:	f041 0320 	orr.w	r3, r1, #32
   1cdc8:	3b61      	subs	r3, #97	; 0x61
   1cdca:	2b19      	cmp	r3, #25
   1cdcc:	d9f9      	bls.n	1cdc2 <parse_url_char+0x4e>
			return s_req_schema_slash;
   1cdce:	293a      	cmp	r1, #58	; 0x3a
   1cdd0:	bf14      	ite	ne
   1cdd2:	2001      	movne	r0, #1
   1cdd4:	2016      	moveq	r0, #22
   1cdd6:	e7f4      	b.n	1cdc2 <parse_url_char+0x4e>
			return s_req_schema_slash_slash;
   1cdd8:	292f      	cmp	r1, #47	; 0x2f
   1cdda:	bf14      	ite	ne
   1cddc:	2001      	movne	r0, #1
   1cdde:	2017      	moveq	r0, #23
   1cde0:	e7ef      	b.n	1cdc2 <parse_url_char+0x4e>
			return s_req_server_start;
   1cde2:	292f      	cmp	r1, #47	; 0x2f
   1cde4:	bf14      	ite	ne
   1cde6:	2001      	movne	r0, #1
   1cde8:	2018      	moveq	r0, #24
   1cdea:	e7ea      	b.n	1cdc2 <parse_url_char+0x4e>
		if (ch == '@') {
   1cdec:	2940      	cmp	r1, #64	; 0x40
   1cdee:	d0cd      	beq.n	1cd8c <parse_url_char+0x18>
		if (ch == '/') {
   1cdf0:	292f      	cmp	r1, #47	; 0x2f
   1cdf2:	f000 8098 	beq.w	1cf26 <parse_url_char+0x1b2>
		if (ch == '?') {
   1cdf6:	293f      	cmp	r1, #63	; 0x3f
   1cdf8:	d109      	bne.n	1ce0e <parse_url_char+0x9a>
   1cdfa:	201c      	movs	r0, #28
   1cdfc:	e7e1      	b.n	1cdc2 <parse_url_char+0x4e>
		if (ch == '/') {
   1cdfe:	292f      	cmp	r1, #47	; 0x2f
   1ce00:	f000 8091 	beq.w	1cf26 <parse_url_char+0x1b2>
		if (ch == '?') {
   1ce04:	293f      	cmp	r1, #63	; 0x3f
   1ce06:	d0f8      	beq.n	1cdfa <parse_url_char+0x86>
		if (ch == '@') {
   1ce08:	2940      	cmp	r1, #64	; 0x40
   1ce0a:	f000 808e 	beq.w	1cf2a <parse_url_char+0x1b6>
		if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {
   1ce0e:	f041 0320 	orr.w	r3, r1, #32
   1ce12:	3b61      	subs	r3, #97	; 0x61
   1ce14:	2b19      	cmp	r3, #25
   1ce16:	f240 808a 	bls.w	1cf2e <parse_url_char+0x1ba>
   1ce1a:	295f      	cmp	r1, #95	; 0x5f
   1ce1c:	d811      	bhi.n	1ce42 <parse_url_char+0xce>
   1ce1e:	295a      	cmp	r1, #90	; 0x5a
   1ce20:	d805      	bhi.n	1ce2e <parse_url_char+0xba>
   1ce22:	3921      	subs	r1, #33	; 0x21
   1ce24:	b2c9      	uxtb	r1, r1
   1ce26:	291c      	cmp	r1, #28
   1ce28:	d8b0      	bhi.n	1cd8c <parse_url_char+0x18>
   1ce2a:	4b51      	ldr	r3, [pc, #324]	; (1cf70 <parse_url_char+0x1fc>)
   1ce2c:	e002      	b.n	1ce34 <parse_url_char+0xc0>
   1ce2e:	2315      	movs	r3, #21
   1ce30:	395b      	subs	r1, #91	; 0x5b
   1ce32:	b2c9      	uxtb	r1, r1
   1ce34:	40cb      	lsrs	r3, r1
		return s_dead;
   1ce36:	f013 0f01 	tst.w	r3, #1
   1ce3a:	bf14      	ite	ne
   1ce3c:	2019      	movne	r0, #25
   1ce3e:	2001      	moveq	r0, #1
   1ce40:	e7bf      	b.n	1cdc2 <parse_url_char+0x4e>
   1ce42:	297e      	cmp	r1, #126	; 0x7e
   1ce44:	bf08      	it	eq
   1ce46:	2019      	moveq	r0, #25
   1ce48:	bf18      	it	ne
   1ce4a:	2001      	movne	r0, #1
   1ce4c:	e7b9      	b.n	1cdc2 <parse_url_char+0x4e>
		if (IS_URL_CHAR(ch)) {
   1ce4e:	4a49      	ldr	r2, [pc, #292]	; (1cf74 <parse_url_char+0x200>)
   1ce50:	08cb      	lsrs	r3, r1, #3
   1ce52:	5cd2      	ldrb	r2, [r2, r3]
   1ce54:	2301      	movs	r3, #1
   1ce56:	f001 0407 	and.w	r4, r1, #7
   1ce5a:	40a3      	lsls	r3, r4
   1ce5c:	421a      	tst	r2, r3
   1ce5e:	d1b0      	bne.n	1cdc2 <parse_url_char+0x4e>
		switch (ch) {
   1ce60:	2923      	cmp	r1, #35	; 0x23
   1ce62:	d068      	beq.n	1cf36 <parse_url_char+0x1c2>
		return s_dead;
   1ce64:	293f      	cmp	r1, #63	; 0x3f
   1ce66:	bf08      	it	eq
   1ce68:	201c      	moveq	r0, #28
   1ce6a:	e7ed      	b.n	1ce48 <parse_url_char+0xd4>
		if (IS_URL_CHAR(ch)) {
   1ce6c:	4a41      	ldr	r2, [pc, #260]	; (1cf74 <parse_url_char+0x200>)
   1ce6e:	08cb      	lsrs	r3, r1, #3
   1ce70:	5cd2      	ldrb	r2, [r2, r3]
   1ce72:	2301      	movs	r3, #1
   1ce74:	f001 0407 	and.w	r4, r1, #7
   1ce78:	40a3      	lsls	r3, r4
   1ce7a:	421a      	tst	r2, r3
   1ce7c:	d1a1      	bne.n	1cdc2 <parse_url_char+0x4e>
   1ce7e:	f011 0f80 	tst.w	r1, #128	; 0x80
   1ce82:	e7ec      	b.n	1ce5e <parse_url_char+0xea>
		if (IS_URL_CHAR(ch)) {
   1ce84:	4a3b      	ldr	r2, [pc, #236]	; (1cf74 <parse_url_char+0x200>)
   1ce86:	08cb      	lsrs	r3, r1, #3
   1ce88:	5cd2      	ldrb	r2, [r2, r3]
   1ce8a:	2301      	movs	r3, #1
   1ce8c:	f001 0007 	and.w	r0, r1, #7
   1ce90:	4083      	lsls	r3, r0
   1ce92:	421a      	tst	r2, r3
   1ce94:	d14d      	bne.n	1cf32 <parse_url_char+0x1be>
		switch (ch) {
   1ce96:	2923      	cmp	r1, #35	; 0x23
   1ce98:	d04d      	beq.n	1cf36 <parse_url_char+0x1c2>
		return s_dead;
   1ce9a:	293f      	cmp	r1, #63	; 0x3f
   1ce9c:	bf08      	it	eq
   1ce9e:	201d      	moveq	r0, #29
   1cea0:	e7d2      	b.n	1ce48 <parse_url_char+0xd4>
		if (IS_URL_CHAR(ch)) {
   1cea2:	4a34      	ldr	r2, [pc, #208]	; (1cf74 <parse_url_char+0x200>)
   1cea4:	08cb      	lsrs	r3, r1, #3
   1cea6:	5cd2      	ldrb	r2, [r2, r3]
   1cea8:	2301      	movs	r3, #1
   1ceaa:	f001 0007 	and.w	r0, r1, #7
   1ceae:	4083      	lsls	r3, r0
   1ceb0:	421a      	tst	r2, r3
   1ceb2:	d13e      	bne.n	1cf32 <parse_url_char+0x1be>
   1ceb4:	f011 0f80 	tst.w	r1, #128	; 0x80
   1ceb8:	e7ec      	b.n	1ce94 <parse_url_char+0x120>
		if (IS_URL_CHAR(ch)) {
   1ceba:	4a2e      	ldr	r2, [pc, #184]	; (1cf74 <parse_url_char+0x200>)
   1cebc:	08cb      	lsrs	r3, r1, #3
   1cebe:	5cd2      	ldrb	r2, [r2, r3]
   1cec0:	2301      	movs	r3, #1
   1cec2:	f001 0007 	and.w	r0, r1, #7
   1cec6:	4083      	lsls	r3, r0
   1cec8:	421a      	tst	r2, r3
   1ceca:	d11d      	bne.n	1cf08 <parse_url_char+0x194>
		switch (ch) {
   1cecc:	2923      	cmp	r1, #35	; 0x23
   1cece:	d032      	beq.n	1cf36 <parse_url_char+0x1c2>
		return s_dead;
   1ced0:	293f      	cmp	r1, #63	; 0x3f
   1ced2:	bf08      	it	eq
   1ced4:	201f      	moveq	r0, #31
   1ced6:	e7b7      	b.n	1ce48 <parse_url_char+0xd4>
		if (IS_URL_CHAR(ch)) {
   1ced8:	4a26      	ldr	r2, [pc, #152]	; (1cf74 <parse_url_char+0x200>)
   1ceda:	08cb      	lsrs	r3, r1, #3
   1cedc:	5cd2      	ldrb	r2, [r2, r3]
   1cede:	2301      	movs	r3, #1
   1cee0:	f001 0007 	and.w	r0, r1, #7
   1cee4:	4083      	lsls	r3, r0
   1cee6:	421a      	tst	r2, r3
   1cee8:	d10e      	bne.n	1cf08 <parse_url_char+0x194>
   1ceea:	f011 0f80 	tst.w	r1, #128	; 0x80
   1ceee:	e7ec      	b.n	1ceca <parse_url_char+0x156>
		if (IS_URL_CHAR(ch)) {
   1cef0:	4a20      	ldr	r2, [pc, #128]	; (1cf74 <parse_url_char+0x200>)
   1cef2:	08cb      	lsrs	r3, r1, #3
   1cef4:	5cd2      	ldrb	r2, [r2, r3]
   1cef6:	2301      	movs	r3, #1
   1cef8:	f001 0407 	and.w	r4, r1, #7
   1cefc:	40a3      	lsls	r3, r4
   1cefe:	421a      	tst	r2, r3
   1cf00:	f47f af5f 	bne.w	1cdc2 <parse_url_char+0x4e>
		switch (ch) {
   1cf04:	2923      	cmp	r1, #35	; 0x23
   1cf06:	d1e3      	bne.n	1ced0 <parse_url_char+0x15c>
			return s_req_fragment;
   1cf08:	201f      	movs	r0, #31
   1cf0a:	e75a      	b.n	1cdc2 <parse_url_char+0x4e>
		if (IS_URL_CHAR(ch)) {
   1cf0c:	4a19      	ldr	r2, [pc, #100]	; (1cf74 <parse_url_char+0x200>)
   1cf0e:	08cb      	lsrs	r3, r1, #3
   1cf10:	5cd2      	ldrb	r2, [r2, r3]
   1cf12:	2301      	movs	r3, #1
   1cf14:	f001 0407 	and.w	r4, r1, #7
   1cf18:	40a3      	lsls	r3, r4
   1cf1a:	421a      	tst	r2, r3
   1cf1c:	f47f af51 	bne.w	1cdc2 <parse_url_char+0x4e>
   1cf20:	f011 0f80 	tst.w	r1, #128	; 0x80
   1cf24:	e7ec      	b.n	1cf00 <parse_url_char+0x18c>
			return s_req_path;
   1cf26:	201b      	movs	r0, #27
   1cf28:	e74b      	b.n	1cdc2 <parse_url_char+0x4e>
			return s_req_server_with_at;
   1cf2a:	201a      	movs	r0, #26
   1cf2c:	e749      	b.n	1cdc2 <parse_url_char+0x4e>
   1cf2e:	2019      	movs	r0, #25
   1cf30:	e747      	b.n	1cdc2 <parse_url_char+0x4e>
   1cf32:	201d      	movs	r0, #29
   1cf34:	e745      	b.n	1cdc2 <parse_url_char+0x4e>
			return s_req_fragment_start;
   1cf36:	201e      	movs	r0, #30
   1cf38:	e743      	b.n	1cdc2 <parse_url_char+0x4e>
	switch (s) {
   1cf3a:	f1a0 0318 	sub.w	r3, r0, #24
   1cf3e:	2b07      	cmp	r3, #7
   1cf40:	f63f af24 	bhi.w	1cd8c <parse_url_char+0x18>
   1cf44:	a201      	add	r2, pc, #4	; (adr r2, 1cf4c <parse_url_char+0x1d8>)
   1cf46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1cf4a:	bf00      	nop
   1cf4c:	0001ce0f 	.word	0x0001ce0f
   1cf50:	0001ce0f 	.word	0x0001ce0f
   1cf54:	0001ce0f 	.word	0x0001ce0f
   1cf58:	0001ce4f 	.word	0x0001ce4f
   1cf5c:	0001ce85 	.word	0x0001ce85
   1cf60:	0001ce85 	.word	0x0001ce85
   1cf64:	0001cebb 	.word	0x0001cebb
   1cf68:	0001cef1 	.word	0x0001cef1
   1cf6c:	00400009 	.word	0x00400009
   1cf70:	17ffbff9 	.word	0x17ffbff9
   1cf74:	0002dbb1 	.word	0x0002dbb1

0001cf78 <on_header_field>:
						internal.parser);
	const char *content_len = "Content-Length";
	uint16_t len;

	len = strlen(content_len);
	if (length >= len && strncasecmp(at, content_len, len) == 0) {
   1cf78:	2a0d      	cmp	r2, #13
{
   1cf7a:	b570      	push	{r4, r5, r6, lr}
   1cf7c:	4604      	mov	r4, r0
   1cf7e:	460d      	mov	r5, r1
   1cf80:	4616      	mov	r6, r2
	if (length >= len && strncasecmp(at, content_len, len) == 0) {
   1cf82:	d90b      	bls.n	1cf9c <on_header_field+0x24>
   1cf84:	220e      	movs	r2, #14
   1cf86:	4628      	mov	r0, r5
   1cf88:	4909      	ldr	r1, [pc, #36]	; (1cfb0 <on_header_field+0x38>)
   1cf8a:	f008 fd41 	bl	25a10 <strncasecmp>
   1cf8e:	b928      	cbnz	r0, 1cf9c <on_header_field+0x24>
		req->internal.response.cl_present = true;
   1cf90:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   1cf94:	f043 0301 	orr.w	r3, r3, #1
   1cf98:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	}

	print_header_field(length, at);

	if (req->internal.response.http_cb &&
   1cf9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1cf9e:	b12b      	cbz	r3, 1cfac <on_header_field+0x34>
	    req->internal.response.http_cb->on_header_field) {
   1cfa0:	68db      	ldr	r3, [r3, #12]
	if (req->internal.response.http_cb &&
   1cfa2:	b11b      	cbz	r3, 1cfac <on_header_field+0x34>
		req->internal.response.http_cb->on_header_field(parser, at,
   1cfa4:	4632      	mov	r2, r6
   1cfa6:	4629      	mov	r1, r5
   1cfa8:	4620      	mov	r0, r4
   1cfaa:	4798      	blx	r3
								length);
	}

	return 0;
}
   1cfac:	2000      	movs	r0, #0
   1cfae:	bd70      	pop	{r4, r5, r6, pc}
   1cfb0:	0002dbd1 	.word	0x0002dbd1

0001cfb4 <http_client_req>:
	return ret;
}

int http_client_req(int sock, struct http_request *req,
		    int32_t timeout, void *user_data)
{
   1cfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* Utilize the network usage by sending data in bigger blocks */
	char send_buf[MAX_SEND_BUF_LEN];
	const size_t send_buf_max_len = sizeof(send_buf);
	size_t send_buf_pos = 0;
   1cfb8:	f04f 0800 	mov.w	r8, #0
{
   1cfbc:	b0c1      	sub	sp, #260	; 0x104
	int total_sent = 0;
	int ret, total_recv, i;
	const char *method;

	if (sock < 0 || req == NULL || req->response == NULL ||
   1cfbe:	1e05      	subs	r5, r0, #0
{
   1cfc0:	460c      	mov	r4, r1
   1cfc2:	4699      	mov	r9, r3
   1cfc4:	9209      	str	r2, [sp, #36]	; 0x24
	size_t send_buf_pos = 0;
   1cfc6:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
	if (sock < 0 || req == NULL || req->response == NULL ||
   1cfca:	f2c0 8204 	blt.w	1d3d6 <http_client_req+0x422>
   1cfce:	2900      	cmp	r1, #0
   1cfd0:	f000 8201 	beq.w	1d3d6 <http_client_req+0x422>
   1cfd4:	f8d1 a09c 	ldr.w	sl, [r1, #156]	; 0x9c
   1cfd8:	f1ba 0f00 	cmp.w	sl, #0
   1cfdc:	f000 81fb 	beq.w	1d3d6 <http_client_req+0x422>
	    req->recv_buf == NULL || req->recv_buf_len == 0) {
   1cfe0:	f8d1 70a4 	ldr.w	r7, [r1, #164]	; 0xa4
	if (sock < 0 || req == NULL || req->response == NULL ||
   1cfe4:	2f00      	cmp	r7, #0
   1cfe6:	f000 81f6 	beq.w	1d3d6 <http_client_req+0x422>
	    req->recv_buf == NULL || req->recv_buf_len == 0) {
   1cfea:	f8d1 60a8 	ldr.w	r6, [r1, #168]	; 0xa8
   1cfee:	2e00      	cmp	r6, #0
   1cff0:	f000 81f1 	beq.w	1d3d6 <http_client_req+0x422>
   1cff4:	2240      	movs	r2, #64	; 0x40
   1cff6:	4641      	mov	r1, r8
   1cff8:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1cffc:	f00e f902 	bl	2b204 <memset>
		return -EINVAL;
	}

	memset(&req->internal.response, 0, sizeof(req->internal.response));

	req->internal.response.http_cb = req->http_cb;
   1d000:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	req->internal.response.cb = req->response;
	req->internal.response.recv_buf = req->recv_buf;
	req->internal.response.recv_buf_len = req->recv_buf_len;
   1d004:	e9c4 7616 	strd	r7, r6, [r4, #88]	; 0x58
	req->internal.response.cb = req->response;
   1d008:	e9c4 3a12 	strd	r3, sl, [r4, #72]	; 0x48
	req->internal.user_data = user_data;
	req->internal.sock = sock;
   1d00c:	e9c4 9524 	strd	r9, r5, [r4, #144]	; 0x90

	method = http_method_str(req->method);
   1d010:	f894 0098 	ldrb.w	r0, [r4, #152]	; 0x98
   1d014:	f7ff fea2 	bl	1cd5c <http_method_str>

	ret = http_send_data(sock, send_buf, send_buf_max_len, &send_buf_pos,
   1d018:	4e5d      	ldr	r6, [pc, #372]	; (1d190 <http_client_req+0x1dc>)
   1d01a:	f8cd 8018 	str.w	r8, [sp, #24]
   1d01e:	9605      	str	r6, [sp, #20]
   1d020:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   1d024:	a910      	add	r1, sp, #64	; 0x40
   1d026:	9304      	str	r3, [sp, #16]
   1d028:	4b5a      	ldr	r3, [pc, #360]	; (1d194 <http_client_req+0x1e0>)
   1d02a:	9303      	str	r3, [sp, #12]
   1d02c:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
   1d030:	9000      	str	r0, [sp, #0]
   1d032:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1d036:	4628      	mov	r0, r5
   1d038:	22c0      	movs	r2, #192	; 0xc0
   1d03a:	ab0c      	add	r3, sp, #48	; 0x30
   1d03c:	f00b f819 	bl	28072 <http_send_data.constprop.0>
			     method, " ", req->url, " ", req->protocol,
			     HTTP_CRLF, NULL);
	if (ret < 0) {
   1d040:	1e07      	subs	r7, r0, #0
   1d042:	f2c0 81cb 	blt.w	1d3dc <http_client_req+0x428>
	}

	total_sent += ret;

	if (req->port) {
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   1d046:	e9d4 232f 	ldrd	r2, r3, [r4, #188]	; 0xbc
   1d04a:	f8df a14c 	ldr.w	sl, [pc, #332]	; 1d198 <http_client_req+0x1e4>
	if (req->port) {
   1d04e:	2b00      	cmp	r3, #0
   1d050:	d035      	beq.n	1d0be <http_client_req+0x10a>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   1d052:	9304      	str	r3, [sp, #16]
   1d054:	4b51      	ldr	r3, [pc, #324]	; (1d19c <http_client_req+0x1e8>)
   1d056:	4628      	mov	r0, r5
   1d058:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1d05c:	4b50      	ldr	r3, [pc, #320]	; (1d1a0 <http_client_req+0x1ec>)
   1d05e:	22c0      	movs	r2, #192	; 0xc0
   1d060:	9300      	str	r3, [sp, #0]
   1d062:	e9cd 6805 	strd	r6, r8, [sp, #20]
   1d066:	f8cd a004 	str.w	sl, [sp, #4]
   1d06a:	ab0c      	add	r3, sp, #48	; 0x30
   1d06c:	a910      	add	r1, sp, #64	; 0x40
   1d06e:	f00b f800 	bl	28072 <http_send_data.constprop.0>
	} else {
		ret = http_send_data(sock, send_buf, send_buf_max_len,
				     &send_buf_pos, "Host", ": ", req->host,
				     HTTP_CRLF, NULL);

		if (ret < 0) {
   1d072:	2800      	cmp	r0, #0
   1d074:	f2c0 8089 	blt.w	1d18a <http_client_req+0x1d6>
		}

		total_sent += ret;
	}

	if (req->optional_headers_cb) {
   1d078:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
		total_sent += ret;
   1d07c:	4407      	add	r7, r0
	if (req->optional_headers_cb) {
   1d07e:	2b00      	cmp	r3, #0
   1d080:	d040      	beq.n	1d104 <http_client_req+0x150>
		ret = http_flush_data(sock, send_buf, send_buf_pos);
   1d082:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	ret = sendall(sock, send_buf, send_buf_len);
   1d086:	4628      	mov	r0, r5
   1d088:	4642      	mov	r2, r8
   1d08a:	a910      	add	r1, sp, #64	; 0x40
   1d08c:	f00a ffd6 	bl	2803c <sendall>
	if (ret < 0) {
   1d090:	2800      	cmp	r0, #0
   1d092:	db7a      	blt.n	1d18a <http_client_req+0x1d6>
		if (ret < 0) {
   1d094:	f1b8 0f00 	cmp.w	r8, #0
   1d098:	f2c0 81a2 	blt.w	1d3e0 <http_client_req+0x42c>
			goto out;
		}

		send_buf_pos = 0;
   1d09c:	2300      	movs	r3, #0
		total_sent += ret;

		ret = req->optional_headers_cb(sock, req, user_data);
   1d09e:	464a      	mov	r2, r9
		send_buf_pos = 0;
   1d0a0:	930c      	str	r3, [sp, #48]	; 0x30
		ret = req->optional_headers_cb(sock, req, user_data);
   1d0a2:	4621      	mov	r1, r4
   1d0a4:	4628      	mov	r0, r5
   1d0a6:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   1d0aa:	4798      	blx	r3
		if (ret < 0) {
   1d0ac:	2800      	cmp	r0, #0
   1d0ae:	db6c      	blt.n	1d18a <http_client_req+0x1d6>
		total_sent += ret;
   1d0b0:	44b8      	add	r8, r7
			goto out;
		}

		total_sent += ret;
   1d0b2:	eb00 0708 	add.w	r7, r0, r8
   1d0b6:	f04f 0800 	mov.w	r8, #0
			total_sent += ret;
		}
	}

	for (i = 0; req->header_fields && req->header_fields[i]; i++) {
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   1d0ba:	46c3      	mov	fp, r8
   1d0bc:	e032      	b.n	1d124 <http_client_req+0x170>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   1d0be:	e9cd 6303 	strd	r6, r3, [sp, #12]
   1d0c2:	4b37      	ldr	r3, [pc, #220]	; (1d1a0 <http_client_req+0x1ec>)
   1d0c4:	e9cd a201 	strd	sl, r2, [sp, #4]
   1d0c8:	9300      	str	r3, [sp, #0]
   1d0ca:	22c0      	movs	r2, #192	; 0xc0
   1d0cc:	4628      	mov	r0, r5
   1d0ce:	ab0c      	add	r3, sp, #48	; 0x30
   1d0d0:	a910      	add	r1, sp, #64	; 0x40
   1d0d2:	f00a ffce 	bl	28072 <http_send_data.constprop.0>
   1d0d6:	e7cc      	b.n	1d072 <http_client_req+0xbe>
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   1d0d8:	e9cd 3b00 	strd	r3, fp, [sp]
   1d0dc:	22c0      	movs	r2, #192	; 0xc0
   1d0de:	4628      	mov	r0, r5
   1d0e0:	ab0c      	add	r3, sp, #48	; 0x30
   1d0e2:	a910      	add	r1, sp, #64	; 0x40
   1d0e4:	f00a ffc5 	bl	28072 <http_send_data.constprop.0>
			if (ret < 0) {
   1d0e8:	2800      	cmp	r0, #0
   1d0ea:	f108 0804 	add.w	r8, r8, #4
   1d0ee:	db4c      	blt.n	1d18a <http_client_req+0x1d6>
			total_sent += ret;
   1d0f0:	4407      	add	r7, r0
		for (i = 0; req->optional_headers && req->optional_headers[i];
   1d0f2:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   1d0f6:	2b00      	cmp	r3, #0
   1d0f8:	d0dd      	beq.n	1d0b6 <http_client_req+0x102>
   1d0fa:	f853 3008 	ldr.w	r3, [r3, r8]
   1d0fe:	2b00      	cmp	r3, #0
   1d100:	d1ea      	bne.n	1d0d8 <http_client_req+0x124>
   1d102:	e7d8      	b.n	1d0b6 <http_client_req+0x102>
   1d104:	4698      	mov	r8, r3
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   1d106:	469b      	mov	fp, r3
   1d108:	e7f3      	b.n	1d0f2 <http_client_req+0x13e>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   1d10a:	e9cd 3b00 	strd	r3, fp, [sp]
   1d10e:	22c0      	movs	r2, #192	; 0xc0
   1d110:	4628      	mov	r0, r5
   1d112:	ab0c      	add	r3, sp, #48	; 0x30
   1d114:	a910      	add	r1, sp, #64	; 0x40
   1d116:	f00a ffac 	bl	28072 <http_send_data.constprop.0>
				     &send_buf_pos, req->header_fields[i],
				     NULL);
		if (ret < 0) {
   1d11a:	2800      	cmp	r0, #0
   1d11c:	f108 0804 	add.w	r8, r8, #4
   1d120:	db33      	blt.n	1d18a <http_client_req+0x1d6>
			goto out;
		}

		total_sent += ret;
   1d122:	4407      	add	r7, r0
	for (i = 0; req->header_fields && req->header_fields[i]; i++) {
   1d124:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1d128:	b11b      	cbz	r3, 1d132 <http_client_req+0x17e>
   1d12a:	f853 3008 	ldr.w	r3, [r3, r8]
   1d12e:	2b00      	cmp	r3, #0
   1d130:	d1eb      	bne.n	1d10a <http_client_req+0x156>
	}

	if (req->content_type_value) {
   1d132:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1d136:	b17b      	cbz	r3, 1d158 <http_client_req+0x1a4>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   1d138:	2200      	movs	r2, #0
   1d13a:	e9cd a301 	strd	sl, r3, [sp, #4]
   1d13e:	4b19      	ldr	r3, [pc, #100]	; (1d1a4 <http_client_req+0x1f0>)
   1d140:	e9cd 6203 	strd	r6, r2, [sp, #12]
   1d144:	9300      	str	r3, [sp, #0]
   1d146:	22c0      	movs	r2, #192	; 0xc0
   1d148:	4628      	mov	r0, r5
   1d14a:	ab0c      	add	r3, sp, #48	; 0x30
   1d14c:	a910      	add	r1, sp, #64	; 0x40
   1d14e:	f00a ff90 	bl	28072 <http_send_data.constprop.0>
				     &send_buf_pos, "Content-Type", ": ",
				     req->content_type_value, HTTP_CRLF, NULL);
		if (ret < 0) {
   1d152:	2800      	cmp	r0, #0
   1d154:	db19      	blt.n	1d18a <http_client_req+0x1d6>
			goto out;
		}

		total_sent += ret;
   1d156:	4407      	add	r7, r0
	}

	if (req->payload || req->payload_cb) {
   1d158:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   1d15c:	b923      	cbnz	r3, 1d168 <http_client_req+0x1b4>
   1d15e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1d162:	2b00      	cmp	r3, #0
   1d164:	f000 8100 	beq.w	1d368 <http_client_req+0x3b4>
		if (req->payload_len) {
   1d168:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1d16c:	2b00      	cmp	r3, #0
   1d16e:	f000 80e1 	beq.w	1d334 <http_client_req+0x380>
			char content_len_str[HTTP_CONTENT_LEN_SIZE];

			ret = snprintk(content_len_str, HTTP_CONTENT_LEN_SIZE,
   1d172:	f10d 0834 	add.w	r8, sp, #52	; 0x34
   1d176:	210b      	movs	r1, #11
   1d178:	4640      	mov	r0, r8
   1d17a:	4a0b      	ldr	r2, [pc, #44]	; (1d1a8 <http_client_req+0x1f4>)
   1d17c:	f009 ff2d 	bl	26fda <snprintk>
				       "%zd", req->payload_len);
			if (ret <= 0 || ret >= HTTP_CONTENT_LEN_SIZE) {
   1d180:	3801      	subs	r0, #1
   1d182:	2809      	cmp	r0, #9
   1d184:	d912      	bls.n	1d1ac <http_client_req+0x1f8>
				ret = -ENOMEM;
   1d186:	f06f 000b 	mvn.w	r0, #11

	return total_sent;

out:
	return ret;
}
   1d18a:	b041      	add	sp, #260	; 0x104
   1d18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d190:	0002df5a 	.word	0x0002df5a
   1d194:	0002ea4b 	.word	0x0002ea4b
   1d198:	0002deeb 	.word	0x0002deeb
   1d19c:	0002e8f5 	.word	0x0002e8f5
   1d1a0:	0002dbe0 	.word	0x0002dbe0
   1d1a4:	0002dbe5 	.word	0x0002dbe5
   1d1a8:	0002dbf2 	.word	0x0002dbf2
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   1d1ac:	2300      	movs	r3, #0
   1d1ae:	e9cd 6304 	strd	r6, r3, [sp, #16]
   1d1b2:	4b8c      	ldr	r3, [pc, #560]	; (1d3e4 <http_client_req+0x430>)
   1d1b4:	22c0      	movs	r2, #192	; 0xc0
   1d1b6:	9301      	str	r3, [sp, #4]
   1d1b8:	4b8b      	ldr	r3, [pc, #556]	; (1d3e8 <http_client_req+0x434>)
   1d1ba:	4628      	mov	r0, r5
   1d1bc:	9300      	str	r3, [sp, #0]
   1d1be:	e9cd 8602 	strd	r8, r6, [sp, #8]
   1d1c2:	ab0c      	add	r3, sp, #48	; 0x30
   1d1c4:	a910      	add	r1, sp, #64	; 0x40
   1d1c6:	f00a ff54 	bl	28072 <http_send_data.constprop.0>
		if (ret < 0) {
   1d1ca:	2800      	cmp	r0, #0
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   1d1cc:	4606      	mov	r6, r0
		if (ret < 0) {
   1d1ce:	f2c0 80e4 	blt.w	1d39a <http_client_req+0x3e6>
		ret = http_flush_data(sock, send_buf, send_buf_pos);
   1d1d2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	ret = sendall(sock, send_buf, send_buf_len);
   1d1d6:	4628      	mov	r0, r5
   1d1d8:	4642      	mov	r2, r8
   1d1da:	a910      	add	r1, sp, #64	; 0x40
   1d1dc:	f00a ff2e 	bl	2803c <sendall>
	if (ret < 0) {
   1d1e0:	2800      	cmp	r0, #0
   1d1e2:	dbd2      	blt.n	1d18a <http_client_req+0x1d6>
		if (ret < 0) {
   1d1e4:	f1b8 0f00 	cmp.w	r8, #0
	return (int)send_buf_len;
   1d1e8:	4640      	mov	r0, r8
		if (ret < 0) {
   1d1ea:	dbce      	blt.n	1d18a <http_client_req+0x1d6>
		send_buf_pos = 0;
   1d1ec:	2300      	movs	r3, #0
   1d1ee:	930c      	str	r3, [sp, #48]	; 0x30
		if (req->payload_cb) {
   1d1f0:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
		total_sent += ret;
   1d1f4:	443e      	add	r6, r7
		total_sent += ret;
   1d1f6:	4446      	add	r6, r8
		if (req->payload_cb) {
   1d1f8:	2b00      	cmp	r3, #0
   1d1fa:	f000 80a4 	beq.w	1d346 <http_client_req+0x392>
			ret = req->payload_cb(sock, req, user_data);
   1d1fe:	464a      	mov	r2, r9
   1d200:	4621      	mov	r1, r4
   1d202:	4628      	mov	r0, r5
   1d204:	4798      	blx	r3
			if (ret < 0) {
   1d206:	2800      	cmp	r0, #0
   1d208:	dbbf      	blt.n	1d18a <http_client_req+0x1d6>
			total_sent += ret;
   1d20a:	4406      	add	r6, r0
	if (send_buf_pos > 0) {
   1d20c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1d20e:	b157      	cbz	r7, 1d226 <http_client_req+0x272>
	ret = sendall(sock, send_buf, send_buf_len);
   1d210:	463a      	mov	r2, r7
   1d212:	4628      	mov	r0, r5
   1d214:	a910      	add	r1, sp, #64	; 0x40
   1d216:	f00a ff11 	bl	2803c <sendall>
	if (ret < 0) {
   1d21a:	2800      	cmp	r0, #0
   1d21c:	dbb5      	blt.n	1d18a <http_client_req+0x1d6>
		if (ret < 0) {
   1d21e:	2f00      	cmp	r7, #0
	return (int)send_buf_len;
   1d220:	4638      	mov	r0, r7
		if (ret < 0) {
   1d222:	dbb2      	blt.n	1d18a <http_client_req+0x1d6>
		total_sent += ret;
   1d224:	443e      	add	r6, r7
	memset(&req->internal.response, 0, sizeof(req->internal.response));
   1d226:	f104 0348 	add.w	r3, r4, #72	; 0x48
   1d22a:	9308      	str	r3, [sp, #32]
	http_parser_init(parser, HTTP_RESPONSE);
   1d22c:	2101      	movs	r1, #1
	http_client_init_parser(&req->internal.parser,
   1d22e:	f104 0320 	add.w	r3, r4, #32
	http_parser_init(parser, HTTP_RESPONSE);
   1d232:	4620      	mov	r0, r4
	http_client_init_parser(&req->internal.parser,
   1d234:	930a      	str	r3, [sp, #40]	; 0x28
	http_parser_init(parser, HTTP_RESPONSE);
   1d236:	f00a fe31 	bl	27e9c <http_parser_init>
	settings->on_body = on_body;
   1d23a:	4b6c      	ldr	r3, [pc, #432]	; (1d3ec <http_client_req+0x438>)
   1d23c:	63a3      	str	r3, [r4, #56]	; 0x38
	settings->on_chunk_complete = on_chunk_complete;
   1d23e:	4b6c      	ldr	r3, [pc, #432]	; (1d3f0 <http_client_req+0x43c>)
   1d240:	6463      	str	r3, [r4, #68]	; 0x44
	settings->on_chunk_header = on_chunk_header;
   1d242:	4b6c      	ldr	r3, [pc, #432]	; (1d3f4 <http_client_req+0x440>)
   1d244:	6423      	str	r3, [r4, #64]	; 0x40
	settings->on_headers_complete = on_headers_complete;
   1d246:	4b6c      	ldr	r3, [pc, #432]	; (1d3f8 <http_client_req+0x444>)
   1d248:	6363      	str	r3, [r4, #52]	; 0x34
	settings->on_header_field = on_header_field;
   1d24a:	4b6c      	ldr	r3, [pc, #432]	; (1d3fc <http_client_req+0x448>)
   1d24c:	62e3      	str	r3, [r4, #44]	; 0x2c
	settings->on_header_value = on_header_value;
   1d24e:	4b6c      	ldr	r3, [pc, #432]	; (1d400 <http_client_req+0x44c>)
   1d250:	6323      	str	r3, [r4, #48]	; 0x30
	settings->on_message_begin = on_message_begin;
   1d252:	4b6c      	ldr	r3, [pc, #432]	; (1d404 <http_client_req+0x450>)
   1d254:	6223      	str	r3, [r4, #32]
	settings->on_message_complete = on_message_complete;
   1d256:	4b6c      	ldr	r3, [pc, #432]	; (1d408 <http_client_req+0x454>)
   1d258:	63e3      	str	r3, [r4, #60]	; 0x3c
	settings->on_status = on_status;
   1d25a:	4b6c      	ldr	r3, [pc, #432]	; (1d40c <http_client_req+0x458>)
   1d25c:	62a3      	str	r3, [r4, #40]	; 0x28
	settings->on_url = on_url;
   1d25e:	4b6c      	ldr	r3, [pc, #432]	; (1d410 <http_client_req+0x45c>)
   1d260:	6263      	str	r3, [r4, #36]	; 0x24
	return z_impl_k_uptime_ticks();
   1d262:	f00d fdf4 	bl	2ae4e <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   1d266:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   1d26a:	fba0 030a 	umull	r0, r3, r0, sl
   1d26e:	fb0a 3301 	mla	r3, sl, r1, r3
   1d272:	0bc7      	lsrs	r7, r0, #15
   1d274:	ea47 4743 	orr.w	r7, r7, r3, lsl #17
	fds[0].events = ZSOCK_POLLIN;
   1d278:	2301      	movs	r3, #1
	size_t offset = 0;
   1d27a:	f04f 0800 	mov.w	r8, #0
	int32_t remaining_time = timeout;
   1d27e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
	fds[0].fd = sock;
   1d282:	950d      	str	r5, [sp, #52]	; 0x34
	fds[0].events = ZSOCK_POLLIN;
   1d284:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		if (timeout > 0) {
   1d288:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d28a:	2b00      	cmp	r3, #0
   1d28c:	dd10      	ble.n	1d2b0 <http_client_req+0x2fc>
   1d28e:	f00d fdde 	bl	2ae4e <z_impl_k_uptime_ticks>
   1d292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d296:	fba0 0303 	umull	r0, r3, r0, r3
   1d29a:	fb0a 3101 	mla	r1, sl, r1, r3
   1d29e:	0bc3      	lsrs	r3, r0, #15
   1d2a0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
static inline int64_t k_uptime_delta(int64_t *reftime)
{
	int64_t uptime, delta;

	uptime = k_uptime_get();
	delta = uptime - *reftime;
   1d2a4:	1bdf      	subs	r7, r3, r7
			remaining_time -= (int32_t)k_uptime_delta(&timestamp);
   1d2a6:	eba9 0907 	sub.w	r9, r9, r7
	*reftime = uptime;
   1d2aa:	461f      	mov	r7, r3
			if (remaining_time < 0) {
   1d2ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
	return z_impl_zsock_poll(fds, nfds, timeout);
   1d2b0:	2101      	movs	r1, #1
   1d2b2:	464a      	mov	r2, r9
   1d2b4:	a80d      	add	r0, sp, #52	; 0x34
   1d2b6:	f00a fbce 	bl	27a56 <z_impl_zsock_poll>
		if (ret == 0) {
   1d2ba:	2800      	cmp	r0, #0
   1d2bc:	d073      	beq.n	1d3a6 <http_client_req+0x3f2>
		} else if (ret < 0) {
   1d2be:	f2c0 8087 	blt.w	1d3d0 <http_client_req+0x41c>
		if (fds[0].revents & (ZSOCK_POLLERR | ZSOCK_POLLNVAL)) {
   1d2c2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
   1d2c6:	f013 0f28 	tst.w	r3, #40	; 0x28
   1d2ca:	f040 8081 	bne.w	1d3d0 <http_client_req+0x41c>
		} else if (fds[0].revents & ZSOCK_POLLHUP) {
   1d2ce:	f013 0b10 	ands.w	fp, r3, #16
   1d2d2:	d168      	bne.n	1d3a6 <http_client_req+0x3f2>
		} else if (fds[0].revents & ZSOCK_POLLIN) {
   1d2d4:	07da      	lsls	r2, r3, #31
   1d2d6:	d5d7      	bpl.n	1d288 <http_client_req+0x2d4>
			received = zsock_recv(sock, req->internal.response.recv_buf + offset,
   1d2d8:	6da1      	ldr	r1, [r4, #88]	; 0x58
   1d2da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1d2dc:	4441      	add	r1, r8
   1d2de:	eba2 0208 	sub.w	r2, r2, r8
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1d2e2:	465b      	mov	r3, fp
   1d2e4:	4628      	mov	r0, r5
   1d2e6:	e9cd bb00 	strd	fp, fp, [sp]
   1d2ea:	f00a fb80 	bl	279ee <z_impl_zsock_recvfrom>
			if (received == 0) {
   1d2ee:	1e03      	subs	r3, r0, #0
   1d2f0:	d059      	beq.n	1d3a6 <http_client_req+0x3f2>
			} else if (received < 0) {
   1d2f2:	db6d      	blt.n	1d3d0 <http_client_req+0x41c>
				req->internal.response.data_len += received;
   1d2f4:	6e22      	ldr	r2, [r4, #96]	; 0x60
				(void)http_parser_execute(
   1d2f6:	990a      	ldr	r1, [sp, #40]	; 0x28
				req->internal.response.data_len += received;
   1d2f8:	441a      	add	r2, r3
   1d2fa:	6622      	str	r2, [r4, #96]	; 0x60
					req->internal.response.recv_buf + offset, received);
   1d2fc:	6da2      	ldr	r2, [r4, #88]	; 0x58
				(void)http_parser_execute(
   1d2fe:	4620      	mov	r0, r4
   1d300:	4442      	add	r2, r8
   1d302:	930b      	str	r3, [sp, #44]	; 0x2c
   1d304:	f7fe fb68 	bl	1b9d8 <http_parser_execute>
			offset += received;
   1d308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d30a:	f894 108e 	ldrb.w	r1, [r4, #142]	; 0x8e
   1d30e:	4498      	add	r8, r3
			if (offset >= req->internal.response.recv_buf_len) {
   1d310:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1d312:	4598      	cmp	r8, r3
   1d314:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1d316:	d334      	bcc.n	1d382 <http_client_req+0x3ce>
			if (req->internal.response.cb) {
   1d318:	2b00      	cmp	r3, #0
   1d31a:	d042      	beq.n	1d3a2 <http_client_req+0x3ee>
				offset = 0;
   1d31c:	46d8      	mov	r8, fp
				if (req->internal.response.message_complete) {
   1d31e:	f3c1 0180 	ubfx	r1, r1, #2, #1
					req->internal.response.cb(&req->internal.response, event,
   1d322:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   1d326:	9808      	ldr	r0, [sp, #32]
   1d328:	4798      	blx	r3
					req->internal.response.data_len = 0;
   1d32a:	2300      	movs	r3, #0
					req->internal.response.body_frag_len = 0;
   1d32c:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
					req->internal.response.data_len = 0;
   1d330:	6623      	str	r3, [r4, #96]	; 0x60
					req->internal.response.body_frag_start = NULL;
   1d332:	e02d      	b.n	1d390 <http_client_req+0x3dc>
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   1d334:	e9cd 6300 	strd	r6, r3, [sp]
   1d338:	22c0      	movs	r2, #192	; 0xc0
   1d33a:	4628      	mov	r0, r5
   1d33c:	ab0c      	add	r3, sp, #48	; 0x30
   1d33e:	a910      	add	r1, sp, #64	; 0x40
   1d340:	f00a fe97 	bl	28072 <http_send_data.constprop.0>
   1d344:	e741      	b.n	1d1ca <http_client_req+0x216>
				length = strlen(req->payload);
   1d346:	e9d4 8732 	ldrd	r8, r7, [r4, #200]	; 0xc8
			if (req->payload_len == 0) {
   1d34a:	b91f      	cbnz	r7, 1d354 <http_client_req+0x3a0>
				length = strlen(req->payload);
   1d34c:	4640      	mov	r0, r8
   1d34e:	f7fb fe9d 	bl	1908c <strlen>
   1d352:	4607      	mov	r7, r0
			ret = sendall(sock, req->payload, length);
   1d354:	463a      	mov	r2, r7
   1d356:	4641      	mov	r1, r8
   1d358:	4628      	mov	r0, r5
   1d35a:	f00a fe6f 	bl	2803c <sendall>
			if (ret < 0) {
   1d35e:	2800      	cmp	r0, #0
   1d360:	f6ff af13 	blt.w	1d18a <http_client_req+0x1d6>
			total_sent += length;
   1d364:	443e      	add	r6, r7
   1d366:	e751      	b.n	1d20c <http_client_req+0x258>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   1d368:	e9cd 6300 	strd	r6, r3, [sp]
   1d36c:	22c0      	movs	r2, #192	; 0xc0
   1d36e:	4628      	mov	r0, r5
   1d370:	ab0c      	add	r3, sp, #48	; 0x30
   1d372:	a910      	add	r1, sp, #64	; 0x40
   1d374:	f00a fe7d 	bl	28072 <http_send_data.constprop.0>
		if (ret < 0) {
   1d378:	2800      	cmp	r0, #0
   1d37a:	f6ff af06 	blt.w	1d18a <http_client_req+0x1d6>
		total_sent += ret;
   1d37e:	19c6      	adds	r6, r0, r7
   1d380:	e744      	b.n	1d20c <http_client_req+0x258>
			if (req->internal.response.cb) {
   1d382:	b12b      	cbz	r3, 1d390 <http_client_req+0x3dc>
				if (req->internal.response.message_complete) {
   1d384:	f011 0104 	ands.w	r1, r1, #4
   1d388:	d109      	bne.n	1d39e <http_client_req+0x3ea>
				} else if (offset == 0) {
   1d38a:	f1b8 0f00 	cmp.w	r8, #0
   1d38e:	d0c8      	beq.n	1d322 <http_client_req+0x36e>
			if (req->internal.response.message_complete) {
   1d390:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   1d394:	075b      	lsls	r3, r3, #29
   1d396:	f57f af77 	bpl.w	1d288 <http_client_req+0x2d4>
   1d39a:	4630      	mov	r0, r6
   1d39c:	e6f5      	b.n	1d18a <http_client_req+0x1d6>
					event = HTTP_DATA_FINAL;
   1d39e:	2101      	movs	r1, #1
   1d3a0:	e7bf      	b.n	1d322 <http_client_req+0x36e>
				offset = 0;
   1d3a2:	4698      	mov	r8, r3
   1d3a4:	e7f4      	b.n	1d390 <http_client_req+0x3dc>
	if (req->internal.response.cb) {
   1d3a6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
   1d3a8:	2d00      	cmp	r5, #0
   1d3aa:	d0f6      	beq.n	1d39a <http_client_req+0x3e6>
		req->internal.response.http_status_code = 0;
   1d3ac:	2100      	movs	r1, #0
   1d3ae:	2220      	movs	r2, #32
		req->internal.response.content_length = 0;
   1d3b0:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
		req->internal.response.http_status_code = 0;
   1d3b4:	f8a4 108c 	strh.w	r1, [r4, #140]	; 0x8c
		req->internal.response.processed = 0;
   1d3b8:	66a1      	str	r1, [r4, #104]	; 0x68
		req->internal.response.body_frag_start = NULL;
   1d3ba:	6521      	str	r1, [r4, #80]	; 0x50
   1d3bc:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   1d3c0:	f00d ff20 	bl	2b204 <memset>
		req->internal.response.cb(&req->internal.response, HTTP_DATA_FINAL,
   1d3c4:	2101      	movs	r1, #1
   1d3c6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   1d3ca:	9808      	ldr	r0, [sp, #32]
   1d3cc:	47a8      	blx	r5
   1d3ce:	e7e4      	b.n	1d39a <http_client_req+0x3e6>
	ret = -errno;
   1d3d0:	f00a fc36 	bl	27c40 <__errno>
	return ret;
   1d3d4:	e7e1      	b.n	1d39a <http_client_req+0x3e6>
		return -EINVAL;
   1d3d6:	f06f 0015 	mvn.w	r0, #21
   1d3da:	e6d6      	b.n	1d18a <http_client_req+0x1d6>
   1d3dc:	4638      	mov	r0, r7
   1d3de:	e6d4      	b.n	1d18a <http_client_req+0x1d6>
   1d3e0:	4640      	mov	r0, r8
   1d3e2:	e6d2      	b.n	1d18a <http_client_req+0x1d6>
   1d3e4:	0002deeb 	.word	0x0002deeb
   1d3e8:	0002dbd1 	.word	0x0002dbd1
   1d3ec:	00027ee1 	.word	0x00027ee1
   1d3f0:	00027f57 	.word	0x00027f57
   1d3f4:	00027f47 	.word	0x00027f47
   1d3f8:	00027f67 	.word	0x00027f67
   1d3fc:	0001cf79 	.word	0x0001cf79
   1d400:	00027fd9 	.word	0x00027fd9
   1d404:	00027f19 	.word	0x00027f19
   1d408:	00027f29 	.word	0x00027f29
   1d40c:	00027f9f 	.word	0x00027f9f
   1d410:	00027ed1 	.word	0x00027ed1

0001d414 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1d414:	4b08      	ldr	r3, [pc, #32]	; (1d438 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1d416:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1d418:	1ac3      	subs	r3, r0, r3
{
   1d41a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d41c:	4907      	ldr	r1, [pc, #28]	; (1d43c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1d41e:	109b      	asrs	r3, r3, #2
{
   1d420:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d422:	4359      	muls	r1, r3
   1d424:	2240      	movs	r2, #64	; 0x40
   1d426:	4806      	ldr	r0, [pc, #24]	; (1d440 <onoff_stop+0x2c>)
   1d428:	f00a fe82 	bl	28130 <stop>
	notify(mgr, res);
   1d42c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d42e:	4601      	mov	r1, r0
	notify(mgr, res);
   1d430:	4620      	mov	r0, r4
}
   1d432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1d436:	4718      	bx	r3
   1d438:	2000d62c 	.word	0x2000d62c
   1d43c:	b6db6db7 	.word	0xb6db6db7
   1d440:	0002ba44 	.word	0x0002ba44

0001d444 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d444:	2340      	movs	r3, #64	; 0x40
{
   1d446:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1d448:	4c0b      	ldr	r4, [pc, #44]	; (1d478 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d44a:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   1d44c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d44e:	460b      	mov	r3, r1
{
   1d450:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d452:	490a      	ldr	r1, [pc, #40]	; (1d47c <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
   1d454:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d456:	4361      	muls	r1, r4
{
   1d458:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d45a:	4a09      	ldr	r2, [pc, #36]	; (1d480 <onoff_start+0x3c>)
   1d45c:	4809      	ldr	r0, [pc, #36]	; (1d484 <onoff_start+0x40>)
   1d45e:	f00a fe94 	bl	2818a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1d462:	1e01      	subs	r1, r0, #0
   1d464:	da05      	bge.n	1d472 <onoff_start+0x2e>
		notify(mgr, err);
   1d466:	4630      	mov	r0, r6
   1d468:	462b      	mov	r3, r5
	}
}
   1d46a:	b002      	add	sp, #8
   1d46c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1d470:	4718      	bx	r3
}
   1d472:	b002      	add	sp, #8
   1d474:	bd70      	pop	{r4, r5, r6, pc}
   1d476:	bf00      	nop
   1d478:	2000d62c 	.word	0x2000d62c
   1d47c:	b6db6db7 	.word	0xb6db6db7
   1d480:	000281f7 	.word	0x000281f7
   1d484:	0002ba44 	.word	0x0002ba44

0001d488 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1d488:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d48a:	2200      	movs	r2, #0
   1d48c:	2101      	movs	r1, #1
{
   1d48e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d490:	2005      	movs	r0, #5
   1d492:	f7fd fd8f 	bl	1afb4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1d496:	480f      	ldr	r0, [pc, #60]	; (1d4d4 <clk_init+0x4c>)
   1d498:	f003 ffc6 	bl	21428 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1d49c:	4b0e      	ldr	r3, [pc, #56]	; (1d4d8 <clk_init+0x50>)
   1d49e:	4298      	cmp	r0, r3
   1d4a0:	d115      	bne.n	1d4ce <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1d4a2:	f003 ffd1 	bl	21448 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1d4a6:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d4a8:	490c      	ldr	r1, [pc, #48]	; (1d4dc <clk_init+0x54>)
   1d4aa:	4630      	mov	r0, r6
   1d4ac:	f009 ffc6 	bl	2743c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1d4b0:	2800      	cmp	r0, #0
   1d4b2:	db0b      	blt.n	1d4cc <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d4b4:	2501      	movs	r5, #1
   1d4b6:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   1d4b8:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d4ba:	4908      	ldr	r1, [pc, #32]	; (1d4dc <clk_init+0x54>)
   1d4bc:	f104 001c 	add.w	r0, r4, #28
   1d4c0:	f009 ffbc 	bl	2743c <onoff_manager_init>
		if (err < 0) {
   1d4c4:	2800      	cmp	r0, #0
   1d4c6:	db01      	blt.n	1d4cc <clk_init+0x44>
	}

	return 0;
   1d4c8:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d4ca:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   1d4cc:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1d4ce:	f06f 0004 	mvn.w	r0, #4
   1d4d2:	e7fb      	b.n	1d4cc <clk_init+0x44>
   1d4d4:	0001d515 	.word	0x0001d515
   1d4d8:	0bad0000 	.word	0x0bad0000
   1d4dc:	0002c1c0 	.word	0x0002c1c0

0001d4e0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1d4e0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1d4e2:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   1d4e4:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   1d4e6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1d4e8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1d4ea:	4808      	ldr	r0, [pc, #32]	; (1d50c <clkstarted_handle.constprop.0+0x2c>)
   1d4ec:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1d4ee:	3340      	adds	r3, #64	; 0x40
   1d4f0:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
   1d4f2:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1d4f6:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1d4f8:	f00a fe07 	bl	2810a <set_on_state>
	if (callback) {
   1d4fc:	b12d      	cbz	r5, 1d50a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d4fe:	4632      	mov	r2, r6
   1d500:	462b      	mov	r3, r5
}
   1d502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d506:	4802      	ldr	r0, [pc, #8]	; (1d510 <clkstarted_handle.constprop.0+0x30>)
   1d508:	4718      	bx	r3
}
   1d50a:	bd70      	pop	{r4, r5, r6, pc}
   1d50c:	2000d62c 	.word	0x2000d62c
   1d510:	0002ba44 	.word	0x0002ba44

0001d514 <clock_event_handler>:
	switch (event) {
   1d514:	b110      	cbz	r0, 1d51c <clock_event_handler+0x8>
   1d516:	2801      	cmp	r0, #1
   1d518:	d004      	beq.n	1d524 <clock_event_handler+0x10>
   1d51a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1d51c:	4b03      	ldr	r3, [pc, #12]	; (1d52c <clock_event_handler+0x18>)
   1d51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d520:	075b      	lsls	r3, r3, #29
   1d522:	d101      	bne.n	1d528 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1d524:	f7ff bfdc 	b.w	1d4e0 <clkstarted_handle.constprop.0>
}
   1d528:	4770      	bx	lr
   1d52a:	bf00      	nop
   1d52c:	2000d62c 	.word	0x2000d62c

0001d530 <generic_hfclk_start>:
{
   1d530:	b508      	push	{r3, lr}
	__asm__ volatile(
   1d532:	f04f 0320 	mov.w	r3, #32
   1d536:	f3ef 8111 	mrs	r1, BASEPRI
   1d53a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d53e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1d542:	4a11      	ldr	r2, [pc, #68]	; (1d588 <generic_hfclk_start+0x58>)
   1d544:	6813      	ldr	r3, [r2, #0]
   1d546:	f043 0002 	orr.w	r0, r3, #2
   1d54a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1d54c:	07da      	lsls	r2, r3, #31
   1d54e:	d408      	bmi.n	1d562 <generic_hfclk_start+0x32>
	__asm__ volatile(
   1d550:	f381 8811 	msr	BASEPRI, r1
   1d554:	f3bf 8f6f 	isb	sy
}
   1d558:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1d55c:	2001      	movs	r0, #1
   1d55e:	f003 bf83 	b.w	21468 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1d562:	4b0a      	ldr	r3, [pc, #40]	; (1d58c <generic_hfclk_start+0x5c>)
   1d564:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1d568:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1d56c:	07d3      	lsls	r3, r2, #31
   1d56e:	d5ef      	bpl.n	1d550 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1d570:	4807      	ldr	r0, [pc, #28]	; (1d590 <generic_hfclk_start+0x60>)
   1d572:	f00a fdca 	bl	2810a <set_on_state>
   1d576:	f381 8811 	msr	BASEPRI, r1
   1d57a:	f3bf 8f6f 	isb	sy
}
   1d57e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1d582:	2000      	movs	r0, #0
   1d584:	f7ff bfac 	b.w	1d4e0 <clkstarted_handle.constprop.0>
   1d588:	2000d67c 	.word	0x2000d67c
   1d58c:	40005000 	.word	0x40005000
   1d590:	2000d66c 	.word	0x2000d66c

0001d594 <api_blocking_start>:
{
   1d594:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d596:	2200      	movs	r2, #0
   1d598:	2301      	movs	r3, #1
   1d59a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1d59e:	ab04      	add	r3, sp, #16
   1d5a0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d5a4:	4a09      	ldr	r2, [pc, #36]	; (1d5cc <api_blocking_start+0x38>)
   1d5a6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d5a8:	f8cd d000 	str.w	sp, [sp]
   1d5ac:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d5b0:	f00a fe1a 	bl	281e8 <api_start>
	if (err < 0) {
   1d5b4:	2800      	cmp	r0, #0
   1d5b6:	db05      	blt.n	1d5c4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1d5b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1d5bc:	2300      	movs	r3, #0
   1d5be:	4668      	mov	r0, sp
   1d5c0:	f007 f9fe 	bl	249c0 <z_impl_k_sem_take>
}
   1d5c4:	b007      	add	sp, #28
   1d5c6:	f85d fb04 	ldr.w	pc, [sp], #4
   1d5ca:	bf00      	nop
   1d5cc:	00028215 	.word	0x00028215

0001d5d0 <generic_hfclk_stop>:
{
   1d5d0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d5d2:	f04f 0320 	mov.w	r3, #32
   1d5d6:	f3ef 8411 	mrs	r4, BASEPRI
   1d5da:	f383 8812 	msr	BASEPRI_MAX, r3
   1d5de:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1d5e2:	4a07      	ldr	r2, [pc, #28]	; (1d600 <generic_hfclk_stop+0x30>)
   1d5e4:	6813      	ldr	r3, [r2, #0]
   1d5e6:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1d5ea:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1d5ec:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1d5ee:	d402      	bmi.n	1d5f6 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1d5f0:	2001      	movs	r0, #1
   1d5f2:	f00c fa9b 	bl	29b2c <nrfx_clock_stop>
	__asm__ volatile(
   1d5f6:	f384 8811 	msr	BASEPRI, r4
   1d5fa:	f3bf 8f6f 	isb	sy
}
   1d5fe:	bd10      	pop	{r4, pc}
   1d600:	2000d67c 	.word	0x2000d67c

0001d604 <z_nrf_clock_control_lf_on>:
{
   1d604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d608:	2201      	movs	r2, #1
   1d60a:	4607      	mov	r7, r0
   1d60c:	4935      	ldr	r1, [pc, #212]	; (1d6e4 <z_nrf_clock_control_lf_on+0xe0>)
   1d60e:	e8d1 3fef 	ldaex	r3, [r1]
   1d612:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1d616:	2800      	cmp	r0, #0
   1d618:	d1f9      	bne.n	1d60e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1d61a:	b933      	cbnz	r3, 1d62a <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1d61c:	4932      	ldr	r1, [pc, #200]	; (1d6e8 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
   1d61e:	4833      	ldr	r0, [pc, #204]	; (1d6ec <z_nrf_clock_control_lf_on+0xe8>)
   1d620:	604b      	str	r3, [r1, #4]
   1d622:	60cb      	str	r3, [r1, #12]
   1d624:	608a      	str	r2, [r1, #8]
   1d626:	f009 ff1c 	bl	27462 <onoff_request>
	switch (start_mode) {
   1d62a:	1e7b      	subs	r3, r7, #1
   1d62c:	2b01      	cmp	r3, #1
   1d62e:	d828      	bhi.n	1d682 <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1d630:	2f01      	cmp	r7, #1
   1d632:	d106      	bne.n	1d642 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1d634:	4b2e      	ldr	r3, [pc, #184]	; (1d6f0 <z_nrf_clock_control_lf_on+0xec>)
   1d636:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1d63a:	f003 0303 	and.w	r3, r3, #3
   1d63e:	2b02      	cmp	r3, #2
   1d640:	d01f      	beq.n	1d682 <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d642:	f00d f9ff 	bl	2aa44 <k_is_in_isr>
   1d646:	4605      	mov	r5, r0
   1d648:	b9e8      	cbnz	r0, 1d686 <z_nrf_clock_control_lf_on+0x82>
	return !z_sys_post_kernel;
   1d64a:	4b2a      	ldr	r3, [pc, #168]	; (1d6f4 <z_nrf_clock_control_lf_on+0xf0>)
   1d64c:	781b      	ldrb	r3, [r3, #0]
   1d64e:	b1d3      	cbz	r3, 1d686 <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
   1d650:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   1d652:	4606      	mov	r6, r0
   1d654:	4b26      	ldr	r3, [pc, #152]	; (1d6f0 <z_nrf_clock_control_lf_on+0xec>)
   1d656:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1d65a:	4c25      	ldr	r4, [pc, #148]	; (1d6f0 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d65c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1d6f8 <z_nrf_clock_control_lf_on+0xf4>
   1d660:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1d664:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1d668:	03d2      	lsls	r2, r2, #15
   1d66a:	d516      	bpl.n	1d69a <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1d66c:	f003 0303 	and.w	r3, r3, #3
   1d670:	2b02      	cmp	r3, #2
   1d672:	d001      	beq.n	1d678 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1d674:	2f01      	cmp	r7, #1
   1d676:	d110      	bne.n	1d69a <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
   1d678:	b375      	cbz	r5, 1d6d8 <z_nrf_clock_control_lf_on+0xd4>
   1d67a:	f386 8811 	msr	BASEPRI, r6
   1d67e:	f3bf 8f6f 	isb	sy
}
   1d682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1d686:	f04f 0320 	mov.w	r3, #32
   1d68a:	f3ef 8611 	mrs	r6, BASEPRI
   1d68e:	f383 8812 	msr	BASEPRI_MAX, r3
   1d692:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d696:	2501      	movs	r5, #1
   1d698:	e7df      	b.n	1d65a <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1d69a:	b1c5      	cbz	r5, 1d6ce <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1d69c:	4630      	mov	r0, r6
   1d69e:	f7fd fc4d 	bl	1af3c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1d6a2:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1d6a6:	b2db      	uxtb	r3, r3
   1d6a8:	2b01      	cmp	r3, #1
   1d6aa:	d1d9      	bne.n	1d660 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1d6ac:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1d6b0:	2a00      	cmp	r2, #0
   1d6b2:	d0d5      	beq.n	1d660 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d6b4:	2200      	movs	r2, #0
   1d6b6:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1d6ba:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1d6be:	2202      	movs	r2, #2
   1d6c0:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   1d6c4:	2220      	movs	r2, #32
   1d6c6:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d6ca:	60a3      	str	r3, [r4, #8]
}
   1d6cc:	e7c8      	b.n	1d660 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
   1d6ce:	2100      	movs	r1, #0
   1d6d0:	2021      	movs	r0, #33	; 0x21
   1d6d2:	f007 fdb5 	bl	25240 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d6d6:	e7e4      	b.n	1d6a2 <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
   1d6d8:	2202      	movs	r2, #2
   1d6da:	4b05      	ldr	r3, [pc, #20]	; (1d6f0 <z_nrf_clock_control_lf_on+0xec>)
   1d6dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d6e0:	e7cf      	b.n	1d682 <z_nrf_clock_control_lf_on+0x7e>
   1d6e2:	bf00      	nop
   1d6e4:	2000d628 	.word	0x2000d628
   1d6e8:	2000d618 	.word	0x2000d618
   1d6ec:	2000d648 	.word	0x2000d648
   1d6f0:	40005000 	.word	0x40005000
   1d6f4:	2000eafc 	.word	0x2000eafc
   1d6f8:	e000e100 	.word	0xe000e100

0001d6fc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   1d6fc:	b508      	push	{r3, lr}
   1d6fe:	4807      	ldr	r0, [pc, #28]	; (1d71c <uart_console_init+0x20>)
   1d700:	f00d f8fa 	bl	2a8f8 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1d704:	b138      	cbz	r0, 1d716 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1d706:	4806      	ldr	r0, [pc, #24]	; (1d720 <uart_console_init+0x24>)
   1d708:	f7fe f8ae 	bl	1b868 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1d70c:	4804      	ldr	r0, [pc, #16]	; (1d720 <uart_console_init+0x24>)
   1d70e:	f7fc f9d3 	bl	19ab8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1d712:	2000      	movs	r0, #0
}
   1d714:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1d716:	f06f 0012 	mvn.w	r0, #18
   1d71a:	e7fb      	b.n	1d714 <uart_console_init+0x18>
   1d71c:	0002ba8c 	.word	0x0002ba8c
   1d720:	0001d725 	.word	0x0001d725

0001d724 <console_out>:
	if ('\n' == c) {
   1d724:	280a      	cmp	r0, #10
{
   1d726:	b538      	push	{r3, r4, r5, lr}
   1d728:	4604      	mov	r4, r0
   1d72a:	4d07      	ldr	r5, [pc, #28]	; (1d748 <console_out+0x24>)
	if ('\n' == c) {
   1d72c:	d104      	bne.n	1d738 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1d72e:	68ab      	ldr	r3, [r5, #8]
   1d730:	210d      	movs	r1, #13
   1d732:	4628      	mov	r0, r5
   1d734:	685b      	ldr	r3, [r3, #4]
   1d736:	4798      	blx	r3
   1d738:	68ab      	ldr	r3, [r5, #8]
   1d73a:	4803      	ldr	r0, [pc, #12]	; (1d748 <console_out+0x24>)
   1d73c:	685b      	ldr	r3, [r3, #4]
   1d73e:	b2e1      	uxtb	r1, r4
   1d740:	4798      	blx	r3
}
   1d742:	4620      	mov	r0, r4
   1d744:	bd38      	pop	{r3, r4, r5, pc}
   1d746:	bf00      	nop
   1d748:	0002ba8c 	.word	0x0002ba8c

0001d74c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1d74c:	b530      	push	{r4, r5, lr}
	return port->config;
   1d74e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d750:	f001 041f 	and.w	r4, r1, #31
   1d754:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1d756:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1d75a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d75c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1d760:	d105      	bne.n	1d76e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1d762:	4620      	mov	r0, r4
   1d764:	f004 f944 	bl	219f0 <nrfx_gpiote_trigger_disable>

		return 0;
   1d768:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   1d76a:	b005      	add	sp, #20
   1d76c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d76e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1d770:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d774:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1d778:	d114      	bne.n	1d7a4 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1d77a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d77e:	bf0c      	ite	eq
   1d780:	2304      	moveq	r3, #4
   1d782:	2305      	movne	r3, #5
   1d784:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d788:	2300      	movs	r3, #0
   1d78a:	4620      	mov	r0, r4
   1d78c:	4619      	mov	r1, r3
   1d78e:	aa02      	add	r2, sp, #8
   1d790:	f003 ff64 	bl	2165c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d794:	4b1c      	ldr	r3, [pc, #112]	; (1d808 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   1d796:	4298      	cmp	r0, r3
   1d798:	d133      	bne.n	1d802 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1d79a:	2101      	movs	r1, #1
   1d79c:	4620      	mov	r0, r4
   1d79e:	f004 f8e3 	bl	21968 <nrfx_gpiote_trigger_enable>
	return 0;
   1d7a2:	e7e1      	b.n	1d768 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1d7a4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1d7a8:	d020      	beq.n	1d7ec <gpio_nrfx_pin_interrupt_configure+0xa0>
   1d7aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1d7ae:	bf14      	ite	ne
   1d7b0:	2301      	movne	r3, #1
   1d7b2:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d7b4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1d7b8:	6883      	ldr	r3, [r0, #8]
   1d7ba:	40cb      	lsrs	r3, r1
   1d7bc:	07d9      	lsls	r1, r3, #31
   1d7be:	d4e3      	bmi.n	1d788 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1d7c0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1d7c4:	d1e0      	bne.n	1d788 <gpio_nrfx_pin_interrupt_configure+0x3c>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d7c6:	4a11      	ldr	r2, [pc, #68]	; (1d80c <gpio_nrfx_pin_interrupt_configure+0xc0>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1d7c8:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d7cc:	3380      	adds	r3, #128	; 0x80
   1d7ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1d7d2:	07db      	lsls	r3, r3, #31
   1d7d4:	d4d8      	bmi.n	1d788 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d7d6:	f10d 0507 	add.w	r5, sp, #7
   1d7da:	4629      	mov	r1, r5
   1d7dc:	4620      	mov	r0, r4
   1d7de:	f004 f86f 	bl	218c0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1d7e2:	4b0b      	ldr	r3, [pc, #44]	; (1d810 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   1d7e4:	4298      	cmp	r0, r3
   1d7e6:	d003      	beq.n	1d7f0 <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
   1d7e8:	9503      	str	r5, [sp, #12]
   1d7ea:	e7cd      	b.n	1d788 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1d7ec:	2303      	movs	r3, #3
   1d7ee:	e7e1      	b.n	1d7b4 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   1d7f0:	4628      	mov	r0, r5
   1d7f2:	f004 f8b3 	bl	2195c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1d7f6:	4b04      	ldr	r3, [pc, #16]	; (1d808 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   1d7f8:	4298      	cmp	r0, r3
   1d7fa:	d0f5      	beq.n	1d7e8 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
   1d7fc:	f06f 000b 	mvn.w	r0, #11
   1d800:	e7b3      	b.n	1d76a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1d802:	f06f 0015 	mvn.w	r0, #21
   1d806:	e7b0      	b.n	1d76a <gpio_nrfx_pin_interrupt_configure+0x1e>
   1d808:	0bad0000 	.word	0x0bad0000
   1d80c:	40842500 	.word	0x40842500
   1d810:	0bad0004 	.word	0x0bad0004

0001d814 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1d814:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1d816:	f004 f891 	bl	2193c <nrfx_gpiote_is_init>
   1d81a:	4604      	mov	r4, r0
   1d81c:	b968      	cbnz	r0, 1d83a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1d81e:	f004 f865 	bl	218ec <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1d822:	4b08      	ldr	r3, [pc, #32]	; (1d844 <gpio_nrfx_init+0x30>)
   1d824:	4298      	cmp	r0, r3
   1d826:	d10a      	bne.n	1d83e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1d828:	4621      	mov	r1, r4
   1d82a:	4807      	ldr	r0, [pc, #28]	; (1d848 <gpio_nrfx_init+0x34>)
   1d82c:	f004 f842 	bl	218b4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d830:	4622      	mov	r2, r4
   1d832:	2105      	movs	r1, #5
   1d834:	2031      	movs	r0, #49	; 0x31
   1d836:	f7fd fbbd 	bl	1afb4 <z_arm_irq_priority_set>
		return 0;
   1d83a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1d83c:	bd10      	pop	{r4, pc}
		return -EIO;
   1d83e:	f06f 0004 	mvn.w	r0, #4
   1d842:	e7fb      	b.n	1d83c <gpio_nrfx_init+0x28>
   1d844:	0bad0000 	.word	0x0bad0000
   1d848:	0001d84d 	.word	0x0001d84d

0001d84c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d84c:	0943      	lsrs	r3, r0, #5
{
   1d84e:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d850:	d107      	bne.n	1d862 <nrfx_gpio_handler+0x16>
	return list->head;
   1d852:	4b0b      	ldr	r3, [pc, #44]	; (1d880 <nrfx_gpio_handler+0x34>)
   1d854:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d856:	b121      	cbz	r1, 1d862 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   1d858:	2501      	movs	r5, #1
	return node->next;
   1d85a:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1d85c:	4e09      	ldr	r6, [pc, #36]	; (1d884 <nrfx_gpio_handler+0x38>)
   1d85e:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d860:	b901      	cbnz	r1, 1d864 <nrfx_gpio_handler+0x18>
}
   1d862:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   1d864:	688a      	ldr	r2, [r1, #8]
   1d866:	402a      	ands	r2, r5
   1d868:	d002      	beq.n	1d870 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
   1d86a:	4630      	mov	r0, r6
   1d86c:	684b      	ldr	r3, [r1, #4]
   1d86e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d870:	b11c      	cbz	r4, 1d87a <nrfx_gpio_handler+0x2e>
   1d872:	6823      	ldr	r3, [r4, #0]
   1d874:	4621      	mov	r1, r4
   1d876:	461c      	mov	r4, r3
   1d878:	e7f2      	b.n	1d860 <nrfx_gpio_handler+0x14>
   1d87a:	4623      	mov	r3, r4
   1d87c:	e7fa      	b.n	1d874 <nrfx_gpio_handler+0x28>
   1d87e:	bf00      	nop
   1d880:	2000d680 	.word	0x2000d680
   1d884:	0002ba5c 	.word	0x0002ba5c

0001d888 <gpio_nrfx_pin_configure>:
{
   1d888:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1d88c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d88e:	f001 051f 	and.w	r5, r1, #31
   1d892:	7b3b      	ldrb	r3, [r7, #12]
{
   1d894:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d896:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1d89a:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d89c:	4628      	mov	r0, r5
   1d89e:	f10d 0103 	add.w	r1, sp, #3
   1d8a2:	f004 f80d 	bl	218c0 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1d8a6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d8aa:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1d8ac:	d10b      	bne.n	1d8c6 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1d8ae:	4628      	mov	r0, r5
   1d8b0:	f004 f8c6 	bl	21a40 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1d8b4:	4b3c      	ldr	r3, [pc, #240]	; (1d9a8 <gpio_nrfx_pin_configure+0x120>)
   1d8b6:	4598      	cmp	r8, r3
   1d8b8:	d103      	bne.n	1d8c2 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   1d8ba:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1d8be:	f004 f847 	bl	21950 <nrfx_gpiote_channel_free>
		return 0;
   1d8c2:	2000      	movs	r0, #0
   1d8c4:	e00c      	b.n	1d8e0 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d8c6:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d8c8:	4628      	mov	r0, r5
   1d8ca:	4619      	mov	r1, r3
   1d8cc:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d8ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d8d2:	f003 fec3 	bl	2165c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d8d6:	4b34      	ldr	r3, [pc, #208]	; (1d9a8 <gpio_nrfx_pin_configure+0x120>)
   1d8d8:	4298      	cmp	r0, r3
   1d8da:	d004      	beq.n	1d8e6 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   1d8dc:	f06f 0015 	mvn.w	r0, #21
}
   1d8e0:	b004      	add	sp, #16
   1d8e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1d8e6:	4580      	cmp	r8, r0
   1d8e8:	d103      	bne.n	1d8f2 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   1d8ea:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1d8ee:	f004 f82f 	bl	21950 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1d8f2:	03a3      	lsls	r3, r4, #14
   1d8f4:	d549      	bpl.n	1d98a <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d8f6:	f240 3306 	movw	r3, #774	; 0x306
   1d8fa:	4023      	ands	r3, r4
   1d8fc:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1d900:	d019      	beq.n	1d936 <gpio_nrfx_pin_configure+0xae>
   1d902:	d80c      	bhi.n	1d91e <gpio_nrfx_pin_configure+0x96>
   1d904:	2b06      	cmp	r3, #6
   1d906:	d017      	beq.n	1d938 <gpio_nrfx_pin_configure+0xb0>
   1d908:	d804      	bhi.n	1d914 <gpio_nrfx_pin_configure+0x8c>
   1d90a:	b1ab      	cbz	r3, 1d938 <gpio_nrfx_pin_configure+0xb0>
   1d90c:	2b02      	cmp	r3, #2
   1d90e:	d1e5      	bne.n	1d8dc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   1d910:	2304      	movs	r3, #4
   1d912:	e011      	b.n	1d938 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1d918:	d1e0      	bne.n	1d8dc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   1d91a:	2301      	movs	r3, #1
   1d91c:	e00c      	b.n	1d938 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d91e:	f240 2202 	movw	r2, #514	; 0x202
   1d922:	4293      	cmp	r3, r2
   1d924:	d026      	beq.n	1d974 <gpio_nrfx_pin_configure+0xec>
   1d926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1d92a:	d025      	beq.n	1d978 <gpio_nrfx_pin_configure+0xf0>
   1d92c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1d930:	d1d4      	bne.n	1d8dc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   1d932:	2302      	movs	r3, #2
   1d934:	e000      	b.n	1d938 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   1d936:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1d938:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1d93c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1d940:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1d944:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1d946:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   1d94a:	bf4c      	ite	mi
   1d94c:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1d94e:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d952:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1d954:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d958:	d510      	bpl.n	1d97c <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1d95a:	2301      	movs	r3, #1
   1d95c:	687a      	ldr	r2, [r7, #4]
   1d95e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1d960:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1d962:	2200      	movs	r2, #0
   1d964:	4628      	mov	r0, r5
   1d966:	a901      	add	r1, sp, #4
   1d968:	f003 ff24 	bl	217b4 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d96c:	4b0e      	ldr	r3, [pc, #56]	; (1d9a8 <gpio_nrfx_pin_configure+0x120>)
   1d96e:	4298      	cmp	r0, r3
   1d970:	d0a7      	beq.n	1d8c2 <gpio_nrfx_pin_configure+0x3a>
   1d972:	e7b3      	b.n	1d8dc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   1d974:	2305      	movs	r3, #5
   1d976:	e7df      	b.n	1d938 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d978:	2303      	movs	r3, #3
   1d97a:	e7dd      	b.n	1d938 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1d97c:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1d97e:	bf41      	itttt	mi
   1d980:	2301      	movmi	r3, #1
   1d982:	687a      	ldrmi	r2, [r7, #4]
   1d984:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   1d986:	60d3      	strmi	r3, [r2, #12]
}
   1d988:	e7eb      	b.n	1d962 <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
   1d98a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d98c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1d990:	bf4c      	ite	mi
   1d992:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1d994:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d998:	461a      	mov	r2, r3
   1d99a:	4628      	mov	r0, r5
   1d99c:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1d99e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d9a2:	f003 fe5b 	bl	2165c <nrfx_gpiote_input_configure>
   1d9a6:	e7e1      	b.n	1d96c <gpio_nrfx_pin_configure+0xe4>
   1d9a8:	0bad0000 	.word	0x0bad0000

0001d9ac <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
   1d9ac:	b538      	push	{r3, r4, r5, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1d9ae:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1d9b0:	6905      	ldr	r5, [r0, #16]

	dev_config->irq_connect();
   1d9b2:	69e3      	ldr	r3, [r4, #28]
   1d9b4:	4798      	blx	r3

	int err = pinctrl_apply_state(dev_config->pcfg,
   1d9b6:	6a20      	ldr	r0, [r4, #32]
   1d9b8:	f00a fcaa 	bl	28310 <pinctrl_apply_state.constprop.0>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
   1d9bc:	2800      	cmp	r0, #0
   1d9be:	db0d      	blt.n	1d9dc <i2c_nrfx_twim_init+0x30>
		return err;
	}

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
   1d9c0:	462b      	mov	r3, r5
   1d9c2:	4620      	mov	r0, r4
   1d9c4:	4a07      	ldr	r2, [pc, #28]	; (1d9e4 <i2c_nrfx_twim_init+0x38>)
   1d9c6:	f104 0108 	add.w	r1, r4, #8
   1d9ca:	f004 fb3d 	bl	22048 <nrfx_twim_init>
   1d9ce:	4b06      	ldr	r3, [pc, #24]	; (1d9e8 <i2c_nrfx_twim_init+0x3c>)
   1d9d0:	4298      	cmp	r0, r3
   1d9d2:	d104      	bne.n	1d9de <i2c_nrfx_twim_init+0x32>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_init_suspended(dev);
	pm_device_runtime_enable(dev);
#else
	nrfx_twim_enable(&dev_config->twim);
   1d9d4:	4620      	mov	r0, r4
   1d9d6:	f004 fb89 	bl	220ec <nrfx_twim_enable>
#endif

	return 0;
   1d9da:	2000      	movs	r0, #0
}
   1d9dc:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
   1d9de:	f06f 0004 	mvn.w	r0, #4
   1d9e2:	e7fb      	b.n	1d9dc <i2c_nrfx_twim_init+0x30>
   1d9e4:	0001da29 	.word	0x0001da29
   1d9e8:	0bad0000 	.word	0x0bad0000

0001d9ec <i2c_nrfx_twim_recover_bus>:
{
   1d9ec:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1d9ee:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
   1d9f0:	6823      	ldr	r3, [r4, #0]
		nrfx_twim_disable(&dev_config->twim);
   1d9f2:	4620      	mov	r0, r4
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
   1d9f4:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
   1d9f8:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
   1d9fc:	f004 fb86 	bl	2210c <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   1da00:	4631      	mov	r1, r6
   1da02:	4628      	mov	r0, r5
   1da04:	f004 fdec 	bl	225e0 <nrfx_twi_twim_bus_recover>
   1da08:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
   1da0a:	6a20      	ldr	r0, [r4, #32]
   1da0c:	f00a fc80 	bl	28310 <pinctrl_apply_state.constprop.0>
		nrfx_twim_enable(&dev_config->twim);
   1da10:	4620      	mov	r0, r4
   1da12:	f004 fb6b 	bl	220ec <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   1da16:	4b03      	ldr	r3, [pc, #12]	; (1da24 <i2c_nrfx_twim_recover_bus+0x38>)
   1da18:	429d      	cmp	r5, r3
}
   1da1a:	bf14      	ite	ne
   1da1c:	f06f 000f 	mvnne.w	r0, #15
   1da20:	2000      	moveq	r0, #0
   1da22:	bd70      	pop	{r4, r5, r6, pc}
   1da24:	0bad0000 	.word	0x0bad0000

0001da28 <event_handler>:
	switch (p_event->type) {
   1da28:	7803      	ldrb	r3, [r0, #0]
   1da2a:	2b01      	cmp	r3, #1
   1da2c:	d008      	beq.n	1da40 <event_handler+0x18>
   1da2e:	2b02      	cmp	r3, #2
   1da30:	d008      	beq.n	1da44 <event_handler+0x1c>
   1da32:	b94b      	cbnz	r3, 1da48 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1da34:	4b05      	ldr	r3, [pc, #20]	; (1da4c <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1da36:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1da38:	f101 0018 	add.w	r0, r1, #24
   1da3c:	f006 bf9a 	b.w	24974 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1da40:	4b03      	ldr	r3, [pc, #12]	; (1da50 <event_handler+0x28>)
   1da42:	e7f8      	b.n	1da36 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1da44:	4b03      	ldr	r3, [pc, #12]	; (1da54 <event_handler+0x2c>)
   1da46:	e7f6      	b.n	1da36 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1da48:	4b03      	ldr	r3, [pc, #12]	; (1da58 <event_handler+0x30>)
   1da4a:	e7f4      	b.n	1da36 <event_handler+0xe>
   1da4c:	0bad0000 	.word	0x0bad0000
   1da50:	0bae0001 	.word	0x0bae0001
   1da54:	0bae0002 	.word	0x0bae0002
   1da58:	0bad0001 	.word	0x0bad0001

0001da5c <i2c_nrfx_twim_transfer>:
{
   1da5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da60:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   1da62:	2214      	movs	r2, #20
{
   1da64:	461d      	mov	r5, r3
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1da66:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1da6a:	b08b      	sub	sp, #44	; 0x2c
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1da6c:	6906      	ldr	r6, [r0, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   1da6e:	f8ba 3018 	ldrh.w	r3, [sl, #24]
{
   1da72:	4681      	mov	r9, r0
   1da74:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   1da76:	eb0d 0002 	add.w	r0, sp, r2
   1da7a:	2100      	movs	r1, #0
	uint8_t *msg_buf = dev_data->msg_buf;
   1da7c:	f8d6 8034 	ldr.w	r8, [r6, #52]	; 0x34
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   1da80:	9302      	str	r3, [sp, #8]
	nrfx_twim_xfer_desc_t cur_xfer = {
   1da82:	f00d fbbf 	bl	2b204 <memset>
   1da86:	f88d 5015 	strb.w	r5, [sp, #21]
	return z_impl_k_sem_take(sem, timeout);
   1da8a:	f04f 32ff 	mov.w	r2, #4294967295
   1da8e:	f04f 33ff 	mov.w	r3, #4294967295
   1da92:	4630      	mov	r0, r6
   1da94:	f006 ff94 	bl	249c0 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   1da98:	f106 0318 	add.w	r3, r6, #24
   1da9c:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < num_msgs; i++) {
   1da9e:	2700      	movs	r7, #0
   1daa0:	2200      	movs	r2, #0
   1daa2:	2300      	movs	r3, #0
   1daa4:	f106 0018 	add.w	r0, r6, #24
   1daa8:	f006 ff8a 	bl	249c0 <z_impl_k_sem_take>
	uint16_t msg_buf_used = 0;
   1daac:	463d      	mov	r5, r7
	for (size_t i = 0; i < num_msgs; i++) {
   1daae:	455f      	cmp	r7, fp
   1dab0:	d301      	bcc.n	1dab6 <i2c_nrfx_twim_transfer+0x5a>
   1dab2:	2400      	movs	r4, #0
   1dab4:	e067      	b.n	1db86 <i2c_nrfx_twim_transfer+0x12a>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1dab6:	7a20      	ldrb	r0, [r4, #8]
   1dab8:	0702      	lsls	r2, r0, #28
   1daba:	f100 8088 	bmi.w	1dbce <i2c_nrfx_twim_transfer+0x172>
		bool concat_next = ((i + 1) < num_msgs)
   1dabe:	3701      	adds	r7, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   1dac0:	455f      	cmp	r7, fp
   1dac2:	6862      	ldr	r2, [r4, #4]
   1dac4:	d20a      	bcs.n	1dadc <i2c_nrfx_twim_transfer+0x80>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   1dac6:	0783      	lsls	r3, r0, #30
   1dac8:	d408      	bmi.n	1dadc <i2c_nrfx_twim_transfer+0x80>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   1daca:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   1dacc:	ea80 0103 	eor.w	r1, r0, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   1dad0:	f001 0101 	and.w	r1, r1, #1
   1dad4:	f003 0304 	and.w	r3, r3, #4
   1dad8:	4319      	orrs	r1, r3
   1dada:	d019      	beq.n	1db10 <i2c_nrfx_twim_transfer+0xb4>
		if (concat_next || (msg_buf_used != 0)) {
   1dadc:	b1d5      	cbz	r5, 1db14 <i2c_nrfx_twim_transfer+0xb8>
		bool concat_next = ((i + 1) < num_msgs)
   1dade:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   1dae0:	f8dd c008 	ldr.w	ip, [sp, #8]
   1dae4:	18a9      	adds	r1, r5, r2
   1dae6:	4561      	cmp	r1, ip
   1dae8:	d874      	bhi.n	1dbd4 <i2c_nrfx_twim_transfer+0x178>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   1daea:	07c1      	lsls	r1, r0, #31
   1daec:	d406      	bmi.n	1dafc <i2c_nrfx_twim_transfer+0xa0>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1daee:	6821      	ldr	r1, [r4, #0]
   1daf0:	eb08 0005 	add.w	r0, r8, r5
   1daf4:	9303      	str	r3, [sp, #12]
   1daf6:	f00d fb78 	bl	2b1ea <memcpy>
   1dafa:	9b03      	ldr	r3, [sp, #12]
			msg_buf_used += msgs[i].len;
   1dafc:	6862      	ldr	r2, [r4, #4]
   1dafe:	442a      	add	r2, r5
   1db00:	b295      	uxth	r5, r2
		if (concat_next) {
   1db02:	2b00      	cmp	r3, #0
   1db04:	d14e      	bne.n	1dba4 <i2c_nrfx_twim_transfer+0x148>
		if (msg_buf_used == 0) {
   1db06:	b145      	cbz	r5, 1db1a <i2c_nrfx_twim_transfer+0xbe>
			cur_xfer.primary_length = msg_buf_used;
   1db08:	462b      	mov	r3, r5
			cur_xfer.p_primary_buf = msg_buf;
   1db0a:	f8cd 8020 	str.w	r8, [sp, #32]
			cur_xfer.primary_length = msg_buf_used;
   1db0e:	e008      	b.n	1db22 <i2c_nrfx_twim_transfer+0xc6>
		bool concat_next = ((i + 1) < num_msgs)
   1db10:	2301      	movs	r3, #1
   1db12:	e7e5      	b.n	1dae0 <i2c_nrfx_twim_transfer+0x84>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1db14:	07c0      	lsls	r0, r0, #31
			   !nrfx_is_in_ram(msgs[i].buf)) {
   1db16:	6821      	ldr	r1, [r4, #0]
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1db18:	d51b      	bpl.n	1db52 <i2c_nrfx_twim_transfer+0xf6>
			cur_xfer.p_primary_buf = msgs[i].buf;
   1db1a:	2500      	movs	r5, #0
   1db1c:	6823      	ldr	r3, [r4, #0]
   1db1e:	9308      	str	r3, [sp, #32]
			cur_xfer.primary_length = msgs[i].len;
   1db20:	6863      	ldr	r3, [r4, #4]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1db22:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
   1db24:	9306      	str	r3, [sp, #24]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   1db26:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1db2a:	f082 0202 	eor.w	r2, r2, #2
   1db2e:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1db32:	4650      	mov	r0, sl
   1db34:	0152      	lsls	r2, r2, #5
   1db36:	a905      	add	r1, sp, #20
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1db38:	f88d 3014 	strb.w	r3, [sp, #20]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1db3c:	f004 fb04 	bl	22148 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   1db40:	4b27      	ldr	r3, [pc, #156]	; (1dbe0 <i2c_nrfx_twim_transfer+0x184>)
   1db42:	4298      	cmp	r0, r3
   1db44:	d013      	beq.n	1db6e <i2c_nrfx_twim_transfer+0x112>
			if (res == NRFX_ERROR_BUSY) {
   1db46:	330b      	adds	r3, #11
   1db48:	4298      	cmp	r0, r3
   1db4a:	d11a      	bne.n	1db82 <i2c_nrfx_twim_transfer+0x126>
				ret = -EBUSY;
   1db4c:	f06f 040f 	mvn.w	r4, #15
   1db50:	e019      	b.n	1db86 <i2c_nrfx_twim_transfer+0x12a>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1db52:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1db56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1db5a:	d0de      	beq.n	1db1a <i2c_nrfx_twim_transfer+0xbe>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   1db5c:	f8ba 301a 	ldrh.w	r3, [sl, #26]
   1db60:	429a      	cmp	r2, r3
   1db62:	d83a      	bhi.n	1dbda <i2c_nrfx_twim_transfer+0x17e>
   1db64:	4640      	mov	r0, r8
   1db66:	f00d fb40 	bl	2b1ea <memcpy>
			msg_buf_used = msgs[i].len;
   1db6a:	88a5      	ldrh	r5, [r4, #4]
		if (concat_next) {
   1db6c:	e7cb      	b.n	1db06 <i2c_nrfx_twim_transfer+0xaa>
   1db6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1db72:	2300      	movs	r3, #0
   1db74:	9801      	ldr	r0, [sp, #4]
   1db76:	f006 ff23 	bl	249c0 <z_impl_k_sem_take>
		if (ret != 0) {
   1db7a:	b158      	cbz	r0, 1db94 <i2c_nrfx_twim_transfer+0x138>
			(void)i2c_nrfx_twim_recover_bus(dev);
   1db7c:	4648      	mov	r0, r9
   1db7e:	f7ff ff35 	bl	1d9ec <i2c_nrfx_twim_recover_bus>
				ret = -EIO;
   1db82:	f06f 0404 	mvn.w	r4, #4
	z_impl_k_sem_give(sem);
   1db86:	4630      	mov	r0, r6
   1db88:	f006 fef4 	bl	24974 <z_impl_k_sem_give>
}
   1db8c:	4620      	mov	r0, r4
   1db8e:	b00b      	add	sp, #44	; 0x2c
   1db90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dev_data->res;
   1db94:	6b33      	ldr	r3, [r6, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1db96:	4a12      	ldr	r2, [pc, #72]	; (1dbe0 <i2c_nrfx_twim_transfer+0x184>)
   1db98:	4293      	cmp	r3, r2
   1db9a:	d1f2      	bne.n	1db82 <i2c_nrfx_twim_transfer+0x126>
		if ((msgs[i].flags & I2C_MSG_READ)
   1db9c:	7a23      	ldrb	r3, [r4, #8]
   1db9e:	07db      	lsls	r3, r3, #31
   1dba0:	d402      	bmi.n	1dba8 <i2c_nrfx_twim_transfer+0x14c>
		msg_buf_used = 0;
   1dba2:	2500      	movs	r5, #0
   1dba4:	340c      	adds	r4, #12
   1dba6:	e782      	b.n	1daae <i2c_nrfx_twim_transfer+0x52>
		    && cur_xfer.p_primary_buf == msg_buf) {
   1dba8:	9b08      	ldr	r3, [sp, #32]
   1dbaa:	4598      	cmp	r8, r3
   1dbac:	d1f9      	bne.n	1dba2 <i2c_nrfx_twim_transfer+0x146>
   1dbae:	4623      	mov	r3, r4
   1dbb0:	e008      	b.n	1dbc4 <i2c_nrfx_twim_transfer+0x168>
				msg_buf_used -= msgs[j].len;
   1dbb2:	1aa9      	subs	r1, r5, r2
   1dbb4:	68d8      	ldr	r0, [r3, #12]
   1dbb6:	b28d      	uxth	r5, r1
   1dbb8:	fa18 f181 	uxtah	r1, r8, r1
   1dbbc:	9303      	str	r3, [sp, #12]
   1dbbe:	f00d fb14 	bl	2b1ea <memcpy>
				j--;
   1dbc2:	9b03      	ldr	r3, [sp, #12]
			while (msg_buf_used >= msgs[j].len) {
   1dbc4:	685a      	ldr	r2, [r3, #4]
   1dbc6:	3b0c      	subs	r3, #12
   1dbc8:	4295      	cmp	r5, r2
   1dbca:	d2f2      	bcs.n	1dbb2 <i2c_nrfx_twim_transfer+0x156>
   1dbcc:	e7e9      	b.n	1dba2 <i2c_nrfx_twim_transfer+0x146>
			ret = -ENOTSUP;
   1dbce:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1dbd2:	e7d8      	b.n	1db86 <i2c_nrfx_twim_transfer+0x12a>
				ret = -ENOSPC;
   1dbd4:	f06f 041b 	mvn.w	r4, #27
   1dbd8:	e7d5      	b.n	1db86 <i2c_nrfx_twim_transfer+0x12a>
				ret = -EINVAL;
   1dbda:	f06f 0415 	mvn.w	r4, #21
   1dbde:	e7d2      	b.n	1db86 <i2c_nrfx_twim_transfer+0x12a>
   1dbe0:	0bad0000 	.word	0x0bad0000

0001dbe4 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1dbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1dbe8:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
   1dbea:	4e3f      	ldr	r6, [pc, #252]	; (1dce8 <pinctrl_configure_pins+0x104>)
   1dbec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1dbf0:	4281      	cmp	r1, r0
   1dbf2:	d102      	bne.n	1dbfa <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1dbf4:	2000      	movs	r0, #0
}
   1dbf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1dbfa:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1dbfc:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1dc00:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
   1dc04:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   1dc06:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
   1dc0a:	bf08      	it	eq
   1dc0c:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   1dc10:	2d19      	cmp	r5, #25
   1dc12:	d866      	bhi.n	1dce2 <pinctrl_configure_pins+0xfe>
   1dc14:	e8df f005 	tbb	[pc, r5]
   1dc18:	1e1b160d 	.word	0x1e1b160d
   1dc1c:	651e2d21 	.word	0x651e2d21
   1dc20:	31656565 	.word	0x31656565
   1dc24:	65656551 	.word	0x65656551
   1dc28:	65656565 	.word	0x65656565
   1dc2c:	5c546565 	.word	0x5c546565
   1dc30:	625f      	.short	0x625f
			NRF_PSEL_UART(reg, TXD) = pin;
   1dc32:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   1dc36:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1dc3a:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
   1dc3e:	60b5      	str	r5, [r6, #8]
}
   1dc40:	2501      	movs	r5, #1
   1dc42:	e002      	b.n	1dc4a <pinctrl_configure_pins+0x66>
			NRF_PSEL_UART(reg, RXD) = pin;
   1dc44:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1dc48:	2500      	movs	r5, #0
   1dc4a:	46ac      	mov	ip, r5
   1dc4c:	e01c      	b.n	1dc88 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_UART(reg, RTS) = pin;
   1dc4e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   1dc52:	e7f0      	b.n	1dc36 <pinctrl_configure_pins+0x52>
			NRF_PSEL_UART(reg, CTS) = pin;
   1dc54:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   1dc58:	e7f6      	b.n	1dc48 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1dc5a:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   1dc5c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   1dc60:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1dc64:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   1dc68:	f8c6 c00c 	str.w	ip, [r6, #12]
}
   1dc6c:	f04f 0c01 	mov.w	ip, #1
   1dc70:	e00a      	b.n	1dc88 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   1dc72:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   1dc76:	2501      	movs	r5, #1
   1dc78:	e7f2      	b.n	1dc60 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   1dc7a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   1dc7e:	2c00      	cmp	r4, #0
   1dc80:	d1e2      	bne.n	1dc48 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1dc82:	2500      	movs	r5, #0
				drive = NRF_DRIVE_S0D1;
   1dc84:	2406      	movs	r4, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1dc86:	46ac      	mov	ip, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1dc88:	f850 eb04 	ldr.w	lr, [r0], #4
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1dc8c:	0224      	lsls	r4, r4, #8
   1dc8e:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1dc92:	f1b8 0f00 	cmp.w	r8, #0
   1dc96:	bf1c      	itt	ne
   1dc98:	f04f 0c00 	movne.w	ip, #0
   1dc9c:	2501      	movne	r5, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1dc9e:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
   1dca2:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    *p_pin = pin_number & 0x1F;
   1dca6:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1dcaa:	ea44 040c 	orr.w	r4, r4, ip
   1dcae:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1dcb2:	3380      	adds	r3, #128	; 0x80
   1dcb4:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1dcb8:	e79a      	b.n	1dbf0 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   1dcba:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1dcbe:	e7de      	b.n	1dc7e <pinctrl_configure_pins+0x9a>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   1dcc0:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   1dcc4:	6805      	ldr	r5, [r0, #0]
   1dcc6:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
   1dcca:	2d00      	cmp	r5, #0
   1dccc:	d0d3      	beq.n	1dc76 <pinctrl_configure_pins+0x92>
   1dcce:	e7b2      	b.n	1dc36 <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   1dcd0:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   1dcd4:	e7f6      	b.n	1dcc4 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   1dcd6:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   1dcda:	e7f3      	b.n	1dcc4 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   1dcdc:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   1dce0:	e7f0      	b.n	1dcc4 <pinctrl_configure_pins+0xe0>
		switch (NRF_GET_FUN(pins[i])) {
   1dce2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1dce6:	e786      	b.n	1dbf6 <pinctrl_configure_pins+0x12>
   1dce8:	40842500 	.word	0x40842500

0001dcec <adxl362_accel_convert>:
}

static inline int adxl362_range_to_scale(int range)
{
	/* See table 1 in specifications section of datasheet */
	switch (range) {
   1dcec:	2a02      	cmp	r2, #2
	}
}

static void adxl362_accel_convert(struct sensor_value *val, int accel,
				  int range)
{
   1dcee:	bfcc      	ite	gt
   1dcf0:	f06f 0215 	mvngt.w	r2, #21
   1dcf4:	4b09      	ldrle	r3, [pc, #36]	; (1dd1c <adxl362_accel_convert+0x30>)
   1dcf6:	b510      	push	{r4, lr}
   1dcf8:	bfd8      	it	le
   1dcfa:	f933 2012 	ldrshle.w	r2, [r3, r2, lsl #1]
   1dcfe:	4604      	mov	r4, r0
	int scale = adxl362_range_to_scale(range);
	long micro_ms2 = accel * SENSOR_G / scale;
   1dd00:	4807      	ldr	r0, [pc, #28]	; (1dd20 <adxl362_accel_convert+0x34>)
   1dd02:	17d3      	asrs	r3, r2, #31
   1dd04:	fb81 0100 	smull	r0, r1, r1, r0
   1dd08:	f7fa fffe 	bl	18d08 <__aeabi_ldivmod>

	__ASSERT_NO_MSG(scale != -EINVAL);

	val->val1 = micro_ms2 / 1000000;
   1dd0c:	4a05      	ldr	r2, [pc, #20]	; (1dd24 <adxl362_accel_convert+0x38>)
   1dd0e:	fb90 f3f2 	sdiv	r3, r0, r2
   1dd12:	6023      	str	r3, [r4, #0]
	val->val2 = micro_ms2 % 1000000;
   1dd14:	fb02 0313 	mls	r3, r2, r3, r0
   1dd18:	6063      	str	r3, [r4, #4]
}
   1dd1a:	bd10      	pop	{r4, pc}
   1dd1c:	0002cb8c 	.word	0x0002cb8c
   1dd20:	0095a33a 	.word	0x0095a33a
   1dd24:	000f4240 	.word	0x000f4240

0001dd28 <adxl372_attr_set>:

static int adxl372_attr_set(const struct device *dev,
			    enum sensor_channel chan,
			    enum sensor_attribute attr,
			    const struct sensor_value *val)
{
   1dd28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1dd2a:	4605      	mov	r5, r0
   1dd2c:	460e      	mov	r6, r1
	switch (attr) {
   1dd2e:	4614      	mov	r4, r2
   1dd30:	b12a      	cbz	r2, 1dd3e <adxl372_attr_set+0x16>
   1dd32:	3a01      	subs	r2, #1
   1dd34:	2a01      	cmp	r2, #1
   1dd36:	d925      	bls.n	1dd84 <adxl372_attr_set+0x5c>
   1dd38:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1dd3c:	e04e      	b.n	1dddc <adxl372_attr_set+0xb4>
	case SENSOR_ATTR_SAMPLING_FREQUENCY:
		return adxl372_attr_set_odr(dev, chan, attr, val);
   1dd3e:	681b      	ldr	r3, [r3, #0]
	switch (val->val1) {
   1dd40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
   1dd44:	d016      	beq.n	1dd74 <adxl372_attr_set+0x4c>
   1dd46:	dc08      	bgt.n	1dd5a <adxl372_attr_set+0x32>
   1dd48:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   1dd4c:	d014      	beq.n	1dd78 <adxl372_attr_set+0x50>
   1dd4e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   1dd52:	d013      	beq.n	1dd7c <adxl372_attr_set+0x54>
   1dd54:	f06f 0015 	mvn.w	r0, #21
   1dd58:	e040      	b.n	1dddc <adxl372_attr_set+0xb4>
   1dd5a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1dd5e:	d00f      	beq.n	1dd80 <adxl372_attr_set+0x58>
   1dd60:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
   1dd64:	d1f6      	bne.n	1dd54 <adxl372_attr_set+0x2c>
		odr = ADXL372_ODR_6400HZ;
   1dd66:	2104      	movs	r1, #4
	return adxl372_set_odr(dev, odr);
   1dd68:	4628      	mov	r0, r5
	case SENSOR_ATTR_LOWER_THRESH:
		return adxl372_attr_set_thresh(dev, chan, attr, val);
	default:
		return -ENOTSUP;
	}
}
   1dd6a:	b003      	add	sp, #12
   1dd6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return adxl372_set_odr(dev, odr);
   1dd70:	f00a bc9c 	b.w	286ac <adxl372_set_odr>
		odr = ADXL372_ODR_1600HZ;
   1dd74:	2102      	movs	r1, #2
   1dd76:	e7f7      	b.n	1dd68 <adxl372_attr_set+0x40>
		odr = ADXL372_ODR_400HZ;
   1dd78:	4611      	mov	r1, r2
   1dd7a:	e7f5      	b.n	1dd68 <adxl372_attr_set+0x40>
	switch (val->val1) {
   1dd7c:	2101      	movs	r1, #1
   1dd7e:	e7f3      	b.n	1dd68 <adxl372_attr_set+0x40>
		odr = ADXL372_ODR_3200HZ;
   1dd80:	2103      	movs	r1, #3
   1dd82:	e7f1      	b.n	1dd68 <adxl372_attr_set+0x40>
	const struct adxl372_dev_config *cfg = dev->config;
   1dd84:	6847      	ldr	r7, [r0, #4]
	int64_t micro_ms2 = val->val1 * 1000000LL + val->val2;
   1dd86:	6858      	ldr	r0, [r3, #4]
   1dd88:	f8d3 e000 	ldr.w	lr, [r3]
   1dd8c:	f8df c068 	ldr.w	ip, [pc, #104]	; 1ddf8 <adxl372_attr_set+0xd0>
   1dd90:	17c1      	asrs	r1, r0, #31
	llvalue = llabs((micro_ms2 * 10) / SENSOR_G);
   1dd92:	2300      	movs	r3, #0
   1dd94:	4a19      	ldr	r2, [pc, #100]	; (1ddfc <adxl372_attr_set+0xd4>)
   1dd96:	fbce 010c 	smlal	r0, r1, lr, ip
   1dd9a:	f7fa ffb5 	bl	18d08 <__aeabi_ldivmod>
   1dd9e:	2900      	cmp	r1, #0
   1dda0:	4603      	mov	r3, r0
   1dda2:	460a      	mov	r2, r1
   1dda4:	da02      	bge.n	1ddac <adxl372_attr_set+0x84>
   1dda6:	4243      	negs	r3, r0
   1dda8:	eb61 0241 	sbc.w	r2, r1, r1, lsl #1
	if (llvalue > 2047) {
   1ddac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   1ddb0:	f172 0200 	sbcs.w	r2, r2, #0
   1ddb4:	dace      	bge.n	1dd54 <adxl372_attr_set+0x2c>
	threshold.thresh = value;
   1ddb6:	f8ad 3004 	strh.w	r3, [sp, #4]
	threshold.referenced = cfg->activity_th.referenced;
   1ddba:	8bbb      	ldrh	r3, [r7, #28]
		reg = ADXL372_X_THRESH_ACT_H;
   1ddbc:	2c02      	cmp	r4, #2
   1ddbe:	bf14      	ite	ne
   1ddc0:	212a      	movne	r1, #42	; 0x2a
   1ddc2:	2123      	moveq	r1, #35	; 0x23
	threshold.referenced = cfg->activity_th.referenced;
   1ddc4:	f8ad 3006 	strh.w	r3, [sp, #6]
	switch (chan) {
   1ddc8:	2e03      	cmp	r6, #3
   1ddca:	d8b5      	bhi.n	1dd38 <adxl372_attr_set+0x10>
   1ddcc:	e8df f006 	tbb	[pc, r6]
   1ddd0:	0e0b0802 	.word	0x0e0b0802
		return adxl372_set_activity_threshold(dev, reg, &threshold);
   1ddd4:	aa01      	add	r2, sp, #4
		return adxl372_set_activity_threshold(dev, reg + 2, &threshold);
   1ddd6:	4628      	mov	r0, r5
   1ddd8:	f00a fc1f 	bl	2861a <adxl372_set_activity_threshold>
}
   1dddc:	b003      	add	sp, #12
   1ddde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return adxl372_set_activity_threshold(dev, reg + 2, &threshold);
   1dde0:	aa01      	add	r2, sp, #4
   1dde2:	3102      	adds	r1, #2
   1dde4:	e7f7      	b.n	1ddd6 <adxl372_attr_set+0xae>
		return adxl372_set_activity_threshold(dev, reg + 4, &threshold);
   1dde6:	aa01      	add	r2, sp, #4
   1dde8:	3104      	adds	r1, #4
   1ddea:	e7f4      	b.n	1ddd6 <adxl372_attr_set+0xae>
		return adxl372_set_activity_threshold_xyz(dev, reg, &threshold);
   1ddec:	4628      	mov	r0, r5
   1ddee:	aa01      	add	r2, sp, #4
   1ddf0:	f00a fc40 	bl	28674 <adxl372_set_activity_threshold_xyz>
   1ddf4:	e7f2      	b.n	1dddc <adxl372_attr_set+0xb4>
   1ddf6:	bf00      	nop
   1ddf8:	000f4240 	.word	0x000f4240
   1ddfc:	000ef6b9 	.word	0x000ef6b9

0001de00 <adxl372_channel_get>:
}

static int adxl372_channel_get(const struct device *dev,
			       enum sensor_channel chan,
			       struct sensor_value *val)
{
   1de00:	b530      	push	{r4, r5, lr}
	struct adxl372_data *data = dev->data;
   1de02:	6903      	ldr	r3, [r0, #16]

	switch (chan) {
   1de04:	2903      	cmp	r1, #3
   1de06:	d836      	bhi.n	1de76 <adxl372_channel_get+0x76>
   1de08:	e8df f001 	tbb	[pc, r1]
   1de0c:	16131002 	.word	0x16131002
	int32_t micro_ms2 = value * (SENSOR_G / (16 * 1000 / 100));
   1de10:	f9b3 3000 	ldrsh.w	r3, [r3]
   1de14:	f64e 716b 	movw	r1, #61291	; 0xef6b
   1de18:	434b      	muls	r3, r1
	val->val1 = micro_ms2 / 1000000;
   1de1a:	4818      	ldr	r0, [pc, #96]	; (1de7c <adxl372_channel_get+0x7c>)
   1de1c:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = micro_ms2 % 1000000;
   1de20:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = micro_ms2 / 1000000;
   1de24:	6011      	str	r1, [r2, #0]
	val->val2 = micro_ms2 % 1000000;
   1de26:	6053      	str	r3, [r2, #4]
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   1de28:	2000      	movs	r0, #0
}
   1de2a:	bd30      	pop	{r4, r5, pc}
	int32_t micro_ms2 = value * (SENSOR_G / (16 * 1000 / 100));
   1de2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   1de30:	e7f0      	b.n	1de14 <adxl372_channel_get+0x14>
   1de32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   1de36:	e7ed      	b.n	1de14 <adxl372_channel_get+0x14>
   1de38:	f64e 746b 	movw	r4, #61291	; 0xef6b
   1de3c:	f9b3 0000 	ldrsh.w	r0, [r3]
	val->val1 = micro_ms2 / 1000000;
   1de40:	490e      	ldr	r1, [pc, #56]	; (1de7c <adxl372_channel_get+0x7c>)
	int32_t micro_ms2 = value * (SENSOR_G / (16 * 1000 / 100));
   1de42:	4360      	muls	r0, r4
	val->val1 = micro_ms2 / 1000000;
   1de44:	fb90 f5f1 	sdiv	r5, r0, r1
	val->val2 = micro_ms2 % 1000000;
   1de48:	fb01 0015 	mls	r0, r1, r5, r0
	val->val1 = micro_ms2 / 1000000;
   1de4c:	6015      	str	r5, [r2, #0]
	val->val2 = micro_ms2 % 1000000;
   1de4e:	6050      	str	r0, [r2, #4]
	int32_t micro_ms2 = value * (SENSOR_G / (16 * 1000 / 100));
   1de50:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
   1de54:	4360      	muls	r0, r4
	val->val1 = micro_ms2 / 1000000;
   1de56:	fb90 f5f1 	sdiv	r5, r0, r1
	val->val2 = micro_ms2 % 1000000;
   1de5a:	fb01 0015 	mls	r0, r1, r5, r0
	val->val1 = micro_ms2 / 1000000;
   1de5e:	6095      	str	r5, [r2, #8]
	val->val2 = micro_ms2 % 1000000;
   1de60:	60d0      	str	r0, [r2, #12]
	int32_t micro_ms2 = value * (SENSOR_G / (16 * 1000 / 100));
   1de62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   1de66:	4363      	muls	r3, r4
	val->val1 = micro_ms2 / 1000000;
   1de68:	fb93 f0f1 	sdiv	r0, r3, r1
	val->val2 = micro_ms2 % 1000000;
   1de6c:	fb01 3310 	mls	r3, r1, r0, r3
	val->val1 = micro_ms2 / 1000000;
   1de70:	6110      	str	r0, [r2, #16]
	val->val2 = micro_ms2 % 1000000;
   1de72:	6153      	str	r3, [r2, #20]
}
   1de74:	e7d8      	b.n	1de28 <adxl372_channel_get+0x28>
	switch (chan) {
   1de76:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1de7a:	e7d6      	b.n	1de2a <adxl372_channel_get+0x2a>
   1de7c:	000f4240 	.word	0x000f4240

0001de80 <adxl372_spi_init>:
	.read_reg = adxl372_spi_reg_read,
	.write_reg_mask = adxl372_spi_reg_write_mask,
};

int adxl372_spi_init(const struct device *dev)
{
   1de80:	b510      	push	{r4, lr}
	struct adxl372_data *data = dev->data;
	const struct adxl372_dev_config *config = dev->config;

	data->hw_tf = &adxl372_spi_transfer_fn;
   1de82:	4a0a      	ldr	r2, [pc, #40]	; (1deac <adxl372_spi_init+0x2c>)
	struct adxl372_data *data = dev->data;
   1de84:	6903      	ldr	r3, [r0, #16]
	const struct adxl372_dev_config *config = dev->config;
   1de86:	6844      	ldr	r4, [r0, #4]
	data->hw_tf = &adxl372_spi_transfer_fn;
   1de88:	609a      	str	r2, [r3, #8]
 * @retval false if the SPI bus (or the CS gpio defined) is not ready for use.
 */
static inline bool spi_is_ready_dt(const struct spi_dt_spec *spec)
{
	/* Validate bus is ready */
	if (!device_is_ready(spec->bus)) {
   1de8a:	6820      	ldr	r0, [r4, #0]
   1de8c:	f00c fd34 	bl	2a8f8 <z_device_is_ready>
   1de90:	b140      	cbz	r0, 1dea4 <adxl372_spi_init+0x24>
		return false;
	}
	/* Validate CS gpio port is ready, if it is used */
	if (spec->config.cs &&
   1de92:	68e3      	ldr	r3, [r4, #12]
   1de94:	b90b      	cbnz	r3, 1de9a <adxl372_spi_init+0x1a>

	if (!spi_is_ready_dt(&config->spi)) {
		return -ENODEV;
	}

	return 0;
   1de96:	2000      	movs	r0, #0
}
   1de98:	bd10      	pop	{r4, pc}
	    !device_is_ready(spec->config.cs->gpio.port)) {
   1de9a:	6818      	ldr	r0, [r3, #0]
   1de9c:	f00c fd2c 	bl	2a8f8 <z_device_is_ready>
	if (spec->config.cs &&
   1dea0:	2800      	cmp	r0, #0
   1dea2:	d1f8      	bne.n	1de96 <adxl372_spi_init+0x16>
		return -ENODEV;
   1dea4:	f06f 0012 	mvn.w	r0, #18
   1dea8:	e7f6      	b.n	1de98 <adxl372_spi_init+0x18>
   1deaa:	bf00      	nop
   1deac:	0002c2fc 	.word	0x0002c2fc

0001deb0 <bme680_sample_fetch>:
	return durval;
}

static int bme680_sample_fetch(const struct device *dev,
			       enum sensor_channel chan)
{
   1deb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	struct bme680_data *data = dev->data;
	uint8_t buff[BME680_LEN_FIELD] = { 0 };
   1deb4:	2300      	movs	r3, #0
	int size = BME680_LEN_FIELD;
	int ret;

	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);

	ret = bme680_reg_read(dev, BME680_REG_FIELD0, buff, size);
   1deb6:	466a      	mov	r2, sp
	uint8_t buff[BME680_LEN_FIELD] = { 0 };
   1deb8:	9302      	str	r3, [sp, #8]
   1deba:	e9cd 3300 	strd	r3, r3, [sp]
   1debe:	f8cd 300b 	str.w	r3, [sp, #11]
	ret = bme680_reg_read(dev, BME680_REG_FIELD0, buff, size);
   1dec2:	211d      	movs	r1, #29
   1dec4:	230f      	movs	r3, #15
{
   1dec6:	4606      	mov	r6, r0
	struct bme680_data *data = dev->data;
   1dec8:	6904      	ldr	r4, [r0, #16]
	ret = bme680_reg_read(dev, BME680_REG_FIELD0, buff, size);
   1deca:	f00a fe21 	bl	28b10 <bme680_reg_read>
	if (ret < 0) {
   1dece:	2800      	cmp	r0, #0
   1ded0:	f2c0 8141 	blt.w	1e156 <bme680_sample_fetch+0x2a6>
		return ret;
	}

	data->new_data = buff[0] & BME680_MSK_NEW_DATA;
   1ded4:	f89d 3000 	ldrb.w	r3, [sp]
   1ded8:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   1dedc:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	data->heatr_stab = buff[14] & BME680_MSK_HEATR_STAB;
   1dee0:	f89d 200e 	ldrb.w	r2, [sp, #14]
			   | ((uint32_t)buff[7] >> 4));
	adc_hum = (uint16_t)(((uint32_t)buff[8] << 8) | (uint32_t)buff[9]);
	adc_gas_res = (uint16_t)((uint32_t)buff[13] << 2 | (((uint32_t)buff[14]) >> 6));
	gas_range = buff[14] & BME680_MSK_GAS_RANGE;

	if (data->new_data) {
   1dee4:	061b      	lsls	r3, r3, #24
	data->heatr_stab = buff[14] & BME680_MSK_HEATR_STAB;
   1dee6:	f002 0110 	and.w	r1, r2, #16
   1deea:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	if (data->new_data) {
   1deee:	f140 812b 	bpl.w	1e148 <bme680_sample_fetch+0x298>
			   | ((uint32_t)buff[7] >> 4));
   1def2:	f89d 1007 	ldrb.w	r1, [sp, #7]
	adc_temp = (uint32_t)(((uint32_t)buff[5] << 12) | ((uint32_t)buff[6] << 4)
   1def6:	f89d 5006 	ldrb.w	r5, [sp, #6]
			   | ((uint32_t)buff[7] >> 4));
   1defa:	0909      	lsrs	r1, r1, #4
	var1 = ((int32_t)adc_temp >> 3) - ((int32_t)data->par_t1 << 1);
   1defc:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
	adc_temp = (uint32_t)(((uint32_t)buff[5] << 12) | ((uint32_t)buff[6] << 4)
   1df00:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
   1df04:	f89d 5005 	ldrb.w	r5, [sp, #5]
	var1 = ((int32_t)adc_temp >> 3) - ((int32_t)data->par_t1 << 1);
   1df08:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	adc_temp = (uint32_t)(((uint32_t)buff[5] << 12) | ((uint32_t)buff[6] << 4)
   1df0c:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
	var1 = ((int32_t)adc_temp >> 3) - ((int32_t)data->par_t1 << 1);
   1df10:	ebcc 0cd1 	rsb	ip, ip, r1, lsr #3
   1df14:	ea4f 75ec 	mov.w	r5, ip, asr #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   1df18:	ea4f 015c 	mov.w	r1, ip, lsr #1
   1df1c:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
   1df20:	434d      	muls	r5, r1
   1df22:	fba1 1a01 	umull	r1, sl, r1, r1
   1df26:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
	var3 = ((var3) * ((int32_t)data->par_t3 << 4)) >> 14;
   1df2a:	f994 5012 	ldrsb.w	r5, [r4, #18]
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   1df2e:	0b09      	lsrs	r1, r1, #12
   1df30:	ea41 510a 	orr.w	r1, r1, sl, lsl #20
	var3 = ((var3) * ((int32_t)data->par_t3 << 4)) >> 14;
   1df34:	ea4f 1905 	mov.w	r9, r5, lsl #4
   1df38:	17ed      	asrs	r5, r5, #31
   1df3a:	434d      	muls	r5, r1
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   1df3c:	ea4f 3a2a 	mov.w	sl, sl, asr #12
	var3 = ((var3) * ((int32_t)data->par_t3 << 4)) >> 14;
   1df40:	fb09 550a 	mla	r5, r9, sl, r5
   1df44:	fba1 9109 	umull	r9, r1, r1, r9
   1df48:	4429      	add	r1, r5
	var2 = (var1 * (int32_t)data->par_t2) >> 11;
   1df4a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
	var3 = ((var3) * ((int32_t)data->par_t3 << 4)) >> 14;
   1df4e:	ea4f 3999 	mov.w	r9, r9, lsr #14
	var2 = (var1 * (int32_t)data->par_t2) >> 11;
   1df52:	fb85 5c0c 	smull	r5, ip, r5, ip
   1df56:	0aed      	lsrs	r5, r5, #11
	var3 = ((var3) * ((int32_t)data->par_t3 << 4)) >> 14;
   1df58:	ea49 4981 	orr.w	r9, r9, r1, lsl #18
	var2 = (var1 * (int32_t)data->par_t2) >> 11;
   1df5c:	ea45 554c 	orr.w	r5, r5, ip, lsl #21
	data->t_fine = var2 + var3;
   1df60:	444d      	add	r5, r9
   1df62:	63e5      	str	r5, [r4, #60]	; 0x3c
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
   1df64:	eb05 0185 	add.w	r1, r5, r5, lsl #2
	var1 = (((int32_t)data->t_fine) >> 1) - 64000;
   1df68:	106d      	asrs	r5, r5, #1
   1df6a:	f5a5 457a 	sub.w	r5, r5, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   1df6e:	ea4f 0aa5 	mov.w	sl, r5, asr #2
   1df72:	fb0a fa0a 	mul.w	sl, sl, sl
		(int32_t)data->par_p6) >> 2;
   1df76:	f994 c01e 	ldrsb.w	ip, [r4, #30]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   1df7a:	ea4f 29ea 	mov.w	r9, sl, asr #11
   1df7e:	fb0c f909 	mul.w	r9, ip, r9
	var2 = var2 + ((var1 * (int32_t)data->par_p5) << 1);
   1df82:	f9b4 c01c 	ldrsh.w	ip, [r4, #28]
			    | ((uint32_t)buff[4] >> 4));
   1df86:	f89d 3004 	ldrb.w	r3, [sp, #4]
	adc_press = (uint32_t)(((uint32_t)buff[2] << 12) | ((uint32_t)buff[3] << 4)
   1df8a:	f89d 8003 	ldrb.w	r8, [sp, #3]
	var2 = var2 + ((var1 * (int32_t)data->par_p5) << 1);
   1df8e:	fb05 fc0c 	mul.w	ip, r5, ip
	adc_press = (uint32_t)(((uint32_t)buff[2] << 12) | ((uint32_t)buff[3] << 4)
   1df92:	f89d e002 	ldrb.w	lr, [sp, #2]
			    | ((uint32_t)buff[4] >> 4));
   1df96:	091b      	lsrs	r3, r3, #4
	adc_press = (uint32_t)(((uint32_t)buff[2] << 12) | ((uint32_t)buff[3] << 4)
   1df98:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
   1df9c:	ea43 330e 	orr.w	r3, r3, lr, lsl #12
	var2 = (var2 >> 2) + ((int32_t)data->par_p4 << 16);
   1dfa0:	f9b4 e01a 	ldrsh.w	lr, [r4, #26]
	var2 = var2 + ((var1 * (int32_t)data->par_p5) << 1);
   1dfa4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1dfa8:	eb0c 0ca9 	add.w	ip, ip, r9, asr #2
	var2 = (var2 >> 2) + ((int32_t)data->par_p4 << 16);
   1dfac:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
   1dfb0:	eb0e 0cac 	add.w	ip, lr, ip, asr #2
	calc_press = 1048576 - adc_press;
   1dfb4:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
	calc_press = (calc_press - (var2 >> 12)) * ((uint32_t)3125);
   1dfb8:	eba3 332c 	sub.w	r3, r3, ip, asr #12
   1dfbc:	f640 4c35 	movw	ip, #3125	; 0xc35
	       + (((int32_t)data->par_p2 * var1) >> 1);
   1dfc0:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   1dfc4:	ea4f 3a6a 	mov.w	sl, sl, asr #13
	       + (((int32_t)data->par_p2 * var1) >> 1);
   1dfc8:	fb05 f909 	mul.w	r9, r5, r9
		 ((int32_t)data->par_p3 << 5)) >> 3)
   1dfcc:	f994 5018 	ldrsb.w	r5, [r4, #24]
	calc_press = (calc_press - (var2 >> 12)) * ((uint32_t)3125);
   1dfd0:	fb0c f303 	mul.w	r3, ip, r3
		 ((int32_t)data->par_p3 << 5)) >> 3)
   1dfd4:	016d      	lsls	r5, r5, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   1dfd6:	fb0a f505 	mul.w	r5, sl, r5
		 ((int32_t)data->par_p3 << 5)) >> 3)
   1dfda:	10ed      	asrs	r5, r5, #3
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   1dfdc:	eb05 0569 	add.w	r5, r5, r9, asr #1
	var1 = var1 >> 18;
   1dfe0:	14ad      	asrs	r5, r5, #18
	var1 = ((32768 + var1) * (int32_t)data->par_p1) >> 15;
   1dfe2:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   1dfe6:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
   1dfea:	fb09 f505 	mul.w	r5, r9, r5
	if (calc_press >= (int32_t)0x40000000) {
   1dfee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
	var1 = ((32768 + var1) * (int32_t)data->par_p1) >> 15;
   1dff2:	ea4f 35e5 	mov.w	r5, r5, asr #15
		calc_press = ((calc_press / var1) << 1);
   1dff6:	bfad      	iteet	ge
   1dff8:	fb93 f3f5 	sdivge	r3, r3, r5
		calc_press = ((calc_press << 1) / var1);
   1dffc:	005b      	lsllt	r3, r3, #1
   1dffe:	fb93 f3f5 	sdivlt	r3, r3, r5
		calc_press = ((calc_press / var1) << 1);
   1e002:	005b      	lslge	r3, r3, #1
		(int32_t)(((calc_press >> 3)
   1e004:	10dd      	asrs	r5, r3, #3
			 * (calc_press >> 3)) >> 13)) >> 12;
   1e006:	436d      	muls	r5, r5
   1e008:	ea4f 3c65 	mov.w	ip, r5, asr #13
	var1 = ((int32_t)data->par_p9 *
   1e00c:	f9b4 5022 	ldrsh.w	r5, [r4, #34]	; 0x22
	var2 = ((int32_t)(calc_press >> 2) * (int32_t)data->par_p8) >> 13;
   1e010:	f9b4 8020 	ldrsh.w	r8, [r4, #32]
	var1 = ((int32_t)data->par_p9 *
   1e014:	fb05 fc0c 	mul.w	ip, r5, ip
	var2 = ((int32_t)(calc_press >> 2) * (int32_t)data->par_p8) >> 13;
   1e018:	109d      	asrs	r5, r3, #2
   1e01a:	fb08 f505 	mul.w	r5, r8, r5
	var3 = ((int32_t)(calc_press >> 8) * (int32_t)(calc_press >> 8)
   1e01e:	ea4f 2e23 	mov.w	lr, r3, asr #8
	var2 = ((int32_t)(calc_press >> 2) * (int32_t)data->par_p8) >> 13;
   1e022:	136d      	asrs	r5, r5, #13
			   + ((var1 + var2 + var3
   1e024:	eb05 352c 	add.w	r5, r5, ip, asr #12
	var3 = ((int32_t)(calc_press >> 8) * (int32_t)(calc_press >> 8)
   1e028:	fb0e fc0e 	mul.w	ip, lr, lr
		* (int32_t)(calc_press >> 8)
   1e02c:	fb0e fc0c 	mul.w	ip, lr, ip
		* (int32_t)data->par_p10) >> 17;
   1e030:	f894 e024 	ldrb.w	lr, [r4, #36]	; 0x24
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
   1e034:	3180      	adds	r1, #128	; 0x80
		* (int32_t)data->par_p10) >> 17;
   1e036:	fb0e fc0c 	mul.w	ip, lr, ip
			   + ((var1 + var2 + var3
   1e03a:	eb05 456c 	add.w	r5, r5, ip, asr #17
			       + ((int32_t)data->par_p7 << 7)) >> 4);
   1e03e:	f994 c01f 	ldrsb.w	ip, [r4, #31]
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
   1e042:	1209      	asrs	r1, r1, #8
			       + ((int32_t)data->par_p7 << 7)) >> 4);
   1e044:	eb05 15cc 	add.w	r5, r5, ip, lsl #7
			   + ((var1 + var2 + var3
   1e048:	eb03 1325 	add.w	r3, r3, r5, asr #4
				     / ((int32_t)100))) >> 6) / ((int32_t)100))
   1e04c:	2564      	movs	r5, #100	; 0x64
	data->calc_press = calc_press
   1e04e:	62e3      	str	r3, [r4, #44]	; 0x2c
		 + (((temp_scaled * ((temp_scaled * (int32_t)data->par_h5)
   1e050:	f994 3006 	ldrsb.w	r3, [r4, #6]
	var2_2 = ((temp_scaled * (int32_t)data->par_h4) / (int32_t)100)
   1e054:	f994 c005 	ldrsb.w	ip, [r4, #5]
		 + (((temp_scaled * ((temp_scaled * (int32_t)data->par_h5)
   1e058:	434b      	muls	r3, r1
				     / ((int32_t)100))) >> 6) / ((int32_t)100))
   1e05a:	fb93 f3f5 	sdiv	r3, r3, r5
		 + (((temp_scaled * ((temp_scaled * (int32_t)data->par_h5)
   1e05e:	434b      	muls	r3, r1
	var2_2 = ((temp_scaled * (int32_t)data->par_h4) / (int32_t)100)
   1e060:	fb01 fc0c 	mul.w	ip, r1, ip
				     / ((int32_t)100))) >> 6) / ((int32_t)100))
   1e064:	119b      	asrs	r3, r3, #6
	var2_2 = ((temp_scaled * (int32_t)data->par_h4) / (int32_t)100)
   1e066:	fb9c fcf5 	sdiv	ip, ip, r5
				     / ((int32_t)100))) >> 6) / ((int32_t)100))
   1e06a:	fb93 f3f5 	sdiv	r3, r3, r5
   1e06e:	f8bd 0008 	ldrh.w	r0, [sp, #8]
		 + (((temp_scaled * ((temp_scaled * (int32_t)data->par_h5)
   1e072:	4463      	add	r3, ip
	var2_1 = (int32_t)data->par_h2;
   1e074:	f8b4 c002 	ldrh.w	ip, [r4, #2]
	var2_2 = ((temp_scaled * (int32_t)data->par_h4) / (int32_t)100)
   1e078:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
	var2 = (var2_1 * var2_2) >> 10;
   1e07c:	fb0c f303 	mul.w	r3, ip, r3
	var1 = (int32_t)(adc_humidity - ((int32_t)((int32_t)data->par_h1 * 16))) -
   1e080:	ba40      	rev16	r0, r0
   1e082:	f8b4 c000 	ldrh.w	ip, [r4]
   1e086:	b280      	uxth	r0, r0
   1e088:	eba0 100c 	sub.w	r0, r0, ip, lsl #4
	       (((temp_scaled * (int32_t)data->par_h3)
   1e08c:	f994 c004 	ldrsb.w	ip, [r4, #4]
	var2 = (var2_1 * var2_2) >> 10;
   1e090:	129b      	asrs	r3, r3, #10
	       (((temp_scaled * (int32_t)data->par_h3)
   1e092:	fb01 fc0c 	mul.w	ip, r1, ip
		 / ((int32_t)100)) >> 1);
   1e096:	fb9c fcf5 	sdiv	ip, ip, r5
	var1 = (int32_t)(adc_humidity - ((int32_t)((int32_t)data->par_h1 * 16))) -
   1e09a:	eba0 006c 	sub.w	r0, r0, ip, asr #1
	var3 = var1 * var2;
   1e09e:	4343      	muls	r3, r0
	var4 = ((var4) + ((temp_scaled * (int32_t)data->par_h7) /
   1e0a0:	f994 0008 	ldrsb.w	r0, [r4, #8]
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
   1e0a4:	62a1      	str	r1, [r4, #40]	; 0x28
	var4 = ((var4) + ((temp_scaled * (int32_t)data->par_h7) /
   1e0a6:	4341      	muls	r1, r0
   1e0a8:	fb91 f1f5 	sdiv	r1, r1, r5
	var4 = (int32_t)data->par_h6 << 7;
   1e0ac:	79e0      	ldrb	r0, [r4, #7]
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   1e0ae:	f04f 0c05 	mov.w	ip, #5
	var4 = ((var4) + ((temp_scaled * (int32_t)data->par_h7) /
   1e0b2:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   1e0b6:	1398      	asrs	r0, r3, #14
   1e0b8:	4340      	muls	r0, r0
	var4 = ((var4) + ((temp_scaled * (int32_t)data->par_h7) /
   1e0ba:	1109      	asrs	r1, r1, #4
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   1e0bc:	1280      	asrs	r0, r0, #10
	var6 = (var4 * var5) >> 1;
   1e0be:	4348      	muls	r0, r1
	calc_hum = (((var3 + var6) >> 10) * ((int32_t)1000)) >> 12;
   1e0c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1e0c4:	eb03 0360 	add.w	r3, r3, r0, asr #1
   1e0c8:	129b      	asrs	r3, r3, #10
   1e0ca:	434b      	muls	r3, r1
	data->calc_humidity = calc_hum;
   1e0cc:	4923      	ldr	r1, [pc, #140]	; (1e15c <bme680_sample_fetch+0x2ac>)
	calc_hum = (((var3 + var6) >> 10) * ((int32_t)1000)) >> 12;
   1e0ce:	131b      	asrs	r3, r3, #12
	} else if (calc_hum < 0) {
   1e0d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	data->calc_humidity = calc_hum;
   1e0d4:	428b      	cmp	r3, r1
   1e0d6:	bfd4      	ite	le
   1e0d8:	6323      	strle	r3, [r4, #48]	; 0x30
   1e0da:	6321      	strgt	r1, [r4, #48]	; 0x30
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   1e0dc:	f240 553c 	movw	r5, #1340	; 0x53c
   1e0e0:	2300      	movs	r3, #0
	adc_gas_res = (uint16_t)((uint32_t)buff[13] << 2 | (((uint32_t)buff[14]) >> 6));
   1e0e2:	f89d 700d 	ldrb.w	r7, [sp, #13]
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   1e0e6:	f994 1027 	ldrsb.w	r1, [r4, #39]	; 0x27
		       ((int64_t)look_up1[gas_range])) >> 16;
   1e0ea:	f002 000f 	and.w	r0, r2, #15
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   1e0ee:	fbcc 5301 	smlal	r5, r3, ip, r1
		       ((int64_t)look_up1[gas_range])) >> 16;
   1e0f2:	491b      	ldr	r1, [pc, #108]	; (1e160 <bme680_sample_fetch+0x2b0>)
	adc_gas_res = (uint16_t)((uint32_t)buff[13] << 2 | (((uint32_t)buff[14]) >> 6));
   1e0f4:	0992      	lsrs	r2, r2, #6
		       ((int64_t)look_up1[gas_range])) >> 16;
   1e0f6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
	var2 = (((int64_t)((int64_t)adc_gas_res << 15) - (int64_t)(16777216)) + var1);
   1e0fa:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   1e0fe:	fba5 5c01 	umull	r5, ip, r5, r1
   1e102:	fb01 c103 	mla	r1, r1, r3, ip
   1e106:	0c2d      	lsrs	r5, r5, #16
	var2 = (((int64_t)((int64_t)adc_gas_res << 15) - (int64_t)(16777216)) + var1);
   1e108:	03d2      	lsls	r2, r2, #15
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   1e10a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
	var2 = (((int64_t)((int64_t)adc_gas_res << 15) - (int64_t)(16777216)) + var1);
   1e10e:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
   1e112:	eb63 0303 	sbc.w	r3, r3, r3
   1e116:	1952      	adds	r2, r2, r5
   1e118:	eb43 4321 	adc.w	r3, r3, r1, asr #16
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   1e11c:	ea4f 4c21 	mov.w	ip, r1, asr #16
	var3 = (((int64_t)look_up2[gas_range] * (int64_t)var1) >> 9);
   1e120:	4910      	ldr	r1, [pc, #64]	; (1e164 <bme680_sample_fetch+0x2b4>)
	data->calc_gas_resistance = (uint32_t)((var3 + ((int64_t)var2 >> 1))
   1e122:	105f      	asrs	r7, r3, #1
	var3 = (((int64_t)look_up2[gas_range] * (int64_t)var1) >> 9);
   1e124:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   1e128:	fba0 5105 	umull	r5, r1, r0, r5
   1e12c:	fb00 110c 	mla	r1, r0, ip, r1
   1e130:	0a6d      	lsrs	r5, r5, #9
	data->calc_gas_resistance = (uint32_t)((var3 + ((int64_t)var2 >> 1))
   1e132:	0850      	lsrs	r0, r2, #1
	var3 = (((int64_t)look_up2[gas_range] * (int64_t)var1) >> 9);
   1e134:	ea45 55c1 	orr.w	r5, r5, r1, lsl #23
	data->calc_gas_resistance = (uint32_t)((var3 + ((int64_t)var2 >> 1))
   1e138:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
   1e13c:	1828      	adds	r0, r5, r0
					    / (int64_t)var2);
   1e13e:	eb47 2161 	adc.w	r1, r7, r1, asr #9
   1e142:	f7fa fde1 	bl	18d08 <__aeabi_ldivmod>
	data->calc_gas_resistance = (uint32_t)((var3 + ((int64_t)var2 >> 1))
   1e146:	6360      	str	r0, [r4, #52]	; 0x34
		bme680_calc_humidity(data, adc_hum);
		bme680_calc_gas_resistance(data, gas_range, adc_gas_res);
	}

	/* Trigger the next measurement */
	ret = bme680_reg_write(dev, BME680_REG_CTRL_MEAS,
   1e148:	2255      	movs	r2, #85	; 0x55
   1e14a:	2174      	movs	r1, #116	; 0x74
   1e14c:	4630      	mov	r0, r6
   1e14e:	f00a fce6 	bl	28b1e <bme680_reg_write>
			       BME680_CTRL_MEAS_VAL);
	if (ret < 0) {
   1e152:	ea00 70e0 	and.w	r0, r0, r0, asr #31
		return ret;
	}

	return 0;
}
   1e156:	b004      	add	sp, #16
   1e158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e15c:	000186a0 	.word	0x000186a0
   1e160:	0002c34c 	.word	0x0002c34c
   1e164:	0002c30c 	.word	0x0002c30c

0001e168 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1e168:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1e16a:	794b      	ldrb	r3, [r1, #5]
   1e16c:	2b01      	cmp	r3, #1
   1e16e:	d026      	beq.n	1e1be <uarte_nrfx_configure+0x56>
   1e170:	2b03      	cmp	r3, #3
   1e172:	d121      	bne.n	1e1b8 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1e174:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1e176:	798b      	ldrb	r3, [r1, #6]
   1e178:	2b03      	cmp	r3, #3
   1e17a:	d11d      	bne.n	1e1b8 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1e17c:	79ce      	ldrb	r6, [r1, #7]
   1e17e:	b10e      	cbz	r6, 1e184 <uarte_nrfx_configure+0x1c>
   1e180:	2e01      	cmp	r6, #1
   1e182:	d119      	bne.n	1e1b8 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1e184:	790a      	ldrb	r2, [r1, #4]
   1e186:	b112      	cbz	r2, 1e18e <uarte_nrfx_configure+0x26>
   1e188:	2a02      	cmp	r2, #2
   1e18a:	d115      	bne.n	1e1b8 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1e18c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1e18e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1e190:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1e192:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1e196:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   1e198:	d067      	beq.n	1e26a <uarte_nrfx_configure+0x102>
   1e19a:	d82d      	bhi.n	1e1f8 <uarte_nrfx_configure+0x90>
   1e19c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1e1a0:	d066      	beq.n	1e270 <uarte_nrfx_configure+0x108>
   1e1a2:	d816      	bhi.n	1e1d2 <uarte_nrfx_configure+0x6a>
   1e1a4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1e1a8:	d064      	beq.n	1e274 <uarte_nrfx_configure+0x10c>
   1e1aa:	d80a      	bhi.n	1e1c2 <uarte_nrfx_configure+0x5a>
   1e1ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1e1b0:	d063      	beq.n	1e27a <uarte_nrfx_configure+0x112>
   1e1b2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1e1b6:	d063      	beq.n	1e280 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   1e1b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e1bc:	e054      	b.n	1e268 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   1e1be:	2500      	movs	r5, #0
   1e1c0:	e7d9      	b.n	1e176 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1e1c2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1e1c6:	d05e      	beq.n	1e286 <uarte_nrfx_configure+0x11e>
   1e1c8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1e1cc:	d1f4      	bne.n	1e1b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1e1ce:	4b38      	ldr	r3, [pc, #224]	; (1e2b0 <uarte_nrfx_configure+0x148>)
   1e1d0:	e03c      	b.n	1e24c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e1d2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1e1d6:	d059      	beq.n	1e28c <uarte_nrfx_configure+0x124>
   1e1d8:	d807      	bhi.n	1e1ea <uarte_nrfx_configure+0x82>
   1e1da:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1e1de:	d057      	beq.n	1e290 <uarte_nrfx_configure+0x128>
   1e1e0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1e1e4:	d1e8      	bne.n	1e1b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1e1e6:	4b33      	ldr	r3, [pc, #204]	; (1e2b4 <uarte_nrfx_configure+0x14c>)
   1e1e8:	e030      	b.n	1e24c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e1ea:	f647 2412 	movw	r4, #31250	; 0x7a12
   1e1ee:	42a3      	cmp	r3, r4
   1e1f0:	d1e2      	bne.n	1e1b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1e1f2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e1f6:	e029      	b.n	1e24c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e1f8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1e1fc:	d04a      	beq.n	1e294 <uarte_nrfx_configure+0x12c>
   1e1fe:	d813      	bhi.n	1e228 <uarte_nrfx_configure+0xc0>
   1e200:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1e204:	d049      	beq.n	1e29a <uarte_nrfx_configure+0x132>
   1e206:	d809      	bhi.n	1e21c <uarte_nrfx_configure+0xb4>
   1e208:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1e20c:	42a3      	cmp	r3, r4
   1e20e:	d046      	beq.n	1e29e <uarte_nrfx_configure+0x136>
   1e210:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1e214:	d1d0      	bne.n	1e1b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1e216:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1e21a:	e017      	b.n	1e24c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e21c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1e220:	d1ca      	bne.n	1e1b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1e222:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1e226:	e011      	b.n	1e24c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e228:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1e22c:	d03a      	beq.n	1e2a4 <uarte_nrfx_configure+0x13c>
   1e22e:	d808      	bhi.n	1e242 <uarte_nrfx_configure+0xda>
   1e230:	4c21      	ldr	r4, [pc, #132]	; (1e2b8 <uarte_nrfx_configure+0x150>)
   1e232:	42a3      	cmp	r3, r4
   1e234:	d039      	beq.n	1e2aa <uarte_nrfx_configure+0x142>
   1e236:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1e23a:	d1bd      	bne.n	1e1b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1e23c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1e240:	e004      	b.n	1e24c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e242:	4c1e      	ldr	r4, [pc, #120]	; (1e2bc <uarte_nrfx_configure+0x154>)
   1e244:	42a3      	cmp	r3, r4
   1e246:	d1b7      	bne.n	1e1b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1e248:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1e24c:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1e24e:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   1e252:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   1e254:	4335      	orrs	r5, r6
   1e256:	681b      	ldr	r3, [r3, #0]
   1e258:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1e25a:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1e25e:	1d23      	adds	r3, r4, #4
   1e260:	c903      	ldmia	r1, {r0, r1}
   1e262:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1e266:	2000      	movs	r0, #0
}
   1e268:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1e26a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1e26e:	e7ed      	b.n	1e24c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1e270:	4b13      	ldr	r3, [pc, #76]	; (1e2c0 <uarte_nrfx_configure+0x158>)
   1e272:	e7eb      	b.n	1e24c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1e274:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1e278:	e7e8      	b.n	1e24c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1e27a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1e27e:	e7e5      	b.n	1e24c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e280:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1e284:	e7e2      	b.n	1e24c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1e286:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1e28a:	e7df      	b.n	1e24c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1e28c:	4b0d      	ldr	r3, [pc, #52]	; (1e2c4 <uarte_nrfx_configure+0x15c>)
   1e28e:	e7dd      	b.n	1e24c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1e290:	4b0d      	ldr	r3, [pc, #52]	; (1e2c8 <uarte_nrfx_configure+0x160>)
   1e292:	e7db      	b.n	1e24c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1e294:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1e298:	e7d8      	b.n	1e24c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1e29a:	4b0c      	ldr	r3, [pc, #48]	; (1e2cc <uarte_nrfx_configure+0x164>)
   1e29c:	e7d6      	b.n	1e24c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1e29e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1e2a2:	e7d3      	b.n	1e24c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1e2a4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e2a8:	e7d0      	b.n	1e24c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1e2aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e2ae:	e7cd      	b.n	1e24c <uarte_nrfx_configure+0xe4>
   1e2b0:	0013b000 	.word	0x0013b000
   1e2b4:	004ea000 	.word	0x004ea000
   1e2b8:	0003d090 	.word	0x0003d090
   1e2bc:	000f4240 	.word	0x000f4240
   1e2c0:	00275000 	.word	0x00275000
   1e2c4:	0075c000 	.word	0x0075c000
   1e2c8:	003af000 	.word	0x003af000
   1e2cc:	013a9000 	.word	0x013a9000

0001e2d0 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1e2d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1e2d4:	4680      	mov	r8, r0
   1e2d6:	2200      	movs	r2, #0
   1e2d8:	2101      	movs	r1, #1
   1e2da:	2008      	movs	r0, #8
   1e2dc:	f7fc fe6a 	bl	1afb4 <z_arm_irq_priority_set>
   1e2e0:	2008      	movs	r0, #8
   1e2e2:	f7fc fe37 	bl	1af54 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1e2e6:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   1e2e8:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   1e2ec:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   1e2f0:	683c      	ldr	r4, [r7, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1e2f2:	aa01      	add	r2, sp, #4
   1e2f4:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   1e2f8:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1e2fc:	f8d7 900c 	ldr.w	r9, [r7, #12]
   1e300:	4648      	mov	r0, r9
   1e302:	f00a f815 	bl	28330 <pinctrl_lookup_state>
	if (ret < 0) {
   1e306:	1e05      	subs	r5, r0, #0
   1e308:	db4d      	blt.n	1e3a6 <uarte_0_init+0xd6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1e30a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1e30c:	f8d9 2000 	ldr.w	r2, [r9]
   1e310:	7919      	ldrb	r1, [r3, #4]
   1e312:	6818      	ldr	r0, [r3, #0]
   1e314:	f7ff fc66 	bl	1dbe4 <pinctrl_configure_pins>
	if (err < 0) {
   1e318:	1e05      	subs	r5, r0, #0
   1e31a:	db44      	blt.n	1e3a6 <uarte_0_init+0xd6>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   1e31c:	4640      	mov	r0, r8
   1e31e:	1d31      	adds	r1, r6, #4
   1e320:	f7ff ff22 	bl	1e168 <uarte_nrfx_configure>
	if (err) {
   1e324:	4605      	mov	r5, r0
   1e326:	2800      	cmp	r0, #0
   1e328:	d13d      	bne.n	1e3a6 <uarte_0_init+0xd6>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1e32a:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1e32c:	0799      	lsls	r1, r3, #30
   1e32e:	d513      	bpl.n	1e358 <uarte_0_init+0x88>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1e330:	f106 0018 	add.w	r0, r6, #24
   1e334:	f003 f90c 	bl	21550 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1e338:	4b1e      	ldr	r3, [pc, #120]	; (1e3b4 <uarte_0_init+0xe4>)
   1e33a:	4298      	cmp	r0, r3
   1e33c:	d137      	bne.n	1e3ae <uarte_0_init+0xde>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1e33e:	7e33      	ldrb	r3, [r6, #24]
   1e340:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1e344:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1e348:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1e34c:	2301      	movs	r3, #1
   1e34e:	7e32      	ldrb	r2, [r6, #24]
   1e350:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   1e352:	4a19      	ldr	r2, [pc, #100]	; (1e3b8 <uarte_0_init+0xe8>)
   1e354:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1e358:	2308      	movs	r3, #8
   1e35a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1e35e:	7a3b      	ldrb	r3, [r7, #8]
   1e360:	b953      	cbnz	r3, 1e378 <uarte_0_init+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e362:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1e366:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1e36a:	6973      	ldr	r3, [r6, #20]
   1e36c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1e370:	2301      	movs	r3, #1
   1e372:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e376:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1e378:	687b      	ldr	r3, [r7, #4]
   1e37a:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1e37c:	bf5c      	itt	pl
   1e37e:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1e382:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e386:	687b      	ldr	r3, [r7, #4]
   1e388:	06db      	lsls	r3, r3, #27
   1e38a:	bf44      	itt	mi
   1e38c:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1e390:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e394:	6933      	ldr	r3, [r6, #16]
   1e396:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e39a:	2300      	movs	r3, #0
   1e39c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e3a0:	2301      	movs	r3, #1
   1e3a2:	60a3      	str	r3, [r4, #8]
   1e3a4:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1e3a6:	4628      	mov	r0, r5
   1e3a8:	b003      	add	sp, #12
   1e3aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   1e3ae:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   1e3b2:	e7f8      	b.n	1e3a6 <uarte_0_init+0xd6>
   1e3b4:	0bad0000 	.word	0x0bad0000
   1e3b8:	40017000 	.word	0x40017000

0001e3bc <uarte_nrfx_poll_out>:
{
   1e3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e3be:	4604      	mov	r4, r0
   1e3c0:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
   1e3c2:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e3c4:	f00c fb3e 	bl	2aa44 <k_is_in_isr>
   1e3c8:	b9b0      	cbnz	r0, 1e3f8 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   1e3ca:	4b2e      	ldr	r3, [pc, #184]	; (1e484 <uarte_nrfx_poll_out+0xc8>)
   1e3cc:	781b      	ldrb	r3, [r3, #0]
   1e3ce:	b19b      	cbz	r3, 1e3f8 <uarte_nrfx_poll_out+0x3c>
{
   1e3d0:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1e3d2:	6860      	ldr	r0, [r4, #4]
   1e3d4:	f00a fd33 	bl	28e3e <is_tx_ready.isra.0>
   1e3d8:	bb00      	cbnz	r0, 1e41c <uarte_nrfx_poll_out+0x60>
   1e3da:	2001      	movs	r0, #1
   1e3dc:	f00b fba4 	bl	29b28 <nrfx_busy_wait>
   1e3e0:	3e01      	subs	r6, #1
   1e3e2:	d1f6      	bne.n	1e3d2 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   1e3e4:	2100      	movs	r1, #0
   1e3e6:	2021      	movs	r0, #33	; 0x21
   1e3e8:	f006 ff2a 	bl	25240 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1e3ec:	e7f0      	b.n	1e3d0 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   1e3ee:	f386 8811 	msr	BASEPRI, r6
   1e3f2:	f3bf 8f6f 	isb	sy
}
   1e3f6:	e7f5      	b.n	1e3e4 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   1e3f8:	f04f 0320 	mov.w	r3, #32
   1e3fc:	f3ef 8611 	mrs	r6, BASEPRI
   1e400:	f383 8812 	msr	BASEPRI_MAX, r3
   1e404:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1e408:	6860      	ldr	r0, [r4, #4]
   1e40a:	4631      	mov	r1, r6
   1e40c:	f00a fd17 	bl	28e3e <is_tx_ready.isra.0>
   1e410:	b990      	cbnz	r0, 1e438 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   1e412:	f386 8811 	msr	BASEPRI, r6
   1e416:	f3bf 8f6f 	isb	sy
}
   1e41a:	e7ed      	b.n	1e3f8 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   1e41c:	f04f 0320 	mov.w	r3, #32
   1e420:	f3ef 8611 	mrs	r6, BASEPRI
   1e424:	f383 8812 	msr	BASEPRI_MAX, r3
   1e428:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1e42c:	6860      	ldr	r0, [r4, #4]
   1e42e:	4631      	mov	r1, r6
   1e430:	f00a fd05 	bl	28e3e <is_tx_ready.isra.0>
   1e434:	2800      	cmp	r0, #0
   1e436:	d0da      	beq.n	1e3ee <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   1e438:	693b      	ldr	r3, [r7, #16]
   1e43a:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   1e43c:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e43e:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   1e440:	6813      	ldr	r3, [r2, #0]
   1e442:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e446:	2001      	movs	r0, #1
   1e448:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e44c:	2000      	movs	r0, #0
   1e44e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1e452:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   1e456:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e45a:	6852      	ldr	r2, [r2, #4]
   1e45c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   1e460:	06d2      	lsls	r2, r2, #27
   1e462:	d508      	bpl.n	1e476 <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1e464:	2008      	movs	r0, #8
	return config->uarte_regs;
   1e466:	6862      	ldr	r2, [r4, #4]
   1e468:	6812      	ldr	r2, [r2, #0]
   1e46a:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1e46e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1e472:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e476:	2201      	movs	r2, #1
   1e478:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1e47a:	f381 8811 	msr	BASEPRI, r1
   1e47e:	f3bf 8f6f 	isb	sy
}
   1e482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e484:	2000eafc 	.word	0x2000eafc

0001e488 <transfer_next_chunk>:
	spi_context_complete(ctx, dev, error);
	dev_data->busy = false;
}

static void transfer_next_chunk(const struct device *dev)
{
   1e488:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1e48a:	6904      	ldr	r4, [r0, #16]
{
   1e48c:	4606      	mov	r6, r0
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1e48e:	6da5      	ldr	r5, [r4, #88]	; 0x58
	const struct spi_nrfx_config *dev_config = dev->config;
   1e490:	6847      	ldr	r7, [r0, #4]
		return ctx->rx_len;
   1e492:	6e23      	ldr	r3, [r4, #96]	; 0x60
{
   1e494:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
   1e496:	b93d      	cbnz	r5, 1e4a8 <transfer_next_chunk+0x20>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
   1e498:	bb6b      	cbnz	r3, 1e4f6 <transfer_next_chunk+0x6e>
	int error = 0;
   1e49a:	4619      	mov	r1, r3
			anomaly_58_workaround_clear(dev_data);
#endif
		}
	}

	finish_transaction(dev, error);
   1e49c:	6930      	ldr	r0, [r6, #16]
}
   1e49e:	b005      	add	sp, #20
   1e4a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	finish_transaction(dev, error);
   1e4a4:	f00a bdda 	b.w	2905c <finish_transaction.isra.0>
		const uint8_t *tx_buf = ctx->tx_buf;
   1e4a8:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   1e4aa:	bb03      	cbnz	r3, 1e4ee <transfer_next_chunk+0x66>
	return !!(ctx->tx_buf && ctx->tx_len);
   1e4ac:	bb31      	cbnz	r1, 1e4fc <transfer_next_chunk+0x74>
		if (chunk_len > dev_config->max_chunk_len) {
   1e4ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   1e4b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1e4b2:	42aa      	cmp	r2, r5
   1e4b4:	bf28      	it	cs
   1e4b6:	462a      	movcs	r2, r5
		xfer.p_tx_buffer = tx_buf;
   1e4b8:	9100      	str	r1, [sp, #0]
		dev_data->chunk_len = chunk_len;
   1e4ba:	66a2      	str	r2, [r4, #104]	; 0x68
   1e4bc:	b11b      	cbz	r3, 1e4c6 <transfer_next_chunk+0x3e>
   1e4be:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1e4c0:	2b00      	cmp	r3, #0
   1e4c2:	bf18      	it	ne
   1e4c4:	4613      	movne	r3, r2
   1e4c6:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1e4c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e4ca:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1e4cc:	b11b      	cbz	r3, 1e4d6 <transfer_next_chunk+0x4e>
   1e4ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1e4d0:	2b00      	cmp	r3, #0
   1e4d2:	bf18      	it	ne
   1e4d4:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1e4d6:	2200      	movs	r2, #0
   1e4d8:	4669      	mov	r1, sp
   1e4da:	4638      	mov	r0, r7
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1e4dc:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1e4de:	f003 fd19 	bl	21f14 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1e4e2:	4b0e      	ldr	r3, [pc, #56]	; (1e51c <transfer_next_chunk+0x94>)
   1e4e4:	4298      	cmp	r0, r3
   1e4e6:	d017      	beq.n	1e518 <transfer_next_chunk+0x90>
			error = -EIO;
   1e4e8:	f06f 0104 	mvn.w	r1, #4
   1e4ec:	e7d6      	b.n	1e49c <transfer_next_chunk+0x14>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1e4ee:	429d      	cmp	r5, r3
   1e4f0:	bf28      	it	cs
   1e4f2:	461d      	movcs	r5, r3
   1e4f4:	e7da      	b.n	1e4ac <transfer_next_chunk+0x24>
		const uint8_t *tx_buf = ctx->tx_buf;
   1e4f6:	461d      	mov	r5, r3
   1e4f8:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   1e4fa:	e7d8      	b.n	1e4ae <transfer_next_chunk+0x26>
   1e4fc:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1e500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1e504:	d0d3      	beq.n	1e4ae <transfer_next_chunk+0x26>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   1e506:	2d08      	cmp	r5, #8
   1e508:	bf28      	it	cs
   1e50a:	2508      	movcs	r5, #8
   1e50c:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1e50e:	462a      	mov	r2, r5
   1e510:	f00c fe6b 	bl	2b1ea <memcpy>
			tx_buf = dev_data->buffer;
   1e514:	6f21      	ldr	r1, [r4, #112]	; 0x70
   1e516:	e7ca      	b.n	1e4ae <transfer_next_chunk+0x26>
}
   1e518:	b005      	add	sp, #20
   1e51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e51c:	0bad0000 	.word	0x0bad0000

0001e520 <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
   1e520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e524:	4698      	mov	r8, r3
	const struct spi_nrfx_config *dev_config = dev->config;
   1e526:	6843      	ldr	r3, [r0, #4]
{
   1e528:	b08b      	sub	sp, #44	; 0x2c
	const struct spi_nrfx_config *dev_config = dev->config;
   1e52a:	9302      	str	r3, [sp, #8]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1e52c:	888b      	ldrh	r3, [r1, #4]
{
   1e52e:	4606      	mov	r6, r0
	struct spi_nrfx_data *dev_data = dev->data;
   1e530:	6904      	ldr	r4, [r0, #16]
   1e532:	0498      	lsls	r0, r3, #18
{
   1e534:	460d      	mov	r5, r1
   1e536:	4691      	mov	r9, r2
   1e538:	f100 80f2 	bmi.w	1e720 <spi_nrfx_transceive+0x200>
	return z_impl_k_sem_take(sem, timeout);
   1e53c:	f04f 32ff 	mov.w	r2, #4294967295
   1e540:	f04f 33ff 	mov.w	r3, #4294967295
   1e544:	f104 0010 	add.w	r0, r4, #16
   1e548:	f006 fa3a 	bl	249c0 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1e54c:	6065      	str	r5, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   1e54e:	f8d6 b004 	ldr.w	fp, [r6, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1e552:	f8d6 a010 	ldr.w	sl, [r6, #16]
	uint32_t max_freq = dev_config->max_freq;
   1e556:	f8db 3008 	ldr.w	r3, [fp, #8]
   1e55a:	9303      	str	r3, [sp, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1e55c:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
   1e560:	9300      	str	r3, [sp, #0]
   1e562:	b11b      	cbz	r3, 1e56c <spi_nrfx_transceive+0x4c>
   1e564:	f8da 3000 	ldr.w	r3, [sl]
   1e568:	429d      	cmp	r5, r3
   1e56a:	d066      	beq.n	1e63a <spi_nrfx_transceive+0x11a>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1e56c:	88af      	ldrh	r7, [r5, #4]
   1e56e:	0539      	lsls	r1, r7, #20
   1e570:	f100 8105 	bmi.w	1e77e <spi_nrfx_transceive+0x25e>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1e574:	f017 0f09 	tst.w	r7, #9
   1e578:	f040 80fe 	bne.w	1e778 <spi_nrfx_transceive+0x258>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1e57c:	f3c7 1345 	ubfx	r3, r7, #5, #6
   1e580:	2b08      	cmp	r3, #8
   1e582:	f040 80f9 	bne.w	1e778 <spi_nrfx_transceive+0x258>
	if (spi_cfg->frequency < 125000) {
   1e586:	682b      	ldr	r3, [r5, #0]
   1e588:	9301      	str	r3, [sp, #4]
   1e58a:	9a01      	ldr	r2, [sp, #4]
   1e58c:	4b8d      	ldr	r3, [pc, #564]	; (1e7c4 <spi_nrfx_transceive+0x2a4>)
   1e58e:	429a      	cmp	r2, r3
   1e590:	f240 80f2 	bls.w	1e778 <spi_nrfx_transceive+0x258>
	config = dev_config->def_config;
   1e594:	f10d 0c14 	add.w	ip, sp, #20
   1e598:	f10b 0e0c 	add.w	lr, fp, #12
   1e59c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1e5a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1e5a4:	f8de 3000 	ldr.w	r3, [lr]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1e5a8:	9a01      	ldr	r2, [sp, #4]
	config = dev_config->def_config;
   1e5aa:	f8cc 3000 	str.w	r3, [ip]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1e5ae:	9b03      	ldr	r3, [sp, #12]
   1e5b0:	4293      	cmp	r3, r2
   1e5b2:	bf28      	it	cs
   1e5b4:	4613      	movcs	r3, r2
	if (frequency < 250000) {
   1e5b6:	4a84      	ldr	r2, [pc, #528]	; (1e7c8 <spi_nrfx_transceive+0x2a8>)
   1e5b8:	4293      	cmp	r3, r2
   1e5ba:	f240 80ba 	bls.w	1e732 <spi_nrfx_transceive+0x212>
	} else if (frequency < 500000) {
   1e5be:	4a83      	ldr	r2, [pc, #524]	; (1e7cc <spi_nrfx_transceive+0x2ac>)
   1e5c0:	4293      	cmp	r3, r2
   1e5c2:	f240 80b9 	bls.w	1e738 <spi_nrfx_transceive+0x218>
	} else if (frequency < 1000000) {
   1e5c6:	4a82      	ldr	r2, [pc, #520]	; (1e7d0 <spi_nrfx_transceive+0x2b0>)
   1e5c8:	4293      	cmp	r3, r2
   1e5ca:	f240 80b8 	bls.w	1e73e <spi_nrfx_transceive+0x21e>
	} else if (frequency < 2000000) {
   1e5ce:	4a81      	ldr	r2, [pc, #516]	; (1e7d4 <spi_nrfx_transceive+0x2b4>)
   1e5d0:	4293      	cmp	r3, r2
   1e5d2:	f240 80b7 	bls.w	1e744 <spi_nrfx_transceive+0x224>
	} else if (frequency < 4000000) {
   1e5d6:	4a80      	ldr	r2, [pc, #512]	; (1e7d8 <spi_nrfx_transceive+0x2b8>)
   1e5d8:	4293      	cmp	r3, r2
   1e5da:	f240 80b6 	bls.w	1e74a <spi_nrfx_transceive+0x22a>
		return NRF_SPIM_FREQ_4M;
   1e5de:	4a7f      	ldr	r2, [pc, #508]	; (1e7dc <spi_nrfx_transceive+0x2bc>)
   1e5e0:	4293      	cmp	r3, r2
   1e5e2:	bf2c      	ite	cs
   1e5e4:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
   1e5e8:	f04f 4380 	movcc.w	r3, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1e5ec:	07ba      	lsls	r2, r7, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1e5ee:	9307      	str	r3, [sp, #28]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1e5f0:	f007 0304 	and.w	r3, r7, #4
   1e5f4:	f140 80ac 	bpl.w	1e750 <spi_nrfx_transceive+0x230>
			return NRF_SPIM_MODE_2;
   1e5f8:	2b00      	cmp	r3, #0
   1e5fa:	bf14      	ite	ne
   1e5fc:	2303      	movne	r3, #3
   1e5fe:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1e600:	f88d 3020 	strb.w	r3, [sp, #32]
	if (dev_data->initialized) {
   1e604:	9b00      	ldr	r3, [sp, #0]
	if (operation & SPI_TRANSFER_LSB) {
   1e606:	f3c7 1700 	ubfx	r7, r7, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1e60a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
	if (dev_data->initialized) {
   1e60e:	b12b      	cbz	r3, 1e61c <spi_nrfx_transceive+0xfc>
		nrfx_spim_uninit(&dev_config->spim);
   1e610:	4658      	mov	r0, fp
   1e612:	f003 fc37 	bl	21e84 <nrfx_spim_uninit>
		dev_data->initialized = false;
   1e616:	2300      	movs	r3, #0
   1e618:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   1e61c:	4653      	mov	r3, sl
   1e61e:	4658      	mov	r0, fp
   1e620:	4a6f      	ldr	r2, [pc, #444]	; (1e7e0 <spi_nrfx_transceive+0x2c0>)
   1e622:	a905      	add	r1, sp, #20
   1e624:	f003 fb86 	bl	21d34 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1e628:	4b6e      	ldr	r3, [pc, #440]	; (1e7e4 <spi_nrfx_transceive+0x2c4>)
   1e62a:	4298      	cmp	r0, r3
   1e62c:	f040 8094 	bne.w	1e758 <spi_nrfx_transceive+0x238>
	dev_data->initialized = true;
   1e630:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   1e632:	f8ca 5000 	str.w	r5, [sl]
	dev_data->initialized = true;
   1e636:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
		dev_data->busy = true;
   1e63a:	2301      	movs	r3, #1
   1e63c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1e640:	f1b9 0f00 	cmp.w	r9, #0
   1e644:	f040 809e 	bne.w	1e784 <spi_nrfx_transceive+0x264>
   1e648:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1e64c:	2300      	movs	r3, #0
   1e64e:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1e650:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1e654:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1e658:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1e65c:	f00a fc3d 	bl	28eda <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   1e660:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1e662:	f1b8 0f00 	cmp.w	r8, #0
   1e666:	f040 8096 	bne.w	1e796 <spi_nrfx_transceive+0x276>
   1e66a:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1e66e:	2300      	movs	r3, #0
   1e670:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1e672:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1e676:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1e67a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1e67e:	f00a fc2c 	bl	28eda <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1e682:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
   1e684:	2101      	movs	r1, #1
   1e686:	462a      	mov	r2, r5
	ctx->rx_buf = (uint8_t *)
   1e688:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   1e68a:	6425      	str	r5, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   1e68c:	4620      	mov	r0, r4
   1e68e:	f00a fc4b 	bl	28f28 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1e692:	4630      	mov	r0, r6
   1e694:	f7ff fef8 	bl	1e488 <transfer_next_chunk>
}

static inline size_t spi_context_total_tx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;
   1e698:	462a      	mov	r2, r5

	for (n = 0; n < ctx->tx_count; ++n) {
   1e69a:	462b      	mov	r3, r5
   1e69c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1e69e:	4283      	cmp	r3, r0
   1e6a0:	f040 8082 	bne.w	1e7a8 <spi_nrfx_transceive+0x288>
}

static inline size_t spi_context_total_rx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;
   1e6a4:	2300      	movs	r3, #0

	for (n = 0; n < ctx->rx_count; ++n) {
   1e6a6:	4619      	mov	r1, r3
   1e6a8:	6d25      	ldr	r5, [r4, #80]	; 0x50
   1e6aa:	42a9      	cmp	r1, r5
   1e6ac:	f040 8083 	bne.w	1e7b6 <spi_nrfx_transceive+0x296>
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
   1e6b0:	4293      	cmp	r3, r2
   1e6b2:	bf38      	it	cc
   1e6b4:	4613      	movcc	r3, r2
				     ctx->config->frequency;
   1e6b6:	4627      	mov	r7, r4
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
   1e6b8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
   1e6bc:	f04f 0800 	mov.w	r8, #0
   1e6c0:	fb02 f503 	mul.w	r5, r2, r3
				     ctx->config->frequency;
   1e6c4:	f857 3b28 	ldr.w	r3, [r7], #40
   1e6c8:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
   1e6cc:	681b      	ldr	r3, [r3, #0]
   1e6ce:	4641      	mov	r1, r8
   1e6d0:	fbb5 f5f3 	udiv	r5, r5, r3
   1e6d4:	f240 30e7 	movw	r0, #999	; 0x3e7
			timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1e6d8:	35c8      	adds	r5, #200	; 0xc8
   1e6da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e6de:	2300      	movs	r3, #0
   1e6e0:	fbe5 010c 	umlal	r0, r1, r5, ip
   1e6e4:	f7fa fb60 	bl	18da8 <__aeabi_uldivmod>
   1e6e8:	4602      	mov	r2, r0
   1e6ea:	460b      	mov	r3, r1
   1e6ec:	4638      	mov	r0, r7
   1e6ee:	f006 f967 	bl	249c0 <z_impl_k_sem_take>
		if (k_sem_take(&ctx->sync, timeout)) {
   1e6f2:	b918      	cbnz	r0, 1e6fc <spi_nrfx_transceive+0x1dc>
		status = ctx->sync_status;
   1e6f4:	6c25      	ldr	r5, [r4, #64]	; 0x40
		if (error == -ETIMEDOUT) {
   1e6f6:	f115 0f74 	cmn.w	r5, #116	; 0x74
   1e6fa:	d12f      	bne.n	1e75c <spi_nrfx_transceive+0x23c>
			nrfx_spim_uninit(&dev_config->spim);
   1e6fc:	9802      	ldr	r0, [sp, #8]
			dev_data->chunk_len = 0;
   1e6fe:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
			nrfx_spim_uninit(&dev_config->spim);
   1e702:	f003 fbbf 	bl	21e84 <nrfx_spim_uninit>
			dev_data->initialized = false;
   1e706:	f884 806d 	strb.w	r8, [r4, #109]	; 0x6d
			finish_transaction(dev, -ETIMEDOUT);
   1e70a:	f06f 0173 	mvn.w	r1, #115	; 0x73
   1e70e:	6930      	ldr	r0, [r6, #16]
   1e710:	f00a fca4 	bl	2905c <finish_transaction.isra.0>
	z_impl_k_sem_reset(sem);
   1e714:	4638      	mov	r0, r7
   1e716:	f006 f97b 	bl	24a10 <z_impl_k_sem_reset>
		error = spi_context_wait_for_completion(&dev_data->ctx);
   1e71a:	f06f 0573 	mvn.w	r5, #115	; 0x73
}
   1e71e:	e01d      	b.n	1e75c <spi_nrfx_transceive+0x23c>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1e720:	69a3      	ldr	r3, [r4, #24]
   1e722:	2b00      	cmp	r3, #0
   1e724:	f47f af0a 	bne.w	1e53c <spi_nrfx_transceive+0x1c>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1e728:	6863      	ldr	r3, [r4, #4]
   1e72a:	4299      	cmp	r1, r3
   1e72c:	f47f af06 	bne.w	1e53c <spi_nrfx_transceive+0x1c>
   1e730:	e70d      	b.n	1e54e <spi_nrfx_transceive+0x2e>
		return NRF_SPIM_FREQ_125K;
   1e732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   1e736:	e759      	b.n	1e5ec <spi_nrfx_transceive+0xcc>
		return NRF_SPIM_FREQ_250K;
   1e738:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e73c:	e756      	b.n	1e5ec <spi_nrfx_transceive+0xcc>
		return NRF_SPIM_FREQ_500K;
   1e73e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1e742:	e753      	b.n	1e5ec <spi_nrfx_transceive+0xcc>
		return NRF_SPIM_FREQ_1M;
   1e744:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e748:	e750      	b.n	1e5ec <spi_nrfx_transceive+0xcc>
		return NRF_SPIM_FREQ_2M;
   1e74a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   1e74e:	e74d      	b.n	1e5ec <spi_nrfx_transceive+0xcc>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1e750:	3b00      	subs	r3, #0
   1e752:	bf18      	it	ne
   1e754:	2301      	movne	r3, #1
   1e756:	e753      	b.n	1e600 <spi_nrfx_transceive+0xe0>
		return -EIO;
   1e758:	f06f 0504 	mvn.w	r5, #4
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1e75c:	6823      	ldr	r3, [r4, #0]
   1e75e:	889b      	ldrh	r3, [r3, #4]
   1e760:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1e764:	d104      	bne.n	1e770 <spi_nrfx_transceive+0x250>
		ctx->owner = NULL;
   1e766:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1e768:	f104 0010 	add.w	r0, r4, #16
   1e76c:	f006 f902 	bl	24974 <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
}
   1e770:	4628      	mov	r0, r5
   1e772:	b00b      	add	sp, #44	; 0x2c
   1e774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   1e778:	f06f 0515 	mvn.w	r5, #21
   1e77c:	e7ee      	b.n	1e75c <spi_nrfx_transceive+0x23c>
		return -ENOTSUP;
   1e77e:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1e782:	e7eb      	b.n	1e75c <spi_nrfx_transceive+0x23c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1e784:	f8d9 3000 	ldr.w	r3, [r9]
   1e788:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1e78a:	2b00      	cmp	r3, #0
   1e78c:	f43f af5e 	beq.w	1e64c <spi_nrfx_transceive+0x12c>
   1e790:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e794:	e75b      	b.n	1e64e <spi_nrfx_transceive+0x12e>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1e796:	f8d8 3000 	ldr.w	r3, [r8]
   1e79a:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1e79c:	2b00      	cmp	r3, #0
   1e79e:	f43f af66 	beq.w	1e66e <spi_nrfx_transceive+0x14e>
   1e7a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1e7a6:	e763      	b.n	1e670 <spi_nrfx_transceive+0x150>
		total_len += ctx->current_tx[n].len;
   1e7a8:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1e7aa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1e7ae:	6849      	ldr	r1, [r1, #4]
	for (n = 0; n < ctx->tx_count; ++n) {
   1e7b0:	3301      	adds	r3, #1
		total_len += ctx->current_tx[n].len;
   1e7b2:	440a      	add	r2, r1
	for (n = 0; n < ctx->tx_count; ++n) {
   1e7b4:	e773      	b.n	1e69e <spi_nrfx_transceive+0x17e>
		total_len += ctx->current_rx[n].len;
   1e7b6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1e7b8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1e7bc:	6840      	ldr	r0, [r0, #4]
	for (n = 0; n < ctx->rx_count; ++n) {
   1e7be:	3101      	adds	r1, #1
		total_len += ctx->current_rx[n].len;
   1e7c0:	4403      	add	r3, r0
	for (n = 0; n < ctx->rx_count; ++n) {
   1e7c2:	e772      	b.n	1e6aa <spi_nrfx_transceive+0x18a>
   1e7c4:	0001e847 	.word	0x0001e847
   1e7c8:	0003d08f 	.word	0x0003d08f
   1e7cc:	0007a11f 	.word	0x0007a11f
   1e7d0:	000f423f 	.word	0x000f423f
   1e7d4:	001e847f 	.word	0x001e847f
   1e7d8:	003d08ff 	.word	0x003d08ff
   1e7dc:	007a1200 	.word	0x007a1200
   1e7e0:	0002907d 	.word	0x0002907d
   1e7e4:	0bad0000 	.word	0x0bad0000

0001e7e8 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e7e8:	2301      	movs	r3, #1
   1e7ea:	4083      	lsls	r3, r0
{
   1e7ec:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e7ee:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e7f0:	4a0b      	ldr	r2, [pc, #44]	; (1e820 <compare_int_lock+0x38>)
   1e7f2:	e8d2 1fef 	ldaex	r1, [r2]
   1e7f6:	ea01 0504 	and.w	r5, r1, r4
   1e7fa:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1e7fe:	2e00      	cmp	r6, #0
   1e800:	d1f7      	bne.n	1e7f2 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e802:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e806:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1e808:	4806      	ldr	r0, [pc, #24]	; (1e824 <compare_int_lock+0x3c>)
   1e80a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1e80e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1e812:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1e816:	420b      	tst	r3, r1
}
   1e818:	bf14      	ite	ne
   1e81a:	2001      	movne	r0, #1
   1e81c:	2000      	moveq	r0, #0
   1e81e:	bd70      	pop	{r4, r5, r6, pc}
   1e820:	2000d6e8 	.word	0x2000d6e8
   1e824:	40015000 	.word	0x40015000

0001e828 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1e828:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1e82a:	490e      	ldr	r1, [pc, #56]	; (1e864 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
   1e82c:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1e830:	e9d1 3400 	ldrd	r3, r4, [r1]
   1e834:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   1e836:	18c3      	adds	r3, r0, r3
   1e838:	f144 0400 	adc.w	r4, r4, #0
   1e83c:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1e840:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1e844:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1e848:	d209      	bcs.n	1e85e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1e84a:	4b07      	ldr	r3, [pc, #28]	; (1e868 <sys_clock_timeout_handler+0x40>)
   1e84c:	681b      	ldr	r3, [r3, #0]
   1e84e:	0a1a      	lsrs	r2, r3, #8
   1e850:	061b      	lsls	r3, r3, #24
   1e852:	199c      	adds	r4, r3, r6
   1e854:	4b05      	ldr	r3, [pc, #20]	; (1e86c <sys_clock_timeout_handler+0x44>)
   1e856:	f142 0500 	adc.w	r5, r2, #0
   1e85a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   1e85e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   1e860:	f006 be56 	b.w	25510 <sys_clock_announce>
   1e864:	2000ca68 	.word	0x2000ca68
   1e868:	2000d6ec 	.word	0x2000d6ec
   1e86c:	2000ca70 	.word	0x2000ca70

0001e870 <compare_int_unlock>:
	if (key) {
   1e870:	b1d9      	cbz	r1, 1e8aa <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   1e872:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e874:	4a0d      	ldr	r2, [pc, #52]	; (1e8ac <compare_int_unlock+0x3c>)
   1e876:	4083      	lsls	r3, r0
   1e878:	e8d2 cfef 	ldaex	ip, [r2]
   1e87c:	ea4c 0c03 	orr.w	ip, ip, r3
   1e880:	e8c2 cfe1 	stlex	r1, ip, [r2]
   1e884:	2900      	cmp	r1, #0
   1e886:	d1f7      	bne.n	1e878 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e888:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1e88c:	4a08      	ldr	r2, [pc, #32]	; (1e8b0 <compare_int_unlock+0x40>)
   1e88e:	4083      	lsls	r3, r0
   1e890:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e894:	4b07      	ldr	r3, [pc, #28]	; (1e8b4 <compare_int_unlock+0x44>)
   1e896:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1e89a:	40c3      	lsrs	r3, r0
   1e89c:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e89e:	bf42      	ittt	mi
   1e8a0:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1e8a4:	4b04      	ldrmi	r3, [pc, #16]	; (1e8b8 <compare_int_unlock+0x48>)
   1e8a6:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1e8aa:	4770      	bx	lr
   1e8ac:	2000d6e8 	.word	0x2000d6e8
   1e8b0:	40015000 	.word	0x40015000
   1e8b4:	2000d6e4 	.word	0x2000d6e4
   1e8b8:	e000e100 	.word	0xe000e100

0001e8bc <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1e8bc:	4b0d      	ldr	r3, [pc, #52]	; (1e8f4 <z_nrf_rtc_timer_read+0x38>)
   1e8be:	6818      	ldr	r0, [r3, #0]
   1e8c0:	0a01      	lsrs	r1, r0, #8
   1e8c2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1e8c4:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1e8c8:	4b0b      	ldr	r3, [pc, #44]	; (1e8f8 <z_nrf_rtc_timer_read+0x3c>)
   1e8ca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1e8ce:	1818      	adds	r0, r3, r0
   1e8d0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1e8d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e8d8:	d20a      	bcs.n	1e8f0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1e8da:	4b08      	ldr	r3, [pc, #32]	; (1e8fc <z_nrf_rtc_timer_read+0x40>)
   1e8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e8e0:	4290      	cmp	r0, r2
   1e8e2:	eb71 0303 	sbcs.w	r3, r1, r3
   1e8e6:	d203      	bcs.n	1e8f0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1e8e8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1e8ec:	f141 0100 	adc.w	r1, r1, #0
}
   1e8f0:	4770      	bx	lr
   1e8f2:	bf00      	nop
   1e8f4:	2000d6ec 	.word	0x2000d6ec
   1e8f8:	40015000 	.word	0x40015000
   1e8fc:	2000ca70 	.word	0x2000ca70

0001e900 <compare_set>:
{
   1e900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e904:	4616      	mov	r6, r2
   1e906:	461f      	mov	r7, r3
   1e908:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   1e90a:	f7ff ff6d 	bl	1e7e8 <compare_int_lock>
   1e90e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1e910:	f7ff ffd4 	bl	1e8bc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1e914:	42b0      	cmp	r0, r6
   1e916:	eb71 0307 	sbcs.w	r3, r1, r7
   1e91a:	d250      	bcs.n	1e9be <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1e91c:	4b38      	ldr	r3, [pc, #224]	; (1ea00 <compare_set+0x100>)
   1e91e:	1a30      	subs	r0, r6, r0
   1e920:	eb67 0101 	sbc.w	r1, r7, r1
   1e924:	4298      	cmp	r0, r3
   1e926:	f171 0100 	sbcs.w	r1, r1, #0
   1e92a:	d265      	bcs.n	1e9f8 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
   1e92c:	4b35      	ldr	r3, [pc, #212]	; (1ea04 <compare_set+0x104>)
   1e92e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1e932:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1e936:	429f      	cmp	r7, r3
   1e938:	bf08      	it	eq
   1e93a:	4296      	cmpeq	r6, r2
   1e93c:	d049      	beq.n	1e9d2 <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e93e:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1e942:	4931      	ldr	r1, [pc, #196]	; (1ea08 <compare_set+0x108>)
   1e944:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
   1e948:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
   1e94a:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   1e94e:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   1e952:	f00a fbe0 	bl	29116 <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1e956:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
   1e95a:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1e95c:	f104 0550 	add.w	r5, r4, #80	; 0x50
   1e960:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e962:	b2ad      	uxth	r5, r5
   1e964:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   1e968:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1e96c:	4a27      	ldr	r2, [pc, #156]	; (1ea0c <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e96e:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
    p_reg->CC[ch] = cc_val;
   1e972:	9301      	str	r3, [sp, #4]
   1e974:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e978:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   1e97c:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
   1e980:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   1e984:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1e988:	eba0 0008 	sub.w	r0, r0, r8
   1e98c:	3803      	subs	r0, #3
   1e98e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1e992:	4290      	cmp	r0, r2
   1e994:	d91d      	bls.n	1e9d2 <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e996:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   1e998:	b160      	cbz	r0, 1e9b4 <compare_set+0xb4>
     return p_reg->COUNTER;
   1e99a:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1e99e:	eba8 000b 	sub.w	r0, r8, fp
   1e9a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1e9a6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e9aa:	d912      	bls.n	1e9d2 <compare_set+0xd2>
					event_clear(chan);
   1e9ac:	4620      	mov	r0, r4
   1e9ae:	f00a fbb2 	bl	29116 <event_clear>
   1e9b2:	4a16      	ldr	r2, [pc, #88]	; (1ea0c <compare_set+0x10c>)
			cc_val = now + cc_inc;
   1e9b4:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
   1e9b8:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   1e9bc:	e7da      	b.n	1e974 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1e9be:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e9c0:	4a13      	ldr	r2, [pc, #76]	; (1ea10 <compare_set+0x110>)
   1e9c2:	40a3      	lsls	r3, r4
   1e9c4:	e8d2 0fef 	ldaex	r0, [r2]
   1e9c8:	4318      	orrs	r0, r3
   1e9ca:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1e9ce:	2900      	cmp	r1, #0
   1e9d0:	d1f8      	bne.n	1e9c4 <compare_set+0xc4>
	return ret;
   1e9d2:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
   1e9d4:	490b      	ldr	r1, [pc, #44]	; (1ea04 <compare_set+0x104>)
	cc_data[chan].callback = handler;
   1e9d6:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   1e9d8:	0123      	lsls	r3, r4, #4
   1e9da:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
   1e9de:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
   1e9e0:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
   1e9e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1e9e6:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1e9e8:	4620      	mov	r0, r4
   1e9ea:	9900      	ldr	r1, [sp, #0]
   1e9ec:	f7ff ff40 	bl	1e870 <compare_int_unlock>
}
   1e9f0:	4628      	mov	r0, r5
   1e9f2:	b003      	add	sp, #12
   1e9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   1e9f8:	f06f 0515 	mvn.w	r5, #21
   1e9fc:	e7f4      	b.n	1e9e8 <compare_set+0xe8>
   1e9fe:	bf00      	nop
   1ea00:	00800001 	.word	0x00800001
   1ea04:	2000ca58 	.word	0x2000ca58
   1ea08:	40015000 	.word	0x40015000
   1ea0c:	007ffffd 	.word	0x007ffffd
   1ea10:	2000d6e4 	.word	0x2000d6e4

0001ea14 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   1ea14:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   1ea16:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1ea18:	f04f 30ff 	mov.w	r0, #4294967295
   1ea1c:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->INTENCLR = mask;
   1ea20:	4c18      	ldr	r4, [pc, #96]	; (1ea84 <sys_clock_driver_init+0x70>)
   1ea22:	4b19      	ldr	r3, [pc, #100]	; (1ea88 <sys_clock_driver_init+0x74>)
    p_reg->INTENSET = mask;
   1ea24:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
   1ea26:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   1ea2a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   1ea2e:	4b17      	ldr	r3, [pc, #92]	; (1ea8c <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
   1ea30:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1ea34:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1ea38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ea3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1ea40:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1ea44:	4b12      	ldr	r3, [pc, #72]	; (1ea90 <sys_clock_driver_init+0x7c>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1ea46:	2101      	movs	r1, #1
   1ea48:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   1ea4c:	2015      	movs	r0, #21
   1ea4e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1ea52:	462a      	mov	r2, r5
   1ea54:	f7fc faae 	bl	1afb4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1ea58:	2015      	movs	r0, #21
   1ea5a:	f7fc fa7b 	bl	1af54 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1ea5e:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1ea60:	4a0c      	ldr	r2, [pc, #48]	; (1ea94 <sys_clock_driver_init+0x80>)
   1ea62:	60a3      	str	r3, [r4, #8]
   1ea64:	6023      	str	r3, [r4, #0]
   1ea66:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1ea68:	4b0b      	ldr	r3, [pc, #44]	; (1ea98 <sys_clock_driver_init+0x84>)
   1ea6a:	4a0c      	ldr	r2, [pc, #48]	; (1ea9c <sys_clock_driver_init+0x88>)
   1ea6c:	9300      	str	r3, [sp, #0]
   1ea6e:	4628      	mov	r0, r5
   1ea70:	2300      	movs	r3, #0
   1ea72:	9501      	str	r5, [sp, #4]
   1ea74:	f7ff ff44 	bl	1e900 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1ea78:	4630      	mov	r0, r6
   1ea7a:	f7fe fdc3 	bl	1d604 <z_nrf_clock_control_lf_on>

	return 0;
}
   1ea7e:	4628      	mov	r0, r5
   1ea80:	b002      	add	sp, #8
   1ea82:	bd70      	pop	{r4, r5, r6, pc}
   1ea84:	40015000 	.word	0x40015000
   1ea88:	000f0003 	.word	0x000f0003
   1ea8c:	2000ca58 	.word	0x2000ca58
   1ea90:	e000e100 	.word	0xe000e100
   1ea94:	2000d6e8 	.word	0x2000d6e8
   1ea98:	0001e829 	.word	0x0001e829
   1ea9c:	007fffff 	.word	0x007fffff

0001eaa0 <rtc_nrf_isr>:
{
   1eaa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1eaa4:	4b2e      	ldr	r3, [pc, #184]	; (1eb60 <rtc_nrf_isr+0xc0>)
   1eaa6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1eaaa:	0790      	lsls	r0, r2, #30
   1eaac:	d50b      	bpl.n	1eac6 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1eaae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1eab2:	b142      	cbz	r2, 1eac6 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1eab4:	2200      	movs	r2, #0
   1eab6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   1eaba:	4a2a      	ldr	r2, [pc, #168]	; (1eb64 <rtc_nrf_isr+0xc4>)
   1eabc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1eac0:	6813      	ldr	r3, [r2, #0]
   1eac2:	3301      	adds	r3, #1
   1eac4:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1eac6:	4a26      	ldr	r2, [pc, #152]	; (1eb60 <rtc_nrf_isr+0xc0>)
   1eac8:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1eacc:	03d9      	lsls	r1, r3, #15
   1eace:	d527      	bpl.n	1eb20 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ead0:	4b25      	ldr	r3, [pc, #148]	; (1eb68 <rtc_nrf_isr+0xc8>)
   1ead2:	e8d3 1fef 	ldaex	r1, [r3]
   1ead6:	f021 0001 	bic.w	r0, r1, #1
   1eada:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1eade:	2c00      	cmp	r4, #0
   1eae0:	d1f7      	bne.n	1ead2 <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1eae2:	07cb      	lsls	r3, r1, #31
   1eae4:	d402      	bmi.n	1eaec <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1eae6:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   1eaea:	b1cb      	cbz	r3, 1eb20 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1eaec:	2500      	movs	r5, #0
   1eaee:	4c1c      	ldr	r4, [pc, #112]	; (1eb60 <rtc_nrf_isr+0xc0>)
   1eaf0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1eaf4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   1eaf8:	f7ff fee0 	bl	1e8bc <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1eafc:	f04f 0320 	mov.w	r3, #32
   1eb00:	f3ef 8211 	mrs	r2, BASEPRI
   1eb04:	f383 8812 	msr	BASEPRI_MAX, r3
   1eb08:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1eb0c:	4b17      	ldr	r3, [pc, #92]	; (1eb6c <rtc_nrf_isr+0xcc>)
   1eb0e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1eb12:	42b0      	cmp	r0, r6
   1eb14:	41b9      	sbcs	r1, r7
   1eb16:	d206      	bcs.n	1eb26 <rtc_nrf_isr+0x86>
	__asm__ volatile(
   1eb18:	f382 8811 	msr	BASEPRI, r2
   1eb1c:	f3bf 8f6f 	isb	sy
}
   1eb20:	b003      	add	sp, #12
   1eb22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1eb26:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
   1eb2a:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1eb2e:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
   1eb32:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1eb34:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
   1eb38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1eb3c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1eb40:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1eb44:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1eb48:	f382 8811 	msr	BASEPRI, r2
   1eb4c:	f3bf 8f6f 	isb	sy
		if (handler) {
   1eb50:	2900      	cmp	r1, #0
   1eb52:	d0e5      	beq.n	1eb20 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
   1eb54:	9000      	str	r0, [sp, #0]
   1eb56:	4632      	mov	r2, r6
   1eb58:	463b      	mov	r3, r7
   1eb5a:	4628      	mov	r0, r5
   1eb5c:	4788      	blx	r1
   1eb5e:	e7df      	b.n	1eb20 <rtc_nrf_isr+0x80>
   1eb60:	40015000 	.word	0x40015000
   1eb64:	2000d6ec 	.word	0x2000d6ec
   1eb68:	2000d6e4 	.word	0x2000d6e4
   1eb6c:	2000ca58 	.word	0x2000ca58

0001eb70 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   1eb70:	1c43      	adds	r3, r0, #1
{
   1eb72:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   1eb74:	d021      	beq.n	1ebba <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1eb76:	2801      	cmp	r0, #1
   1eb78:	dd21      	ble.n	1ebbe <sys_clock_set_timeout+0x4e>
   1eb7a:	4a12      	ldr	r2, [pc, #72]	; (1ebc4 <sys_clock_set_timeout+0x54>)
   1eb7c:	4b12      	ldr	r3, [pc, #72]	; (1ebc8 <sys_clock_set_timeout+0x58>)
   1eb7e:	4290      	cmp	r0, r2
   1eb80:	bfd4      	ite	le
   1eb82:	4604      	movle	r4, r0
   1eb84:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1eb86:	f7ff fe99 	bl	1e8bc <z_nrf_rtc_timer_read>
   1eb8a:	4b10      	ldr	r3, [pc, #64]	; (1ebcc <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   1eb8c:	490e      	ldr	r1, [pc, #56]	; (1ebc8 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1eb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1eb92:	1a80      	subs	r0, r0, r2
		cyc = 0;
   1eb94:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1eb98:	bf28      	it	cs
   1eb9a:	2400      	movcs	r4, #0
	cyc += unannounced;
   1eb9c:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1eb9e:	428c      	cmp	r4, r1
   1eba0:	bf28      	it	cs
   1eba2:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   1eba4:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1eba6:	490a      	ldr	r1, [pc, #40]	; (1ebd0 <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
   1eba8:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1ebaa:	9001      	str	r0, [sp, #4]
   1ebac:	9100      	str	r1, [sp, #0]
   1ebae:	f143 0300 	adc.w	r3, r3, #0
   1ebb2:	f7ff fea5 	bl	1e900 <compare_set>
}
   1ebb6:	b002      	add	sp, #8
   1ebb8:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   1ebba:	4c03      	ldr	r4, [pc, #12]	; (1ebc8 <sys_clock_set_timeout+0x58>)
   1ebbc:	e7e3      	b.n	1eb86 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1ebbe:	2401      	movs	r4, #1
   1ebc0:	e7e1      	b.n	1eb86 <sys_clock_set_timeout+0x16>
   1ebc2:	bf00      	nop
   1ebc4:	007ffffe 	.word	0x007ffffe
   1ebc8:	007fffff 	.word	0x007fffff
   1ebcc:	2000ca68 	.word	0x2000ca68
   1ebd0:	0001e829 	.word	0x0001e829

0001ebd4 <sys_clock_elapsed>:
{
   1ebd4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1ebd6:	f7ff fe71 	bl	1e8bc <z_nrf_rtc_timer_read>
   1ebda:	4b02      	ldr	r3, [pc, #8]	; (1ebe4 <sys_clock_elapsed+0x10>)
   1ebdc:	681b      	ldr	r3, [r3, #0]
}
   1ebde:	1ac0      	subs	r0, r0, r3
   1ebe0:	bd08      	pop	{r3, pc}
   1ebe2:	bf00      	nop
   1ebe4:	2000ca68 	.word	0x2000ca68

0001ebe8 <nrf_modem_lib_init>:

	return rc;
}

int nrf_modem_lib_init(void)
{
   1ebe8:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(NRF_MODEM_IPC_IRQ, CONFIG_NRF_MODEM_LIB_IPC_IRQ_PRIO,
   1ebea:	2200      	movs	r2, #0
   1ebec:	2101      	movs	r1, #1
   1ebee:	202a      	movs	r0, #42	; 0x2a
   1ebf0:	f7fc f9e0 	bl	1afb4 <z_arm_irq_priority_set>
	rc = nrf_modem_init(&init_params);
   1ebf4:	4807      	ldr	r0, [pc, #28]	; (1ec14 <nrf_modem_lib_init+0x2c>)
   1ebf6:	f005 fb13 	bl	24220 <nrf_modem_init>
   1ebfa:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   1ebfc:	4c06      	ldr	r4, [pc, #24]	; (1ec18 <nrf_modem_lib_init+0x30>)
   1ebfe:	4e07      	ldr	r6, [pc, #28]	; (1ec1c <nrf_modem_lib_init+0x34>)
   1ec00:	42b4      	cmp	r4, r6
   1ec02:	d301      	bcc.n	1ec08 <nrf_modem_lib_init+0x20>
	return _nrf_modem_lib_init();
}
   1ec04:	4628      	mov	r0, r5
   1ec06:	bd70      	pop	{r4, r5, r6, pc}
		e->callback(rc, e->context);
   1ec08:	e9d4 3100 	ldrd	r3, r1, [r4]
   1ec0c:	4628      	mov	r0, r5
   1ec0e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   1ec10:	3408      	adds	r4, #8
   1ec12:	e7f5      	b.n	1ec00 <nrf_modem_lib_init+0x18>
   1ec14:	0002c464 	.word	0x0002c464
   1ec18:	0002ea9c 	.word	0x0002ea9c
   1ec1c:	0002eab4 	.word	0x0002eab4

0001ec20 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   1ec20:	b5f0      	push	{r4, r5, r6, r7, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   1ec22:	4b0f      	ldr	r3, [pc, #60]	; (1ec60 <thread_monitor_entry_get+0x40>)
{
   1ec24:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
   1ec26:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   1ec28:	4b0e      	ldr	r3, [pc, #56]	; (1ec64 <thread_monitor_entry_get+0x44>)
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1ec2a:	250b      	movs	r5, #11
	int entry_age, oldest_entry_age = 0;
   1ec2c:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   1ec2e:	4618      	mov	r0, r3
   1ec30:	461f      	mov	r7, r3
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1ec32:	42b8      	cmp	r0, r7
   1ec34:	d301      	bcc.n	1ec3a <thread_monitor_entry_get+0x1a>
   1ec36:	3d01      	subs	r5, #1
   1ec38:	d104      	bne.n	1ec44 <thread_monitor_entry_get+0x24>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   1ec3a:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
   1ec3c:	3a01      	subs	r2, #1
	new_entry->id = id;
   1ec3e:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1ec40:	605a      	str	r2, [r3, #4]
}
   1ec42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (entry->id == id) {
   1ec44:	6804      	ldr	r4, [r0, #0]
   1ec46:	428c      	cmp	r4, r1
   1ec48:	d0fb      	beq.n	1ec42 <thread_monitor_entry_get+0x22>
		} else if (entry->id == 0) {
   1ec4a:	b13c      	cbz	r4, 1ec5c <thread_monitor_entry_get+0x3c>
		entry_age = rpc_event_cnt - entry->cnt;
   1ec4c:	6844      	ldr	r4, [r0, #4]
   1ec4e:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
   1ec50:	42a6      	cmp	r6, r4
   1ec52:	bfbc      	itt	lt
   1ec54:	4603      	movlt	r3, r0
   1ec56:	4626      	movlt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1ec58:	3008      	adds	r0, #8
   1ec5a:	e7ea      	b.n	1ec32 <thread_monitor_entry_get+0x12>
   1ec5c:	4603      	mov	r3, r0
   1ec5e:	e7ec      	b.n	1ec3a <thread_monitor_entry_get+0x1a>
   1ec60:	2000d798 	.word	0x2000d798
   1ec64:	2000d7a4 	.word	0x2000d7a4

0001ec68 <on_init>:
	list->head = NULL;
   1ec68:	2000      	movs	r0, #0
   1ec6a:	4b05      	ldr	r3, [pc, #20]	; (1ec80 <on_init+0x18>)
	list->tail = NULL;
   1ec6c:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ec70:	4b04      	ldr	r3, [pc, #16]	; (1ec84 <on_init+0x1c>)
   1ec72:	e8d3 2fef 	ldaex	r2, [r3]
   1ec76:	e8c3 0fe1 	stlex	r1, r0, [r3]
   1ec7a:	2900      	cmp	r1, #0
   1ec7c:	d1f9      	bne.n	1ec72 <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
   1ec7e:	4770      	bx	lr
   1ec80:	2000d79c 	.word	0x2000d79c
   1ec84:	2000d798 	.word	0x2000d798

0001ec88 <nrf_modem_os_timedwait>:
{
   1ec88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ec8c:	b088      	sub	sp, #32
   1ec8e:	4605      	mov	r5, r0
   1ec90:	460e      	mov	r6, r1
	if (!nrf_modem_is_initialized()) {
   1ec92:	f00b fe2e 	bl	2a8f2 <nrf_modem_is_initialized>
   1ec96:	b920      	cbnz	r0, 1eca2 <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
   1ec98:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
   1ec9c:	b008      	add	sp, #32
   1ec9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   1eca2:	f00c f8d4 	bl	2ae4e <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   1eca6:	6833      	ldr	r3, [r6, #0]
   1eca8:	4604      	mov	r4, r0
   1ecaa:	2b00      	cmp	r3, #0
   1ecac:	460f      	mov	r7, r1
   1ecae:	d104      	bne.n	1ecba <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
   1ecb0:	f006 fa44 	bl	2513c <z_impl_k_yield>
		return -NRF_EAGAIN;
   1ecb4:	f06f 000a 	mvn.w	r0, #10
   1ecb8:	e7f0      	b.n	1ec9c <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
   1ecba:	bfbc      	itt	lt
   1ecbc:	f04f 33ff 	movlt.w	r3, #4294967295
   1ecc0:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ecc2:	2201      	movs	r2, #1
   1ecc4:	2100      	movs	r1, #0
   1ecc6:	a801      	add	r0, sp, #4
   1ecc8:	f00b ff5a 	bl	2ab80 <z_impl_k_sem_init>
   1eccc:	46e8      	mov	r8, sp
	thread->context = context;
   1ecce:	9507      	str	r5, [sp, #28]
	__asm__ volatile(
   1ecd0:	f04f 0320 	mov.w	r3, #32
   1ecd4:	f3ef 8a11 	mrs	sl, BASEPRI
   1ecd8:	f383 8812 	msr	BASEPRI_MAX, r3
   1ecdc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1ece0:	f006 fac8 	bl	25274 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1ece4:	f7ff ff9c 	bl	1ec20 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1ece8:	f8df 9118 	ldr.w	r9, [pc, #280]	; 1ee04 <nrf_modem_os_timedwait+0x17c>
   1ecec:	6842      	ldr	r2, [r0, #4]
   1ecee:	f8d9 3000 	ldr.w	r3, [r9]
   1ecf2:	429a      	cmp	r2, r3
   1ecf4:	d16d      	bne.n	1edd2 <nrf_modem_os_timedwait+0x14a>
	parent->next = child;
   1ecf6:	2300      	movs	r3, #0
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   1ecf8:	4d43      	ldr	r5, [pc, #268]	; (1ee08 <nrf_modem_os_timedwait+0x180>)
	parent->next = child;
   1ecfa:	9300      	str	r3, [sp, #0]
	return list->tail;
   1ecfc:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1ecfe:	2b00      	cmp	r3, #0
   1ed00:	d16e      	bne.n	1ede0 <nrf_modem_os_timedwait+0x158>
	list->head = node;
   1ed02:	e9c5 8800 	strd	r8, r8, [r5]
	__asm__ volatile(
   1ed06:	f38a 8811 	msr	BASEPRI, sl
   1ed0a:	f3bf 8f6f 	isb	sy
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1ed0e:	6833      	ldr	r3, [r6, #0]
   1ed10:	1c5a      	adds	r2, r3, #1
   1ed12:	d06a      	beq.n	1edea <nrf_modem_os_timedwait+0x162>
   1ed14:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   1ed18:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ed1c:	2100      	movs	r1, #0
   1ed1e:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   1ed22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ed26:	2300      	movs	r3, #0
   1ed28:	fbcc 010e 	smlal	r0, r1, ip, lr
   1ed2c:	f7fa f83c 	bl	18da8 <__aeabi_uldivmod>
   1ed30:	4602      	mov	r2, r0
   1ed32:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1ed34:	a801      	add	r0, sp, #4
   1ed36:	f005 fe43 	bl	249c0 <z_impl_k_sem_take>
	__asm__ volatile(
   1ed3a:	f04f 0320 	mov.w	r3, #32
   1ed3e:	f3ef 8a11 	mrs	sl, BASEPRI
   1ed42:	f383 8812 	msr	BASEPRI_MAX, r3
   1ed46:	f3bf 8f6f 	isb	sy
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ed4a:	2200      	movs	r2, #0
	return list->head;
   1ed4c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ed4e:	b15b      	cbz	r3, 1ed68 <nrf_modem_os_timedwait+0xe0>
   1ed50:	4543      	cmp	r3, r8
   1ed52:	d154      	bne.n	1edfe <nrf_modem_os_timedwait+0x176>
	return node->next;
   1ed54:	9900      	ldr	r1, [sp, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ed56:	2a00      	cmp	r2, #0
   1ed58:	d14b      	bne.n	1edf2 <nrf_modem_os_timedwait+0x16a>
   1ed5a:	686a      	ldr	r2, [r5, #4]
	list->head = node;
   1ed5c:	6029      	str	r1, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ed5e:	429a      	cmp	r2, r3
   1ed60:	d100      	bne.n	1ed64 <nrf_modem_os_timedwait+0xdc>
	list->tail = node;
   1ed62:	6069      	str	r1, [r5, #4]
	parent->next = child;
   1ed64:	2300      	movs	r3, #0
   1ed66:	9300      	str	r3, [sp, #0]
	return z_impl_z_current_get();
   1ed68:	f006 fa84 	bl	25274 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1ed6c:	f7ff ff58 	bl	1ec20 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1ed70:	f8d9 3000 	ldr.w	r3, [r9]
   1ed74:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1ed76:	f38a 8811 	msr	BASEPRI, sl
   1ed7a:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
   1ed7e:	f00b fdb8 	bl	2a8f2 <nrf_modem_is_initialized>
   1ed82:	2800      	cmp	r0, #0
   1ed84:	d088      	beq.n	1ec98 <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
   1ed86:	6835      	ldr	r5, [r6, #0]
   1ed88:	1c6b      	adds	r3, r5, #1
   1ed8a:	d027      	beq.n	1eddc <nrf_modem_os_timedwait+0x154>
	return z_impl_k_uptime_ticks();
   1ed8c:	f00c f85f 	bl	2ae4e <z_impl_k_uptime_ticks>
   1ed90:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   1ed94:	fba0 320e 	umull	r3, r2, r0, lr
   1ed98:	fb0e 2101 	mla	r1, lr, r1, r2
   1ed9c:	fba4 420e 	umull	r4, r2, r4, lr
   1eda0:	fb0e 2207 	mla	r2, lr, r7, r2
   1eda4:	0bdb      	lsrs	r3, r3, #15
   1eda6:	0be4      	lsrs	r4, r4, #15
   1eda8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1edac:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
	delta = uptime - *reftime;
   1edb0:	1b1b      	subs	r3, r3, r4
   1edb2:	ea4f 31d1 	mov.w	r1, r1, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
   1edb6:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   1edba:	eb61 31d2 	sbc.w	r1, r1, r2, lsr #15
   1edbe:	1aed      	subs	r5, r5, r3
   1edc0:	eb6c 0c01 	sbc.w	ip, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
   1edc4:	f1bc 0f00 	cmp.w	ip, #0
   1edc8:	bfb8      	it	lt
   1edca:	2500      	movlt	r5, #0
   1edcc:	6035      	str	r5, [r6, #0]
	if (*timeout == 0) {
   1edce:	b92d      	cbnz	r5, 1eddc <nrf_modem_os_timedwait+0x154>
   1edd0:	e770      	b.n	1ecb4 <nrf_modem_os_timedwait+0x2c>
	entry->cnt = rpc_event_cnt;
   1edd2:	6043      	str	r3, [r0, #4]
   1edd4:	f38a 8811 	msr	BASEPRI, sl
   1edd8:	f3bf 8f6f 	isb	sy
		return 0;
   1eddc:	2000      	movs	r0, #0
   1edde:	e75d      	b.n	1ec9c <nrf_modem_os_timedwait+0x14>
   1ede0:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
   1ede4:	f8c5 8004 	str.w	r8, [r5, #4]
   1ede8:	e78d      	b.n	1ed06 <nrf_modem_os_timedwait+0x7e>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1edea:	f04f 32ff 	mov.w	r2, #4294967295
   1edee:	4613      	mov	r3, r2
   1edf0:	e7a0      	b.n	1ed34 <nrf_modem_os_timedwait+0xac>
	parent->next = child;
   1edf2:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1edf4:	6869      	ldr	r1, [r5, #4]
   1edf6:	4299      	cmp	r1, r3
	list->tail = node;
   1edf8:	bf08      	it	eq
   1edfa:	606a      	streq	r2, [r5, #4]
}
   1edfc:	e7b2      	b.n	1ed64 <nrf_modem_os_timedwait+0xdc>
	return node->next;
   1edfe:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ee00:	681b      	ldr	r3, [r3, #0]
   1ee02:	e7a4      	b.n	1ed4e <nrf_modem_os_timedwait+0xc6>
   1ee04:	2000d798 	.word	0x2000d798
   1ee08:	2000d79c 	.word	0x2000d79c

0001ee0c <nrf_modem_os_sem_init>:
{
   1ee0c:	b470      	push	{r4, r5, r6}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   1ee0e:	6804      	ldr	r4, [r0, #0]
   1ee10:	4b0a      	ldr	r3, [pc, #40]	; (1ee3c <nrf_modem_os_sem_init+0x30>)
   1ee12:	b12c      	cbz	r4, 1ee20 <nrf_modem_os_sem_init+0x14>
   1ee14:	429c      	cmp	r4, r3
   1ee16:	d303      	bcc.n	1ee20 <nrf_modem_os_sem_init+0x14>
   1ee18:	f103 05a8 	add.w	r5, r3, #168	; 0xa8
   1ee1c:	42ac      	cmp	r4, r5
   1ee1e:	d308      	bcc.n	1ee32 <nrf_modem_os_sem_init+0x26>
	*sem = &nrf_modem_os_sems[used++];
   1ee20:	4d07      	ldr	r5, [pc, #28]	; (1ee40 <nrf_modem_os_sem_init+0x34>)
   1ee22:	782c      	ldrb	r4, [r5, #0]
   1ee24:	1c66      	adds	r6, r4, #1
   1ee26:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1ee2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1ee2e:	702e      	strb	r6, [r5, #0]
   1ee30:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   1ee32:	6800      	ldr	r0, [r0, #0]
}
   1ee34:	bc70      	pop	{r4, r5, r6}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ee36:	f00b bea3 	b.w	2ab80 <z_impl_k_sem_init>
   1ee3a:	bf00      	nop
   1ee3c:	2000d6f0 	.word	0x2000d6f0
   1ee40:	2000e5b7 	.word	0x2000e5b7

0001ee44 <nrf_modem_os_event_notify>:
{
   1ee44:	b538      	push	{r3, r4, r5, lr}
   1ee46:	4605      	mov	r5, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ee48:	4b0a      	ldr	r3, [pc, #40]	; (1ee74 <nrf_modem_os_event_notify+0x30>)
   1ee4a:	e8d3 1fef 	ldaex	r1, [r3]
   1ee4e:	3101      	adds	r1, #1
   1ee50:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1ee54:	2a00      	cmp	r2, #0
   1ee56:	d1f8      	bne.n	1ee4a <nrf_modem_os_event_notify+0x6>
	return list->head;
   1ee58:	4b07      	ldr	r3, [pc, #28]	; (1ee78 <nrf_modem_os_event_notify+0x34>)
   1ee5a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1ee5c:	b904      	cbnz	r4, 1ee60 <nrf_modem_os_event_notify+0x1c>
}
   1ee5e:	bd38      	pop	{r3, r4, r5, pc}
		if ((thread->context == context) || (context == 0)) {
   1ee60:	69e3      	ldr	r3, [r4, #28]
   1ee62:	42ab      	cmp	r3, r5
   1ee64:	d000      	beq.n	1ee68 <nrf_modem_os_event_notify+0x24>
   1ee66:	b915      	cbnz	r5, 1ee6e <nrf_modem_os_event_notify+0x2a>
	z_impl_k_sem_give(sem);
   1ee68:	1d20      	adds	r0, r4, #4
   1ee6a:	f005 fd83 	bl	24974 <z_impl_k_sem_give>
	return node->next;
   1ee6e:	6824      	ldr	r4, [r4, #0]
   1ee70:	e7f4      	b.n	1ee5c <nrf_modem_os_event_notify+0x18>
   1ee72:	bf00      	nop
   1ee74:	2000d798 	.word	0x2000d798
   1ee78:	2000d79c 	.word	0x2000d79c

0001ee7c <nrf_modem_os_alloc>:
{
   1ee7c:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
   1ee7e:	2200      	movs	r2, #0
   1ee80:	2300      	movs	r3, #0
   1ee82:	4801      	ldr	r0, [pc, #4]	; (1ee88 <nrf_modem_os_alloc+0xc>)
   1ee84:	f00b bdb7 	b.w	2a9f6 <k_heap_alloc>
   1ee88:	2000d7f4 	.word	0x2000d7f4

0001ee8c <nrf_modem_os_free>:
{
   1ee8c:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
   1ee8e:	4801      	ldr	r0, [pc, #4]	; (1ee94 <nrf_modem_os_free+0x8>)
   1ee90:	f00b bdbb 	b.w	2aa0a <k_heap_free>
   1ee94:	2000d7f4 	.word	0x2000d7f4

0001ee98 <nrf_modem_os_shm_tx_alloc>:
{
   1ee98:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
   1ee9a:	2200      	movs	r2, #0
   1ee9c:	2300      	movs	r3, #0
   1ee9e:	4801      	ldr	r0, [pc, #4]	; (1eea4 <nrf_modem_os_shm_tx_alloc+0xc>)
   1eea0:	f00b bda9 	b.w	2a9f6 <k_heap_alloc>
   1eea4:	2000d808 	.word	0x2000d808

0001eea8 <nrf_modem_os_shm_tx_free>:
{
   1eea8:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
   1eeaa:	4801      	ldr	r0, [pc, #4]	; (1eeb0 <nrf_modem_os_shm_tx_free+0x8>)
   1eeac:	f00b bdad 	b.w	2aa0a <k_heap_free>
   1eeb0:	2000d808 	.word	0x2000d808

0001eeb4 <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
   1eeb4:	b508      	push	{r3, lr}
	/* Initialize heaps */
	k_heap_init(&nrf_modem_lib_heap, library_heap_buf, sizeof(library_heap_buf));
   1eeb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1eeba:	4906      	ldr	r1, [pc, #24]	; (1eed4 <nrf_modem_os_init+0x20>)
   1eebc:	4806      	ldr	r0, [pc, #24]	; (1eed8 <nrf_modem_os_init+0x24>)
   1eebe:	f00b fd45 	bl	2a94c <k_heap_init>
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
		    CONFIG_NRF_MODEM_LIB_SHMEM_TX_SIZE);
}
   1eec2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
   1eec6:	f44f 5202 	mov.w	r2, #8320	; 0x2080
   1eeca:	4904      	ldr	r1, [pc, #16]	; (1eedc <nrf_modem_os_init+0x28>)
   1eecc:	4804      	ldr	r0, [pc, #16]	; (1eee0 <nrf_modem_os_init+0x2c>)
   1eece:	f00b bd3d 	b.w	2a94c <k_heap_init>
   1eed2:	bf00      	nop
   1eed4:	2000e5b8 	.word	0x2000e5b8
   1eed8:	2000d7f4 	.word	0x2000d7f4
   1eedc:	200084e8 	.word	0x200084e8
   1eee0:	2000d808 	.word	0x2000d808

0001eee4 <nrf_modem_os_shutdown>:

void nrf_modem_os_shutdown(void)
{
   1eee4:	b510      	push	{r4, lr}
	return list->head;
   1eee6:	4b04      	ldr	r3, [pc, #16]	; (1eef8 <nrf_modem_os_shutdown+0x14>)
   1eee8:	681c      	ldr	r4, [r3, #0]
	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1eeea:	b904      	cbnz	r4, 1eeee <nrf_modem_os_shutdown+0xa>
		k_sem_give(&thread->sem);
	}
}
   1eeec:	bd10      	pop	{r4, pc}
   1eeee:	1d20      	adds	r0, r4, #4
   1eef0:	f005 fd40 	bl	24974 <z_impl_k_sem_give>
	return node->next;
   1eef4:	6824      	ldr	r4, [r4, #0]
   1eef6:	e7f8      	b.n	1eeea <nrf_modem_os_shutdown+0x6>
   1eef8:	2000d79c 	.word	0x2000d79c

0001eefc <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   1eefc:	2801      	cmp	r0, #1
   1eefe:	d01e      	beq.n	1ef3e <z_to_nrf_optname+0x42>
   1ef00:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   1ef04:	d123      	bne.n	1ef4e <z_to_nrf_optname+0x52>
	case SOL_TLS:
		switch (z_in_optname) {
   1ef06:	1e4b      	subs	r3, r1, #1
   1ef08:	2b14      	cmp	r3, #20
   1ef0a:	d820      	bhi.n	1ef4e <z_to_nrf_optname+0x52>
   1ef0c:	e8df f003 	tbb	[pc, r3]
   1ef10:	0c0c0c0c 	.word	0x0c0c0c0c
   1ef14:	1f1f0c0c 	.word	0x1f1f0c0c
   1ef18:	0c1f1f1f 	.word	0x0c1f1f1f
   1ef1c:	1f1f0c0c 	.word	0x1f1f0c0c
   1ef20:	13110f0b 	.word	0x13110f0b
   1ef24:	15          	.byte	0x15
   1ef25:	00          	.byte	0x00
		case TLS_CIPHERSUITE_USED:
			*nrf_out_optname = NRF_SO_SEC_CIPHERSUITE_USED;
			break;
		case TLS_DTLS_CID:
			*nrf_out_optname = NRF_SO_SEC_DTLS_CID;
			break;
   1ef26:	210f      	movs	r1, #15
	int retval = 0;
   1ef28:	2000      	movs	r0, #0
		switch (z_in_optname) {
		case SO_ERROR:
			*nrf_out_optname = NRF_SO_ERROR;
			break;
		case SO_RCVTIMEO:
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   1ef2a:	6011      	str	r1, [r2, #0]
   1ef2c:	4770      	bx	lr
			break;
   1ef2e:	2110      	movs	r1, #16
   1ef30:	e7fa      	b.n	1ef28 <z_to_nrf_optname+0x2c>
			break;
   1ef32:	2111      	movs	r1, #17
   1ef34:	e7f8      	b.n	1ef28 <z_to_nrf_optname+0x2c>
			break;
   1ef36:	2112      	movs	r1, #18
   1ef38:	e7f6      	b.n	1ef28 <z_to_nrf_optname+0x2c>
			break;
   1ef3a:	2113      	movs	r1, #19
   1ef3c:	e7f4      	b.n	1ef28 <z_to_nrf_optname+0x2c>
		switch (z_in_optname) {
   1ef3e:	2937      	cmp	r1, #55	; 0x37
   1ef40:	dc05      	bgt.n	1ef4e <z_to_nrf_optname+0x52>
   1ef42:	2913      	cmp	r1, #19
   1ef44:	dc06      	bgt.n	1ef54 <z_to_nrf_optname+0x58>
   1ef46:	2902      	cmp	r1, #2
   1ef48:	d0ee      	beq.n	1ef28 <z_to_nrf_optname+0x2c>
   1ef4a:	2904      	cmp	r1, #4
   1ef4c:	d0ec      	beq.n	1ef28 <z_to_nrf_optname+0x2c>
   1ef4e:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   1ef52:	4770      	bx	lr
   1ef54:	f1a1 0314 	sub.w	r3, r1, #20
   1ef58:	2b23      	cmp	r3, #35	; 0x23
   1ef5a:	d8f8      	bhi.n	1ef4e <z_to_nrf_optname+0x52>
   1ef5c:	a001      	add	r0, pc, #4	; (adr r0, 1ef64 <z_to_nrf_optname+0x68>)
   1ef5e:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1ef62:	bf00      	nop
   1ef64:	0001ef29 	.word	0x0001ef29
   1ef68:	0001ef29 	.word	0x0001ef29
   1ef6c:	0001ef4f 	.word	0x0001ef4f
   1ef70:	0001ef4f 	.word	0x0001ef4f
   1ef74:	0001ef4f 	.word	0x0001ef4f
   1ef78:	0001ef29 	.word	0x0001ef29
   1ef7c:	0001ef4f 	.word	0x0001ef4f
   1ef80:	0001ef4f 	.word	0x0001ef4f
   1ef84:	0001ef4f 	.word	0x0001ef4f
   1ef88:	0001ef4f 	.word	0x0001ef4f
   1ef8c:	0001ef29 	.word	0x0001ef29
   1ef90:	0001ef29 	.word	0x0001ef29
   1ef94:	0001ef29 	.word	0x0001ef29
   1ef98:	0001ef4f 	.word	0x0001ef4f
   1ef9c:	0001ef4f 	.word	0x0001ef4f
   1efa0:	0001ef4f 	.word	0x0001ef4f
   1efa4:	0001ef4f 	.word	0x0001ef4f
   1efa8:	0001ef4f 	.word	0x0001ef4f
   1efac:	0001ef4f 	.word	0x0001ef4f
   1efb0:	0001ef4f 	.word	0x0001ef4f
   1efb4:	0001ef4f 	.word	0x0001ef4f
   1efb8:	0001ef4f 	.word	0x0001ef4f
   1efbc:	0001ef4f 	.word	0x0001ef4f
   1efc0:	0001ef4f 	.word	0x0001ef4f
   1efc4:	0001ef4f 	.word	0x0001ef4f
   1efc8:	0001ef4f 	.word	0x0001ef4f
   1efcc:	0001ef4f 	.word	0x0001ef4f
   1efd0:	0001ef4f 	.word	0x0001ef4f
   1efd4:	0001ef4f 	.word	0x0001ef4f
   1efd8:	0001ef4f 	.word	0x0001ef4f
   1efdc:	0001ef29 	.word	0x0001ef29
   1efe0:	0001ef29 	.word	0x0001ef29
   1efe4:	0001ef29 	.word	0x0001ef29
   1efe8:	0001ef29 	.word	0x0001ef29
   1efec:	0001ef29 	.word	0x0001ef29
   1eff0:	0001ef29 	.word	0x0001ef29

0001eff4 <nrf91_socket_offload_init>:
static int nrf91_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   1eff4:	f04f 32ff 	mov.w	r2, #4294967295
   1eff8:	4b06      	ldr	r3, [pc, #24]	; (1f014 <nrf91_socket_offload_init+0x20>)
	}

	return 0;
}
   1effa:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   1effc:	601a      	str	r2, [r3, #0]
   1effe:	619a      	str	r2, [r3, #24]
   1f000:	631a      	str	r2, [r3, #48]	; 0x30
   1f002:	649a      	str	r2, [r3, #72]	; 0x48
   1f004:	661a      	str	r2, [r3, #96]	; 0x60
   1f006:	679a      	str	r2, [r3, #120]	; 0x78
   1f008:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   1f00c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
   1f010:	4770      	bx	lr
   1f012:	bf00      	nop
   1f014:	2000d820 	.word	0x2000d820

0001f018 <nrf91_socket_is_supported>:
	if (offload_disabled) {
   1f018:	490b      	ldr	r1, [pc, #44]	; (1f048 <nrf91_socket_is_supported+0x30>)
{
   1f01a:	4603      	mov	r3, r0
	if (offload_disabled) {
   1f01c:	7808      	ldrb	r0, [r1, #0]
   1f01e:	b980      	cbnz	r0, 1f042 <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   1f020:	490a      	ldr	r1, [pc, #40]	; (1f04c <nrf91_socket_is_supported+0x34>)
   1f022:	7809      	ldrb	r1, [r1, #0]
   1f024:	b139      	cbz	r1, 1f036 <nrf91_socket_is_supported+0x1e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1f026:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
   1f02a:	2902      	cmp	r1, #2
   1f02c:	d90a      	bls.n	1f044 <nrf91_socket_is_supported+0x2c>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   1f02e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1f032:	2a01      	cmp	r2, #1
   1f034:	d906      	bls.n	1f044 <nrf91_socket_is_supported+0x2c>
	return (family == AF_PACKET) || (family == AF_INET) || (family == AF_INET6);
   1f036:	3b01      	subs	r3, #1
   1f038:	2b02      	cmp	r3, #2
   1f03a:	bf8c      	ite	hi
   1f03c:	2000      	movhi	r0, #0
   1f03e:	2001      	movls	r0, #1
	return af_is_supported(family);
   1f040:	4770      	bx	lr
		return false;
   1f042:	2000      	movs	r0, #0
}
   1f044:	4770      	bx	lr
   1f046:	bf00      	nop
   1f048:	2000ea39 	.word	0x2000ea39
   1f04c:	2000ea38 	.word	0x2000ea38

0001f050 <pollcb>:
{
   1f050:	b470      	push	{r4, r5, r6}
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1f052:	2300      	movs	r3, #0
   1f054:	2518      	movs	r5, #24
	ctx = find_ctx(pollfd->fd);
   1f056:	6801      	ldr	r1, [r0, #0]
		if (offload_ctx[i].nrf_fd == fd) {
   1f058:	4c08      	ldr	r4, [pc, #32]	; (1f07c <pollcb+0x2c>)
   1f05a:	fb05 f203 	mul.w	r2, r5, r3
   1f05e:	58a6      	ldr	r6, [r4, r2]
   1f060:	42b1      	cmp	r1, r6
   1f062:	d106      	bne.n	1f072 <pollcb+0x22>
	k_poll_signal_raise(&ctx->poll, pollfd->revents);
   1f064:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
   1f068:	3208      	adds	r2, #8
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1f06a:	18a0      	adds	r0, r4, r2
}
   1f06c:	bc70      	pop	{r4, r5, r6}
   1f06e:	f006 bb2f 	b.w	256d0 <z_impl_k_poll_signal_raise>
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1f072:	3301      	adds	r3, #1
   1f074:	2b08      	cmp	r3, #8
   1f076:	d1f0      	bne.n	1f05a <pollcb+0xa>
}
   1f078:	bc70      	pop	{r4, r5, r6}
   1f07a:	4770      	bx	lr
   1f07c:	2000d820 	.word	0x2000d820

0001f080 <nrf91_socket_offload_getaddrinfo>:
{
   1f080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f084:	4614      	mov	r4, r2
   1f086:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1f088:	2100      	movs	r1, #0
{
   1f08a:	b08b      	sub	sp, #44	; 0x2c
   1f08c:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1f08e:	2220      	movs	r2, #32
   1f090:	a802      	add	r0, sp, #8
{
   1f092:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1f094:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1f096:	f00c f8b5 	bl	2b204 <memset>
	if (hints != NULL) {
   1f09a:	b15c      	cbz	r4, 1f0b4 <nrf91_socket_offload_getaddrinfo+0x34>
	nrf_out->ai_flags = z_in->ai_flags;
   1f09c:	6863      	ldr	r3, [r4, #4]
   1f09e:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_in->ai_socktype;
   1f0a0:	68e3      	ldr	r3, [r4, #12]
   1f0a2:	9304      	str	r3, [sp, #16]
	nrf_out->ai_family = z_in->ai_family;
   1f0a4:	68a3      	ldr	r3, [r4, #8]
   1f0a6:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_in->ai_protocol;
   1f0a8:	6923      	ldr	r3, [r4, #16]
   1f0aa:	9305      	str	r3, [sp, #20]
	if (z_in->ai_canonname != NULL) {
   1f0ac:	69e3      	ldr	r3, [r4, #28]
   1f0ae:	b103      	cbz	r3, 1f0b2 <nrf91_socket_offload_getaddrinfo+0x32>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1f0b0:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   1f0b2:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   1f0b4:	f04f 32ff 	mov.w	r2, #4294967295
   1f0b8:	f04f 33ff 	mov.w	r3, #4294967295
   1f0bc:	4834      	ldr	r0, [pc, #208]	; (1f190 <nrf91_socket_offload_getaddrinfo+0x110>)
   1f0be:	f00a f9b7 	bl	29430 <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1f0c2:	4631      	mov	r1, r6
   1f0c4:	4622      	mov	r2, r4
   1f0c6:	4628      	mov	r0, r5
   1f0c8:	ab01      	add	r3, sp, #4
   1f0ca:	f004 f8d1 	bl	23270 <nrf_getaddrinfo>
	if (retval != 0) {
   1f0ce:	4606      	mov	r6, r0
   1f0d0:	b948      	cbnz	r0, 1f0e6 <nrf91_socket_offload_getaddrinfo+0x66>
	struct zsock_addrinfo *latest_z_res = NULL;
   1f0d2:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   1f0d4:	4681      	mov	r9, r0
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1f0d6:	f04f 0a18 	mov.w	sl, #24
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1f0da:	9d01      	ldr	r5, [sp, #4]
	*res = NULL;
   1f0dc:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1f0de:	b94d      	cbnz	r5, 1f0f4 <nrf91_socket_offload_getaddrinfo+0x74>
	nrf_freeaddrinfo(nrf_res);
   1f0e0:	9801      	ldr	r0, [sp, #4]
   1f0e2:	f00a ff80 	bl	29fe6 <nrf_freeaddrinfo>
	k_mutex_unlock(&getaddrinfo_lock);
   1f0e6:	482a      	ldr	r0, [pc, #168]	; (1f190 <nrf91_socket_offload_getaddrinfo+0x110>)
   1f0e8:	f00a f9a4 	bl	29434 <k_mutex_unlock.isra.0>
}
   1f0ec:	4630      	mov	r0, r6
   1f0ee:	b00b      	add	sp, #44	; 0x2c
   1f0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					k_malloc(sizeof(struct zsock_addrinfo));
   1f0f4:	2050      	movs	r0, #80	; 0x50
   1f0f6:	f00c f844 	bl	2b182 <k_malloc>
		if (next_z_res == NULL) {
   1f0fa:	4604      	mov	r4, r0
   1f0fc:	2800      	cmp	r0, #0
   1f0fe:	d040      	beq.n	1f182 <nrf91_socket_offload_getaddrinfo+0x102>
	z_out->ai_next = NULL;
   1f100:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1f104:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_in->ai_flags;
   1f108:	682b      	ldr	r3, [r5, #0]
   1f10a:	6043      	str	r3, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1f10c:	68ab      	ldr	r3, [r5, #8]
   1f10e:	60c3      	str	r3, [r0, #12]
	z_out->ai_family = nrf_in->ai_family;
   1f110:	686b      	ldr	r3, [r5, #4]
   1f112:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_in->ai_protocol;
   1f114:	68eb      	ldr	r3, [r5, #12]
   1f116:	6103      	str	r3, [r0, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1f118:	f8d5 b004 	ldr.w	fp, [r5, #4]
   1f11c:	f1bb 0f01 	cmp.w	fp, #1
   1f120:	d114      	bne.n	1f14c <nrf91_socket_offload_getaddrinfo+0xcc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1f122:	2008      	movs	r0, #8
   1f124:	f00c f82d 	bl	2b182 <k_malloc>
   1f128:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1f12a:	b338      	cbz	r0, 1f17c <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1f12c:	2308      	movs	r3, #8
   1f12e:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1f130:	696b      	ldr	r3, [r5, #20]
	ptr->sin_port = nrf_in->sin_port;
   1f132:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_family = AF_INET;
   1f134:	f8a0 b000 	strh.w	fp, [r0]
	ptr->sin_port = nrf_in->sin_port;
   1f138:	8042      	strh	r2, [r0, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1f13a:	68db      	ldr	r3, [r3, #12]
   1f13c:	6043      	str	r3, [r0, #4]
		if (latest_z_res == NULL) {
   1f13e:	f1b8 0f00 	cmp.w	r8, #0
   1f142:	d121      	bne.n	1f188 <nrf91_socket_offload_getaddrinfo+0x108>
			*res = next_z_res;
   1f144:	603c      	str	r4, [r7, #0]
					k_malloc(sizeof(struct zsock_addrinfo));
   1f146:	46a0      	mov	r8, r4
		next_nrf_res = next_nrf_res->ai_next;
   1f148:	69ed      	ldr	r5, [r5, #28]
   1f14a:	e7c8      	b.n	1f0de <nrf91_socket_offload_getaddrinfo+0x5e>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1f14c:	f1bb 0f02 	cmp.w	fp, #2
   1f150:	d009      	beq.n	1f166 <nrf91_socket_offload_getaddrinfo+0xe6>
			k_free(next_z_res);
   1f152:	f00c f80f 	bl	2b174 <k_free>
			retval = DNS_EAI_FAMILY;
   1f156:	f06f 0605 	mvn.w	r6, #5
		nrf91_socket_offload_freeaddrinfo(*res);
   1f15a:	6838      	ldr	r0, [r7, #0]
   1f15c:	f00a f89d 	bl	2929a <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1f160:	2300      	movs	r3, #0
   1f162:	603b      	str	r3, [r7, #0]
   1f164:	e7bc      	b.n	1f0e0 <nrf91_socket_offload_getaddrinfo+0x60>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1f166:	2018      	movs	r0, #24
   1f168:	f00c f80b 	bl	2b182 <k_malloc>
   1f16c:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1f16e:	b128      	cbz	r0, 1f17c <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1f170:	f8c4 a014 	str.w	sl, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   1f174:	6969      	ldr	r1, [r5, #20]
   1f176:	f00a f89d 	bl	292b4 <nrf_to_z_ipv6>
		if (err == -ENOMEM) {
   1f17a:	e7e0      	b.n	1f13e <nrf91_socket_offload_getaddrinfo+0xbe>
			k_free(next_z_res);
   1f17c:	4620      	mov	r0, r4
   1f17e:	f00b fff9 	bl	2b174 <k_free>
					k_malloc(sizeof(struct zsock_addrinfo));
   1f182:	f06f 0609 	mvn.w	r6, #9
   1f186:	e7e8      	b.n	1f15a <nrf91_socket_offload_getaddrinfo+0xda>
			latest_z_res->ai_next = next_z_res;
   1f188:	f8c8 4000 	str.w	r4, [r8]
   1f18c:	e7db      	b.n	1f146 <nrf91_socket_offload_getaddrinfo+0xc6>
   1f18e:	bf00      	nop
   1f190:	2000c8c0 	.word	0x2000c8c0

0001f194 <nrf91_socket_offload_sendmsg>:
{
   1f194:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1f198:	4607      	mov	r7, r0
   1f19a:	4690      	mov	r8, r2
	if (msg == NULL) {
   1f19c:	460c      	mov	r4, r1
   1f19e:	b379      	cbz	r1, 1f200 <nrf91_socket_offload_sendmsg+0x6c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1f1a0:	2300      	movs	r3, #0
	ssize_t len = 0;
   1f1a2:	461a      	mov	r2, r3
   1f1a4:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1f1a6:	4283      	cmp	r3, r0
   1f1a8:	d134      	bne.n	1f214 <nrf91_socket_offload_sendmsg+0x80>
	if (len <= sizeof(buf)) {
   1f1aa:	2a80      	cmp	r2, #128	; 0x80
   1f1ac:	d871      	bhi.n	1f292 <nrf91_socket_offload_sendmsg+0xfe>
		for (i = 0; i < msg->msg_iovlen; i++) {
   1f1ae:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   1f1b0:	f04f 32ff 	mov.w	r2, #4294967295
   1f1b4:	f04f 33ff 	mov.w	r3, #4294967295
   1f1b8:	4838      	ldr	r0, [pc, #224]	; (1f29c <nrf91_socket_offload_sendmsg+0x108>)
   1f1ba:	f00a f939 	bl	29430 <k_mutex_lock.constprop.0.isra.0>
		len = 0;
   1f1be:	46a9      	mov	r9, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1f1c0:	4e37      	ldr	r6, [pc, #220]	; (1f2a0 <nrf91_socket_offload_sendmsg+0x10c>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   1f1c2:	68e3      	ldr	r3, [r4, #12]
   1f1c4:	429d      	cmp	r5, r3
   1f1c6:	d32c      	bcc.n	1f222 <nrf91_socket_offload_sendmsg+0x8e>
		offset = 0;
   1f1c8:	2600      	movs	r6, #0
		ret = 0;
   1f1ca:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   1f1cc:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1f2a0 <nrf91_socket_offload_sendmsg+0x10c>
		while ((offset < len) && (ret >= 0)) {
   1f1d0:	45b1      	cmp	r9, r6
   1f1d2:	dd11      	ble.n	1f1f8 <nrf91_socket_offload_sendmsg+0x64>
   1f1d4:	b985      	cbnz	r5, 1f1f8 <nrf91_socket_offload_sendmsg+0x64>
			ret = nrf91_socket_offload_sendto(obj,
   1f1d6:	6863      	ldr	r3, [r4, #4]
   1f1d8:	4638      	mov	r0, r7
   1f1da:	9301      	str	r3, [sp, #4]
   1f1dc:	6823      	ldr	r3, [r4, #0]
   1f1de:	eba9 0206 	sub.w	r2, r9, r6
   1f1e2:	9300      	str	r3, [sp, #0]
   1f1e4:	eb0a 0106 	add.w	r1, sl, r6
   1f1e8:	4643      	mov	r3, r8
   1f1ea:	f00a f890 	bl	2930e <nrf91_socket_offload_sendto>
			if (ret > 0) {
   1f1ee:	1e05      	subs	r5, r0, #0
   1f1f0:	ddee      	ble.n	1f1d0 <nrf91_socket_offload_sendmsg+0x3c>
				offset += ret;
   1f1f2:	442e      	add	r6, r5
		while ((offset < len) && (ret >= 0)) {
   1f1f4:	45b1      	cmp	r9, r6
   1f1f6:	dcee      	bgt.n	1f1d6 <nrf91_socket_offload_sendmsg+0x42>
		k_mutex_unlock(&sendmsg_lock);
   1f1f8:	4828      	ldr	r0, [pc, #160]	; (1f29c <nrf91_socket_offload_sendmsg+0x108>)
   1f1fa:	f00a f91b 	bl	29434 <k_mutex_unlock.isra.0>
		return ret;
   1f1fe:	e005      	b.n	1f20c <nrf91_socket_offload_sendmsg+0x78>
		errno = EINVAL;
   1f200:	f008 fd1e 	bl	27c40 <__errno>
   1f204:	2316      	movs	r3, #22
		return -1;
   1f206:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   1f20a:	6003      	str	r3, [r0, #0]
}
   1f20c:	4628      	mov	r0, r5
   1f20e:	b002      	add	sp, #8
   1f210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   1f214:	68a1      	ldr	r1, [r4, #8]
   1f216:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1f21a:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1f21c:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   1f21e:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   1f220:	e7c1      	b.n	1f1a6 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1f222:	68a3      	ldr	r3, [r4, #8]
   1f224:	eb06 0009 	add.w	r0, r6, r9
   1f228:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
   1f22c:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   1f230:	6852      	ldr	r2, [r2, #4]
   1f232:	f00b ffda 	bl	2b1ea <memcpy>
			len += msg->msg_iov[i].iov_len;
   1f236:	68a3      	ldr	r3, [r4, #8]
   1f238:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   1f23c:	4453      	add	r3, sl
   1f23e:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   1f240:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   1f242:	4499      	add	r9, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   1f244:	e7bd      	b.n	1f1c2 <nrf91_socket_offload_sendmsg+0x2e>
		if (msg->msg_iov[i].iov_len == 0) {
   1f246:	68a3      	ldr	r3, [r4, #8]
   1f248:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   1f24c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1f250:	685b      	ldr	r3, [r3, #4]
   1f252:	b13b      	cbz	r3, 1f264 <nrf91_socket_offload_sendmsg+0xd0>
		offset = 0;
   1f254:	f04f 0900 	mov.w	r9, #0
		while (offset < msg->msg_iov[i].iov_len) {
   1f258:	68a3      	ldr	r3, [r4, #8]
   1f25a:	eb03 020a 	add.w	r2, r3, sl
   1f25e:	6852      	ldr	r2, [r2, #4]
   1f260:	4591      	cmp	r9, r2
   1f262:	d304      	bcc.n	1f26e <nrf91_socket_offload_sendmsg+0xda>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1f264:	3601      	adds	r6, #1
   1f266:	68e3      	ldr	r3, [r4, #12]
   1f268:	429e      	cmp	r6, r3
   1f26a:	d3ec      	bcc.n	1f246 <nrf91_socket_offload_sendmsg+0xb2>
   1f26c:	e7ce      	b.n	1f20c <nrf91_socket_offload_sendmsg+0x78>
			ret = nrf91_socket_offload_sendto(obj,
   1f26e:	f853 100a 	ldr.w	r1, [r3, sl]
   1f272:	6863      	ldr	r3, [r4, #4]
   1f274:	4449      	add	r1, r9
   1f276:	9301      	str	r3, [sp, #4]
   1f278:	6823      	ldr	r3, [r4, #0]
   1f27a:	4638      	mov	r0, r7
   1f27c:	9300      	str	r3, [sp, #0]
   1f27e:	eba2 0209 	sub.w	r2, r2, r9
   1f282:	4643      	mov	r3, r8
   1f284:	f00a f843 	bl	2930e <nrf91_socket_offload_sendto>
			if (ret < 0) {
   1f288:	1e01      	subs	r1, r0, #0
   1f28a:	db05      	blt.n	1f298 <nrf91_socket_offload_sendmsg+0x104>
			offset += ret;
   1f28c:	4489      	add	r9, r1
			len += ret;
   1f28e:	440d      	add	r5, r1
   1f290:	e7e2      	b.n	1f258 <nrf91_socket_offload_sendmsg+0xc4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1f292:	2600      	movs	r6, #0
	len = 0;
   1f294:	4635      	mov	r5, r6
   1f296:	e7e6      	b.n	1f266 <nrf91_socket_offload_sendmsg+0xd2>
			ret = nrf91_socket_offload_sendto(obj,
   1f298:	460d      	mov	r5, r1
   1f29a:	e7b7      	b.n	1f20c <nrf91_socket_offload_sendmsg+0x78>
   1f29c:	2000c910 	.word	0x2000c910
   1f2a0:	2000e9b8 	.word	0x2000e9b8

0001f2a4 <allocate_ctx>:
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1f2a4:	f04f 32ff 	mov.w	r2, #4294967295
   1f2a8:	f04f 33ff 	mov.w	r3, #4294967295
{
   1f2ac:	b570      	push	{r4, r5, r6, lr}
   1f2ae:	4605      	mov	r5, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1f2b0:	480b      	ldr	r0, [pc, #44]	; (1f2e0 <allocate_ctx+0x3c>)
   1f2b2:	f00a f8bd 	bl	29430 <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1f2b6:	2300      	movs	r3, #0
   1f2b8:	2018      	movs	r0, #24
		if (offload_ctx[i].nrf_fd == -1) {
   1f2ba:	4a0a      	ldr	r2, [pc, #40]	; (1f2e4 <allocate_ctx+0x40>)
   1f2bc:	fb00 f103 	mul.w	r1, r0, r3
   1f2c0:	5856      	ldr	r6, [r2, r1]
   1f2c2:	188c      	adds	r4, r1, r2
   1f2c4:	3601      	adds	r6, #1
   1f2c6:	d105      	bne.n	1f2d4 <allocate_ctx+0x30>
			ctx->nrf_fd = nrf_fd;
   1f2c8:	5055      	str	r5, [r2, r1]
	k_mutex_unlock(&ctx_lock);
   1f2ca:	4805      	ldr	r0, [pc, #20]	; (1f2e0 <allocate_ctx+0x3c>)
   1f2cc:	f00a f8b2 	bl	29434 <k_mutex_unlock.isra.0>
}
   1f2d0:	4620      	mov	r0, r4
   1f2d2:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1f2d4:	3301      	adds	r3, #1
   1f2d6:	2b08      	cmp	r3, #8
   1f2d8:	d1f0      	bne.n	1f2bc <allocate_ctx+0x18>
	struct nrf_sock_ctx *ctx = NULL;
   1f2da:	2400      	movs	r4, #0
   1f2dc:	e7f5      	b.n	1f2ca <allocate_ctx+0x26>
   1f2de:	bf00      	nop
   1f2e0:	2000c898 	.word	0x2000c898
   1f2e4:	2000d820 	.word	0x2000d820

0001f2e8 <release_ctx>:
{
   1f2e8:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1f2ea:	4d09      	ldr	r5, [pc, #36]	; (1f310 <release_ctx+0x28>)
{
   1f2ec:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1f2ee:	f04f 32ff 	mov.w	r2, #4294967295
   1f2f2:	4628      	mov	r0, r5
   1f2f4:	f04f 33ff 	mov.w	r3, #4294967295
   1f2f8:	f00a f89a 	bl	29430 <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
   1f2fc:	2300      	movs	r3, #0
   1f2fe:	f04f 32ff 	mov.w	r2, #4294967295
   1f302:	e9c4 2300 	strd	r2, r3, [r4]
	k_mutex_unlock(&ctx_lock);
   1f306:	4628      	mov	r0, r5
}
   1f308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
   1f30c:	f00a b892 	b.w	29434 <k_mutex_unlock.isra.0>
   1f310:	2000c898 	.word	0x2000c898

0001f314 <nrf91_socket_offload_accept>:
{
   1f314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f318:	b08b      	sub	sp, #44	; 0x2c
   1f31a:	4607      	mov	r7, r0
   1f31c:	460c      	mov	r4, r1
   1f31e:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   1f320:	f7fa fb58 	bl	199d4 <z_reserve_fd>
   1f324:	4606      	mov	r6, r0
	if (fd < 0) {
   1f326:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   1f328:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   1f32a:	db1e      	blt.n	1f36a <nrf91_socket_offload_accept+0x56>
	if ((addr != NULL) && (addrlen != NULL)) {
   1f32c:	b304      	cbz	r4, 1f370 <nrf91_socket_offload_accept+0x5c>
   1f32e:	b315      	cbz	r5, 1f376 <nrf91_socket_offload_accept+0x62>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1f330:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   1f332:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1f334:	2b08      	cmp	r3, #8
   1f336:	bf14      	ite	ne
   1f338:	2324      	movne	r3, #36	; 0x24
   1f33a:	2310      	moveq	r3, #16
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1f33c:	f10d 0904 	add.w	r9, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   1f340:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   1f342:	4649      	mov	r1, r9
   1f344:	f00a ffcf 	bl	2a2e6 <nrf_accept>
	if (new_sd < 0) {
   1f348:	f1b0 0800 	subs.w	r8, r0, #0
   1f34c:	db0a      	blt.n	1f364 <nrf91_socket_offload_accept+0x50>
	ctx = allocate_ctx(new_sd);
   1f34e:	f7ff ffa9 	bl	1f2a4 <allocate_ctx>
	if (ctx == NULL) {
   1f352:	4607      	mov	r7, r0
   1f354:	b990      	cbnz	r0, 1f37c <nrf91_socket_offload_accept+0x68>
		errno = ENOMEM;
   1f356:	f008 fc73 	bl	27c40 <__errno>
   1f35a:	230c      	movs	r3, #12
   1f35c:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   1f35e:	4640      	mov	r0, r8
   1f360:	f004 fa2e 	bl	237c0 <nrf_close>
	z_free_fd(fd);
   1f364:	4630      	mov	r0, r6
   1f366:	f7fa fb83 	bl	19a70 <z_free_fd>
		return -1;
   1f36a:	f04f 36ff 	mov.w	r6, #4294967295
   1f36e:	e018      	b.n	1f3a2 <nrf91_socket_offload_accept+0x8e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1f370:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1f372:	46a1      	mov	r9, r4
   1f374:	e7e5      	b.n	1f342 <nrf91_socket_offload_accept+0x2e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1f376:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1f378:	46a9      	mov	r9, r5
   1f37a:	e7e2      	b.n	1f342 <nrf91_socket_offload_accept+0x2e>
	if ((addr != NULL) && (addrlen != NULL)) {
   1f37c:	b164      	cbz	r4, 1f398 <nrf91_socket_offload_accept+0x84>
   1f37e:	b15d      	cbz	r5, 1f398 <nrf91_socket_offload_accept+0x84>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   1f380:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1f384:	2b01      	cmp	r3, #1
   1f386:	d110      	bne.n	1f3aa <nrf91_socket_offload_accept+0x96>
			*addrlen = sizeof(struct sockaddr_in);
   1f388:	2208      	movs	r2, #8
   1f38a:	602a      	str	r2, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   1f38c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	ptr->sin_family = AF_INET;
   1f390:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1f392:	9b04      	ldr	r3, [sp, #16]
	ptr->sin_port = nrf_in->sin_port;
   1f394:	8062      	strh	r2, [r4, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1f396:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   1f398:	4639      	mov	r1, r7
   1f39a:	4630      	mov	r0, r6
   1f39c:	4a0d      	ldr	r2, [pc, #52]	; (1f3d4 <nrf91_socket_offload_accept+0xc0>)
   1f39e:	f7fa fb4f 	bl	19a40 <z_finalize_fd>
}
   1f3a2:	4630      	mov	r0, r6
   1f3a4:	b00b      	add	sp, #44	; 0x2c
   1f3a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   1f3aa:	2b02      	cmp	r3, #2
   1f3ac:	d106      	bne.n	1f3bc <nrf91_socket_offload_accept+0xa8>
			*addrlen = sizeof(struct sockaddr_in6);
   1f3ae:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   1f3b0:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   1f3b2:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   1f3b4:	a901      	add	r1, sp, #4
   1f3b6:	f009 ff7d 	bl	292b4 <nrf_to_z_ipv6>
   1f3ba:	e7ed      	b.n	1f398 <nrf91_socket_offload_accept+0x84>
			errno = ENOTSUP;
   1f3bc:	f008 fc40 	bl	27c40 <__errno>
   1f3c0:	2386      	movs	r3, #134	; 0x86
   1f3c2:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   1f3c4:	4640      	mov	r0, r8
   1f3c6:	f004 f9fb 	bl	237c0 <nrf_close>
		release_ctx(ctx);
   1f3ca:	4638      	mov	r0, r7
   1f3cc:	f7ff ff8c 	bl	1f2e8 <release_ctx>
   1f3d0:	e7c8      	b.n	1f364 <nrf91_socket_offload_accept+0x50>
   1f3d2:	bf00      	nop
   1f3d4:	0002c494 	.word	0x0002c494

0001f3d8 <nrf91_iface_api_init>:
static struct nrf91_iface_data {
	struct net_if *iface;
} nrf91_iface_data;

static void nrf91_iface_api_init(struct net_if *iface)
{
   1f3d8:	b510      	push	{r4, lr}
   1f3da:	4604      	mov	r4, r0
	nrf91_iface_data.iface = iface;
   1f3dc:	4b09      	ldr	r3, [pc, #36]	; (1f404 <nrf91_iface_api_init+0x2c>)

	iface->if_dev->socket_offload = nrf91_socket_create;
   1f3de:	4a0a      	ldr	r2, [pc, #40]	; (1f408 <nrf91_iface_api_init+0x30>)
	nrf91_iface_data.iface = iface;
   1f3e0:	6018      	str	r0, [r3, #0]
	iface->if_dev->socket_offload = nrf91_socket_create;
   1f3e2:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1f3e4:	4809      	ldr	r0, [pc, #36]	; (1f40c <nrf91_iface_api_init+0x34>)
	iface->if_dev->socket_offload = nrf91_socket_create;
   1f3e6:	61da      	str	r2, [r3, #28]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1f3e8:	f7fb fd2a 	bl	1ae40 <socket_offload_dns_register>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f3ec:	6823      	ldr	r3, [r4, #0]
   1f3ee:	330c      	adds	r3, #12
   1f3f0:	e8d3 1fef 	ldaex	r1, [r3]
   1f3f4:	f041 0108 	orr.w	r1, r1, #8
   1f3f8:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1f3fc:	2a00      	cmp	r2, #0
   1f3fe:	d1f7      	bne.n	1f3f0 <nrf91_iface_api_init+0x18>

	if (!IS_ENABLED(CONFIG_NRF_MODEM_LIB_NET_IF_AUTO_START)) {
		net_if_flag_set(iface, NET_IF_NO_AUTO_START);
	}
}
   1f400:	bd10      	pop	{r4, pc}
   1f402:	bf00      	nop
   1f404:	2000d81c 	.word	0x2000d81c
   1f408:	0001f51d 	.word	0x0001f51d
   1f40c:	0002c48c 	.word	0x0002c48c

0001f410 <nrf91_socket_offload_ioctl>:
{
   1f410:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (request) {
   1f412:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
	int sd = OBJ_TO_SD(obj);
   1f416:	6804      	ldr	r4, [r0, #0]
{
   1f418:	b087      	sub	sp, #28
	switch (request) {
   1f41a:	2b03      	cmp	r3, #3
   1f41c:	d857      	bhi.n	1f4ce <nrf91_socket_offload_ioctl+0xbe>
   1f41e:	e8df f003 	tbb	[pc, r3]
   1f422:	4002      	.short	0x4002
   1f424:	5377      	.short	0x5377
	struct nrf_modem_pollcb pcb = {
   1f426:	2701      	movs	r7, #1
		pev_end = va_arg(args, struct k_poll_event *);
   1f428:	e9d2 6101 	ldrd	r6, r1, [r2, #4]
		return nrf91_poll_prepare(obj, pfd, pev, pev_end);
   1f42c:	6813      	ldr	r3, [r2, #0]
	struct nrf_modem_pollcb pcb = {
   1f42e:	4a3a      	ldr	r2, [pc, #232]	; (1f518 <nrf91_socket_offload_ioctl+0x108>)
   1f430:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   1f434:	9204      	str	r2, [sp, #16]
   1f436:	f8ad 3014 	strh.w	r3, [sp, #20]
   1f43a:	f88d 7016 	strb.w	r7, [sp, #22]
	if (*pev == pev_end) {
   1f43e:	6833      	ldr	r3, [r6, #0]
   1f440:	4299      	cmp	r1, r3
   1f442:	d104      	bne.n	1f44e <nrf91_socket_offload_ioctl+0x3e>
		errno = ENOMEM;
   1f444:	f008 fbfc 	bl	27c40 <__errno>
   1f448:	230c      	movs	r3, #12
		errno = EINVAL;
   1f44a:	6003      	str	r3, [r0, #0]
   1f44c:	e014      	b.n	1f478 <nrf91_socket_offload_ioctl+0x68>
	k_poll_signal_init(&ctx->poll);
   1f44e:	f100 0508 	add.w	r5, r0, #8
	z_impl_k_poll_signal_init(sig);
   1f452:	4628      	mov	r0, r5
   1f454:	f00b fe71 	bl	2b13a <z_impl_k_poll_signal_init>
	k_poll_event_init(*pev, K_POLL_TYPE_SIGNAL, K_POLL_MODE_NOTIFY_ONLY, &ctx->poll);
   1f458:	462b      	mov	r3, r5
   1f45a:	2200      	movs	r2, #0
   1f45c:	4639      	mov	r1, r7
   1f45e:	6830      	ldr	r0, [r6, #0]
   1f460:	f00b fe4e 	bl	2b100 <k_poll_event_init>
	err = nrf_setsockopt(fd, NRF_SOL_SOCKET, NRF_SO_POLLCB, &pcb, sizeof(pcb));
   1f464:	2308      	movs	r3, #8
   1f466:	4620      	mov	r0, r4
   1f468:	9300      	str	r3, [sp, #0]
   1f46a:	223c      	movs	r2, #60	; 0x3c
   1f46c:	4639      	mov	r1, r7
   1f46e:	ab04      	add	r3, sp, #16
   1f470:	f004 fae6 	bl	23a40 <nrf_setsockopt>
	if (err) {
   1f474:	4604      	mov	r4, r0
   1f476:	b110      	cbz	r0, 1f47e <nrf91_socket_offload_ioctl+0x6e>
		retval = -1;
   1f478:	f04f 34ff 	mov.w	r4, #4294967295
		return nrf91_socket_offload_fcntl(sd, request, args);
   1f47c:	e00e      	b.n	1f49c <nrf91_socket_offload_ioctl+0x8c>
	(*pev)++;
   1f47e:	6833      	ldr	r3, [r6, #0]
   1f480:	3314      	adds	r3, #20
   1f482:	6033      	str	r3, [r6, #0]
	flags = 0;
   1f484:	e9cd 0002 	strd	r0, r0, [sp, #8]
	z_impl_k_poll_signal_check(sig, signaled, result);
   1f488:	4628      	mov	r0, r5
   1f48a:	aa02      	add	r2, sp, #8
   1f48c:	a903      	add	r1, sp, #12
   1f48e:	f00b fe59 	bl	2b144 <z_impl_k_poll_signal_check>
	if (!signaled) {
   1f492:	9b03      	ldr	r3, [sp, #12]
	return -EALREADY;
   1f494:	2b00      	cmp	r3, #0
   1f496:	bf18      	it	ne
   1f498:	f06f 0477 	mvnne.w	r4, #119	; 0x77
}
   1f49c:	4620      	mov	r0, r4
   1f49e:	b007      	add	sp, #28
   1f4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pev = va_arg(args, struct k_poll_event **);
   1f4a2:	e9d2 4200 	ldrd	r4, r2, [r2]
	(*pev)++;
   1f4a6:	6813      	ldr	r3, [r2, #0]
   1f4a8:	3314      	adds	r3, #20
   1f4aa:	6013      	str	r3, [r2, #0]
	signaled = 0;
   1f4ac:	2300      	movs	r3, #0
	flags = 0;
   1f4ae:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1f4b2:	aa03      	add	r2, sp, #12
   1f4b4:	a904      	add	r1, sp, #16
   1f4b6:	3008      	adds	r0, #8
   1f4b8:	f00b fe44 	bl	2b144 <z_impl_k_poll_signal_check>
	if (!signaled) {
   1f4bc:	9b04      	ldr	r3, [sp, #16]
   1f4be:	b10b      	cbz	r3, 1f4c4 <nrf91_socket_offload_ioctl+0xb4>
	pfd->revents = flags;
   1f4c0:	9b03      	ldr	r3, [sp, #12]
   1f4c2:	80e3      	strh	r3, [r4, #6]
		return nrf91_poll_update(obj, pfd, pev);
   1f4c4:	2400      	movs	r4, #0
   1f4c6:	e7e9      	b.n	1f49c <nrf91_socket_offload_ioctl+0x8c>
		ctx->lock = va_arg(args, struct k_mutex *);
   1f4c8:	6813      	ldr	r3, [r2, #0]
   1f4ca:	6043      	str	r3, [r0, #4]
		return 0;
   1f4cc:	e7fa      	b.n	1f4c4 <nrf91_socket_offload_ioctl+0xb4>
	switch (cmd) {
   1f4ce:	2903      	cmp	r1, #3
   1f4d0:	d012      	beq.n	1f4f8 <nrf91_socket_offload_ioctl+0xe8>
   1f4d2:	2904      	cmp	r1, #4
   1f4d4:	d118      	bne.n	1f508 <nrf91_socket_offload_ioctl+0xf8>
		flags = va_arg(args, int);
   1f4d6:	6815      	ldr	r5, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK) {
   1f4d8:	f435 4380 	bics.w	r3, r5, #16384	; 0x4000
   1f4dc:	d003      	beq.n	1f4e6 <nrf91_socket_offload_ioctl+0xd6>
			errno = EINVAL;
   1f4de:	f008 fbaf 	bl	27c40 <__errno>
   1f4e2:	2316      	movs	r3, #22
   1f4e4:	6003      	str	r3, [r0, #0]
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1f4e6:	2104      	movs	r1, #4
   1f4e8:	4620      	mov	r0, r4
   1f4ea:	f3c5 3280 	ubfx	r2, r5, #14, #1
}
   1f4ee:	b007      	add	sp, #28
   1f4f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1f4f4:	f00b b93f 	b.w	2a776 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1f4f8:	4620      	mov	r0, r4
   1f4fa:	2200      	movs	r2, #0
   1f4fc:	f00b f93b 	bl	2a776 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1f500:	0384      	lsls	r4, r0, #14
   1f502:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
		break;
   1f506:	e7c9      	b.n	1f49c <nrf91_socket_offload_ioctl+0x8c>
		errno = EINVAL;
   1f508:	f008 fb9a 	bl	27c40 <__errno>
   1f50c:	2316      	movs	r3, #22
   1f50e:	e79c      	b.n	1f44a <nrf91_socket_offload_ioctl+0x3a>
	switch (request) {
   1f510:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1f514:	e7c2      	b.n	1f49c <nrf91_socket_offload_ioctl+0x8c>
   1f516:	bf00      	nop
   1f518:	0001f051 	.word	0x0001f051

0001f51c <nrf91_socket_create>:
{
   1f51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (type & SOCK_NATIVE) {
   1f520:	1e0d      	subs	r5, r1, #0
{
   1f522:	4607      	mov	r7, r0
   1f524:	4690      	mov	r8, r2
	if (type & SOCK_NATIVE) {
   1f526:	da12      	bge.n	1f54e <nrf91_socket_create+0x32>
	k_sched_lock();
   1f528:	f005 fdd0 	bl	250cc <k_sched_lock>
	*offload_lock = true;
   1f52c:	4e1c      	ldr	r6, [pc, #112]	; (1f5a0 <nrf91_socket_create+0x84>)
   1f52e:	2301      	movs	r3, #1
   1f530:	7033      	strb	r3, [r6, #0]
	return z_impl_zsock_socket(family, type, proto);
   1f532:	4642      	mov	r2, r8
   1f534:	4638      	mov	r0, r7
   1f536:	f025 4140 	bic.w	r1, r5, #3221225472	; 0xc0000000
   1f53a:	f7fb fb5f 	bl	1abfc <z_impl_zsock_socket>
	*offload_lock = false;
   1f53e:	2300      	movs	r3, #0
   1f540:	7033      	strb	r3, [r6, #0]
   1f542:	4604      	mov	r4, r0
	k_sched_unlock();
   1f544:	f005 fdd6 	bl	250f4 <k_sched_unlock>
}
   1f548:	4620      	mov	r0, r4
   1f54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   1f54e:	006b      	lsls	r3, r5, #1
   1f550:	d503      	bpl.n	1f55a <nrf91_socket_create+0x3e>
	k_sched_lock();
   1f552:	f005 fdbb 	bl	250cc <k_sched_lock>
	*offload_lock = true;
   1f556:	4e13      	ldr	r6, [pc, #76]	; (1f5a4 <nrf91_socket_create+0x88>)
   1f558:	e7e9      	b.n	1f52e <nrf91_socket_create+0x12>
	fd = z_reserve_fd();
   1f55a:	f7fa fa3b 	bl	199d4 <z_reserve_fd>
	if (fd < 0) {
   1f55e:	1e04      	subs	r4, r0, #0
   1f560:	db09      	blt.n	1f576 <nrf91_socket_create+0x5a>
	retval = nrf_socket(family, type, proto);
   1f562:	4629      	mov	r1, r5
   1f564:	4642      	mov	r2, r8
   1f566:	4638      	mov	r0, r7
   1f568:	f00a fd50 	bl	2a00c <nrf_socket>
	if (sd < 0) {
   1f56c:	1e05      	subs	r5, r0, #0
   1f56e:	da05      	bge.n	1f57c <nrf91_socket_create+0x60>
		z_free_fd(fd);
   1f570:	4620      	mov	r0, r4
   1f572:	f7fa fa7d 	bl	19a70 <z_free_fd>
		return -1;
   1f576:	f04f 34ff 	mov.w	r4, #4294967295
   1f57a:	e7e5      	b.n	1f548 <nrf91_socket_create+0x2c>
	ctx = allocate_ctx(sd);
   1f57c:	f7ff fe92 	bl	1f2a4 <allocate_ctx>
	if (ctx == NULL) {
   1f580:	4601      	mov	r1, r0
   1f582:	b938      	cbnz	r0, 1f594 <nrf91_socket_create+0x78>
		errno = ENOMEM;
   1f584:	f008 fb5c 	bl	27c40 <__errno>
   1f588:	230c      	movs	r3, #12
   1f58a:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   1f58c:	4628      	mov	r0, r5
   1f58e:	f004 f917 	bl	237c0 <nrf_close>
		z_free_fd(fd);
   1f592:	e7ed      	b.n	1f570 <nrf91_socket_create+0x54>
	z_finalize_fd(fd, ctx,
   1f594:	4620      	mov	r0, r4
   1f596:	4a04      	ldr	r2, [pc, #16]	; (1f5a8 <nrf91_socket_create+0x8c>)
   1f598:	f7fa fa52 	bl	19a40 <z_finalize_fd>
	return fd;
   1f59c:	e7d4      	b.n	1f548 <nrf91_socket_create+0x2c>
   1f59e:	bf00      	nop
   1f5a0:	2000ea39 	.word	0x2000ea39
   1f5a4:	2000ea38 	.word	0x2000ea38
   1f5a8:	0002c494 	.word	0x0002c494

0001f5ac <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(void)
{
   1f5ac:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   1f5ae:	4802      	ldr	r0, [pc, #8]	; (1f5b8 <at_monitor_sys_init+0xc>)
   1f5b0:	f003 fbf6 	bl	22da0 <nrf_modem_at_notif_handler_set>
	if (err) {
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
	}

	return 0;
}
   1f5b4:	2000      	movs	r0, #0
   1f5b6:	bd08      	pop	{r3, pc}
   1f5b8:	0001f621 	.word	0x0001f621

0001f5bc <at_monitor_task>:
{
   1f5bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   1f5c0:	4e13      	ldr	r6, [pc, #76]	; (1f610 <at_monitor_task+0x54>)
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f5c2:	4f14      	ldr	r7, [pc, #80]	; (1f614 <at_monitor_task+0x58>)
		k_heap_free(&at_monitor_heap, at_notif);
   1f5c4:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1f618 <at_monitor_task+0x5c>
   1f5c8:	2200      	movs	r2, #0
   1f5ca:	2300      	movs	r3, #0
   1f5cc:	4630      	mov	r0, r6
   1f5ce:	f005 f99d 	bl	2490c <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   1f5d2:	4605      	mov	r5, r0
   1f5d4:	b9b8      	cbnz	r0, 1f606 <at_monitor_task+0x4a>
}
   1f5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return mon->flags.paused;
   1f5da:	7a23      	ldrb	r3, [r4, #8]
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   1f5dc:	07da      	lsls	r2, r3, #31
   1f5de:	d40a      	bmi.n	1f5f6 <at_monitor_task+0x3a>
   1f5e0:	079b      	lsls	r3, r3, #30
   1f5e2:	d408      	bmi.n	1f5f6 <at_monitor_task+0x3a>
   1f5e4:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1f5e6:	b119      	cbz	r1, 1f5f0 <at_monitor_task+0x34>
   1f5e8:	4648      	mov	r0, r9
   1f5ea:	f00b feb2 	bl	2b352 <strstr>
   1f5ee:	b110      	cbz	r0, 1f5f6 <at_monitor_task+0x3a>
				e->handler(at_notif->data);
   1f5f0:	4648      	mov	r0, r9
   1f5f2:	6863      	ldr	r3, [r4, #4]
   1f5f4:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f5f6:	340c      	adds	r4, #12
   1f5f8:	42bc      	cmp	r4, r7
   1f5fa:	d3ee      	bcc.n	1f5da <at_monitor_task+0x1e>
		k_heap_free(&at_monitor_heap, at_notif);
   1f5fc:	4629      	mov	r1, r5
   1f5fe:	4640      	mov	r0, r8
   1f600:	f00b fa03 	bl	2aa0a <k_heap_free>
   1f604:	e7e0      	b.n	1f5c8 <at_monitor_task+0xc>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f606:	4c05      	ldr	r4, [pc, #20]	; (1f61c <at_monitor_task+0x60>)
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   1f608:	f105 0904 	add.w	r9, r5, #4
   1f60c:	e7f4      	b.n	1f5f8 <at_monitor_task+0x3c>
   1f60e:	bf00      	nop
   1f610:	2000c980 	.word	0x2000c980
   1f614:	2000c820 	.word	0x2000c820
   1f618:	2000c848 	.word	0x2000c848
   1f61c:	2000c7a8 	.word	0x2000c7a8

0001f620 <at_monitor_dispatch>:
{
   1f620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f624:	4604      	mov	r4, r0
	monitored = false;
   1f626:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f628:	4d18      	ldr	r5, [pc, #96]	; (1f68c <at_monitor_dispatch+0x6c>)
   1f62a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1f690 <at_monitor_dispatch+0x70>
   1f62e:	4545      	cmp	r5, r8
   1f630:	d318      	bcc.n	1f664 <at_monitor_dispatch+0x44>
	if (!monitored) {
   1f632:	b34e      	cbz	r6, 1f688 <at_monitor_dispatch+0x68>
	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   1f634:	4620      	mov	r0, r4
   1f636:	f7f9 fd29 	bl	1908c <strlen>
	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   1f63a:	2200      	movs	r2, #0
   1f63c:	1d41      	adds	r1, r0, #5
   1f63e:	2300      	movs	r3, #0
   1f640:	4814      	ldr	r0, [pc, #80]	; (1f694 <at_monitor_dispatch+0x74>)
   1f642:	f00b f9d8 	bl	2a9f6 <k_heap_alloc>
	if (!at_notif) {
   1f646:	4605      	mov	r5, r0
   1f648:	b1f0      	cbz	r0, 1f688 <at_monitor_dispatch+0x68>
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1f64a:	4621      	mov	r1, r4
   1f64c:	3004      	adds	r0, #4
   1f64e:	f00b fe33 	bl	2b2b8 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   1f652:	4629      	mov	r1, r5
   1f654:	4810      	ldr	r0, [pc, #64]	; (1f698 <at_monitor_dispatch+0x78>)
   1f656:	f00b fa88 	bl	2ab6a <k_queue_append>
}
   1f65a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_submit(&at_monitor_work);
   1f65e:	480f      	ldr	r0, [pc, #60]	; (1f69c <at_monitor_dispatch+0x7c>)
   1f660:	f005 baee 	b.w	24c40 <k_work_submit>
	return mon->flags.paused;
   1f664:	7a2f      	ldrb	r7, [r5, #8]
		if (!is_paused(e) && has_match(e, notif)) {
   1f666:	07fa      	lsls	r2, r7, #31
   1f668:	d40a      	bmi.n	1f680 <at_monitor_dispatch+0x60>
   1f66a:	6829      	ldr	r1, [r5, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1f66c:	b119      	cbz	r1, 1f676 <at_monitor_dispatch+0x56>
   1f66e:	4620      	mov	r0, r4
   1f670:	f00b fe6f 	bl	2b352 <strstr>
   1f674:	b120      	cbz	r0, 1f680 <at_monitor_dispatch+0x60>
			if (is_direct(e)) {
   1f676:	07bb      	lsls	r3, r7, #30
   1f678:	d504      	bpl.n	1f684 <at_monitor_dispatch+0x64>
				e->handler(notif);
   1f67a:	4620      	mov	r0, r4
   1f67c:	686b      	ldr	r3, [r5, #4]
   1f67e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f680:	350c      	adds	r5, #12
   1f682:	e7d4      	b.n	1f62e <at_monitor_dispatch+0xe>
				monitored = true;
   1f684:	2601      	movs	r6, #1
   1f686:	e7fb      	b.n	1f680 <at_monitor_dispatch+0x60>
}
   1f688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f68c:	2000c7a8 	.word	0x2000c7a8
   1f690:	2000c820 	.word	0x2000c820
   1f694:	2000c848 	.word	0x2000c848
   1f698:	2000c980 	.word	0x2000c980
   1f69c:	2000c678 	.word	0x2000c678

0001f6a0 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   1f6a0:	4b09      	ldr	r3, [pc, #36]	; (1f6c8 <is_valid_notification_char+0x28>)
   1f6a2:	5c1b      	ldrb	r3, [r3, r0]
   1f6a4:	f003 0303 	and.w	r3, r3, #3
   1f6a8:	2b02      	cmp	r3, #2
   1f6aa:	bf08      	it	eq
   1f6ac:	3820      	subeq	r0, #32
   1f6ae:	b2c0      	uxtb	r0, r0

	if (((chr >= 'A') && (chr <= 'Z')) || (chr == '_')) {
   1f6b0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1f6b4:	2b19      	cmp	r3, #25
   1f6b6:	d904      	bls.n	1f6c2 <is_valid_notification_char+0x22>
   1f6b8:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
   1f6bc:	4258      	negs	r0, r3
   1f6be:	4158      	adcs	r0, r3
   1f6c0:	4770      	bx	lr
		return true;
   1f6c2:	2001      	movs	r0, #1
	}

	return false;
}
   1f6c4:	4770      	bx	lr
   1f6c6:	bf00      	nop
   1f6c8:	0002e947 	.word	0x0002e947

0001f6cc <is_separator>:
 * @retval true  If character is ':' or ','
 * @retval false In all other cases
 */
static inline bool is_separator(char chr)
{
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1f6cc:	f1a0 032c 	sub.w	r3, r0, #44	; 0x2c
   1f6d0:	b2db      	uxtb	r3, r3
   1f6d2:	2b11      	cmp	r3, #17
   1f6d4:	bf9d      	ittte	ls
   1f6d6:	4803      	ldrls	r0, [pc, #12]	; (1f6e4 <is_separator+0x18>)
   1f6d8:	40d8      	lsrls	r0, r3
   1f6da:	f000 0001 	andls.w	r0, r0, #1
{
   1f6de:	2000      	movhi	r0, #0
	    (chr == AT_CMD_SEPARATOR)) {
		return true;
	}

	return false;
}
   1f6e0:	4770      	bx	lr
   1f6e2:	bf00      	nop
   1f6e4:	00024001 	.word	0x00024001

0001f6e8 <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   1f6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f6ea:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   1f6ec:	2400      	movs	r4, #0
   1f6ee:	4e09      	ldr	r6, [pc, #36]	; (1f714 <is_result+0x2c>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   1f6f0:	f856 7b04 	ldr.w	r7, [r6], #4
   1f6f4:	4638      	mov	r0, r7
   1f6f6:	f7f9 fcc9 	bl	1908c <strlen>
   1f6fa:	4639      	mov	r1, r7
   1f6fc:	4602      	mov	r2, r0
   1f6fe:	4628      	mov	r0, r5
   1f700:	f00b fde2 	bl	2b2c8 <strncmp>
		if (!diff) {
   1f704:	b120      	cbz	r0, 1f710 <is_result+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   1f706:	3401      	adds	r4, #1
   1f708:	2c04      	cmp	r4, #4
   1f70a:	d1f1      	bne.n	1f6f0 <is_result+0x8>
			return true;
		}
	}

	return false;
   1f70c:	2000      	movs	r0, #0
}
   1f70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
   1f710:	2001      	movs	r0, #1
   1f712:	e7fc      	b.n	1f70e <is_result+0x26>
   1f714:	0002c4d4 	.word	0x0002c4d4

0001f718 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   1f718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   1f71c:	6804      	ldr	r4, [r0, #0]
{
   1f71e:	b0a3      	sub	sp, #140	; 0x8c
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f720:	7823      	ldrb	r3, [r4, #0]
   1f722:	4680      	mov	r8, r0
   1f724:	460e      	mov	r6, r1
   1f726:	4615      	mov	r5, r2
	const char *tmpstr = *str;
   1f728:	9400      	str	r4, [sp, #0]
   1f72a:	2b00      	cmp	r3, #0
   1f72c:	f000 80cf 	beq.w	1f8ce <at_parse_process_element+0x1b6>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   1f730:	4b68      	ldr	r3, [pc, #416]	; (1f8d4 <at_parse_process_element+0x1bc>)
   1f732:	781b      	ldrb	r3, [r3, #0]
   1f734:	2b06      	cmp	r3, #6
   1f736:	d113      	bne.n	1f760 <at_parse_process_element+0x48>
		const char *start_ptr = tmpstr++;

		while (is_valid_notification_char(*tmpstr)) {
   1f738:	2000      	movs	r0, #0
		const char *start_ptr = tmpstr++;
   1f73a:	1c62      	adds	r2, r4, #1
   1f73c:	9200      	str	r2, [sp, #0]
		while (is_valid_notification_char(*tmpstr)) {
   1f73e:	4611      	mov	r1, r2
   1f740:	4607      	mov	r7, r0
   1f742:	f812 0b01 	ldrb.w	r0, [r2], #1
   1f746:	f7ff ffab 	bl	1f6a0 <is_valid_notification_char>
   1f74a:	2800      	cmp	r0, #0
   1f74c:	d1f7      	bne.n	1f73e <at_parse_process_element+0x26>
   1f74e:	b107      	cbz	r7, 1f752 <at_parse_process_element+0x3a>
   1f750:	9100      	str	r1, [sp, #0]
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1f752:	1b0b      	subs	r3, r1, r4

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1f754:	4622      	mov	r2, r4
   1f756:	4631      	mov	r1, r6
   1f758:	4628      	mov	r0, r5
   1f75a:	f009 ff76 	bl	2964a <at_params_string_put>
   1f75e:	e046      	b.n	1f7ee <at_parse_process_element+0xd6>
	} else if (state == COMMAND) {
   1f760:	3b01      	subs	r3, #1
   1f762:	2b08      	cmp	r3, #8
   1f764:	d843      	bhi.n	1f7ee <at_parse_process_element+0xd6>
   1f766:	e8df f003 	tbb	[pc, r3]
   1f76a:	4964      	.short	0x4964
   1f76c:	420da25a 	.word	0x420da25a
   1f770:	3f1c      	.short	0x3f1c
   1f772:	05          	.byte	0x05
   1f773:	00          	.byte	0x00
   1f774:	4622      	mov	r2, r4
	if (state == NOTIFICATION) {
   1f776:	2100      	movs	r1, #0
   1f778:	4613      	mov	r3, r2
   1f77a:	f812 0b01 	ldrb.w	r0, [r2], #1
   1f77e:	b160      	cbz	r0, 1f79a <at_parse_process_element+0x82>
   1f780:	2101      	movs	r1, #1
   1f782:	e7f9      	b.n	1f778 <at_parse_process_element+0x60>
   1f784:	4622      	mov	r2, r4
   1f786:	2100      	movs	r1, #0
		while (isxdigit((int)*tmpstr)) {
   1f788:	4f53      	ldr	r7, [pc, #332]	; (1f8d8 <at_parse_process_element+0x1c0>)
   1f78a:	4613      	mov	r3, r2
   1f78c:	f812 0b01 	ldrb.w	r0, [r2], #1
   1f790:	5c38      	ldrb	r0, [r7, r0]
   1f792:	f010 0f44 	tst.w	r0, #68	; 0x44
   1f796:	f040 8098 	bne.w	1f8ca <at_parse_process_element+0x1b2>
   1f79a:	b101      	cbz	r1, 1f79e <at_parse_process_element+0x86>
   1f79c:	9300      	str	r3, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   1f79e:	1b1b      	subs	r3, r3, r4
   1f7a0:	e7d8      	b.n	1f754 <at_parse_process_element+0x3c>
		skip_command_prefix(&tmpstr);
   1f7a2:	4668      	mov	r0, sp
   1f7a4:	f009 fec8 	bl	29538 <skip_command_prefix>
		while (is_valid_command_char(*tmpstr)) {
   1f7a8:	2200      	movs	r2, #0
   1f7aa:	9b00      	ldr	r3, [sp, #0]
	if (isalpha((int)chr) || isdigit((int)chr)) {
   1f7ac:	484a      	ldr	r0, [pc, #296]	; (1f8d8 <at_parse_process_element+0x1c0>)
   1f7ae:	461f      	mov	r7, r3
   1f7b0:	f813 1b01 	ldrb.w	r1, [r3], #1
   1f7b4:	5c41      	ldrb	r1, [r0, r1]
   1f7b6:	0749      	lsls	r1, r1, #29
   1f7b8:	d110      	bne.n	1f7dc <at_parse_process_element+0xc4>
   1f7ba:	b102      	cbz	r2, 1f7be <at_parse_process_element+0xa6>
   1f7bc:	9700      	str	r7, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   1f7be:	1b3b      	subs	r3, r7, r4
   1f7c0:	4622      	mov	r2, r4
   1f7c2:	4631      	mov	r1, r6
   1f7c4:	4628      	mov	r0, r5
   1f7c6:	f009 ff40 	bl	2964a <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   1f7ca:	783b      	ldrb	r3, [r7, #0]
   1f7cc:	2b3d      	cmp	r3, #61	; 0x3d
   1f7ce:	d107      	bne.n	1f7e0 <at_parse_process_element+0xc8>
   1f7d0:	787b      	ldrb	r3, [r7, #1]
   1f7d2:	2b3f      	cmp	r3, #63	; 0x3f
   1f7d4:	d10b      	bne.n	1f7ee <at_parse_process_element+0xd6>
			tmpstr += 2;
   1f7d6:	3702      	adds	r7, #2
		tmpstr++;
   1f7d8:	9700      	str	r7, [sp, #0]
   1f7da:	e008      	b.n	1f7ee <at_parse_process_element+0xd6>
   1f7dc:	2201      	movs	r2, #1
   1f7de:	e7e6      	b.n	1f7ae <at_parse_process_element+0x96>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   1f7e0:	2b3f      	cmp	r3, #63	; 0x3f
   1f7e2:	d104      	bne.n	1f7ee <at_parse_process_element+0xd6>
			tmpstr++;
   1f7e4:	3701      	adds	r7, #1
   1f7e6:	e7f7      	b.n	1f7d8 <at_parse_process_element+0xc0>
		at_params_empty_put(list, index);
   1f7e8:	4628      	mov	r0, r5
   1f7ea:	f009 ff04 	bl	295f6 <at_params_empty_put>
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   1f7ee:	2000      	movs	r0, #0
	*str = tmpstr;
   1f7f0:	9b00      	ldr	r3, [sp, #0]
   1f7f2:	f8c8 3000 	str.w	r3, [r8]
}
   1f7f6:	b023      	add	sp, #140	; 0x8c
   1f7f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state == NOTIFICATION) {
   1f7fc:	4627      	mov	r7, r4
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   1f7fe:	783a      	ldrb	r2, [r7, #0]
   1f800:	4610      	mov	r0, r2
   1f802:	f009 fe90 	bl	29526 <is_lfcr>
   1f806:	463b      	mov	r3, r7
			tmpstr++;
   1f808:	3701      	adds	r7, #1
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   1f80a:	b908      	cbnz	r0, 1f810 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f80c:	2a00      	cmp	r2, #0
   1f80e:	d1f6      	bne.n	1f7fe <at_parse_process_element+0xe6>
		at_params_string_put(list, index, start_ptr,
   1f810:	4622      	mov	r2, r4
   1f812:	4631      	mov	r1, r6
   1f814:	4628      	mov	r0, r5
   1f816:	1b1b      	subs	r3, r3, r4
   1f818:	f009 ff17 	bl	2964a <at_params_string_put>
   1f81c:	e7dc      	b.n	1f7d8 <at_parse_process_element+0xc0>
	if (state == NOTIFICATION) {
   1f81e:	4627      	mov	r7, r4
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   1f820:	783a      	ldrb	r2, [r7, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   1f822:	463b      	mov	r3, r7
   1f824:	2a22      	cmp	r2, #34	; 0x22
			tmpstr++;
   1f826:	f107 0701 	add.w	r7, r7, #1
   1f82a:	d0f1      	beq.n	1f810 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f82c:	2a00      	cmp	r2, #0
   1f82e:	d1f7      	bne.n	1f820 <at_parse_process_element+0x108>
   1f830:	e7ee      	b.n	1f810 <at_parse_process_element+0xf8>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1f832:	4620      	mov	r0, r4
   1f834:	220a      	movs	r2, #10
   1f836:	a901      	add	r1, sp, #4
   1f838:	f006 faa4 	bl	25d84 <strtoul>
   1f83c:	2401      	movs	r4, #1
		tmpstr = next;
   1f83e:	9b01      	ldr	r3, [sp, #4]
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1f840:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   1f842:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   1f844:	9b00      	ldr	r3, [sp, #0]
   1f846:	7818      	ldrb	r0, [r3, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   1f848:	2829      	cmp	r0, #41	; 0x29
   1f84a:	d025      	beq.n	1f898 <at_parse_process_element+0x180>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f84c:	b320      	cbz	r0, 1f898 <at_parse_process_element+0x180>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   1f84e:	f103 0901 	add.w	r9, r3, #1
			if (is_separator(*tmpstr)) {
   1f852:	f7ff ff3b 	bl	1f6cc <is_separator>
				tmparray[i++] =
   1f856:	f8cd 9000 	str.w	r9, [sp]
			if (is_separator(*tmpstr)) {
   1f85a:	b908      	cbnz	r0, 1f860 <at_parse_process_element+0x148>
					tmpstr = next;
   1f85c:	4627      	mov	r7, r4
   1f85e:	e019      	b.n	1f894 <at_parse_process_element+0x17c>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   1f860:	220a      	movs	r2, #10
   1f862:	a901      	add	r1, sp, #4
   1f864:	4648      	mov	r0, r9
   1f866:	f006 fa8d 	bl	25d84 <strtoul>
				tmparray[i++] =
   1f86a:	ab22      	add	r3, sp, #136	; 0x88
   1f86c:	1c67      	adds	r7, r4, #1
   1f86e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1f872:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   1f876:	4648      	mov	r0, r9
   1f878:	f7f9 fc08 	bl	1908c <strlen>
   1f87c:	f8dd 9004 	ldr.w	r9, [sp, #4]
   1f880:	4604      	mov	r4, r0
   1f882:	4648      	mov	r0, r9
   1f884:	f7f9 fc02 	bl	1908c <strlen>
   1f888:	4284      	cmp	r4, r0
   1f88a:	d006      	beq.n	1f89a <at_parse_process_element+0x182>
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1f88c:	2f20      	cmp	r7, #32
					tmpstr = next;
   1f88e:	f8cd 9000 	str.w	r9, [sp]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1f892:	d002      	beq.n	1f89a <at_parse_process_element+0x182>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1f894:	463c      	mov	r4, r7
   1f896:	e7d5      	b.n	1f844 <at_parse_process_element+0x12c>
   1f898:	4627      	mov	r7, r4
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   1f89a:	00bb      	lsls	r3, r7, #2
   1f89c:	4631      	mov	r1, r6
   1f89e:	4628      	mov	r0, r5
   1f8a0:	aa02      	add	r2, sp, #8
   1f8a2:	f009 fef5 	bl	29690 <at_params_array_put>
		tmpstr++;
   1f8a6:	9b00      	ldr	r3, [sp, #0]
   1f8a8:	3301      	adds	r3, #1
   1f8aa:	9300      	str	r3, [sp, #0]
   1f8ac:	e79f      	b.n	1f7ee <at_parse_process_element+0xd6>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1f8ae:	220a      	movs	r2, #10
   1f8b0:	4620      	mov	r0, r4
   1f8b2:	a902      	add	r1, sp, #8
   1f8b4:	f006 f9ea 	bl	25c8c <strtoll>
   1f8b8:	460b      	mov	r3, r1
		tmpstr = next;
   1f8ba:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1f8bc:	4602      	mov	r2, r0
		tmpstr = next;
   1f8be:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   1f8c0:	4628      	mov	r0, r5
   1f8c2:	4631      	mov	r1, r6
   1f8c4:	f009 feac 	bl	29620 <at_params_int_put>
   1f8c8:	e791      	b.n	1f7ee <at_parse_process_element+0xd6>
   1f8ca:	2101      	movs	r1, #1
   1f8cc:	e75d      	b.n	1f78a <at_parse_process_element+0x72>
		return -1;
   1f8ce:	f04f 30ff 	mov.w	r0, #4294967295
   1f8d2:	e790      	b.n	1f7f6 <at_parse_process_element+0xde>
   1f8d4:	2000ea3b 	.word	0x2000ea3b
   1f8d8:	0002e947 	.word	0x0002e947

0001f8dc <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1f8dc:	b510      	push	{r4, lr}
   1f8de:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1f8e0:	f7f9 fbd4 	bl	1908c <strlen>
   1f8e4:	2801      	cmp	r0, #1
   1f8e6:	d921      	bls.n	1f92c <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   1f8e8:	7823      	ldrb	r3, [r4, #0]
   1f8ea:	4912      	ldr	r1, [pc, #72]	; (1f934 <is_command+0x58>)
   1f8ec:	5cca      	ldrb	r2, [r1, r3]
   1f8ee:	f002 0203 	and.w	r2, r2, #3
   1f8f2:	2a02      	cmp	r2, #2
   1f8f4:	bf08      	it	eq
   1f8f6:	3b20      	subeq	r3, #32
   1f8f8:	2b41      	cmp	r3, #65	; 0x41
   1f8fa:	d117      	bne.n	1f92c <is_command+0x50>
   1f8fc:	7863      	ldrb	r3, [r4, #1]
   1f8fe:	5cca      	ldrb	r2, [r1, r3]
   1f900:	f002 0203 	and.w	r2, r2, #3
   1f904:	2a02      	cmp	r2, #2
   1f906:	bf08      	it	eq
   1f908:	3b20      	subeq	r3, #32
   1f90a:	2b54      	cmp	r3, #84	; 0x54
   1f90c:	d10e      	bne.n	1f92c <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1f90e:	78a2      	ldrb	r2, [r4, #2]
   1f910:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1f914:	2b23      	cmp	r3, #35	; 0x23
   1f916:	d00b      	beq.n	1f930 <is_command+0x54>
   1f918:	2a25      	cmp	r2, #37	; 0x25
   1f91a:	d009      	beq.n	1f930 <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1f91c:	4610      	mov	r0, r2
   1f91e:	f009 fe02 	bl	29526 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1f922:	b910      	cbnz	r0, 1f92a <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f924:	fab2 f082 	clz	r0, r2
   1f928:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1f92a:	bd10      	pop	{r4, pc}
		return false;
   1f92c:	2000      	movs	r0, #0
   1f92e:	e7fc      	b.n	1f92a <is_command+0x4e>
		return true;
   1f930:	2001      	movs	r0, #1
   1f932:	e7fa      	b.n	1f92a <is_command+0x4e>
   1f934:	0002e947 	.word	0x0002e947

0001f938 <at_parse_detect_type>:
{
   1f938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f93c:	4607      	mov	r7, r0
	const char *tmpstr = *str;
   1f93e:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1f940:	f8df 8190 	ldr.w	r8, [pc, #400]	; 1fad4 <at_parse_detect_type+0x19c>
   1f944:	2900      	cmp	r1, #0
   1f946:	d13d      	bne.n	1f9c4 <at_parse_detect_type+0x8c>
   1f948:	7820      	ldrb	r0, [r4, #0]
   1f94a:	f009 fde0 	bl	2950e <is_notification>
   1f94e:	4e62      	ldr	r6, [pc, #392]	; (1fad8 <at_parse_detect_type+0x1a0>)
   1f950:	4605      	mov	r5, r0
   1f952:	b360      	cbz	r0, 1f9ae <at_parse_detect_type+0x76>
	state = new_state;
   1f954:	2306      	movs	r3, #6
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1f956:	2205      	movs	r2, #5
   1f958:	4620      	mov	r0, r4
   1f95a:	4960      	ldr	r1, [pc, #384]	; (1fadc <at_parse_detect_type+0x1a4>)
	state = new_state;
   1f95c:	7033      	strb	r3, [r6, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1f95e:	f00b fcb3 	bl	2b2c8 <strncmp>
   1f962:	b1f8      	cbz	r0, 1f9a4 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   1f964:	2205      	movs	r2, #5
   1f966:	4620      	mov	r0, r4
   1f968:	495d      	ldr	r1, [pc, #372]	; (1fae0 <at_parse_detect_type+0x1a8>)
   1f96a:	f00b fcad 	bl	2b2c8 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1f96e:	b1c8      	cbz	r0, 1f9a4 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   1f970:	220b      	movs	r2, #11
   1f972:	4620      	mov	r0, r4
   1f974:	495b      	ldr	r1, [pc, #364]	; (1fae4 <at_parse_detect_type+0x1ac>)
   1f976:	f00b fca7 	bl	2b2c8 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   1f97a:	b198      	cbz	r0, 1f9a4 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1f97c:	220a      	movs	r2, #10
   1f97e:	4620      	mov	r0, r4
   1f980:	4959      	ldr	r1, [pc, #356]	; (1fae8 <at_parse_detect_type+0x1b0>)
   1f982:	f00b fca1 	bl	2b2c8 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   1f986:	b168      	cbz	r0, 1f9a4 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1f988:	220b      	movs	r2, #11
   1f98a:	4620      	mov	r0, r4
   1f98c:	4957      	ldr	r1, [pc, #348]	; (1faec <at_parse_detect_type+0x1b4>)
   1f98e:	f00b fc9b 	bl	2b2c8 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1f992:	b138      	cbz	r0, 1f9a4 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   1f994:	2207      	movs	r2, #7
   1f996:	4620      	mov	r0, r4
   1f998:	4955      	ldr	r1, [pc, #340]	; (1faf0 <at_parse_detect_type+0x1b8>)
   1f99a:	f00b fc95 	bl	2b2c8 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1f99e:	fab0 f580 	clz	r5, r0
   1f9a2:	096d      	lsrs	r5, r5, #5
		set_type_string = check_response_for_forced_string(tmpstr);
   1f9a4:	f888 5000 	strb.w	r5, [r8]
	return 0;
   1f9a8:	2000      	movs	r0, #0
	*str = tmpstr;
   1f9aa:	603c      	str	r4, [r7, #0]
	return 0;
   1f9ac:	e04e      	b.n	1fa4c <at_parse_detect_type+0x114>
	} else if (set_type_string) {
   1f9ae:	f898 3000 	ldrb.w	r3, [r8]
   1f9b2:	b953      	cbnz	r3, 1f9ca <at_parse_detect_type+0x92>
	} else if ((index == 0) && is_command(tmpstr)) {
   1f9b4:	4620      	mov	r0, r4
   1f9b6:	f7ff ff91 	bl	1f8dc <is_command>
   1f9ba:	2800      	cmp	r0, #0
   1f9bc:	d048      	beq.n	1fa50 <at_parse_detect_type+0x118>
	state = new_state;
   1f9be:	2307      	movs	r3, #7
   1f9c0:	7033      	strb	r3, [r6, #0]
}
   1f9c2:	e7f1      	b.n	1f9a8 <at_parse_detect_type+0x70>
	} else if (set_type_string) {
   1f9c4:	f898 3000 	ldrb.w	r3, [r8]
   1f9c8:	b11b      	cbz	r3, 1f9d2 <at_parse_detect_type+0x9a>
	state = new_state;
   1f9ca:	2202      	movs	r2, #2
   1f9cc:	4b42      	ldr	r3, [pc, #264]	; (1fad8 <at_parse_detect_type+0x1a0>)
   1f9ce:	701a      	strb	r2, [r3, #0]
}
   1f9d0:	e7ea      	b.n	1f9a8 <at_parse_detect_type+0x70>
	} else if ((index > 0) && is_clac(tmpstr)) {
   1f9d2:	2900      	cmp	r1, #0
   1f9d4:	dd43      	ble.n	1fa5e <at_parse_detect_type+0x126>
   1f9d6:	4622      	mov	r2, r4
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   1f9d8:	7815      	ldrb	r5, [r2, #0]
   1f9da:	4616      	mov	r6, r2
   1f9dc:	4628      	mov	r0, r5
   1f9de:	3201      	adds	r2, #1
   1f9e0:	f009 fda1 	bl	29526 <is_lfcr>
   1f9e4:	2800      	cmp	r0, #0
   1f9e6:	d1f7      	bne.n	1f9d8 <at_parse_detect_type+0xa0>
		str++;
	}

	if (strlen(str) < 4) {
   1f9e8:	4630      	mov	r0, r6
   1f9ea:	f7f9 fb4f 	bl	1908c <strlen>
   1f9ee:	2803      	cmp	r0, #3
   1f9f0:	d930      	bls.n	1fa54 <at_parse_detect_type+0x11c>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   1f9f2:	462b      	mov	r3, r5
   1f9f4:	4a3f      	ldr	r2, [pc, #252]	; (1faf4 <at_parse_detect_type+0x1bc>)
   1f9f6:	5d51      	ldrb	r1, [r2, r5]
   1f9f8:	f001 0103 	and.w	r1, r1, #3
   1f9fc:	2902      	cmp	r1, #2
   1f9fe:	bf08      	it	eq
   1fa00:	f1a5 0320 	subeq.w	r3, r5, #32
   1fa04:	2b41      	cmp	r3, #65	; 0x41
   1fa06:	d125      	bne.n	1fa54 <at_parse_detect_type+0x11c>
   1fa08:	7873      	ldrb	r3, [r6, #1]
   1fa0a:	5cd1      	ldrb	r1, [r2, r3]
   1fa0c:	f001 0103 	and.w	r1, r1, #3
   1fa10:	2902      	cmp	r1, #2
   1fa12:	bf08      	it	eq
   1fa14:	3b20      	subeq	r3, #32
   1fa16:	2b54      	cmp	r3, #84	; 0x54
   1fa18:	d11c      	bne.n	1fa54 <at_parse_detect_type+0x11c>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   1fa1a:	78b3      	ldrb	r3, [r6, #2]
   1fa1c:	5cd1      	ldrb	r1, [r2, r3]
   1fa1e:	f001 0103 	and.w	r1, r1, #3
   1fa22:	2902      	cmp	r1, #2
   1fa24:	bf08      	it	eq
   1fa26:	3b20      	subeq	r3, #32
   1fa28:	2b2b      	cmp	r3, #43	; 0x2b
   1fa2a:	d00a      	beq.n	1fa42 <at_parse_detect_type+0x10a>
   1fa2c:	2b25      	cmp	r3, #37	; 0x25
   1fa2e:	d111      	bne.n	1fa54 <at_parse_detect_type+0x11c>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   1fa30:	78f3      	ldrb	r3, [r6, #3]
   1fa32:	5cd2      	ldrb	r2, [r2, r3]
   1fa34:	f002 0203 	and.w	r2, r2, #3
   1fa38:	2a02      	cmp	r2, #2
   1fa3a:	bf08      	it	eq
   1fa3c:	3b20      	subeq	r3, #32
   1fa3e:	2b58      	cmp	r3, #88	; 0x58
   1fa40:	d008      	beq.n	1fa54 <at_parse_detect_type+0x11c>
	state = new_state;
   1fa42:	2209      	movs	r2, #9
		return -2;
   1fa44:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   1fa48:	4b23      	ldr	r3, [pc, #140]	; (1fad8 <at_parse_detect_type+0x1a0>)
   1fa4a:	701a      	strb	r2, [r3, #0]
}
   1fa4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	state = new_state;
   1fa50:	2302      	movs	r3, #2
   1fa52:	e7b5      	b.n	1f9c0 <at_parse_detect_type+0x88>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   1fa54:	7820      	ldrb	r0, [r4, #0]
   1fa56:	f009 fd5a 	bl	2950e <is_notification>
   1fa5a:	2800      	cmp	r0, #0
   1fa5c:	d136      	bne.n	1facc <at_parse_detect_type+0x194>
	} else if (is_number(*tmpstr)) {
   1fa5e:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   1fa60:	4b24      	ldr	r3, [pc, #144]	; (1faf4 <at_parse_detect_type+0x1bc>)
   1fa62:	5c9b      	ldrb	r3, [r3, r2]
   1fa64:	075b      	lsls	r3, r3, #29
   1fa66:	d40a      	bmi.n	1fa7e <at_parse_detect_type+0x146>
   1fa68:	2a2d      	cmp	r2, #45	; 0x2d
   1fa6a:	d008      	beq.n	1fa7e <at_parse_detect_type+0x146>
   1fa6c:	2a2b      	cmp	r2, #43	; 0x2b
   1fa6e:	d006      	beq.n	1fa7e <at_parse_detect_type+0x146>
	if (chr == '"') {
   1fa70:	2a22      	cmp	r2, #34	; 0x22
   1fa72:	d107      	bne.n	1fa84 <at_parse_detect_type+0x14c>
	state = new_state;
   1fa74:	2203      	movs	r2, #3
   1fa76:	4b18      	ldr	r3, [pc, #96]	; (1fad8 <at_parse_detect_type+0x1a0>)
		tmpstr++;
   1fa78:	3401      	adds	r4, #1
	state = new_state;
   1fa7a:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1fa7c:	e794      	b.n	1f9a8 <at_parse_detect_type+0x70>
	state = new_state;
   1fa7e:	2204      	movs	r2, #4
   1fa80:	4b15      	ldr	r3, [pc, #84]	; (1fad8 <at_parse_detect_type+0x1a0>)
   1fa82:	e7a4      	b.n	1f9ce <at_parse_detect_type+0x96>
	if (chr == '(') {
   1fa84:	2a28      	cmp	r2, #40	; 0x28
   1fa86:	d104      	bne.n	1fa92 <at_parse_detect_type+0x15a>
   1fa88:	2201      	movs	r2, #1
   1fa8a:	4b13      	ldr	r3, [pc, #76]	; (1fad8 <at_parse_detect_type+0x1a0>)
		tmpstr++;
   1fa8c:	4414      	add	r4, r2
	state = new_state;
   1fa8e:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1fa90:	e78a      	b.n	1f9a8 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   1fa92:	4610      	mov	r0, r2
   1fa94:	f009 fd47 	bl	29526 <is_lfcr>
   1fa98:	b188      	cbz	r0, 1fabe <at_parse_detect_type+0x186>
   1fa9a:	490f      	ldr	r1, [pc, #60]	; (1fad8 <at_parse_detect_type+0x1a0>)
   1fa9c:	780b      	ldrb	r3, [r1, #0]
   1fa9e:	2b04      	cmp	r3, #4
   1faa0:	d10a      	bne.n	1fab8 <at_parse_detect_type+0x180>
   1faa2:	4622      	mov	r2, r4
   1faa4:	4614      	mov	r4, r2
		while (is_lfcr(*tmpstr)) {
   1faa6:	f812 0b01 	ldrb.w	r0, [r2], #1
   1faaa:	f009 fd3c 	bl	29526 <is_lfcr>
   1faae:	2800      	cmp	r0, #0
   1fab0:	d1f8      	bne.n	1faa4 <at_parse_detect_type+0x16c>
	state = new_state;
   1fab2:	2305      	movs	r3, #5
   1fab4:	700b      	strb	r3, [r1, #0]
}
   1fab6:	e777      	b.n	1f9a8 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   1fab8:	2b08      	cmp	r3, #8
   1faba:	f43f af75 	beq.w	1f9a8 <at_parse_detect_type+0x70>
	} else if (is_separator(*tmpstr)) {
   1fabe:	4610      	mov	r0, r2
   1fac0:	f7ff fe04 	bl	1f6cc <is_separator>
   1fac4:	b110      	cbz	r0, 1facc <at_parse_detect_type+0x194>
	state = new_state;
   1fac6:	2208      	movs	r2, #8
   1fac8:	4b03      	ldr	r3, [pc, #12]	; (1fad8 <at_parse_detect_type+0x1a0>)
   1faca:	e780      	b.n	1f9ce <at_parse_detect_type+0x96>
		return -1;
   1facc:	f04f 30ff 	mov.w	r0, #4294967295
   1fad0:	e7bc      	b.n	1fa4c <at_parse_detect_type+0x114>
   1fad2:	bf00      	nop
   1fad4:	2000ea3a 	.word	0x2000ea3a
   1fad8:	2000ea3b 	.word	0x2000ea3b
   1fadc:	0002dccf 	.word	0x0002dccf
   1fae0:	0002dcd5 	.word	0x0002dcd5
   1fae4:	0002dcdb 	.word	0x0002dcdb
   1fae8:	0002dce7 	.word	0x0002dce7
   1faec:	0002dcf2 	.word	0x0002dcf2
   1faf0:	0002dcfe 	.word	0x0002dcfe
   1faf4:	0002e947 	.word	0x0002e947

0001faf8 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   1faf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fafc:	4689      	mov	r9, r1
   1fafe:	4616      	mov	r6, r2
   1fb00:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   1fb02:	4680      	mov	r8, r0
   1fb04:	2800      	cmp	r0, #0
   1fb06:	f000 8099 	beq.w	1fc3c <at_parser_max_params_from_str+0x144>
   1fb0a:	2a00      	cmp	r2, #0
   1fb0c:	f000 8096 	beq.w	1fc3c <at_parser_max_params_from_str+0x144>
   1fb10:	6853      	ldr	r3, [r2, #4]
   1fb12:	2b00      	cmp	r3, #0
   1fb14:	f000 8092 	beq.w	1fc3c <at_parser_max_params_from_str+0x144>
	state = IDLE;
   1fb18:	2400      	movs	r4, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   1fb1a:	4610      	mov	r0, r2
   1fb1c:	f009 fd46 	bl	295ac <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   1fb20:	4642      	mov	r2, r8
   1fb22:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
   1fb24:	f8cd 8004 	str.w	r8, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   1fb28:	429f      	cmp	r7, r3
   1fb2a:	bf28      	it	cs
   1fb2c:	461f      	movcs	r7, r3
	state = IDLE;
   1fb2e:	4b45      	ldr	r3, [pc, #276]	; (1fc44 <at_parser_max_params_from_str+0x14c>)
   1fb30:	701c      	strb	r4, [r3, #0]
	set_type_string = false;
   1fb32:	4b45      	ldr	r3, [pc, #276]	; (1fc48 <at_parser_max_params_from_str+0x150>)
   1fb34:	701c      	strb	r4, [r3, #0]
   1fb36:	4611      	mov	r1, r2
	while (is_lfcr(*str)) {
   1fb38:	7808      	ldrb	r0, [r1, #0]
   1fb3a:	f009 fcf4 	bl	29526 <is_lfcr>
   1fb3e:	4625      	mov	r5, r4
   1fb40:	3201      	adds	r2, #1
   1fb42:	4604      	mov	r4, r0
   1fb44:	2800      	cmp	r0, #0
   1fb46:	d1f6      	bne.n	1fb36 <at_parser_max_params_from_str+0x3e>
   1fb48:	b105      	cbz	r5, 1fb4c <at_parser_max_params_from_str+0x54>
   1fb4a:	9101      	str	r1, [sp, #4]
	int index = 0;
   1fb4c:	2500      	movs	r5, #0
		if (isspace((int)*str)) {
   1fb4e:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 1fc4c <at_parser_max_params_from_str+0x154>
	while ((!is_terminated(*str)) && (index < max_params)) {
   1fb52:	9b01      	ldr	r3, [sp, #4]
   1fb54:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1fb56:	2a00      	cmp	r2, #0
   1fb58:	d050      	beq.n	1fbfc <at_parser_max_params_from_str+0x104>
   1fb5a:	42af      	cmp	r7, r5
   1fb5c:	d94e      	bls.n	1fbfc <at_parser_max_params_from_str+0x104>
		if (isspace((int)*str)) {
   1fb5e:	f81b 2002 	ldrb.w	r2, [fp, r2]
		ret = at_parse_detect_type(&str, index);
   1fb62:	4629      	mov	r1, r5
		if (isspace((int)*str)) {
   1fb64:	0712      	lsls	r2, r2, #28
			str++;
   1fb66:	bf48      	it	mi
   1fb68:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   1fb6a:	a801      	add	r0, sp, #4
			str++;
   1fb6c:	bf48      	it	mi
   1fb6e:	9301      	strmi	r3, [sp, #4]
		ret = at_parse_detect_type(&str, index);
   1fb70:	f7ff fee2 	bl	1f938 <at_parse_detect_type>
		if (ret == -1) {
   1fb74:	1c43      	adds	r3, r0, #1
   1fb76:	d041      	beq.n	1fbfc <at_parser_max_params_from_str+0x104>
		if (ret == -2) {
   1fb78:	3002      	adds	r0, #2
			index = 0;
   1fb7a:	bf08      	it	eq
   1fb7c:	2500      	moveq	r5, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   1fb7e:	4632      	mov	r2, r6
   1fb80:	4629      	mov	r1, r5
   1fb82:	a801      	add	r0, sp, #4
			str = *at_params_str;
   1fb84:	bf08      	it	eq
   1fb86:	f8cd 8004 	streq.w	r8, [sp, #4]
		if (at_parse_process_element(&str, index, list) == -1) {
   1fb8a:	f7ff fdc5 	bl	1f718 <at_parse_process_element>
   1fb8e:	3001      	adds	r0, #1
   1fb90:	d034      	beq.n	1fbfc <at_parser_max_params_from_str+0x104>
		if (is_separator(*str)) {
   1fb92:	9a01      	ldr	r2, [sp, #4]
   1fb94:	7810      	ldrb	r0, [r2, #0]
   1fb96:	f7ff fd99 	bl	1f6cc <is_separator>
   1fb9a:	b1b0      	cbz	r0, 1fbca <at_parser_max_params_from_str+0xd2>
			if (is_lfcr(*(str + 1))) {
   1fb9c:	7850      	ldrb	r0, [r2, #1]
   1fb9e:	f009 fcc2 	bl	29526 <is_lfcr>
   1fba2:	b178      	cbz	r0, 1fbc4 <at_parser_max_params_from_str+0xcc>
				index++;
   1fba4:	3501      	adds	r5, #1
				if (index == max_params) {
   1fba6:	42bd      	cmp	r5, r7
   1fba8:	d041      	beq.n	1fc2e <at_parser_max_params_from_str+0x136>
				if (at_parse_detect_type(&str, index) == -1) {
   1fbaa:	4629      	mov	r1, r5
   1fbac:	a801      	add	r0, sp, #4
   1fbae:	f7ff fec3 	bl	1f938 <at_parse_detect_type>
   1fbb2:	3001      	adds	r0, #1
   1fbb4:	d022      	beq.n	1fbfc <at_parser_max_params_from_str+0x104>
				if (at_parse_process_element(&str, index,
   1fbb6:	4632      	mov	r2, r6
   1fbb8:	4629      	mov	r1, r5
   1fbba:	a801      	add	r0, sp, #4
   1fbbc:	f7ff fdac 	bl	1f718 <at_parse_process_element>
   1fbc0:	3001      	adds	r0, #1
   1fbc2:	d01b      	beq.n	1fbfc <at_parser_max_params_from_str+0x104>
			str++;
   1fbc4:	9b01      	ldr	r3, [sp, #4]
   1fbc6:	3301      	adds	r3, #1
   1fbc8:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   1fbca:	9a01      	ldr	r2, [sp, #4]
   1fbcc:	7810      	ldrb	r0, [r2, #0]
   1fbce:	f009 fcaa 	bl	29526 <is_lfcr>
   1fbd2:	b338      	cbz	r0, 1fc24 <at_parser_max_params_from_str+0x12c>
   1fbd4:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   1fbd6:	7811      	ldrb	r1, [r2, #0]
   1fbd8:	4692      	mov	sl, r2
   1fbda:	4608      	mov	r0, r1
   1fbdc:	3201      	adds	r2, #1
   1fbde:	f009 fca2 	bl	29526 <is_lfcr>
   1fbe2:	2800      	cmp	r0, #0
   1fbe4:	d1f7      	bne.n	1fbd6 <at_parser_max_params_from_str+0xde>
   1fbe6:	b139      	cbz	r1, 1fbf8 <at_parser_max_params_from_str+0x100>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   1fbe8:	4608      	mov	r0, r1
   1fbea:	f009 fc90 	bl	2950e <is_notification>
   1fbee:	b918      	cbnz	r0, 1fbf8 <at_parser_max_params_from_str+0x100>
			    is_result(str + i)) {
   1fbf0:	4650      	mov	r0, sl
   1fbf2:	f7ff fd79 	bl	1f6e8 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   1fbf6:	b1a8      	cbz	r0, 1fc24 <at_parser_max_params_from_str+0x12c>
				str += i;
   1fbf8:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   1fbfc:	9d01      	ldr	r5, [sp, #4]
	if (oversized) {
   1fbfe:	b9c4      	cbnz	r4, 1fc32 <at_parser_max_params_from_str+0x13a>
   1fc00:	782b      	ldrb	r3, [r5, #0]
   1fc02:	b1cb      	cbz	r3, 1fc38 <at_parser_max_params_from_str+0x140>
	if (!is_terminated(*str) && !is_result(str)) {
   1fc04:	4628      	mov	r0, r5
   1fc06:	f7ff fd6f 	bl	1f6e8 <is_result>
		return -EAGAIN;
   1fc0a:	2800      	cmp	r0, #0
   1fc0c:	bf14      	ite	ne
   1fc0e:	2000      	movne	r0, #0
   1fc10:	f06f 000a 	mvneq.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   1fc14:	f1b9 0f00 	cmp.w	r9, #0
   1fc18:	d001      	beq.n	1fc1e <at_parser_max_params_from_str+0x126>
		*next_param_str = (char *)at_params_str;
   1fc1a:	f8c9 5000 	str.w	r5, [r9]
	}

	return err;
}
   1fc1e:	b003      	add	sp, #12
   1fc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   1fc24:	3501      	adds	r5, #1
			oversized = true;
   1fc26:	42bd      	cmp	r5, r7
   1fc28:	bf08      	it	eq
   1fc2a:	2401      	moveq	r4, #1
   1fc2c:	e791      	b.n	1fb52 <at_parser_max_params_from_str+0x5a>
					oversized = true;
   1fc2e:	4604      	mov	r4, r0
   1fc30:	e7e4      	b.n	1fbfc <at_parser_max_params_from_str+0x104>
		return -E2BIG;
   1fc32:	f06f 0006 	mvn.w	r0, #6
   1fc36:	e7ed      	b.n	1fc14 <at_parser_max_params_from_str+0x11c>
	return 0;
   1fc38:	4620      	mov	r0, r4
   1fc3a:	e7eb      	b.n	1fc14 <at_parser_max_params_from_str+0x11c>
		return -EINVAL;
   1fc3c:	f06f 0015 	mvn.w	r0, #21
   1fc40:	e7ed      	b.n	1fc1e <at_parser_max_params_from_str+0x126>
   1fc42:	bf00      	nop
   1fc44:	2000ea3b 	.word	0x2000ea3b
   1fc48:	2000ea3a 	.word	0x2000ea3a
   1fc4c:	0002e947 	.word	0x0002e947

0001fc50 <at_handler_ncellmeas>:
	k_free(cells);
	k_free(evt.cells_info.neighbor_cells);
}

static void at_handler_ncellmeas(const char *response)
{
   1fc50:	b570      	push	{r4, r5, r6, lr}
   1fc52:	b0a4      	sub	sp, #144	; 0x90
	int err;
	struct lte_lc_evt evt = {0};
   1fc54:	2100      	movs	r1, #0
   1fc56:	2248      	movs	r2, #72	; 0x48
{
   1fc58:	4605      	mov	r5, r0
	struct lte_lc_evt evt = {0};
   1fc5a:	4668      	mov	r0, sp
   1fc5c:	f00b fad2 	bl	2b204 <memset>

	__ASSERT_NO_MSG(response != NULL);

	if (event_handler_list_is_empty() || !ncellmeas_ongoing) {
   1fc60:	f000 fbe6 	bl	20430 <event_handler_list_is_empty>
   1fc64:	4e27      	ldr	r6, [pc, #156]	; (1fd04 <at_handler_ncellmeas+0xb4>)
   1fc66:	4601      	mov	r1, r0
   1fc68:	b988      	cbnz	r0, 1fc8e <at_handler_ncellmeas+0x3e>
   1fc6a:	7833      	ldrb	r3, [r6, #0]
   1fc6c:	b17b      	cbz	r3, 1fc8e <at_handler_ncellmeas+0x3e>
		 * lte_lc_neighbor_cell_measurement().
		 */
		goto exit;
	}

	if (ncellmeas_params.search_type > LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
   1fc6e:	4c26      	ldr	r4, [pc, #152]	; (1fd08 <at_handler_ncellmeas+0xb8>)
   1fc70:	7823      	ldrb	r3, [r4, #0]
   1fc72:	2b03      	cmp	r3, #3
   1fc74:	d927      	bls.n	1fcc6 <at_handler_ncellmeas+0x76>
	struct lte_lc_evt evt = {0};
   1fc76:	2248      	movs	r2, #72	; 0x48
   1fc78:	eb0d 0002 	add.w	r0, sp, r2
   1fc7c:	f00b fac2 	bl	2b204 <memset>
	int max_cell_count = ncellmeas_params.gci_count;
   1fc80:	7860      	ldrb	r0, [r4, #1]
	if (max_cell_count != 0) {
   1fc82:	b140      	cbz	r0, 1fc96 <at_handler_ncellmeas+0x46>
		cells = k_calloc(max_cell_count, sizeof(struct lte_lc_cell));
   1fc84:	2130      	movs	r1, #48	; 0x30
   1fc86:	f00b fa80 	bl	2b18a <k_calloc>
		if (cells == NULL) {
   1fc8a:	4604      	mov	r4, r0
   1fc8c:	b920      	cbnz	r0, 1fc98 <at_handler_ncellmeas+0x48>

	if (neighbor_cells) {
		k_free(neighbor_cells);
	}
exit:
	ncellmeas_ongoing = false;
   1fc8e:	2300      	movs	r3, #0
   1fc90:	7033      	strb	r3, [r6, #0]
}
   1fc92:	b024      	add	sp, #144	; 0x90
   1fc94:	bd70      	pop	{r4, r5, r6, pc}
	struct lte_lc_cell *cells = NULL;
   1fc96:	4604      	mov	r4, r0
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   1fc98:	aa14      	add	r2, sp, #80	; 0x50
   1fc9a:	4629      	mov	r1, r5
   1fc9c:	481a      	ldr	r0, [pc, #104]	; (1fd08 <at_handler_ncellmeas+0xb8>)
	evt.cells_info.gci_cells = cells;
   1fc9e:	9423      	str	r4, [sp, #140]	; 0x8c
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   1fca0:	f000 fe6e 	bl	20980 <parse_ncellmeas_gci>
	switch (err) {
   1fca4:	1dc2      	adds	r2, r0, #7
   1fca6:	d001      	beq.n	1fcac <at_handler_ncellmeas+0x5c>
   1fca8:	2801      	cmp	r0, #1
   1fcaa:	d805      	bhi.n	1fcb8 <at_handler_ncellmeas+0x68>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1fcac:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   1fcae:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1fcb0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   1fcb4:	f000 fbc4 	bl	20440 <event_handler_list_dispatch>
	k_free(cells);
   1fcb8:	4620      	mov	r0, r4
   1fcba:	f00b fa5b 	bl	2b174 <k_free>
	k_free(evt.cells_info.neighbor_cells);
   1fcbe:	9821      	ldr	r0, [sp, #132]	; 0x84
		k_free(neighbor_cells);
   1fcc0:	f00b fa58 	bl	2b174 <k_free>
   1fcc4:	e7e3      	b.n	1fc8e <at_handler_ncellmeas+0x3e>
	int ncell_count = neighborcell_count_get(response);
   1fcc6:	4628      	mov	r0, r5
   1fcc8:	f009 feb7 	bl	29a3a <neighborcell_count_get>
   1fccc:	4604      	mov	r4, r0
	if (ncell_count != 0) {
   1fcce:	b128      	cbz	r0, 1fcdc <at_handler_ncellmeas+0x8c>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   1fcd0:	2110      	movs	r1, #16
   1fcd2:	f00b fa5a 	bl	2b18a <k_calloc>
		if (neighbor_cells == NULL) {
   1fcd6:	4604      	mov	r4, r0
   1fcd8:	2800      	cmp	r0, #0
   1fcda:	d0d8      	beq.n	1fc8e <at_handler_ncellmeas+0x3e>
	err = parse_ncellmeas(response, &evt.cells_info);
   1fcdc:	4628      	mov	r0, r5
   1fcde:	a902      	add	r1, sp, #8
	evt.cells_info.neighbor_cells = neighbor_cells;
   1fce0:	940f      	str	r4, [sp, #60]	; 0x3c
	err = parse_ncellmeas(response, &evt.cells_info);
   1fce2:	f000 fd25 	bl	20730 <parse_ncellmeas>
	switch (err) {
   1fce6:	1dc3      	adds	r3, r0, #7
   1fce8:	d001      	beq.n	1fcee <at_handler_ncellmeas+0x9e>
   1fcea:	2801      	cmp	r0, #1
   1fcec:	d805      	bhi.n	1fcfa <at_handler_ncellmeas+0xaa>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1fcee:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   1fcf0:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1fcf2:	f88d 3000 	strb.w	r3, [sp]
		event_handler_list_dispatch(&evt);
   1fcf6:	f000 fba3 	bl	20440 <event_handler_list_dispatch>
	if (neighbor_cells) {
   1fcfa:	2c00      	cmp	r4, #0
   1fcfc:	d0c7      	beq.n	1fc8e <at_handler_ncellmeas+0x3e>
		k_free(neighbor_cells);
   1fcfe:	4620      	mov	r0, r4
   1fd00:	e7de      	b.n	1fcc0 <at_handler_ncellmeas+0x70>
   1fd02:	bf00      	nop
   1fd04:	2000eae1 	.word	0x2000eae1
   1fd08:	2000eae2 	.word	0x2000eae2

0001fd0c <enable_notifications>:

	event_handler_list_dispatch(&evt);
}

static int enable_notifications(void)
{
   1fd0c:	b510      	push	{r4, lr}
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
   1fd0e:	480a      	ldr	r0, [pc, #40]	; (1fd38 <enable_notifications+0x2c>)
{
   1fd10:	b08e      	sub	sp, #56	; 0x38
	err = nrf_modem_at_printf(AT_CEREG_5);
   1fd12:	f003 f84b 	bl	22dac <nrf_modem_at_printf>
	if (err) {
   1fd16:	4604      	mov	r4, r0
   1fd18:	b958      	cbnz	r0, 1fd32 <enable_notifications+0x26>
			LOG_WRN("Modem sleep notifications require nRF9160 modem >= v1.3.0");
		}
	}

	/* +CSCON notifications */
	err = nrf_modem_at_printf(cscon);
   1fd1a:	4808      	ldr	r0, [pc, #32]	; (1fd3c <enable_notifications+0x30>)
   1fd1c:	f003 f846 	bl	22dac <nrf_modem_at_printf>
	if (err) {
   1fd20:	b120      	cbz	r0, 1fd2c <enable_notifications+0x20>
		 * not returned, while informative log messages are printed.
		 */
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");

		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   1fd22:	2132      	movs	r1, #50	; 0x32
   1fd24:	4a06      	ldr	r2, [pc, #24]	; (1fd40 <enable_notifications+0x34>)
   1fd26:	a801      	add	r0, sp, #4
   1fd28:	f003 f88c 	bl	22e44 <nrf_modem_at_cmd>
			LOG_WRN("Current modem firmware version: %s", buf);
		}
	}

	return 0;
}
   1fd2c:	4620      	mov	r0, r4
   1fd2e:	b00e      	add	sp, #56	; 0x38
   1fd30:	bd10      	pop	{r4, pc}
		return -EFAULT;
   1fd32:	f06f 040d 	mvn.w	r4, #13
   1fd36:	e7f9      	b.n	1fd2c <enable_notifications+0x20>
   1fd38:	0002dd29 	.word	0x0002dd29
   1fd3c:	0002dec4 	.word	0x0002dec4
   1fd40:	0002dd34 	.word	0x0002dd34

0001fd44 <lte_lc_psm_req>:

	return 0;
}

int lte_lc_psm_req(bool enable)
{
   1fd44:	b510      	push	{r4, lr}
	int err;

	if (enable) {
   1fd46:	b310      	cbz	r0, 1fd8e <lte_lc_psm_req+0x4a>
		if (strlen(psm_param_rptau) == 8 &&
   1fd48:	4812      	ldr	r0, [pc, #72]	; (1fd94 <lte_lc_psm_req+0x50>)
   1fd4a:	f7f9 f99f 	bl	1908c <strlen>
   1fd4e:	4604      	mov	r4, r0
		    strlen(psm_param_rat) == 8) {
   1fd50:	4811      	ldr	r0, [pc, #68]	; (1fd98 <lte_lc_psm_req+0x54>)
   1fd52:	f7f9 f99b 	bl	1908c <strlen>
		if (strlen(psm_param_rptau) == 8 &&
   1fd56:	2c08      	cmp	r4, #8
   1fd58:	d110      	bne.n	1fd7c <lte_lc_psm_req+0x38>
   1fd5a:	2808      	cmp	r0, #8
   1fd5c:	d109      	bne.n	1fd72 <lte_lc_psm_req+0x2e>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\",\"%s\"",
   1fd5e:	4a0e      	ldr	r2, [pc, #56]	; (1fd98 <lte_lc_psm_req+0x54>)
   1fd60:	490c      	ldr	r1, [pc, #48]	; (1fd94 <lte_lc_psm_req+0x50>)
   1fd62:	480e      	ldr	r0, [pc, #56]	; (1fd9c <lte_lc_psm_req+0x58>)
   1fd64:	f003 f822 	bl	22dac <nrf_modem_at_printf>
		err = nrf_modem_at_printf(psm_disable);
	}

	if (err) {
		LOG_ERR("nrf_modem_at_printf failed, reported error: %d", err);
		return -EFAULT;
   1fd68:	2800      	cmp	r0, #0
	}

	return 0;
}
   1fd6a:	bf18      	it	ne
   1fd6c:	f06f 000d 	mvnne.w	r0, #13
   1fd70:	bd10      	pop	{r4, pc}
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\"", psm_param_rptau);
   1fd72:	4908      	ldr	r1, [pc, #32]	; (1fd94 <lte_lc_psm_req+0x50>)
   1fd74:	480a      	ldr	r0, [pc, #40]	; (1fda0 <lte_lc_psm_req+0x5c>)
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   1fd76:	f003 f819 	bl	22dac <nrf_modem_at_printf>
   1fd7a:	e7f5      	b.n	1fd68 <lte_lc_psm_req+0x24>
		} else if (strlen(psm_param_rat) == 8) {
   1fd7c:	2808      	cmp	r0, #8
   1fd7e:	d102      	bne.n	1fd86 <lte_lc_psm_req+0x42>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   1fd80:	4905      	ldr	r1, [pc, #20]	; (1fd98 <lte_lc_psm_req+0x54>)
   1fd82:	4808      	ldr	r0, [pc, #32]	; (1fda4 <lte_lc_psm_req+0x60>)
   1fd84:	e7f7      	b.n	1fd76 <lte_lc_psm_req+0x32>
			err = nrf_modem_at_printf("AT+CPSMS=1");
   1fd86:	4808      	ldr	r0, [pc, #32]	; (1fda8 <lte_lc_psm_req+0x64>)
		err = nrf_modem_at_printf(psm_disable);
   1fd88:	f003 f810 	bl	22dac <nrf_modem_at_printf>
   1fd8c:	e7ec      	b.n	1fd68 <lte_lc_psm_req+0x24>
   1fd8e:	4807      	ldr	r0, [pc, #28]	; (1fdac <lte_lc_psm_req+0x68>)
   1fd90:	e7fa      	b.n	1fd88 <lte_lc_psm_req+0x44>
   1fd92:	bf00      	nop
   1fd94:	2000c789 	.word	0x2000c789
   1fd98:	2000c792 	.word	0x2000c792
   1fd9c:	0002dd3c 	.word	0x0002dd3c
   1fda0:	0002dd53 	.word	0x0002dd53
   1fda4:	0002dd65 	.word	0x0002dd65
   1fda8:	0002dd78 	.word	0x0002dd78
   1fdac:	0002decf 	.word	0x0002decf

0001fdb0 <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   1fdb0:	2300      	movs	r3, #0
{
   1fdb2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fdb4:	b08d      	sub	sp, #52	; 0x34
   1fdb6:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   1fdb8:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   1fdba:	e9cd 3303 	strd	r3, r3, [sp, #12]
	char tau_ext_str[9] = {0};
   1fdbe:	e9cd 3306 	strd	r3, r3, [sp, #24]
	char tau_legacy_str[9] = {0};
   1fdc2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	char active_time_str[9] = {0};
   1fdc6:	f88d 3014 	strb.w	r3, [sp, #20]
	char tau_ext_str[9] = {0};
   1fdca:	f88d 3020 	strb.w	r3, [sp, #32]
	char tau_legacy_str[9] = {0};
   1fdce:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if ((tau == NULL) || (active_time == NULL)) {
   1fdd2:	2800      	cmp	r0, #0
   1fdd4:	d04a      	beq.n	1fe6c <lte_lc_psm_get+0xbc>
   1fdd6:	2900      	cmp	r1, #0
   1fdd8:	d048      	beq.n	1fe6c <lte_lc_psm_get+0xbc>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   1fdda:	4c27      	ldr	r4, [pc, #156]	; (1fe78 <lte_lc_psm_get+0xc8>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   1fddc:	21a0      	movs	r1, #160	; 0xa0
   1fdde:	4620      	mov	r0, r4
   1fde0:	4a26      	ldr	r2, [pc, #152]	; (1fe7c <lte_lc_psm_get+0xcc>)
	response[0] = '\0';
   1fde2:	7023      	strb	r3, [r4, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   1fde4:	f003 f82e 	bl	22e44 <nrf_modem_at_cmd>
	if (err) {
   1fde8:	2800      	cmp	r0, #0
   1fdea:	d142      	bne.n	1fe72 <lte_lc_psm_get+0xc2>
		LOG_ERR("AT command failed, error: %d", err);
		return -EFAULT;
	}

	comma_ptr = strchr(response, ch);
   1fdec:	4620      	mov	r0, r4
   1fdee:	212c      	movs	r1, #44	; 0x2c
   1fdf0:	f00b fa55 	bl	2b29e <strchr>
	if (!comma_ptr) {
   1fdf4:	4604      	mov	r4, r0
   1fdf6:	2800      	cmp	r0, #0
   1fdf8:	d136      	bne.n	1fe68 <lte_lc_psm_get+0xb8>
		/* Not an AT error, thus must be that just a <reg_status> received:
		 * optional part is included in a response only when <reg_status> is 1 or 5.
		 */
		LOG_DBG("Not registered: cannot get current PSM configuration");
		return -EBADMSG;
   1fdfa:	f06f 004c 	mvn.w	r0, #76	; 0x4c
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec", *tau, *active_time);

	return 0;
}
   1fdfe:	b00d      	add	sp, #52	; 0x34
   1fe00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (comma_ptr) {
   1fe02:	2c00      	cmp	r4, #0
   1fe04:	d0f9      	beq.n	1fdfa <lte_lc_psm_get+0x4a>
			comma_ptr = strchr(comma_ptr + 1, ch);
   1fe06:	1c60      	adds	r0, r4, #1
   1fe08:	212c      	movs	r1, #44	; 0x2c
   1fe0a:	f00b fa48 	bl	2b29e <strchr>
	for (int i = 0; i < 12; i++) {
   1fe0e:	3f01      	subs	r7, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   1fe10:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   1fe12:	d1f6      	bne.n	1fe02 <lte_lc_psm_get+0x52>
	if (comma_ptr) {
   1fe14:	2800      	cmp	r0, #0
   1fe16:	d0f0      	beq.n	1fdfa <lte_lc_psm_get+0x4a>
		strncpy(active_time_str, comma_ptr + 2, 8);
   1fe18:	1c81      	adds	r1, r0, #2
   1fe1a:	2208      	movs	r2, #8
   1fe1c:	a803      	add	r0, sp, #12
   1fe1e:	f00b fa65 	bl	2b2ec <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   1fe22:	1c60      	adds	r0, r4, #1
   1fe24:	212c      	movs	r1, #44	; 0x2c
   1fe26:	f00b fa3a 	bl	2b29e <strchr>
	if (comma_ptr) {
   1fe2a:	4604      	mov	r4, r0
   1fe2c:	2800      	cmp	r0, #0
   1fe2e:	d0e4      	beq.n	1fdfa <lte_lc_psm_get+0x4a>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   1fe30:	1c81      	adds	r1, r0, #2
   1fe32:	2208      	movs	r2, #8
   1fe34:	a806      	add	r0, sp, #24
   1fe36:	f00b fa59 	bl	2b2ec <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   1fe3a:	212c      	movs	r1, #44	; 0x2c
   1fe3c:	1c60      	adds	r0, r4, #1
   1fe3e:	f00b fa2e 	bl	2b29e <strchr>
	if (comma_ptr) {
   1fe42:	b120      	cbz	r0, 1fe4e <lte_lc_psm_get+0x9e>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   1fe44:	1c81      	adds	r1, r0, #2
   1fe46:	2208      	movs	r2, #8
   1fe48:	a809      	add	r0, sp, #36	; 0x24
   1fe4a:	f00b fa4f 	bl	2b2ec <strncpy>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   1fe4e:	ab01      	add	r3, sp, #4
   1fe50:	aa09      	add	r2, sp, #36	; 0x24
   1fe52:	a906      	add	r1, sp, #24
   1fe54:	a803      	add	r0, sp, #12
   1fe56:	f000 fb17 	bl	20488 <parse_psm>
	if (err) {
   1fe5a:	2800      	cmp	r0, #0
   1fe5c:	d1cf      	bne.n	1fdfe <lte_lc_psm_get+0x4e>
	*tau = psm_cfg.tau;
   1fe5e:	9b01      	ldr	r3, [sp, #4]
   1fe60:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   1fe62:	9b02      	ldr	r3, [sp, #8]
   1fe64:	602b      	str	r3, [r5, #0]
	return 0;
   1fe66:	e7ca      	b.n	1fdfe <lte_lc_psm_get+0x4e>
   1fe68:	270c      	movs	r7, #12
   1fe6a:	e7cc      	b.n	1fe06 <lte_lc_psm_get+0x56>
		return -EINVAL;
   1fe6c:	f06f 0015 	mvn.w	r0, #21
   1fe70:	e7c5      	b.n	1fdfe <lte_lc_psm_get+0x4e>
		return -EFAULT;
   1fe72:	f06f 000d 	mvn.w	r0, #13
   1fe76:	e7c2      	b.n	1fdfe <lte_lc_psm_get+0x4e>
   1fe78:	2000ea3c 	.word	0x2000ea3c
   1fe7c:	0002dd83 	.word	0x0002dd83

0001fe80 <at_handler_cereg>:
	struct lte_lc_evt evt = {0};
   1fe80:	2248      	movs	r2, #72	; 0x48
{
   1fe82:	b5f0      	push	{r4, r5, r6, r7, lr}
	enum lte_lc_nw_reg_status reg_status = 0;
   1fe84:	2400      	movs	r4, #0
{
   1fe86:	4605      	mov	r5, r0
   1fe88:	b0a5      	sub	sp, #148	; 0x94
	struct lte_lc_evt evt = {0};
   1fe8a:	2100      	movs	r1, #0
   1fe8c:	eb0d 0002 	add.w	r0, sp, r2
   1fe90:	f00b f9b8 	bl	2b204 <memset>
	struct lte_lc_cell cell = {0};
   1fe94:	2230      	movs	r2, #48	; 0x30
   1fe96:	4621      	mov	r1, r4
   1fe98:	a806      	add	r0, sp, #24
	enum lte_lc_nw_reg_status reg_status = 0;
   1fe9a:	f88d 400e 	strb.w	r4, [sp, #14]
	struct lte_lc_psm_cfg psm_cfg = {0};
   1fe9e:	af04      	add	r7, sp, #16
	struct lte_lc_cell cell = {0};
   1fea0:	f00b f9b0 	bl	2b204 <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1fea4:	f10d 030f 	add.w	r3, sp, #15
	struct lte_lc_psm_cfg psm_cfg = {0};
   1fea8:	607c      	str	r4, [r7, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1feaa:	2101      	movs	r1, #1
   1feac:	9300      	str	r3, [sp, #0]
   1feae:	4628      	mov	r0, r5
   1feb0:	ab06      	add	r3, sp, #24
   1feb2:	f10d 020e 	add.w	r2, sp, #14
	struct lte_lc_psm_cfg psm_cfg = {0};
   1feb6:	9404      	str	r4, [sp, #16]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1feb8:	f000 fb64 	bl	20584 <parse_cereg>
	if (err) {
   1febc:	2800      	cmp	r0, #0
   1febe:	d171      	bne.n	1ffa4 <at_handler_cereg+0x124>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1fec0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1fec4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1fec8:	2b01      	cmp	r3, #1
   1feca:	d105      	bne.n	1fed8 <at_handler_cereg+0x58>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   1fecc:	9b08      	ldr	r3, [sp, #32]
   1fece:	3301      	adds	r3, #1
   1fed0:	d06a      	beq.n	1ffa8 <at_handler_cereg+0x128>
	z_impl_k_sem_give(sem);
   1fed2:	4837      	ldr	r0, [pc, #220]	; (1ffb0 <at_handler_cereg+0x130>)
   1fed4:	f004 fd4e 	bl	24974 <z_impl_k_sem_give>
	if (event_handler_list_is_empty()) {
   1fed8:	f000 faaa 	bl	20430 <event_handler_list_is_empty>
   1fedc:	2800      	cmp	r0, #0
   1fede:	d161      	bne.n	1ffa4 <at_handler_cereg+0x124>
	if (reg_status != prev_reg_status) {
   1fee0:	4a34      	ldr	r2, [pc, #208]	; (1ffb4 <at_handler_cereg+0x134>)
   1fee2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1fee6:	7811      	ldrb	r1, [r2, #0]
   1fee8:	4299      	cmp	r1, r3
   1feea:	d007      	beq.n	1fefc <at_handler_cereg+0x7c>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   1feec:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   1fef0:	a812      	add	r0, sp, #72	; 0x48
		prev_reg_status = reg_status;
   1fef2:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   1fef4:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
   1fef8:	f000 faa2 	bl	20440 <event_handler_list_dispatch>
	if ((cell.id != prev_cell.id) || (cell.tac != prev_cell.tac)) {
   1fefc:	4b2e      	ldr	r3, [pc, #184]	; (1ffb8 <at_handler_cereg+0x138>)
   1fefe:	9908      	ldr	r1, [sp, #32]
   1ff00:	689a      	ldr	r2, [r3, #8]
   1ff02:	4291      	cmp	r1, r2
   1ff04:	d103      	bne.n	1ff0e <at_handler_cereg+0x8e>
   1ff06:	68db      	ldr	r3, [r3, #12]
   1ff08:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ff0a:	429a      	cmp	r2, r3
   1ff0c:	d019      	beq.n	1ff42 <at_handler_cereg+0xc2>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   1ff0e:	2304      	movs	r3, #4
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1ff10:	4d29      	ldr	r5, [pc, #164]	; (1ffb8 <at_handler_cereg+0x138>)
   1ff12:	ac06      	add	r4, sp, #24
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   1ff14:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1ff18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ff1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ff1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ff1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ff20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1ff24:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   1ff28:	ae14      	add	r6, sp, #80	; 0x50
   1ff2a:	ad06      	add	r5, sp, #24
   1ff2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ff2e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ff30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ff32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ff34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1ff38:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   1ff3c:	a812      	add	r0, sp, #72	; 0x48
   1ff3e:	f000 fa7f 	bl	20440 <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   1ff42:	4a1e      	ldr	r2, [pc, #120]	; (1ffbc <at_handler_cereg+0x13c>)
   1ff44:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1ff48:	7811      	ldrb	r1, [r2, #0]
   1ff4a:	4299      	cmp	r1, r3
   1ff4c:	d008      	beq.n	1ff60 <at_handler_cereg+0xe0>
		prev_lte_mode = lte_mode;
   1ff4e:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   1ff50:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   1ff52:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   1ff54:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		evt.lte_mode = lte_mode;
   1ff58:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
   1ff5c:	f000 fa70 	bl	20440 <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   1ff60:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1ff64:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1ff68:	2b01      	cmp	r3, #1
   1ff6a:	d11b      	bne.n	1ffa4 <at_handler_cereg+0x124>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   1ff6c:	4638      	mov	r0, r7
   1ff6e:	a905      	add	r1, sp, #20
   1ff70:	f7ff ff1e 	bl	1fdb0 <lte_lc_psm_get>
	if (err) {
   1ff74:	b9b0      	cbnz	r0, 1ffa4 <at_handler_cereg+0x124>
	if ((psm_cfg.tau != prev_psm_cfg.tau) ||
   1ff76:	4b12      	ldr	r3, [pc, #72]	; (1ffc0 <at_handler_cereg+0x140>)
   1ff78:	9904      	ldr	r1, [sp, #16]
   1ff7a:	681a      	ldr	r2, [r3, #0]
   1ff7c:	4291      	cmp	r1, r2
   1ff7e:	461a      	mov	r2, r3
   1ff80:	d103      	bne.n	1ff8a <at_handler_cereg+0x10a>
   1ff82:	685b      	ldr	r3, [r3, #4]
   1ff84:	9905      	ldr	r1, [sp, #20]
   1ff86:	4299      	cmp	r1, r3
   1ff88:	d00c      	beq.n	1ffa4 <at_handler_cereg+0x124>
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1ff8a:	e897 0003 	ldmia.w	r7, {r0, r1}
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   1ff8e:	2301      	movs	r3, #1
   1ff90:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1ff94:	ab14      	add	r3, sp, #80	; 0x50
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1ff96:	e882 0003 	stmia.w	r2, {r0, r1}
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1ff9a:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   1ff9e:	a812      	add	r0, sp, #72	; 0x48
   1ffa0:	f000 fa4e 	bl	20440 <event_handler_list_dispatch>
}
   1ffa4:	b025      	add	sp, #148	; 0x94
   1ffa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   1ffa8:	2304      	movs	r3, #4
   1ffaa:	f88d 300e 	strb.w	r3, [sp, #14]
   1ffae:	e793      	b.n	1fed8 <at_handler_cereg+0x58>
   1ffb0:	2000d8ec 	.word	0x2000d8ec
   1ffb4:	2000eadd 	.word	0x2000eadd
   1ffb8:	2000ca78 	.word	0x2000ca78
   1ffbc:	2000eadc 	.word	0x2000eadc
   1ffc0:	2000d8e4 	.word	0x2000d8e4

0001ffc4 <lte_lc_edrx_req>:

	return 0;
}

int lte_lc_edrx_req(bool enable)
{
   1ffc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int err;
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   1ffc8:	2305      	movs	r3, #5
   1ffca:	2204      	movs	r2, #4
   1ffcc:	e9cd 2300 	strd	r2, r3, [sp]

	if (!enable) {
   1ffd0:	b938      	cbnz	r0, 1ffe2 <lte_lc_edrx_req+0x1e>
		err = nrf_modem_at_printf(edrx_disable);
   1ffd2:	481e      	ldr	r0, [pc, #120]	; (2004c <lte_lc_edrx_req+0x88>)
   1ffd4:	f002 feea 	bl	22dac <nrf_modem_at_printf>
		if (err) {
   1ffd8:	bba0      	cbnz	r0, 20044 <lte_lc_edrx_req+0x80>
			LOG_ERR("Failed to disable eDRX, reported error: %d", err);
			return -EFAULT;
		}

		return 0;
   1ffda:	2000      	movs	r0, #0
			return -EFAULT;
		}
	}

	return 0;
}
   1ffdc:	b003      	add	sp, #12
   1ffde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ffe2:	466e      	mov	r6, sp
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   1ffe4:	2700      	movs	r7, #0
					edrx_param_ltem : edrx_param_nbiot;
   1ffe6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 20050 <lte_lc_edrx_req+0x8c>
   1ffea:	f8df 9068 	ldr.w	r9, [pc, #104]	; 20054 <lte_lc_edrx_req+0x90>
   1ffee:	f8df a068 	ldr.w	sl, [pc, #104]	; 20058 <lte_lc_edrx_req+0x94>
		char *edrx_param = (actt[i] == AT_CEDRXS_ACTT_WB) ?
   1fff2:	f856 4b04 	ldr.w	r4, [r6], #4
					edrx_param_ltem : edrx_param_nbiot;
   1fff6:	4d19      	ldr	r5, [pc, #100]	; (2005c <lte_lc_edrx_req+0x98>)
   1fff8:	2c04      	cmp	r4, #4
   1fffa:	bf14      	ite	ne
   1fffc:	46c3      	movne	fp, r8
   1fffe:	46cb      	moveq	fp, r9
		if (strlen(edrx_param) == 4) {
   20000:	4658      	mov	r0, fp
					edrx_param_ltem : edrx_param_nbiot;
   20002:	bf18      	it	ne
   20004:	4655      	movne	r5, sl
		if (strlen(edrx_param) == 4) {
   20006:	f7f9 f841 	bl	1908c <strlen>
   2000a:	2804      	cmp	r0, #4
   2000c:	d10e      	bne.n	2002c <lte_lc_edrx_req+0x68>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d,\"%s\"", actt[i], edrx_param);
   2000e:	465a      	mov	r2, fp
   20010:	4621      	mov	r1, r4
   20012:	4813      	ldr	r0, [pc, #76]	; (20060 <lte_lc_edrx_req+0x9c>)
   20014:	f002 feca 	bl	22dac <nrf_modem_at_printf>
		if (err) {
   20018:	b9a0      	cbnz	r0, 20044 <lte_lc_edrx_req+0x80>
		if (strlen(ptw_param) != 4) {
   2001a:	4628      	mov	r0, r5
   2001c:	f7f9 f836 	bl	1908c <strlen>
   20020:	2804      	cmp	r0, #4
   20022:	d008      	beq.n	20036 <lte_lc_edrx_req+0x72>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   20024:	2f00      	cmp	r7, #0
   20026:	d1d8      	bne.n	1ffda <lte_lc_edrx_req+0x16>
   20028:	2701      	movs	r7, #1
   2002a:	e7e2      	b.n	1fff2 <lte_lc_edrx_req+0x2e>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d", actt[i]);
   2002c:	4621      	mov	r1, r4
   2002e:	480d      	ldr	r0, [pc, #52]	; (20064 <lte_lc_edrx_req+0xa0>)
   20030:	f002 febc 	bl	22dac <nrf_modem_at_printf>
   20034:	e7f0      	b.n	20018 <lte_lc_edrx_req+0x54>
		err = nrf_modem_at_printf("AT%%XPTW=%d,\"%s\"", actt[i], ptw_param);
   20036:	462a      	mov	r2, r5
   20038:	4621      	mov	r1, r4
   2003a:	480b      	ldr	r0, [pc, #44]	; (20068 <lte_lc_edrx_req+0xa4>)
   2003c:	f002 feb6 	bl	22dac <nrf_modem_at_printf>
		if (err) {
   20040:	2800      	cmp	r0, #0
   20042:	d0ef      	beq.n	20024 <lte_lc_edrx_req+0x60>
			return -EFAULT;
   20044:	f06f 000d 	mvn.w	r0, #13
   20048:	e7c8      	b.n	1ffdc <lte_lc_edrx_req+0x18>
   2004a:	bf00      	nop
   2004c:	0002ded9 	.word	0x0002ded9
   20050:	2000c79b 	.word	0x2000c79b
   20054:	2000c7a0 	.word	0x2000c7a0
   20058:	2000eae4 	.word	0x2000eae4
   2005c:	2000eae9 	.word	0x2000eae9
   20060:	0002dd90 	.word	0x0002dd90
   20064:	0002dda4 	.word	0x0002dda4
   20068:	0002ddb3 	.word	0x0002ddb3

0002006c <lte_lc_nw_reg_status_get>:

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
	int err;
	uint16_t status_tmp;
	uint32_t cell_id = 0;
   2006c:	2300      	movs	r3, #0
{
   2006e:	b513      	push	{r0, r1, r4, lr}

	if (status == NULL) {
   20070:	4604      	mov	r4, r0
	uint32_t cell_id = 0;
   20072:	9301      	str	r3, [sp, #4]
	if (status == NULL) {
   20074:	b190      	cbz	r0, 2009c <lte_lc_nw_reg_status_get+0x30>
		return -EINVAL;
	}

	/* Read network registration status */
	err = nrf_modem_at_scanf("AT+CEREG?",
   20076:	490c      	ldr	r1, [pc, #48]	; (200a8 <lte_lc_nw_reg_status_get+0x3c>)
   20078:	480c      	ldr	r0, [pc, #48]	; (200ac <lte_lc_nw_reg_status_get+0x40>)
   2007a:	ab01      	add	r3, sp, #4
   2007c:	f10d 0202 	add.w	r2, sp, #2
   20080:	f002 ff74 	bl	22f6c <nrf_modem_at_scanf>
		"%hu,"		/* <stat> */
		"%*[^,],"	/* <tac> */
		"\"%x\",",	/* <ci> */
		&status_tmp,
		&cell_id);
	if (err < 1) {
   20084:	2800      	cmp	r0, #0
   20086:	dd0c      	ble.n	200a2 <lte_lc_nw_reg_status_get+0x36>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   20088:	9b01      	ldr	r3, [sp, #4]
		*status = LTE_LC_NW_REG_UNKNOWN;
	} else {
		*status = status_tmp;
	}

	return 0;
   2008a:	2000      	movs	r0, #0
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   2008c:	3301      	adds	r3, #1
		*status = status_tmp;
   2008e:	bf0c      	ite	eq
   20090:	2304      	moveq	r3, #4
   20092:	f89d 3002 	ldrbne.w	r3, [sp, #2]
		*status = LTE_LC_NW_REG_UNKNOWN;
   20096:	7023      	strb	r3, [r4, #0]
}
   20098:	b002      	add	sp, #8
   2009a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2009c:	f06f 0015 	mvn.w	r0, #21
   200a0:	e7fa      	b.n	20098 <lte_lc_nw_reg_status_get+0x2c>
		return -EFAULT;
   200a2:	f06f 000d 	mvn.w	r0, #13
   200a6:	e7f7      	b.n	20098 <lte_lc_nw_reg_status_get+0x2c>
   200a8:	0002ddc4 	.word	0x0002ddc4
   200ac:	0002dde1 	.word	0x0002dde1

000200b0 <lte_lc_system_mode_set>:
int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
	int err;

	switch (mode) {
   200b0:	2807      	cmp	r0, #7
{
   200b2:	b538      	push	{r3, r4, r5, lr}
   200b4:	4605      	mov	r5, r0
   200b6:	460c      	mov	r4, r1
	switch (mode) {
   200b8:	d813      	bhi.n	200e2 <lte_lc_system_mode_set+0x32>
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
		return -EINVAL;
	}

	switch (preference) {
   200ba:	2904      	cmp	r1, #4
   200bc:	d811      	bhi.n	200e2 <lte_lc_system_mode_set+0x32>
	default:
		LOG_ERR("Invalid LTE preference requested: %d", preference);
		return -EINVAL;
	}

	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   200be:	4b0c      	ldr	r3, [pc, #48]	; (200f0 <lte_lc_system_mode_set+0x40>)
   200c0:	5c5a      	ldrb	r2, [r3, r1]
   200c2:	4b0c      	ldr	r3, [pc, #48]	; (200f4 <lte_lc_system_mode_set+0x44>)
   200c4:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   200c8:	480b      	ldr	r0, [pc, #44]	; (200f8 <lte_lc_system_mode_set+0x48>)
   200ca:	f002 fe6f 	bl	22dac <nrf_modem_at_printf>
				  system_mode_params[mode],
				  system_mode_preference[preference]);
	if (err) {
   200ce:	b958      	cbnz	r0, 200e8 <lte_lc_system_mode_set+0x38>
		LOG_ERR("Could not send AT command, error: %d", err);
		return -EFAULT;
	}

	sys_mode_current = mode;
   200d0:	4b0a      	ldr	r3, [pc, #40]	; (200fc <lte_lc_system_mode_set+0x4c>)
   200d2:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   200d4:	4b0a      	ldr	r3, [pc, #40]	; (20100 <lte_lc_system_mode_set+0x50>)
   200d6:	701d      	strb	r5, [r3, #0]
	mode_pref_current = preference;
   200d8:	4b0a      	ldr	r3, [pc, #40]	; (20104 <lte_lc_system_mode_set+0x54>)
   200da:	701c      	strb	r4, [r3, #0]
	mode_pref_target = preference;
   200dc:	4b0a      	ldr	r3, [pc, #40]	; (20108 <lte_lc_system_mode_set+0x58>)
   200de:	701c      	strb	r4, [r3, #0]

	return 0;
}
   200e0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   200e2:	f06f 0015 	mvn.w	r0, #21
   200e6:	e7fb      	b.n	200e0 <lte_lc_system_mode_set+0x30>
		return -EFAULT;
   200e8:	f06f 000d 	mvn.w	r0, #13
   200ec:	e7f8      	b.n	200e0 <lte_lc_system_mode_set+0x30>
   200ee:	bf00      	nop
   200f0:	0002debf 	.word	0x0002debf
   200f4:	0002c4e4 	.word	0x0002c4e4
   200f8:	0002ddeb 	.word	0x0002ddeb
   200fc:	2000eade 	.word	0x2000eade
   20100:	2000c788 	.word	0x2000c788
   20104:	2000eadf 	.word	0x2000eadf
   20108:	2000eae0 	.word	0x2000eae0

0002010c <lte_lc_system_mode_get>:
int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
	int err;
	int mode_bitmask = 0;
	int ltem_mode = 0;
   2010c:	2300      	movs	r3, #0
{
   2010e:	b530      	push	{r4, r5, lr}
   20110:	b087      	sub	sp, #28
   20112:	460c      	mov	r4, r1
	int nbiot_mode = 0;
	int gps_mode = 0;
	int mode_preference = 0;

	if (mode == NULL) {
   20114:	4605      	mov	r5, r0
	int nbiot_mode = 0;
   20116:	e9cd 3302 	strd	r3, r3, [sp, #8]
	int mode_preference = 0;
   2011a:	e9cd 3304 	strd	r3, r3, [sp, #16]
	if (mode == NULL) {
   2011e:	2800      	cmp	r0, #0
   20120:	d063      	beq.n	201ea <lte_lc_system_mode_get+0xde>
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   20122:	ab05      	add	r3, sp, #20
   20124:	9301      	str	r3, [sp, #4]
   20126:	ab04      	add	r3, sp, #16
   20128:	9300      	str	r3, [sp, #0]
   2012a:	4931      	ldr	r1, [pc, #196]	; (201f0 <lte_lc_system_mode_get+0xe4>)
   2012c:	4831      	ldr	r0, [pc, #196]	; (201f4 <lte_lc_system_mode_get+0xe8>)
   2012e:	ab03      	add	r3, sp, #12
   20130:	aa02      	add	r2, sp, #8
   20132:	f002 ff1b 	bl	22f6c <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   20136:	2804      	cmp	r0, #4
   20138:	d154      	bne.n	201e4 <lte_lc_system_mode_get+0xd8>
		LOG_ERR("Failed to get system mode, error: %d", err);
		return -EFAULT;
	}

	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   2013a:	9b03      	ldr	r3, [sp, #12]
   2013c:	1e1a      	subs	r2, r3, #0
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   2013e:	9b02      	ldr	r3, [sp, #8]
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   20140:	bf18      	it	ne
   20142:	2201      	movne	r2, #1
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   20144:	3b00      	subs	r3, #0
   20146:	bf18      	it	ne
   20148:	2301      	movne	r3, #1
   2014a:	005b      	lsls	r3, r3, #1
   2014c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   20150:	9a04      	ldr	r2, [sp, #16]
   20152:	3a00      	subs	r2, #0
   20154:	bf18      	it	ne
   20156:	2201      	movne	r2, #1
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   20158:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3

	switch (mode_bitmask) {
   2015c:	2b0e      	cmp	r3, #14
   2015e:	d841      	bhi.n	201e4 <lte_lc_system_mode_get+0xd8>
   20160:	e8df f003 	tbb	[pc, r3]
   20164:	4008401f 	.word	0x4008401f
   20168:	401b4013 	.word	0x401b4013
   2016c:	40174015 	.word	0x40174015
   20170:	4019      	.short	0x4019
   20172:	1d          	.byte	0x1d
   20173:	00          	.byte	0x00
   20174:	2301      	movs	r3, #1
	case 0:
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   20176:	702b      	strb	r3, [r5, #0]
		LOG_ERR("Invalid system mode, assuming parsing error");
		return -EFAULT;
	}

	/* Get LTE preference. */
	if (preference != NULL) {
   20178:	b9ac      	cbnz	r4, 201a6 <lte_lc_system_mode_get+0x9a>
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
			return -EFAULT;
		}
	}

	if (sys_mode_current != *mode) {
   2017a:	4a1f      	ldr	r2, [pc, #124]	; (201f8 <lte_lc_system_mode_get+0xec>)
   2017c:	7811      	ldrb	r1, [r2, #0]
   2017e:	4299      	cmp	r1, r3
		LOG_DBG("Current system mode updated from %d to %d",
			sys_mode_current, *mode);
		sys_mode_current = *mode;
   20180:	bf18      	it	ne
   20182:	7013      	strbne	r3, [r2, #0]
		LOG_DBG("Current system mode preference updated from %d to %d",
			mode_pref_current, *preference);
		mode_pref_current = *preference;
	}

	return 0;
   20184:	2000      	movs	r0, #0
}
   20186:	b007      	add	sp, #28
   20188:	bd30      	pop	{r4, r5, pc}
		break;
   2018a:	2302      	movs	r3, #2
   2018c:	e7f3      	b.n	20176 <lte_lc_system_mode_get+0x6a>
		break;
   2018e:	2303      	movs	r3, #3
   20190:	e7f1      	b.n	20176 <lte_lc_system_mode_get+0x6a>
		break;
   20192:	2304      	movs	r3, #4
   20194:	e7ef      	b.n	20176 <lte_lc_system_mode_get+0x6a>
		break;
   20196:	2305      	movs	r3, #5
   20198:	e7ed      	b.n	20176 <lte_lc_system_mode_get+0x6a>
		break;
   2019a:	2306      	movs	r3, #6
   2019c:	e7eb      	b.n	20176 <lte_lc_system_mode_get+0x6a>
		break;
   2019e:	2307      	movs	r3, #7
   201a0:	e7e9      	b.n	20176 <lte_lc_system_mode_get+0x6a>
	switch (mode_bitmask) {
   201a2:	2300      	movs	r3, #0
   201a4:	e7e7      	b.n	20176 <lte_lc_system_mode_get+0x6a>
		switch (mode_preference) {
   201a6:	9b05      	ldr	r3, [sp, #20]
   201a8:	2b04      	cmp	r3, #4
   201aa:	d81b      	bhi.n	201e4 <lte_lc_system_mode_get+0xd8>
   201ac:	e8df f003 	tbb	[pc, r3]
   201b0:	16141203 	.word	0x16141203
   201b4:	18          	.byte	0x18
   201b5:	00          	.byte	0x00
			*preference = LTE_LC_SYSTEM_MODE_PREFER_AUTO;
   201b6:	2300      	movs	r3, #0
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   201b8:	7023      	strb	r3, [r4, #0]
	if (sys_mode_current != *mode) {
   201ba:	4b0f      	ldr	r3, [pc, #60]	; (201f8 <lte_lc_system_mode_get+0xec>)
   201bc:	782a      	ldrb	r2, [r5, #0]
   201be:	7819      	ldrb	r1, [r3, #0]
   201c0:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   201c2:	bf18      	it	ne
   201c4:	701a      	strbne	r2, [r3, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   201c6:	4b0d      	ldr	r3, [pc, #52]	; (201fc <lte_lc_system_mode_get+0xf0>)
   201c8:	7822      	ldrb	r2, [r4, #0]
   201ca:	7819      	ldrb	r1, [r3, #0]
   201cc:	4291      	cmp	r1, r2
   201ce:	d0d9      	beq.n	20184 <lte_lc_system_mode_get+0x78>
		mode_pref_current = *preference;
   201d0:	701a      	strb	r2, [r3, #0]
   201d2:	e7d7      	b.n	20184 <lte_lc_system_mode_get+0x78>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   201d4:	2301      	movs	r3, #1
   201d6:	e7ef      	b.n	201b8 <lte_lc_system_mode_get+0xac>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   201d8:	2302      	movs	r3, #2
   201da:	e7ed      	b.n	201b8 <lte_lc_system_mode_get+0xac>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   201dc:	2303      	movs	r3, #3
   201de:	e7eb      	b.n	201b8 <lte_lc_system_mode_get+0xac>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   201e0:	2304      	movs	r3, #4
   201e2:	e7e9      	b.n	201b8 <lte_lc_system_mode_get+0xac>
		return -EFAULT;
   201e4:	f06f 000d 	mvn.w	r0, #13
   201e8:	e7cd      	b.n	20186 <lte_lc_system_mode_get+0x7a>
		return -EINVAL;
   201ea:	f06f 0015 	mvn.w	r0, #21
   201ee:	e7ca      	b.n	20186 <lte_lc_system_mode_get+0x7a>
   201f0:	0002de01 	.word	0x0002de01
   201f4:	0002de1c 	.word	0x0002de1c
   201f8:	2000eade 	.word	0x2000eade
   201fc:	2000eadf 	.word	0x2000eadf

00020200 <init_and_config>:
{
   20200:	b570      	push	{r4, r5, r6, lr}
	if (is_initialized) {
   20202:	4c12      	ldr	r4, [pc, #72]	; (2024c <init_and_config+0x4c>)
   20204:	7821      	ldrb	r1, [r4, #0]
   20206:	b9f9      	cbnz	r1, 20248 <init_and_config+0x48>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   20208:	4d11      	ldr	r5, [pc, #68]	; (20250 <init_and_config+0x50>)
   2020a:	4e12      	ldr	r6, [pc, #72]	; (20254 <init_and_config+0x54>)
	return z_impl_k_sem_init(sem, initial_count, limit);
   2020c:	2201      	movs	r2, #1
   2020e:	4812      	ldr	r0, [pc, #72]	; (20258 <init_and_config+0x58>)
   20210:	f00a fcb6 	bl	2ab80 <z_impl_k_sem_init>
   20214:	4629      	mov	r1, r5
   20216:	4630      	mov	r0, r6
   20218:	f7ff ff78 	bl	2010c <lte_lc_system_mode_get>
	if (err) {
   2021c:	b960      	cbnz	r0, 20238 <init_and_config+0x38>
	if ((sys_mode_current != sys_mode_target) ||
   2021e:	4b0f      	ldr	r3, [pc, #60]	; (2025c <init_and_config+0x5c>)
   20220:	7818      	ldrb	r0, [r3, #0]
	    (mode_pref_current != mode_pref_target)) {
   20222:	4b0f      	ldr	r3, [pc, #60]	; (20260 <init_and_config+0x60>)
   20224:	7819      	ldrb	r1, [r3, #0]
	if ((sys_mode_current != sys_mode_target) ||
   20226:	7833      	ldrb	r3, [r6, #0]
   20228:	4283      	cmp	r3, r0
   2022a:	d106      	bne.n	2023a <init_and_config+0x3a>
   2022c:	782b      	ldrb	r3, [r5, #0]
   2022e:	428b      	cmp	r3, r1
   20230:	d103      	bne.n	2023a <init_and_config+0x3a>
	err = enable_notifications();
   20232:	f7ff fd6b 	bl	1fd0c <enable_notifications>
	if (err) {
   20236:	b128      	cbz	r0, 20244 <init_and_config+0x44>
}
   20238:	bd70      	pop	{r4, r5, r6, pc}
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   2023a:	f7ff ff39 	bl	200b0 <lte_lc_system_mode_set>
		if (err) {
   2023e:	2800      	cmp	r0, #0
   20240:	d0f7      	beq.n	20232 <init_and_config+0x32>
   20242:	e7f9      	b.n	20238 <init_and_config+0x38>
	is_initialized = true;
   20244:	2301      	movs	r3, #1
   20246:	7023      	strb	r3, [r4, #0]
		return 0;
   20248:	2000      	movs	r0, #0
   2024a:	e7f5      	b.n	20238 <init_and_config+0x38>
   2024c:	2000eaee 	.word	0x2000eaee
   20250:	2000eadf 	.word	0x2000eadf
   20254:	2000eade 	.word	0x2000eade
   20258:	2000d8ec 	.word	0x2000d8ec
   2025c:	2000c788 	.word	0x2000c788
   20260:	2000eae0 	.word	0x2000eae0

00020264 <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   20264:	b513      	push	{r0, r1, r4, lr}
	int err;
	uint16_t mode_tmp;

	if (mode == NULL) {
   20266:	4604      	mov	r4, r0
   20268:	b168      	cbz	r0, 20286 <lte_lc_func_mode_get+0x22>
		return -EINVAL;
	}

	/* Exactly one parameter is expected to match. */
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   2026a:	490a      	ldr	r1, [pc, #40]	; (20294 <lte_lc_func_mode_get+0x30>)
   2026c:	480a      	ldr	r0, [pc, #40]	; (20298 <lte_lc_func_mode_get+0x34>)
   2026e:	f10d 0206 	add.w	r2, sp, #6
   20272:	f002 fe7b 	bl	22f6c <nrf_modem_at_scanf>
	if (err != 1) {
   20276:	2801      	cmp	r0, #1
   20278:	d108      	bne.n	2028c <lte_lc_func_mode_get+0x28>
		return -EFAULT;
	}

	*mode = mode_tmp;

	return 0;
   2027a:	2000      	movs	r0, #0
	*mode = mode_tmp;
   2027c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   20280:	7023      	strb	r3, [r4, #0]
}
   20282:	b002      	add	sp, #8
   20284:	bd10      	pop	{r4, pc}
		return -EINVAL;
   20286:	f06f 0015 	mvn.w	r0, #21
   2028a:	e7fa      	b.n	20282 <lte_lc_func_mode_get+0x1e>
		return -EFAULT;
   2028c:	f06f 000d 	mvn.w	r0, #13
   20290:	e7f7      	b.n	20282 <lte_lc_func_mode_get+0x1e>
   20292:	bf00      	nop
   20294:	0002de2c 	.word	0x0002de2c
   20298:	0002de37 	.word	0x0002de37

0002029c <lte_lc_func_mode_set>:

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
	int err;

	switch (mode) {
   2029c:	2804      	cmp	r0, #4
{
   2029e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   202a0:	4605      	mov	r5, r0
	switch (mode) {
   202a2:	d806      	bhi.n	202b2 <lte_lc_func_mode_set+0x16>
   202a4:	2804      	cmp	r0, #4
   202a6:	d810      	bhi.n	202ca <lte_lc_func_mode_set+0x2e>
   202a8:	e8df f000 	tbb	[pc, r0]
   202ac:	0f191219 	.word	0x0f191219
   202b0:	19          	.byte	0x19
   202b1:	00          	.byte	0x00
   202b2:	f1a0 0314 	sub.w	r3, r0, #20
   202b6:	b2db      	uxtb	r3, r3
   202b8:	2b18      	cmp	r3, #24
   202ba:	d806      	bhi.n	202ca <lte_lc_func_mode_set+0x2e>
   202bc:	2201      	movs	r2, #1
   202be:	4910      	ldr	r1, [pc, #64]	; (20300 <lte_lc_func_mode_set+0x64>)
   202c0:	409a      	lsls	r2, r3
   202c2:	420a      	tst	r2, r1
   202c4:	d10b      	bne.n	202de <lte_lc_func_mode_set+0x42>
   202c6:	2b01      	cmp	r3, #1
   202c8:	d002      	beq.n	202d0 <lte_lc_func_mode_set+0x34>
   202ca:	f06f 0415 	mvn.w	r4, #21
   202ce:	e004      	b.n	202da <lte_lc_func_mode_set+0x3e>
	case LTE_LC_FUNC_MODE_ACTIVATE_LTE:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_ACTIVATE_LTE);

		err = enable_notifications();
   202d0:	f7ff fd1c 	bl	1fd0c <enable_notifications>
		if (err) {
   202d4:	b118      	cbz	r0, 202de <lte_lc_func_mode_set+0x42>
			LOG_ERR("Failed to enable notifications, error: %d", err);
			return -EFAULT;
   202d6:	f06f 040d 	mvn.w	r4, #13
		LOG_DBG("CFUN monitor callback: %p", e->callback);
		e->callback(mode, e->context);
	}

	return 0;
}
   202da:	4620      	mov	r0, r4
   202dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
   202de:	4629      	mov	r1, r5
   202e0:	4808      	ldr	r0, [pc, #32]	; (20304 <lte_lc_func_mode_set+0x68>)
   202e2:	f002 fd63 	bl	22dac <nrf_modem_at_printf>
	if (err) {
   202e6:	4604      	mov	r4, r0
   202e8:	2800      	cmp	r0, #0
   202ea:	d1f4      	bne.n	202d6 <lte_lc_func_mode_set+0x3a>
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   202ec:	4e06      	ldr	r6, [pc, #24]	; (20308 <lte_lc_func_mode_set+0x6c>)
   202ee:	4f07      	ldr	r7, [pc, #28]	; (2030c <lte_lc_func_mode_set+0x70>)
   202f0:	42be      	cmp	r6, r7
   202f2:	d2f2      	bcs.n	202da <lte_lc_func_mode_set+0x3e>
		e->callback(mode, e->context);
   202f4:	e9d6 3100 	ldrd	r3, r1, [r6]
   202f8:	4628      	mov	r0, r5
   202fa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   202fc:	3608      	adds	r6, #8
   202fe:	e7f7      	b.n	202f0 <lte_lc_func_mode_set+0x54>
   20300:	01300c01 	.word	0x01300c01
   20304:	0002de40 	.word	0x0002de40
   20308:	0002ea94 	.word	0x0002ea94
   2030c:	0002ea9c 	.word	0x0002ea9c

00020310 <connect_lte>:
{
   20310:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!is_initialized) {
   20314:	4b36      	ldr	r3, [pc, #216]	; (203f0 <connect_lte+0xe0>)
{
   20316:	4605      	mov	r5, r0
	if (!is_initialized) {
   20318:	781b      	ldrb	r3, [r3, #0]
   2031a:	2b00      	cmp	r3, #0
   2031c:	d05e      	beq.n	203dc <connect_lte+0xcc>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2031e:	2601      	movs	r6, #1
   20320:	4c34      	ldr	r4, [pc, #208]	; (203f4 <connect_lte+0xe4>)
   20322:	e8d4 3fef 	ldaex	r3, [r4]
   20326:	e8c4 6fe2 	stlex	r2, r6, [r4]
   2032a:	2a00      	cmp	r2, #0
   2032c:	d1f9      	bne.n	20322 <connect_lte+0x12>
	if (atomic_set(&in_progress, 1)) {
   2032e:	2b00      	cmp	r3, #0
   20330:	d157      	bne.n	203e2 <connect_lte+0xd2>
	err = lte_lc_nw_reg_status_get(&reg_status);
   20332:	f10d 0007 	add.w	r0, sp, #7
   20336:	f7ff fe99 	bl	2006c <lte_lc_nw_reg_status_get>
	if (err) {
   2033a:	2800      	cmp	r0, #0
   2033c:	d154      	bne.n	203e8 <connect_lte+0xd8>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   2033e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20342:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   20346:	42b3      	cmp	r3, r6
   20348:	d017      	beq.n	2037a <connect_lte+0x6a>
	if (blocking) {
   2034a:	b125      	cbz	r5, 20356 <connect_lte+0x46>
   2034c:	4601      	mov	r1, r0
   2034e:	4632      	mov	r2, r6
   20350:	4829      	ldr	r0, [pc, #164]	; (203f8 <connect_lte+0xe8>)
   20352:	f00a fc15 	bl	2ab80 <z_impl_k_sem_init>
{
   20356:	2702      	movs	r7, #2
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   20358:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 203fc <connect_lte+0xec>
   2035c:	4e28      	ldr	r6, [pc, #160]	; (20400 <connect_lte+0xf0>)
		err = lte_lc_func_mode_get(&current_func_mode);
   2035e:	f10d 0006 	add.w	r0, sp, #6
   20362:	f7ff ff7f 	bl	20264 <lte_lc_func_mode_get>
		if (err) {
   20366:	b9c8      	cbnz	r0, 2039c <connect_lte+0x8c>
		if (!IS_ENABLED(CONFIG_LTE_NETWORK_DEFAULT) &&
   20368:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2036c:	f013 0ffb 	tst.w	r3, #251	; 0xfb
   20370:	d00d      	beq.n	2038e <connect_lte+0x7e>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   20372:	2001      	movs	r0, #1
   20374:	f7ff ff92 	bl	2029c <lte_lc_func_mode_set>
		if (err || !blocking) {
   20378:	b198      	cbz	r0, 203a2 <connect_lte+0x92>
   2037a:	2300      	movs	r3, #0
   2037c:	e8d4 2fef 	ldaex	r2, [r4]
   20380:	e8c4 3fe1 	stlex	r1, r3, [r4]
   20384:	2900      	cmp	r1, #0
   20386:	d1f9      	bne.n	2037c <connect_lte+0x6c>
}
   20388:	b002      	add	sp, #8
   2038a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   2038e:	f898 1000 	ldrb.w	r1, [r8]
   20392:	7830      	ldrb	r0, [r6, #0]
   20394:	f7ff fe8c 	bl	200b0 <lte_lc_system_mode_set>
			if (err) {
   20398:	2800      	cmp	r0, #0
   2039a:	d0ea      	beq.n	20372 <connect_lte+0x62>
			err = -EFAULT;
   2039c:	f06f 000d 	mvn.w	r0, #13
   203a0:	e7eb      	b.n	2037a <connect_lte+0x6a>
		if (err || !blocking) {
   203a2:	2d00      	cmp	r5, #0
   203a4:	d0e9      	beq.n	2037a <connect_lte+0x6a>
	return z_impl_k_sem_take(sem, timeout);
   203a6:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   203aa:	2300      	movs	r3, #0
   203ac:	4812      	ldr	r0, [pc, #72]	; (203f8 <connect_lte+0xe8>)
   203ae:	f004 fb07 	bl	249c0 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   203b2:	f110 0f0b 	cmn.w	r0, #11
   203b6:	d1e0      	bne.n	2037a <connect_lte+0x6a>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   203b8:	2f01      	cmp	r7, #1
   203ba:	d00c      	beq.n	203d6 <connect_lte+0xc6>
				if (sys_mode_target == sys_mode_preferred) {
   203bc:	7833      	ldrb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   203be:	2004      	movs	r0, #4
					sys_mode_target = sys_mode_fallback;
   203c0:	2b01      	cmp	r3, #1
   203c2:	bf14      	ite	ne
   203c4:	2301      	movne	r3, #1
   203c6:	2302      	moveq	r3, #2
   203c8:	7033      	strb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   203ca:	f7ff ff67 	bl	2029c <lte_lc_func_mode_set>
				if (err) {
   203ce:	2701      	movs	r7, #1
   203d0:	2800      	cmp	r0, #0
   203d2:	d0c4      	beq.n	2035e <connect_lte+0x4e>
   203d4:	e7e2      	b.n	2039c <connect_lte+0x8c>
				err = -ETIMEDOUT;
   203d6:	f06f 0073 	mvn.w	r0, #115	; 0x73
   203da:	e7ce      	b.n	2037a <connect_lte+0x6a>
		return -EPERM;
   203dc:	f04f 30ff 	mov.w	r0, #4294967295
   203e0:	e7d2      	b.n	20388 <connect_lte+0x78>
		return -EINPROGRESS;
   203e2:	f06f 0076 	mvn.w	r0, #118	; 0x76
   203e6:	e7cf      	b.n	20388 <connect_lte+0x78>
		return -EFAULT;
   203e8:	f06f 000d 	mvn.w	r0, #13
   203ec:	e7cc      	b.n	20388 <connect_lte+0x78>
   203ee:	bf00      	nop
   203f0:	2000eaee 	.word	0x2000eaee
   203f4:	2000d8e0 	.word	0x2000d8e0
   203f8:	2000d8ec 	.word	0x2000d8ec
   203fc:	2000eadf 	.word	0x2000eadf
   20400:	2000c788 	.word	0x2000c788

00020404 <lte_lc_deinit>:
{
   20404:	b508      	push	{r3, lr}
	if (is_initialized) {
   20406:	4b06      	ldr	r3, [pc, #24]	; (20420 <lte_lc_deinit+0x1c>)
   20408:	781a      	ldrb	r2, [r3, #0]
   2040a:	b122      	cbz	r2, 20416 <lte_lc_deinit+0x12>
		is_initialized = false;
   2040c:	2000      	movs	r0, #0
   2040e:	7018      	strb	r0, [r3, #0]
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   20410:	f7ff ff44 	bl	2029c <lte_lc_func_mode_set>
   20414:	b908      	cbnz	r0, 2041a <lte_lc_deinit+0x16>
   20416:	2000      	movs	r0, #0
}
   20418:	bd08      	pop	{r3, pc}
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   2041a:	f06f 000d 	mvn.w	r0, #13
   2041e:	e7fb      	b.n	20418 <lte_lc_deinit+0x14>
   20420:	2000eaee 	.word	0x2000eaee

00020424 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   20424:	4801      	ldr	r0, [pc, #4]	; (2042c <k_mutex_unlock.constprop.0.isra.0+0x8>)
   20426:	f004 ba35 	b.w	24894 <z_impl_k_mutex_unlock>
   2042a:	bf00      	nop
   2042c:	2000c8d4 	.word	0x2000c8d4

00020430 <event_handler_list_is_empty>:
	return list->head;
   20430:	4b02      	ldr	r3, [pc, #8]	; (2043c <event_handler_list_is_empty+0xc>)
Z_GENLIST_IS_EMPTY(slist)
   20432:	6818      	ldr	r0, [r3, #0]
}
   20434:	fab0 f080 	clz	r0, r0
   20438:	0940      	lsrs	r0, r0, #5
   2043a:	4770      	bx	lr
   2043c:	2000d904 	.word	0x2000d904

00020440 <event_handler_list_dispatch>:
{
   20440:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   20442:	4c0f      	ldr	r4, [pc, #60]	; (20480 <event_handler_list_dispatch+0x40>)
   20444:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   20446:	6823      	ldr	r3, [r4, #0]
   20448:	b1c3      	cbz	r3, 2047c <event_handler_list_dispatch+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   2044a:	f04f 33ff 	mov.w	r3, #4294967295
   2044e:	f04f 32ff 	mov.w	r2, #4294967295
   20452:	480c      	ldr	r0, [pc, #48]	; (20484 <event_handler_list_dispatch+0x44>)
   20454:	f004 f9a4 	bl	247a0 <z_impl_k_mutex_lock>
   20458:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2045a:	b10b      	cbz	r3, 20460 <event_handler_list_dispatch+0x20>
	return node->next;
   2045c:	681c      	ldr	r4, [r3, #0]
   2045e:	b91b      	cbnz	r3, 20468 <event_handler_list_dispatch+0x28>
}
   20460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   20464:	f7ff bfde 	b.w	20424 <k_mutex_unlock.constprop.0.isra.0>
		curr->handler(evt);
   20468:	4628      	mov	r0, r5
   2046a:	685b      	ldr	r3, [r3, #4]
   2046c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2046e:	b11c      	cbz	r4, 20478 <event_handler_list_dispatch+0x38>
   20470:	6822      	ldr	r2, [r4, #0]
   20472:	4623      	mov	r3, r4
   20474:	4614      	mov	r4, r2
   20476:	e7f2      	b.n	2045e <event_handler_list_dispatch+0x1e>
   20478:	4622      	mov	r2, r4
   2047a:	e7fa      	b.n	20472 <event_handler_list_dispatch+0x32>
}
   2047c:	bd38      	pop	{r3, r4, r5, pc}
   2047e:	bf00      	nop
   20480:	2000d904 	.word	0x2000d904
   20484:	2000c8d4 	.word	0x2000c8d4

00020488 <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   20488:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   2048c:	f04f 0900 	mov.w	r9, #0
{
   20490:	4607      	mov	r7, r0
   20492:	460e      	mov	r6, r1
   20494:	4614      	mov	r4, r2
   20496:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   20498:	f8cd 9004 	str.w	r9, [sp, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   2049c:	f7f8 fdf6 	bl	1908c <strlen>
   204a0:	2808      	cmp	r0, #8
   204a2:	d004      	beq.n	204ae <parse_psm+0x26>
		return -EINVAL;
   204a4:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   204a8:	b003      	add	sp, #12
   204aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   204ae:	4630      	mov	r0, r6
   204b0:	f7f8 fdec 	bl	1908c <strlen>
   204b4:	2808      	cmp	r0, #8
   204b6:	d1f5      	bne.n	204a4 <parse_psm+0x1c>
	memcpy(unit_str, tau_ext_str, unit_str_len);
   204b8:	8832      	ldrh	r2, [r6, #0]
   204ba:	78b3      	ldrb	r3, [r6, #2]
   204bc:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   204c0:	4649      	mov	r1, r9
   204c2:	2202      	movs	r2, #2
   204c4:	a801      	add	r0, sp, #4
	memcpy(unit_str, tau_ext_str, unit_str_len);
   204c6:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   204ca:	f005 fc5b 	bl	25d84 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   204ce:	2807      	cmp	r0, #7
   204d0:	d8e8      	bhi.n	204a4 <parse_psm+0x1c>
	timer_unit = t3412_ext_lookup[lut_idx];
   204d2:	4b29      	ldr	r3, [pc, #164]	; (20578 <parse_psm+0xf0>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   204d4:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   204d6:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   204da:	4649      	mov	r1, r9
   204dc:	1cf0      	adds	r0, r6, #3
   204de:	f005 fc51 	bl	25d84 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   204e2:	f1b8 0f00 	cmp.w	r8, #0
   204e6:	d121      	bne.n	2052c <parse_psm+0xa4>
   204e8:	f04f 33ff 	mov.w	r3, #4294967295
   204ec:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   204ee:	b314      	cbz	r4, 20536 <parse_psm+0xae>
   204f0:	4620      	mov	r0, r4
   204f2:	f7f8 fdcb 	bl	1908c <strlen>
   204f6:	2808      	cmp	r0, #8
   204f8:	d11d      	bne.n	20536 <parse_psm+0xae>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   204fa:	8822      	ldrh	r2, [r4, #0]
   204fc:	78a3      	ldrb	r3, [r4, #2]
   204fe:	f8ad 2004 	strh.w	r2, [sp, #4]
		lut_idx = strtoul(unit_str, NULL, 2);
   20502:	2100      	movs	r1, #0
   20504:	2202      	movs	r2, #2
   20506:	a801      	add	r0, sp, #4
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   20508:	f88d 3006 	strb.w	r3, [sp, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
   2050c:	f005 fc3a 	bl	25d84 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   20510:	2807      	cmp	r0, #7
   20512:	d8c7      	bhi.n	204a4 <parse_psm+0x1c>
		timer_unit = t3412_lookup[lut_idx];
   20514:	4b19      	ldr	r3, [pc, #100]	; (2057c <parse_psm+0xf4>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   20516:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   20518:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   2051c:	2100      	movs	r1, #0
   2051e:	1ce0      	adds	r0, r4, #3
   20520:	f005 fc30 	bl	25d84 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   20524:	b30e      	cbz	r6, 2056a <parse_psm+0xe2>
   20526:	4370      	muls	r0, r6
   20528:	6028      	str	r0, [r5, #0]
   2052a:	e004      	b.n	20536 <parse_psm+0xae>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2052c:	fb00 f008 	mul.w	r0, r0, r8
   20530:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   20532:	3001      	adds	r0, #1
   20534:	d0db      	beq.n	204ee <parse_psm+0x66>
	memcpy(unit_str, active_time_str, unit_str_len);
   20536:	883a      	ldrh	r2, [r7, #0]
   20538:	78bb      	ldrb	r3, [r7, #2]
   2053a:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   2053e:	2100      	movs	r1, #0
   20540:	2202      	movs	r2, #2
   20542:	a801      	add	r0, sp, #4
	memcpy(unit_str, active_time_str, unit_str_len);
   20544:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   20548:	f005 fc1c 	bl	25d84 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   2054c:	2807      	cmp	r0, #7
   2054e:	d8a9      	bhi.n	204a4 <parse_psm+0x1c>
	timer_unit = t3324_lookup[lut_idx];
   20550:	4b0b      	ldr	r3, [pc, #44]	; (20580 <parse_psm+0xf8>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   20552:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   20554:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   20558:	2100      	movs	r1, #0
   2055a:	1cf8      	adds	r0, r7, #3
   2055c:	f005 fc12 	bl	25d84 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   20560:	b134      	cbz	r4, 20570 <parse_psm+0xe8>
   20562:	4360      	muls	r0, r4
   20564:	6068      	str	r0, [r5, #4]
	return 0;
   20566:	2000      	movs	r0, #0
   20568:	e79e      	b.n	204a8 <parse_psm+0x20>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2056a:	f04f 30ff 	mov.w	r0, #4294967295
   2056e:	e7db      	b.n	20528 <parse_psm+0xa0>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   20570:	f04f 30ff 	mov.w	r0, #4294967295
   20574:	e7f6      	b.n	20564 <parse_psm+0xdc>
   20576:	bf00      	nop
   20578:	0002c54c 	.word	0x0002c54c
   2057c:	0002c52c 	.word	0x0002c52c
   20580:	0002c52c 	.word	0x0002c52c

00020584 <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   20584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20588:	461d      	mov	r5, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   2058a:	2300      	movs	r3, #0
{
   2058c:	b08b      	sub	sp, #44	; 0x2c
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   2058e:	9303      	str	r3, [sp, #12]
   20590:	f8ad 3010 	strh.w	r3, [sp, #16]
   20594:	f88d 3012 	strb.w	r3, [sp, #18]
{
   20598:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   2059a:	2309      	movs	r3, #9
   2059c:	2207      	movs	r2, #7
{
   2059e:	4681      	mov	r9, r0
   205a0:	460f      	mov	r7, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   205a2:	a805      	add	r0, sp, #20
   205a4:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   205a6:	e9cd 2300 	strd	r2, r3, [sp]
{
   205aa:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   205ae:	f008 ffea 	bl	29586 <at_params_list_init>
	if (err) {
   205b2:	4604      	mov	r4, r0
   205b4:	bb38      	cbnz	r0, 20606 <parse_cereg+0x82>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CEREG response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   205b6:	4601      	mov	r1, r0
   205b8:	aa05      	add	r2, sp, #20
   205ba:	4648      	mov	r0, r9
   205bc:	f008 ffca 	bl	29554 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   205c0:	4604      	mov	r4, r0
   205c2:	b9e8      	cbnz	r0, 20600 <parse_cereg+0x7c>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
		goto clean_exit;
	}

	/* Check if AT command response starts with +CEREG */
	err = at_params_string_get(&resp_list,
   205c4:	4601      	mov	r1, r0
   205c6:	466b      	mov	r3, sp
   205c8:	aa03      	add	r2, sp, #12
   205ca:	a805      	add	r0, sp, #20
   205cc:	f009 f8e3 	bl	29796 <at_params_string_get>
				   AT_RESPONSE_PREFIX_INDEX,
				   response_prefix,
				   &response_prefix_len);
	if (err) {
   205d0:	4604      	mov	r4, r0
   205d2:	b9a8      	cbnz	r0, 20600 <parse_cereg+0x7c>
	if ((response == NULL) || (check == NULL)) {
   205d4:	4a3c      	ldr	r2, [pc, #240]	; (206c8 <parse_cereg+0x144>)
   205d6:	9900      	ldr	r1, [sp, #0]
   205d8:	a803      	add	r0, sp, #12
   205da:	f009 f9a8 	bl	2992e <response_is_valid.part.0>
		LOG_ERR("Could not get response prefix, error: %d", err);
		goto clean_exit;
	}

	if (!response_is_valid(response_prefix, response_prefix_len,
   205de:	b178      	cbz	r0, 20600 <parse_cereg+0x7c>
	err = at_params_int_get(list, reg_status_index, &reg_status);
   205e0:	aa07      	add	r2, sp, #28
   205e2:	f1c7 0102 	rsb	r1, r7, #2
   205e6:	a805      	add	r0, sp, #20
   205e8:	f009 f8a9 	bl	2973e <at_params_int_get>
	if (err) {
   205ec:	2800      	cmp	r0, #0
   205ee:	d158      	bne.n	206a2 <parse_cereg+0x11e>
	switch (reg_status) {
   205f0:	9b07      	ldr	r3, [sp, #28]
   205f2:	2b08      	cmp	r3, #8
   205f4:	d021      	beq.n	2063a <parse_cereg+0xb6>
   205f6:	dc0a      	bgt.n	2060e <parse_cereg+0x8a>
   205f8:	2b05      	cmp	r3, #5
   205fa:	d91e      	bls.n	2063a <parse_cereg+0xb6>
		return -EINVAL;
   205fc:	f06f 0415 	mvn.w	r4, #21
			LOG_DBG("LTE mode: %d", *lte_mode);
		}
	}

clean_exit:
	at_params_list_free(&resp_list);
   20600:	a805      	add	r0, sp, #20
   20602:	f008 ffea 	bl	295da <at_params_list_free>

	return err;
}
   20606:	4620      	mov	r0, r4
   20608:	b00b      	add	sp, #44	; 0x2c
   2060a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (reg_status) {
   2060e:	2b5a      	cmp	r3, #90	; 0x5a
   20610:	d1f4      	bne.n	205fc <parse_cereg+0x78>
	if (reg_status) {
   20612:	b106      	cbz	r6, 20616 <parse_cereg+0x92>
		*reg_status = status;
   20614:	7033      	strb	r3, [r6, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   20616:	2d00      	cmp	r5, #0
   20618:	d14a      	bne.n	206b0 <parse_cereg+0x12c>
	if (lte_mode) {
   2061a:	f1b8 0f00 	cmp.w	r8, #0
   2061e:	d0ef      	beq.n	20600 <parse_cereg+0x7c>
		err = at_params_int_get(&resp_list,
   20620:	aa02      	add	r2, sp, #8
   20622:	f1c7 0105 	rsb	r1, r7, #5
   20626:	a805      	add	r0, sp, #20
   20628:	f009 f889 	bl	2973e <at_params_int_get>
		if (err) {
   2062c:	2800      	cmp	r0, #0
   2062e:	d144      	bne.n	206ba <parse_cereg+0x136>
			*lte_mode = mode;
   20630:	f89d 3008 	ldrb.w	r3, [sp, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   20634:	f888 3000 	strb.w	r3, [r8]
   20638:	e7e2      	b.n	20600 <parse_cereg+0x7c>
	if (reg_status) {
   2063a:	2e00      	cmp	r6, #0
   2063c:	d12f      	bne.n	2069e <parse_cereg+0x11a>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   2063e:	2d00      	cmp	r5, #0
   20640:	d0eb      	beq.n	2061a <parse_cereg+0x96>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   20642:	a805      	add	r0, sp, #20
   20644:	f009 f8c7 	bl	297d6 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   20648:	2803      	cmp	r0, #3
   2064a:	d931      	bls.n	206b0 <parse_cereg+0x12c>
		err = at_params_string_get(
   2064c:	f1c7 0103 	rsb	r1, r7, #3
   20650:	ab01      	add	r3, sp, #4
   20652:	aa07      	add	r2, sp, #28
   20654:	a805      	add	r0, sp, #20
   20656:	f009 f89e 	bl	29796 <at_params_string_get>
		if (err) {
   2065a:	4601      	mov	r1, r0
   2065c:	bb88      	cbnz	r0, 206c2 <parse_cereg+0x13e>
		str_buf[len] = '\0';
   2065e:	9b01      	ldr	r3, [sp, #4]
		cell->tac = strtoul(str_buf, NULL, 16);
   20660:	2210      	movs	r2, #16
		str_buf[len] = '\0';
   20662:	3328      	adds	r3, #40	; 0x28
   20664:	446b      	add	r3, sp
   20666:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   2066a:	a807      	add	r0, sp, #28
   2066c:	f005 fb8a 	bl	25d84 <strtoul>
		len = sizeof(str_buf) - 1;
   20670:	2309      	movs	r3, #9
		cell->tac = strtoul(str_buf, NULL, 16);
   20672:	60e8      	str	r0, [r5, #12]
		len = sizeof(str_buf) - 1;
   20674:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&resp_list,
   20676:	f1c7 0104 	rsb	r1, r7, #4
   2067a:	ab01      	add	r3, sp, #4
   2067c:	aa07      	add	r2, sp, #28
   2067e:	a805      	add	r0, sp, #20
   20680:	f009 f889 	bl	29796 <at_params_string_get>
		if (err) {
   20684:	4601      	mov	r1, r0
   20686:	b9e0      	cbnz	r0, 206c2 <parse_cereg+0x13e>
		str_buf[len] = '\0';
   20688:	9b01      	ldr	r3, [sp, #4]
		cell->id = strtoul(str_buf, NULL, 16);
   2068a:	2210      	movs	r2, #16
		str_buf[len] = '\0';
   2068c:	3328      	adds	r3, #40	; 0x28
   2068e:	446b      	add	r3, sp
   20690:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   20694:	a807      	add	r0, sp, #28
   20696:	f005 fb75 	bl	25d84 <strtoul>
   2069a:	60a8      	str	r0, [r5, #8]
   2069c:	e7bd      	b.n	2061a <parse_cereg+0x96>
		*reg_status = status;
   2069e:	7033      	strb	r3, [r6, #0]
   206a0:	e7cd      	b.n	2063e <parse_cereg+0xba>
	if (status < 0) {
   206a2:	db0c      	blt.n	206be <parse_cereg+0x13a>
	if (reg_status) {
   206a4:	b106      	cbz	r6, 206a8 <parse_cereg+0x124>
		*reg_status = status;
   206a6:	7030      	strb	r0, [r6, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   206a8:	2d00      	cmp	r5, #0
   206aa:	d0b6      	beq.n	2061a <parse_cereg+0x96>
   206ac:	285a      	cmp	r0, #90	; 0x5a
   206ae:	d1c8      	bne.n	20642 <parse_cereg+0xbe>
		cell->tac = UINT32_MAX;
   206b0:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   206b4:	e9c5 3302 	strd	r3, r3, [r5, #8]
   206b8:	e7af      	b.n	2061a <parse_cereg+0x96>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   206ba:	2300      	movs	r3, #0
   206bc:	e7ba      	b.n	20634 <parse_cereg+0xb0>
   206be:	4604      	mov	r4, r0
   206c0:	e79e      	b.n	20600 <parse_cereg+0x7c>
   206c2:	460c      	mov	r4, r1
   206c4:	e79c      	b.n	20600 <parse_cereg+0x7c>
   206c6:	bf00      	nop
   206c8:	0002de81 	.word	0x0002de81

000206cc <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
	int err;
	struct at_param_list resp_list = {0};
   206cc:	2300      	movs	r3, #0
{
   206ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   206d0:	4606      	mov	r6, r0

	if (time == NULL || at_response == NULL) {
   206d2:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   206d4:	e9cd 3300 	strd	r3, r3, [sp]
	if (time == NULL || at_response == NULL) {
   206d8:	b321      	cbz	r1, 20724 <parse_xt3412+0x58>
   206da:	b318      	cbz	r0, 20724 <parse_xt3412+0x58>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   206dc:	2104      	movs	r1, #4
   206de:	4668      	mov	r0, sp
   206e0:	f008 ff51 	bl	29586 <at_params_list_init>
	if (err) {
   206e4:	4604      	mov	r4, r0
   206e6:	b9d0      	cbnz	r0, 2071e <parse_xt3412+0x52>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse XT3412 response and populate AT parameter list */
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   206e8:	4601      	mov	r1, r0
   206ea:	466a      	mov	r2, sp
   206ec:	4630      	mov	r0, r6
   206ee:	f008 ff31 	bl	29554 <at_parser_params_from_str>
	if (err) {
   206f2:	4604      	mov	r4, r0
   206f4:	b980      	cbnz	r0, 20718 <parse_xt3412+0x4c>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
		goto clean_exit;
	}

	/* Get the remaining time of T3412 from the response */
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   206f6:	462a      	mov	r2, r5
   206f8:	2102      	movs	r1, #2
   206fa:	4668      	mov	r0, sp
   206fc:	f009 f837 	bl	2976e <at_params_int64_get>
	if (err) {
   20700:	4604      	mov	r4, r0
   20702:	b948      	cbnz	r0, 20718 <parse_xt3412+0x4c>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
		goto clean_exit;
	}

	if ((*time > T3412_MAX) || *time < 0) {
   20704:	e9d5 3200 	ldrd	r3, r2, [r5]
   20708:	4908      	ldr	r1, [pc, #32]	; (2072c <parse_xt3412+0x60>)
   2070a:	4299      	cmp	r1, r3
   2070c:	f04f 0308 	mov.w	r3, #8
   20710:	4193      	sbcs	r3, r2
		LOG_WRN("Parsed time parameter not within valid range");
		err = -EINVAL;
   20712:	bf38      	it	cc
   20714:	f06f 0415 	mvncc.w	r4, #21
	}

clean_exit:
	at_params_list_free(&resp_list);
   20718:	4668      	mov	r0, sp
   2071a:	f008 ff5e 	bl	295da <at_params_list_free>
	return err;
}
   2071e:	4620      	mov	r0, r4
   20720:	b002      	add	sp, #8
   20722:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   20724:	f06f 0415 	mvn.w	r4, #21
   20728:	e7f9      	b.n	2071e <parse_xt3412+0x52>
   2072a:	bf00      	nop
   2072c:	5099e000 	.word	0x5099e000

00020730 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   20730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   20734:	230b      	movs	r3, #11
{
   20736:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   20738:	2100      	movs	r1, #0
{
   2073a:	4606      	mov	r6, r0
   2073c:	b08d      	sub	sp, #52	; 0x34
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   2073e:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   20742:	9304      	str	r3, [sp, #16]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   20744:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
static uint32_t get_char_frequency(const char *str, char c)
   20748:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   2074a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   2074e:	2b2c      	cmp	r3, #44	; 0x2c
   20750:	d101      	bne.n	20756 <parse_ncellmeas+0x26>
			count++;
   20752:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   20754:	e7f9      	b.n	2074a <parse_ncellmeas+0x1a>
   20756:	2b00      	cmp	r3, #0
   20758:	d1f7      	bne.n	2074a <parse_ncellmeas+0x1a>
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
   2075a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   2075e:	f04f 33ff 	mov.w	r3, #4294967295

	err = at_params_list_init(&resp_list, param_count);
   20762:	3103      	adds	r1, #3
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20764:	60ab      	str	r3, [r5, #8]
	err = at_params_list_init(&resp_list, param_count);
   20766:	a807      	add	r0, sp, #28
   20768:	f008 ff0d 	bl	29586 <at_params_list_init>
	if (err) {
   2076c:	4604      	mov	r4, r0
   2076e:	2800      	cmp	r0, #0
   20770:	f040 80c6 	bne.w	20900 <parse_ncellmeas+0x1d0>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	err = at_parser_params_from_str(at_response,
   20774:	4601      	mov	r1, r0
   20776:	aa07      	add	r2, sp, #28
   20778:	4630      	mov	r0, r6
   2077a:	f008 feeb 	bl	29554 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err && err != -E2BIG) {
   2077e:	4604      	mov	r4, r0
   20780:	2800      	cmp	r0, #0
   20782:	f000 80a4 	beq.w	208ce <parse_ncellmeas+0x19e>
   20786:	1dc3      	adds	r3, r0, #7
   20788:	f040 80b7 	bne.w	208fa <parse_ncellmeas+0x1ca>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
		goto clean_exit;
	} else if (err == -E2BIG) {
		incomplete = true;
   2078c:	2701      	movs	r7, #1
	}

	err = at_params_string_get(&resp_list,
   2078e:	2100      	movs	r1, #0
   20790:	ab04      	add	r3, sp, #16
   20792:	aa09      	add	r2, sp, #36	; 0x24
   20794:	a807      	add	r0, sp, #28
   20796:	f008 fffe 	bl	29796 <at_params_string_get>
				   AT_RESPONSE_PREFIX_INDEX,
				   response_prefix,
				   &response_prefix_len);
	if (err) {
   2079a:	4604      	mov	r4, r0
   2079c:	2800      	cmp	r0, #0
   2079e:	f040 80ac 	bne.w	208fa <parse_ncellmeas+0x1ca>
	if ((response == NULL) || (check == NULL)) {
   207a2:	4a76      	ldr	r2, [pc, #472]	; (2097c <parse_ncellmeas+0x24c>)
   207a4:	9904      	ldr	r1, [sp, #16]
   207a6:	a809      	add	r0, sp, #36	; 0x24
   207a8:	f009 f8c1 	bl	2992e <response_is_valid.part.0>
		LOG_ERR("Could not get response prefix, error: %d", err);
		goto clean_exit;
	}

	if (!response_is_valid(response_prefix, response_prefix_len,
   207ac:	2800      	cmp	r0, #0
   207ae:	f000 80a4 	beq.w	208fa <parse_ncellmeas+0x1ca>
		LOG_DBG("Not a valid NCELLMEAS response");
		goto clean_exit;
	}

	/* Status code. */
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   207b2:	2101      	movs	r1, #1
   207b4:	aa01      	add	r2, sp, #4
   207b6:	a807      	add	r0, sp, #28
   207b8:	f008 ffc1 	bl	2973e <at_params_int_get>
	if (err) {
   207bc:	2800      	cmp	r0, #0
   207be:	f040 8084 	bne.w	208ca <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   207c2:	9b01      	ldr	r3, [sp, #4]
   207c4:	2b00      	cmp	r3, #0
   207c6:	f040 80d6 	bne.w	20976 <parse_ncellmeas+0x246>
		err = 1;
		goto clean_exit;
	}

	/* Current cell ID. */
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   207ca:	2102      	movs	r1, #2
   207cc:	aa02      	add	r2, sp, #8
   207ce:	a807      	add	r0, sp, #28
   207d0:	f009 f8ed 	bl	299ae <string_param_to_int.constprop.0>
	if (err) {
   207d4:	2800      	cmp	r0, #0
   207d6:	d178      	bne.n	208ca <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   207d8:	9b02      	ldr	r3, [sp, #8]
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
	}
	cells->current_cell.id = tmp;

	/* PLMN */
	len = sizeof(tmp_str);
   207da:	f04f 0807 	mov.w	r8, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   207de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   207e2:	bfa4      	itt	ge
   207e4:	f04f 33ff 	movge.w	r3, #4294967295
   207e8:	9302      	strge	r3, [sp, #8]
	cells->current_cell.id = tmp;
   207ea:	9b02      	ldr	r3, [sp, #8]

	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   207ec:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   207ee:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   207f0:	aa05      	add	r2, sp, #20
   207f2:	ab03      	add	r3, sp, #12
   207f4:	a807      	add	r0, sp, #28
	len = sizeof(tmp_str);
   207f6:	f8cd 800c 	str.w	r8, [sp, #12]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   207fa:	f008 ffcc 	bl	29796 <at_params_string_get>
				   tmp_str, &len);
	if (err) {
   207fe:	2800      	cmp	r0, #0
   20800:	d163      	bne.n	208ca <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	tmp_str[len] = '\0';
   20802:	9b03      	ldr	r3, [sp, #12]

	/* Read MNC and store as integer. The MNC starts as the fourth character
	 * in the string, following three characters long MCC.
	 */
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   20804:	210a      	movs	r1, #10
	tmp_str[len] = '\0';
   20806:	3330      	adds	r3, #48	; 0x30
   20808:	446b      	add	r3, sp
   2080a:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   2080e:	1d2a      	adds	r2, r5, #4
   20810:	f10d 0017 	add.w	r0, sp, #23
   20814:	f009 f8a5 	bl	29962 <string_to_int>
	if (err) {
   20818:	2800      	cmp	r0, #0
   2081a:	d156      	bne.n	208ca <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	/* Null-terminated MCC, read and store it. */
	tmp_str[3] = '\0';
   2081c:	f88d 0017 	strb.w	r0, [sp, #23]

	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   20820:	462a      	mov	r2, r5
   20822:	210a      	movs	r1, #10
   20824:	a805      	add	r0, sp, #20
   20826:	f009 f89c 	bl	29962 <string_to_int>
	if (err) {
   2082a:	2800      	cmp	r0, #0
   2082c:	d14d      	bne.n	208ca <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	/* Tracking area code. */
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   2082e:	2104      	movs	r1, #4
   20830:	aa02      	add	r2, sp, #8
   20832:	a807      	add	r0, sp, #28
   20834:	f009 f8bb 	bl	299ae <string_param_to_int.constprop.0>
	if (err) {
   20838:	2800      	cmp	r0, #0
   2083a:	d146      	bne.n	208ca <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	cells->current_cell.tac = tmp;
   2083c:	9b02      	ldr	r3, [sp, #8]

	/* Timing advance */
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   2083e:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   20840:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   20842:	aa02      	add	r2, sp, #8
   20844:	a807      	add	r0, sp, #28
   20846:	f008 ff7a 	bl	2973e <at_params_int_get>
				&tmp);
	if (err) {
   2084a:	2800      	cmp	r0, #0
   2084c:	d13d      	bne.n	208ca <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	cells->current_cell.timing_advance = tmp;
   2084e:	9b02      	ldr	r3, [sp, #8]

	/* EARFCN */
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   20850:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   20852:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   20854:	f105 0210 	add.w	r2, r5, #16
   20858:	a807      	add	r0, sp, #28
   2085a:	f008 ff70 	bl	2973e <at_params_int_get>
				&cells->current_cell.earfcn);
	if (err) {
   2085e:	2800      	cmp	r0, #0
   20860:	d133      	bne.n	208ca <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	/* Physical cell ID. */
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   20862:	4641      	mov	r1, r8
   20864:	f105 0228 	add.w	r2, r5, #40	; 0x28
   20868:	a807      	add	r0, sp, #28
   2086a:	f008 ff34 	bl	296d6 <at_params_short_get>
				&cells->current_cell.phys_cell_id);
	if (err) {
   2086e:	bb60      	cbnz	r0, 208ca <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	/* RSRP */
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   20870:	2108      	movs	r1, #8
   20872:	aa02      	add	r2, sp, #8
   20874:	a807      	add	r0, sp, #28
   20876:	f008 ff62 	bl	2973e <at_params_int_get>
	if (err) {
   2087a:	bb30      	cbnz	r0, 208ca <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	cells->current_cell.rsrp = tmp;
   2087c:	9b02      	ldr	r3, [sp, #8]

	/* RSRQ */
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   2087e:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   20880:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   20882:	aa02      	add	r2, sp, #8
   20884:	a807      	add	r0, sp, #28
   20886:	f008 ff5a 	bl	2973e <at_params_int_get>
	if (err) {
   2088a:	b9f0      	cbnz	r0, 208ca <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	cells->current_cell.rsrq = tmp;
   2088c:	9b02      	ldr	r3, [sp, #8]

	/* Measurement time. */
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   2088e:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   20890:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   20892:	f105 0220 	add.w	r2, r5, #32
   20896:	a807      	add	r0, sp, #28
   20898:	f008 ff69 	bl	2976e <at_params_int64_get>
				  &cells->current_cell.measurement_time);
	if (err) {
   2089c:	b9a8      	cbnz	r0, 208ca <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	/* Neighbor cell count. */
	cells->ncells_count = neighborcell_count_get(at_response);
   2089e:	4630      	mov	r0, r6
   208a0:	f009 f8cb 	bl	29a3a <neighborcell_count_get>
   208a4:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30

	/* Starting from modem firmware v1.3.1, timing advance measurement time
	 * information is added as the last parameter in the response.
	 */
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   208a8:	b2c0      	uxtb	r0, r0
   208aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   208ae:	f100 060b 	add.w	r6, r0, #11

	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   208b2:	a807      	add	r0, sp, #28
   208b4:	f008 ff8f 	bl	297d6 <at_params_valid_count_get>
   208b8:	4286      	cmp	r6, r0
   208ba:	d20a      	bcs.n	208d2 <parse_ncellmeas+0x1a2>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   208bc:	4631      	mov	r1, r6
   208be:	f105 0218 	add.w	r2, r5, #24
   208c2:	a807      	add	r0, sp, #28
   208c4:	f008 ff53 	bl	2976e <at_params_int64_get>
					  &cells->current_cell.timing_advance_meas_time);
		if (err) {
   208c8:	b138      	cbz	r0, 208da <parse_ncellmeas+0x1aa>
		}

		cells->neighbor_cells[i].rsrq = tmp;

		/* Time difference. */
		err = at_params_int_get(&resp_list,
   208ca:	4604      	mov	r4, r0
   208cc:	e015      	b.n	208fa <parse_ncellmeas+0x1ca>
	bool incomplete = false;
   208ce:	4607      	mov	r7, r0
   208d0:	e75d      	b.n	2078e <parse_ncellmeas+0x5e>
		cells->current_cell.timing_advance_meas_time = 0;
   208d2:	2200      	movs	r2, #0
   208d4:	2300      	movs	r3, #0
   208d6:	e9c5 2306 	strd	r2, r3, [r5, #24]
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   208da:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   208de:	b163      	cbz	r3, 208fa <parse_ncellmeas+0x1ca>
   208e0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   208e2:	b153      	cbz	r3, 208fa <parse_ncellmeas+0x1ca>
   208e4:	260f      	movs	r6, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   208e6:	f04f 0800 	mov.w	r8, #0
   208ea:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   208ee:	4598      	cmp	r8, r3
   208f0:	d30a      	bcc.n	20908 <parse_ncellmeas+0x1d8>
			goto clean_exit;
		}
	}

	if (incomplete) {
		err = -E2BIG;
   208f2:	2f00      	cmp	r7, #0
   208f4:	bf18      	it	ne
   208f6:	f06f 0406 	mvnne.w	r4, #6
	}

clean_exit:
	at_params_list_free(&resp_list);
   208fa:	a807      	add	r0, sp, #28
   208fc:	f008 fe6d 	bl	295da <at_params_list_free>

	return err;
}
   20900:	4620      	mov	r0, r4
   20902:	b00d      	add	sp, #52	; 0x34
   20904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					&cells->neighbor_cells[i].earfcn);
   20908:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   2090a:	1f31      	subs	r1, r6, #4
   2090c:	eb02 1208 	add.w	r2, r2, r8, lsl #4
   20910:	a807      	add	r0, sp, #28
   20912:	ea4f 1908 	mov.w	r9, r8, lsl #4
   20916:	f008 ff12 	bl	2973e <at_params_int_get>
		if (err) {
   2091a:	2800      	cmp	r0, #0
   2091c:	d1d5      	bne.n	208ca <parse_ncellmeas+0x19a>
					  &cells->neighbor_cells[i].phys_cell_id);
   2091e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   20920:	1ef1      	subs	r1, r6, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   20922:	444a      	add	r2, r9
		err = at_params_short_get(&resp_list,
   20924:	3208      	adds	r2, #8
   20926:	a807      	add	r0, sp, #28
   20928:	f008 fed5 	bl	296d6 <at_params_short_get>
		if (err) {
   2092c:	2800      	cmp	r0, #0
   2092e:	d1cc      	bne.n	208ca <parse_ncellmeas+0x19a>
		err = at_params_int_get(&resp_list,
   20930:	aa02      	add	r2, sp, #8
   20932:	1eb1      	subs	r1, r6, #2
   20934:	a807      	add	r0, sp, #28
   20936:	f008 ff02 	bl	2973e <at_params_int_get>
		if (err) {
   2093a:	2800      	cmp	r0, #0
   2093c:	d1c5      	bne.n	208ca <parse_ncellmeas+0x19a>
		cells->neighbor_cells[i].rsrp = tmp;
   2093e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   20940:	9a02      	ldr	r2, [sp, #8]
   20942:	444b      	add	r3, r9
   20944:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   20946:	1e71      	subs	r1, r6, #1
   20948:	aa02      	add	r2, sp, #8
   2094a:	a807      	add	r0, sp, #28
   2094c:	f008 fef7 	bl	2973e <at_params_int_get>
		if (err) {
   20950:	2800      	cmp	r0, #0
   20952:	d1ba      	bne.n	208ca <parse_ncellmeas+0x19a>
		cells->neighbor_cells[i].rsrq = tmp;
   20954:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   20956:	9a02      	ldr	r2, [sp, #8]
   20958:	444b      	add	r3, r9
   2095a:	819a      	strh	r2, [r3, #12]
					&cells->neighbor_cells[i].time_diff);
   2095c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   2095e:	4631      	mov	r1, r6
					&cells->neighbor_cells[i].time_diff);
   20960:	444a      	add	r2, r9
		err = at_params_int_get(&resp_list,
   20962:	3204      	adds	r2, #4
   20964:	a807      	add	r0, sp, #28
   20966:	f008 feea 	bl	2973e <at_params_int_get>
		if (err) {
   2096a:	3605      	adds	r6, #5
   2096c:	2800      	cmp	r0, #0
   2096e:	d1ac      	bne.n	208ca <parse_ncellmeas+0x19a>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   20970:	f108 0801 	add.w	r8, r8, #1
   20974:	e7b9      	b.n	208ea <parse_ncellmeas+0x1ba>
		err = 1;
   20976:	2401      	movs	r4, #1
   20978:	e7bf      	b.n	208fa <parse_ncellmeas+0x1ca>
   2097a:	bf00      	nop
   2097c:	0002de5f 	.word	0x0002de5f

00020980 <parse_ncellmeas_gci>:

int parse_ncellmeas_gci(struct lte_lc_ncellmeas_params *params,
	const char *at_response, struct lte_lc_cells_info *cells)
{
   20980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct at_param_list resp_list;
	struct lte_lc_ncell *ncells = NULL;
	int err, status, tmp_int, len;
	int16_t tmp_short;
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   20984:	230b      	movs	r3, #11
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   20986:	2400      	movs	r4, #0
{
   20988:	460e      	mov	r6, r1
   2098a:	b09f      	sub	sp, #124	; 0x7c
   2098c:	4617      	mov	r7, r2
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   2098e:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
{
   20992:	9003      	str	r0, [sp, #12]
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   20994:	f8cd 4043 	str.w	r4, [sp, #67]	; 0x43
	size_t response_prefix_len = sizeof(response_prefix);
   20998:	930a      	str	r3, [sp, #40]	; 0x28
static uint32_t get_char_frequency(const char *str, char c)
   2099a:	1e4a      	subs	r2, r1, #1
		if (*str == c) {
   2099c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   209a0:	2b2c      	cmp	r3, #44	; 0x2c
   209a2:	d101      	bne.n	209a8 <parse_ncellmeas_gci+0x28>
			count++;
   209a4:	3401      	adds	r4, #1
	} while (*(str++) != '\0');
   209a6:	e7f9      	b.n	2099c <parse_ncellmeas_gci+0x1c>
   209a8:	2b00      	cmp	r3, #0
   209aa:	d1f7      	bne.n	2099c <parse_ncellmeas_gci+0x1c>
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	/* Fill the defaults */
	cells->gci_cells_count = 0;
	cells->ncells_count = 0;
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   209ac:	f04f 32ff 	mov.w	r2, #4294967295
   209b0:	f04f 0c30 	mov.w	ip, #48	; 0x30
	size_t param_count = get_char_frequency(at_response, ',') + 3;
   209b4:	1ce1      	adds	r1, r4, #3
	cells->gci_cells_count = 0;
   209b6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	cells->ncells_count = 0;
   209ba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   209be:	60ba      	str	r2, [r7, #8]

	for (i = 0; i < params->gci_count; i++) {
   209c0:	9803      	ldr	r0, [sp, #12]
   209c2:	7840      	ldrb	r0, [r0, #1]
   209c4:	4298      	cmp	r0, r3
   209c6:	d846      	bhi.n	20a56 <parse_ncellmeas_gci+0xd6>
	 *		<meas_time>,<serving>,<neighbor_count>
	 *	[,<n_earfcn1>,<n_phys_cell_id1>,<n_rsrp1>,<n_rsrq1>,<time_diff1>]
	 *	[,<n_earfcn2>,<n_phys_cell_id2>,<n_rsrp2>,<n_rsrq2>,<time_diff2>]...]...
	 */

	err = at_params_list_init(&resp_list, param_count);
   209c8:	a80d      	add	r0, sp, #52	; 0x34
   209ca:	f008 fddc 	bl	29586 <at_params_list_init>
	if (err) {
   209ce:	4605      	mov	r5, r0
   209d0:	2800      	cmp	r0, #0
   209d2:	f040 8171 	bne.w	20cb8 <parse_ncellmeas_gci+0x338>
		LOG_ERR("Could not init AT params list for cell_list, error: %d", err);
		goto clean_exit;
	}

	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   209d6:	4601      	mov	r1, r0
   209d8:	aa0d      	add	r2, sp, #52	; 0x34
   209da:	4630      	mov	r0, r6
   209dc:	f008 fdba 	bl	29554 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   209e0:	4605      	mov	r5, r0
   209e2:	2800      	cmp	r0, #0
   209e4:	d041      	beq.n	20a6a <parse_ncellmeas_gci+0xea>
   209e6:	1dc3      	adds	r3, r0, #7
   209e8:	f040 8166 	bne.w	20cb8 <parse_ncellmeas_gci+0x338>
	} else if (err == -E2BIG) {
		/* Returns -E2BIG if the buffers set by CONFIG_LTE_NEIGHBOR_CELLS_MAX
		 * are too small for the modem response. The associated data is still valid,
		 * but not complete.
		 */
		incomplete = true;
   209ec:	f04f 0901 	mov.w	r9, #1
		LOG_WRN("E2BIG was returned, continue. param_count %d, err %d, str %s",
			param_count, err, at_response);
	}

	err = at_params_string_get(&resp_list,
   209f0:	2100      	movs	r1, #0
   209f2:	ab0a      	add	r3, sp, #40	; 0x28
   209f4:	aa0f      	add	r2, sp, #60	; 0x3c
   209f6:	a80d      	add	r0, sp, #52	; 0x34
   209f8:	f008 fecd 	bl	29796 <at_params_string_get>
				   AT_RESPONSE_PREFIX_INDEX,
				   response_prefix,
				   &response_prefix_len);
	if (err) {
   209fc:	4605      	mov	r5, r0
   209fe:	2800      	cmp	r0, #0
   20a00:	f040 815a 	bne.w	20cb8 <parse_ncellmeas_gci+0x338>
	if ((response == NULL) || (check == NULL)) {
   20a04:	4ab2      	ldr	r2, [pc, #712]	; (20cd0 <parse_ncellmeas_gci+0x350>)
   20a06:	990a      	ldr	r1, [sp, #40]	; 0x28
   20a08:	a80f      	add	r0, sp, #60	; 0x3c
   20a0a:	f008 ff90 	bl	2992e <response_is_valid.part.0>
		LOG_ERR("Could not get response prefix, error: %d", err);
		goto clean_exit;
	}

	if (!response_is_valid(response_prefix, response_prefix_len,
   20a0e:	9002      	str	r0, [sp, #8]
   20a10:	2800      	cmp	r0, #0
   20a12:	f000 8151 	beq.w	20cb8 <parse_ncellmeas_gci+0x338>
		goto clean_exit;
	}

	/* Status code. */
	curr_index = AT_NCELLMEAS_STATUS_INDEX;
	err = at_params_int_get(&resp_list, curr_index, &status);
   20a16:	2101      	movs	r1, #1
   20a18:	aa07      	add	r2, sp, #28
   20a1a:	a80d      	add	r0, sp, #52	; 0x34
   20a1c:	f008 fe8f 	bl	2973e <at_params_int_get>
	if (err) {
   20a20:	2800      	cmp	r0, #0
   20a22:	f040 8150 	bne.w	20cc6 <parse_ncellmeas_gci+0x346>
		LOG_DBG("Cannot parse NCELLMEAS status");
		goto clean_exit;
	}

	if (status == AT_NCELLMEAS_STATUS_VALUE_FAIL) {
   20a26:	9b07      	ldr	r3, [sp, #28]
   20a28:	2b01      	cmp	r3, #1
   20a2a:	f000 814e 	beq.w	20cca <parse_ncellmeas_gci+0x34a>
   20a2e:	46ab      	mov	fp, r5
   20a30:	2601      	movs	r6, #1
	} else if (status == AT_NCELLMEAS_STATUS_VALUE_INCOMPLETE) {
		LOG_WRN("NCELLMEAS measurements interrupted; results incomplete");
	}

	/* Go through the cells. */
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   20a32:	f1a4 030a 	sub.w	r3, r4, #10
   20a36:	9501      	str	r5, [sp, #4]
   20a38:	9305      	str	r3, [sp, #20]
   20a3a:	9b05      	ldr	r3, [sp, #20]
   20a3c:	42b3      	cmp	r3, r6
   20a3e:	d904      	bls.n	20a4a <parse_ncellmeas_gci+0xca>
			i < params->gci_count; i++) {
   20a40:	9b03      	ldr	r3, [sp, #12]
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   20a42:	9a01      	ldr	r2, [sp, #4]
			i < params->gci_count; i++) {
   20a44:	785b      	ldrb	r3, [r3, #1]
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   20a46:	4293      	cmp	r3, r2
   20a48:	d811      	bhi.n	20a6e <parse_ncellmeas_gci+0xee>
			k++;
		}
	}

	if (incomplete) {
		err = -E2BIG;
   20a4a:	f1b9 0f00 	cmp.w	r9, #0
   20a4e:	bf18      	it	ne
   20a50:	f06f 0506 	mvnne.w	r5, #6
   20a54:	e130      	b.n	20cb8 <parse_ncellmeas_gci+0x338>
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20a56:	fb0c f503 	mul.w	r5, ip, r3
   20a5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
	for (i = 0; i < params->gci_count; i++) {
   20a5c:	3301      	adds	r3, #1
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20a5e:	4428      	add	r0, r5
   20a60:	6082      	str	r2, [r0, #8]
		cells->gci_cells[i].timing_advance = LTE_LC_CELL_TIMING_ADVANCE_INVALID;
   20a62:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   20a64:	4428      	add	r0, r5
   20a66:	8282      	strh	r2, [r0, #20]
	for (i = 0; i < params->gci_count; i++) {
   20a68:	e7aa      	b.n	209c0 <parse_ncellmeas_gci+0x40>
	bool incomplete = false;
   20a6a:	4681      	mov	r9, r0
   20a6c:	e7c0      	b.n	209f0 <parse_ncellmeas_gci+0x70>
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   20a6e:	aa08      	add	r2, sp, #32
   20a70:	1c71      	adds	r1, r6, #1
   20a72:	a80d      	add	r0, sp, #52	; 0x34
   20a74:	f008 ff9b 	bl	299ae <string_param_to_int.constprop.0>
		if (err) {
   20a78:	4604      	mov	r4, r0
   20a7a:	2800      	cmp	r0, #0
   20a7c:	f040 811b 	bne.w	20cb6 <parse_ncellmeas_gci+0x336>
		if (tmp_int > LTE_LC_CELL_EUTRAN_ID_MAX) {
   20a80:	9b08      	ldr	r3, [sp, #32]
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   20a82:	aa0b      	add	r2, sp, #44	; 0x2c
		if (tmp_int > LTE_LC_CELL_EUTRAN_ID_MAX) {
   20a84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
			tmp_int = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20a88:	bfa4      	itt	ge
   20a8a:	f04f 33ff 	movge.w	r3, #4294967295
   20a8e:	9308      	strge	r3, [sp, #32]
		parsed_cell.id = tmp_int;
   20a90:	9b08      	ldr	r3, [sp, #32]
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   20a92:	1cb1      	adds	r1, r6, #2
		parsed_cell.id = tmp_int;
   20a94:	9314      	str	r3, [sp, #80]	; 0x50
		len = sizeof(tmp_str);
   20a96:	2307      	movs	r3, #7
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   20a98:	a80d      	add	r0, sp, #52	; 0x34
		len = sizeof(tmp_str);
   20a9a:	9309      	str	r3, [sp, #36]	; 0x24
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   20a9c:	ab09      	add	r3, sp, #36	; 0x24
   20a9e:	f008 fe7a 	bl	29796 <at_params_string_get>
		if (err) {
   20aa2:	4604      	mov	r4, r0
   20aa4:	2800      	cmp	r0, #0
   20aa6:	f040 8106 	bne.w	20cb6 <parse_ncellmeas_gci+0x336>
		tmp_str[len] = '\0';
   20aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err = string_to_int(&tmp_str[3], 10, &parsed_cell.mnc);
   20aac:	210a      	movs	r1, #10
		tmp_str[len] = '\0';
   20aae:	3378      	adds	r3, #120	; 0x78
   20ab0:	446b      	add	r3, sp
   20ab2:	f803 0c4c 	strb.w	r0, [r3, #-76]
		err = string_to_int(&tmp_str[3], 10, &parsed_cell.mnc);
   20ab6:	aa13      	add	r2, sp, #76	; 0x4c
   20ab8:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   20abc:	f008 ff51 	bl	29962 <string_to_int>
		if (err) {
   20ac0:	4604      	mov	r4, r0
   20ac2:	2800      	cmp	r0, #0
   20ac4:	f040 80f7 	bne.w	20cb6 <parse_ncellmeas_gci+0x336>
		tmp_str[3] = '\0';
   20ac8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
		err = string_to_int(tmp_str, 10, &parsed_cell.mcc);
   20acc:	210a      	movs	r1, #10
   20ace:	aa12      	add	r2, sp, #72	; 0x48
   20ad0:	a80b      	add	r0, sp, #44	; 0x2c
   20ad2:	f008 ff46 	bl	29962 <string_to_int>
		if (err) {
   20ad6:	4604      	mov	r4, r0
   20ad8:	2800      	cmp	r0, #0
   20ada:	f040 80ec 	bne.w	20cb6 <parse_ncellmeas_gci+0x336>
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   20ade:	aa08      	add	r2, sp, #32
   20ae0:	1cf1      	adds	r1, r6, #3
   20ae2:	a80d      	add	r0, sp, #52	; 0x34
   20ae4:	f008 ff63 	bl	299ae <string_param_to_int.constprop.0>
		if (err) {
   20ae8:	4604      	mov	r4, r0
   20aea:	2800      	cmp	r0, #0
   20aec:	f040 80e3 	bne.w	20cb6 <parse_ncellmeas_gci+0x336>
		parsed_cell.tac = tmp_int;
   20af0:	9b08      	ldr	r3, [sp, #32]
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   20af2:	aa08      	add	r2, sp, #32
   20af4:	1d31      	adds	r1, r6, #4
   20af6:	a80d      	add	r0, sp, #52	; 0x34
		parsed_cell.tac = tmp_int;
   20af8:	9315      	str	r3, [sp, #84]	; 0x54
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   20afa:	f008 fe20 	bl	2973e <at_params_int_get>
		if (err) {
   20afe:	4604      	mov	r4, r0
   20b00:	2800      	cmp	r0, #0
   20b02:	f040 80d8 	bne.w	20cb6 <parse_ncellmeas_gci+0x336>
		parsed_cell.timing_advance = tmp_int;
   20b06:	9b08      	ldr	r3, [sp, #32]
		err = at_params_int64_get(&resp_list, curr_index,
   20b08:	aa18      	add	r2, sp, #96	; 0x60
   20b0a:	1d71      	adds	r1, r6, #5
   20b0c:	a80d      	add	r0, sp, #52	; 0x34
		parsed_cell.timing_advance = tmp_int;
   20b0e:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
		err = at_params_int64_get(&resp_list, curr_index,
   20b12:	f008 fe2c 	bl	2976e <at_params_int64_get>
		if (err) {
   20b16:	4604      	mov	r4, r0
   20b18:	2800      	cmp	r0, #0
   20b1a:	f040 80cc 	bne.w	20cb6 <parse_ncellmeas_gci+0x336>
		err = at_params_int_get(&resp_list, curr_index, &parsed_cell.earfcn);
   20b1e:	aa16      	add	r2, sp, #88	; 0x58
   20b20:	1db1      	adds	r1, r6, #6
   20b22:	a80d      	add	r0, sp, #52	; 0x34
   20b24:	f008 fe0b 	bl	2973e <at_params_int_get>
		if (err) {
   20b28:	4604      	mov	r4, r0
   20b2a:	2800      	cmp	r0, #0
   20b2c:	f040 80c3 	bne.w	20cb6 <parse_ncellmeas_gci+0x336>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.phys_cell_id);
   20b30:	aa1c      	add	r2, sp, #112	; 0x70
   20b32:	1df1      	adds	r1, r6, #7
   20b34:	a80d      	add	r0, sp, #52	; 0x34
   20b36:	f008 fdce 	bl	296d6 <at_params_short_get>
		if (err) {
   20b3a:	4604      	mov	r4, r0
   20b3c:	2800      	cmp	r0, #0
   20b3e:	f040 80ba 	bne.w	20cb6 <parse_ncellmeas_gci+0x336>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrp);
   20b42:	f10d 0272 	add.w	r2, sp, #114	; 0x72
   20b46:	f106 0108 	add.w	r1, r6, #8
   20b4a:	a80d      	add	r0, sp, #52	; 0x34
   20b4c:	f008 fdc3 	bl	296d6 <at_params_short_get>
		if (err) {
   20b50:	4604      	mov	r4, r0
   20b52:	2800      	cmp	r0, #0
   20b54:	f040 80af 	bne.w	20cb6 <parse_ncellmeas_gci+0x336>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrq);
   20b58:	aa1d      	add	r2, sp, #116	; 0x74
   20b5a:	f106 0109 	add.w	r1, r6, #9
   20b5e:	a80d      	add	r0, sp, #52	; 0x34
   20b60:	f008 fdb9 	bl	296d6 <at_params_short_get>
		if (err) {
   20b64:	4604      	mov	r4, r0
   20b66:	2800      	cmp	r0, #0
   20b68:	f040 80a5 	bne.w	20cb6 <parse_ncellmeas_gci+0x336>
		err = at_params_int64_get(&resp_list, curr_index, &parsed_cell.measurement_time);
   20b6c:	aa1a      	add	r2, sp, #104	; 0x68
   20b6e:	f106 010a 	add.w	r1, r6, #10
   20b72:	a80d      	add	r0, sp, #52	; 0x34
   20b74:	f008 fdfb 	bl	2976e <at_params_int64_get>
		if (err) {
   20b78:	4604      	mov	r4, r0
   20b7a:	2800      	cmp	r0, #0
   20b7c:	f040 809b 	bne.w	20cb6 <parse_ncellmeas_gci+0x336>
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   20b80:	f10d 021a 	add.w	r2, sp, #26
   20b84:	f106 010b 	add.w	r1, r6, #11
   20b88:	a80d      	add	r0, sp, #52	; 0x34
   20b8a:	f008 fda4 	bl	296d6 <at_params_short_get>
		if (err) {
   20b8e:	4604      	mov	r4, r0
   20b90:	2800      	cmp	r0, #0
   20b92:	f040 8090 	bne.w	20cb6 <parse_ncellmeas_gci+0x336>
		curr_index++;
   20b96:	360c      	adds	r6, #12
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   20b98:	4631      	mov	r1, r6
   20b9a:	f10d 021a 	add.w	r2, sp, #26
   20b9e:	a80d      	add	r0, sp, #52	; 0x34
		is_serving_cell = tmp_short;
   20ba0:	f9bd 801a 	ldrsh.w	r8, [sp, #26]
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   20ba4:	f008 fd97 	bl	296d6 <at_params_short_get>
		if (err) {
   20ba8:	4604      	mov	r4, r0
   20baa:	2800      	cmp	r0, #0
   20bac:	f040 8083 	bne.w	20cb6 <parse_ncellmeas_gci+0x336>
		if (is_serving_cell) {
   20bb0:	f1b8 0f00 	cmp.w	r8, #0
   20bb4:	d068      	beq.n	20c88 <parse_ncellmeas_gci+0x308>
			cells->current_cell = parsed_cell;
   20bb6:	46be      	mov	lr, r7
   20bb8:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
   20bbc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   20bc0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   20bc4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   20bc8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   20bcc:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
		parsed_ncells_count = tmp_short;
   20bd0:	f89d 801a 	ldrb.w	r8, [sp, #26]
			cells->current_cell = parsed_cell;
   20bd4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
			if (parsed_ncells_count != 0) {
   20bd8:	f1b8 0f00 	cmp.w	r8, #0
   20bdc:	d010      	beq.n	20c00 <parse_ncellmeas_gci+0x280>
					to_be_parsed_ncell_count = parsed_ncells_count;
   20bde:	f1b8 0f0a 	cmp.w	r8, #10
   20be2:	bf94      	ite	ls
   20be4:	4644      	movls	r4, r8
   20be6:	240a      	movhi	r4, #10
   20be8:	9b02      	ldr	r3, [sp, #8]
				ncells = k_calloc(
   20bea:	f04f 0110 	mov.w	r1, #16
   20bee:	4620      	mov	r0, r4
					to_be_parsed_ncell_count = parsed_ncells_count;
   20bf0:	bf88      	it	hi
   20bf2:	4699      	movhi	r9, r3
				ncells = k_calloc(
   20bf4:	f00a fac9 	bl	2b18a <k_calloc>
				if (ncells == NULL) {
   20bf8:	b140      	cbz	r0, 20c0c <parse_ncellmeas_gci+0x28c>
				cells->neighbor_cells = ncells;
   20bfa:	6378      	str	r0, [r7, #52]	; 0x34
				cells->ncells_count = to_be_parsed_ncell_count;
   20bfc:	f887 4030 	strb.w	r4, [r7, #48]	; 0x30
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   20c00:	f04f 0800 	mov.w	r8, #0
   20c04:	9404      	str	r4, [sp, #16]
   20c06:	9b04      	ldr	r3, [sp, #16]
   20c08:	4543      	cmp	r3, r8
   20c0a:	d103      	bne.n	20c14 <parse_ncellmeas_gci+0x294>
			i < params->gci_count; i++) {
   20c0c:	9b01      	ldr	r3, [sp, #4]
   20c0e:	3301      	adds	r3, #1
   20c10:	9301      	str	r3, [sp, #4]
   20c12:	e712      	b.n	20a3a <parse_ncellmeas_gci+0xba>
							&cells->neighbor_cells[j].earfcn);
   20c14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
				err = at_params_int_get(&resp_list,
   20c16:	1c71      	adds	r1, r6, #1
   20c18:	eb02 1208 	add.w	r2, r2, r8, lsl #4
   20c1c:	a80d      	add	r0, sp, #52	; 0x34
   20c1e:	f008 fd8e 	bl	2973e <at_params_int_get>
				if (err) {
   20c22:	ea4f 1a08 	mov.w	sl, r8, lsl #4
   20c26:	4604      	mov	r4, r0
   20c28:	2800      	cmp	r0, #0
   20c2a:	d144      	bne.n	20cb6 <parse_ncellmeas_gci+0x336>
							  &cells->neighbor_cells[j].phys_cell_id);
   20c2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
				err = at_params_short_get(&resp_list,
   20c2e:	1cb1      	adds	r1, r6, #2
							  &cells->neighbor_cells[j].phys_cell_id);
   20c30:	4452      	add	r2, sl
				err = at_params_short_get(&resp_list,
   20c32:	3208      	adds	r2, #8
   20c34:	a80d      	add	r0, sp, #52	; 0x34
   20c36:	f008 fd4e 	bl	296d6 <at_params_short_get>
				if (err) {
   20c3a:	4604      	mov	r4, r0
   20c3c:	2800      	cmp	r0, #0
   20c3e:	d13a      	bne.n	20cb6 <parse_ncellmeas_gci+0x336>
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   20c40:	aa08      	add	r2, sp, #32
   20c42:	1cf1      	adds	r1, r6, #3
   20c44:	a80d      	add	r0, sp, #52	; 0x34
   20c46:	f008 fd7a 	bl	2973e <at_params_int_get>
				if (err) {
   20c4a:	4604      	mov	r4, r0
   20c4c:	2800      	cmp	r0, #0
   20c4e:	d132      	bne.n	20cb6 <parse_ncellmeas_gci+0x336>
				cells->neighbor_cells[j].rsrp = tmp_int;
   20c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   20c52:	9a08      	ldr	r2, [sp, #32]
   20c54:	4453      	add	r3, sl
   20c56:	815a      	strh	r2, [r3, #10]
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   20c58:	1d31      	adds	r1, r6, #4
   20c5a:	aa08      	add	r2, sp, #32
   20c5c:	a80d      	add	r0, sp, #52	; 0x34
   20c5e:	f008 fd6e 	bl	2973e <at_params_int_get>
				if (err) {
   20c62:	4604      	mov	r4, r0
   20c64:	bb38      	cbnz	r0, 20cb6 <parse_ncellmeas_gci+0x336>
				cells->neighbor_cells[j].rsrq = tmp_int;
   20c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   20c68:	9a08      	ldr	r2, [sp, #32]
   20c6a:	4453      	add	r3, sl
   20c6c:	819a      	strh	r2, [r3, #12]
							&cells->neighbor_cells[j].time_diff);
   20c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
				curr_index++;
   20c70:	3605      	adds	r6, #5
							&cells->neighbor_cells[j].time_diff);
   20c72:	4452      	add	r2, sl
				err = at_params_int_get(&resp_list,
   20c74:	4631      	mov	r1, r6
   20c76:	3204      	adds	r2, #4
   20c78:	a80d      	add	r0, sp, #52	; 0x34
   20c7a:	f008 fd60 	bl	2973e <at_params_int_get>
				if (err) {
   20c7e:	4604      	mov	r4, r0
   20c80:	b9c8      	cbnz	r0, 20cb6 <parse_ncellmeas_gci+0x336>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   20c82:	f108 0801 	add.w	r8, r8, #1
   20c86:	e7be      	b.n	20c06 <parse_ncellmeas_gci+0x286>
			cells->gci_cells[k] = parsed_cell;
   20c88:	2230      	movs	r2, #48	; 0x30
   20c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   20c8c:	ac12      	add	r4, sp, #72	; 0x48
   20c8e:	fb02 3c0b 	mla	ip, r2, fp, r3
   20c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   20c94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   20c98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   20c9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   20c9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   20ca2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   20ca6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
			k++;
   20caa:	f10b 0b01 	add.w	fp, fp, #1
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   20cae:	3301      	adds	r3, #1
   20cb0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			k++;
   20cb4:	e7aa      	b.n	20c0c <parse_ncellmeas_gci+0x28c>
			goto clean_exit;
   20cb6:	4625      	mov	r5, r4
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
	}

clean_exit:
	at_params_list_free(&resp_list);
   20cb8:	a80d      	add	r0, sp, #52	; 0x34
   20cba:	f008 fc8e 	bl	295da <at_params_list_free>

	return err;
}
   20cbe:	4628      	mov	r0, r5
   20cc0:	b01f      	add	sp, #124	; 0x7c
   20cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20cc6:	4605      	mov	r5, r0
   20cc8:	e7f6      	b.n	20cb8 <parse_ncellmeas_gci+0x338>
		err = 1;
   20cca:	461d      	mov	r5, r3
   20ccc:	e7f4      	b.n	20cb8 <parse_ncellmeas_gci+0x338>
   20cce:	bf00      	nop
   20cd0:	0002de5f 	.word	0x0002de5f

00020cd4 <parse_mdmev>:
	at_params_list_free(&resp_list);
	return err;
}

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   20cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20cd6:	460e      	mov	r6, r1
		[LTE_LC_MODEM_EVT_CE_LEVEL_1] = AT_MDMEV_CE_LEVEL_1,
		[LTE_LC_MODEM_EVT_CE_LEVEL_2] = AT_MDMEV_CE_LEVEL_2,
		[LTE_LC_MODEM_EVT_CE_LEVEL_3] = AT_MDMEV_CE_LEVEL_3,
	};

	if (at_response == NULL || modem_evt == NULL) {
   20cd8:	4604      	mov	r4, r0
   20cda:	b1b0      	cbz	r0, 20d0a <parse_mdmev+0x36>
   20cdc:	b1a9      	cbz	r1, 20d0a <parse_mdmev+0x36>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   20cde:	2108      	movs	r1, #8
   20ce0:	4a0d      	ldr	r2, [pc, #52]	; (20d18 <parse_mdmev+0x44>)
   20ce2:	f008 fe38 	bl	29956 <response_is_valid>
   20ce6:	b198      	cbz	r0, 20d10 <parse_mdmev+0x3c>
		return -EIO;
	}

	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;

	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   20ce8:	2500      	movs	r5, #0
   20cea:	4f0c      	ldr	r7, [pc, #48]	; (20d1c <parse_mdmev+0x48>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   20cec:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   20cee:	4621      	mov	r1, r4
   20cf0:	f857 0b04 	ldr.w	r0, [r7], #4
   20cf4:	f7f8 f9c0 	bl	19078 <strcmp>
   20cf8:	b908      	cbnz	r0, 20cfe <parse_mdmev+0x2a>
			LOG_DBG("Occurrence found: %s", event_types[i]);
			*modem_evt = i;
   20cfa:	7035      	strb	r5, [r6, #0]
	}

	LOG_DBG("No modem event type found: %s", at_response);

	return -ENODATA;
}
   20cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   20cfe:	3501      	adds	r5, #1
   20d00:	2d0a      	cmp	r5, #10
   20d02:	d1f4      	bne.n	20cee <parse_mdmev+0x1a>
	return -ENODATA;
   20d04:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   20d08:	e7f8      	b.n	20cfc <parse_mdmev+0x28>
		return -EINVAL;
   20d0a:	f06f 0015 	mvn.w	r0, #21
   20d0e:	e7f5      	b.n	20cfc <parse_mdmev+0x28>
		return -EIO;
   20d10:	f06f 0004 	mvn.w	r0, #4
   20d14:	e7f2      	b.n	20cfc <parse_mdmev+0x28>
   20d16:	bf00      	nop
   20d18:	0002dee5 	.word	0x0002dee5
   20d1c:	0002c504 	.word	0x0002c504

00020d20 <modem_info_parse>:
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
			    const char *buf)
{
   20d20:	b510      	push	{r4, lr}
   20d22:	4604      	mov	r4, r0
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   20d24:	4a09      	ldr	r2, [pc, #36]	; (20d4c <modem_info_parse+0x2c>)
{
   20d26:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   20d28:	7a63      	ldrb	r3, [r4, #9]
   20d2a:	2100      	movs	r1, #0
   20d2c:	f7fe fee4 	bl	1faf8 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   20d30:	f110 0f0b 	cmn.w	r0, #11
   20d34:	d000      	beq.n	20d38 <modem_info_parse+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   20d36:	b940      	cbnz	r0, 20d4a <modem_info_parse+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   20d38:	4804      	ldr	r0, [pc, #16]	; (20d4c <modem_info_parse+0x2c>)
   20d3a:	f008 fd4c 	bl	297d6 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   20d3e:	7a63      	ldrb	r3, [r4, #9]
		return -EAGAIN;
	}

	return err;
   20d40:	4298      	cmp	r0, r3
   20d42:	bf8c      	ite	hi
   20d44:	f06f 000a 	mvnhi.w	r0, #10
   20d48:	2000      	movls	r0, #0
}
   20d4a:	bd10      	pop	{r4, pc}
   20d4c:	2000d90c 	.word	0x2000d90c

00020d50 <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(const char *notif)
{
   20d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   20d52:	4604      	mov	r4, r0
	int err;
	uint16_t param_value;

	const struct modem_info_data rsrp_notify_data = {
   20d54:	4a0b      	ldr	r2, [pc, #44]	; (20d84 <modem_info_rsrp_subscribe_handler+0x34>)
   20d56:	ab01      	add	r3, sp, #4
   20d58:	ca07      	ldmia	r2, {r0, r1, r2}
   20d5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.param_index	= RSRP_NOTIFY_PARAM_INDEX,
		.param_count	= RSRP_NOTIFY_PARAM_COUNT,
		.data_type	= AT_PARAM_TYPE_NUM_INT,
	};

	err = modem_info_parse(&rsrp_notify_data, notif);
   20d5e:	4621      	mov	r1, r4
   20d60:	4618      	mov	r0, r3
   20d62:	f7ff ffdd 	bl	20d20 <modem_info_parse>
	if (err != 0) {
   20d66:	b958      	cbnz	r0, 20d80 <modem_info_rsrp_subscribe_handler+0x30>
		LOG_ERR("modem_info_parse failed to parse "
			"CESQ notification, %d", err);
		return;
	}

	err = at_params_unsigned_short_get(&m_param_list,
   20d68:	2101      	movs	r1, #1
   20d6a:	4807      	ldr	r0, [pc, #28]	; (20d88 <modem_info_rsrp_subscribe_handler+0x38>)
   20d6c:	f10d 0202 	add.w	r2, sp, #2
   20d70:	f008 fccd 	bl	2970e <at_params_unsigned_short_get>
					   rsrp_notify_data.param_index,
					   &param_value);
	if (err != 0) {
   20d74:	b920      	cbnz	r0, 20d80 <modem_info_rsrp_subscribe_handler+0x30>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
		return;
	}

	modem_info_rsrp_cb(param_value);
   20d76:	4b05      	ldr	r3, [pc, #20]	; (20d8c <modem_info_rsrp_subscribe_handler+0x3c>)
   20d78:	f89d 0002 	ldrb.w	r0, [sp, #2]
   20d7c:	681b      	ldr	r3, [r3, #0]
   20d7e:	4798      	blx	r3
}
   20d80:	b004      	add	sp, #16
   20d82:	bd10      	pop	{r4, pc}
   20d84:	0002bed0 	.word	0x0002bed0
   20d88:	2000d90c 	.word	0x2000d90c
   20d8c:	2000d914 	.word	0x2000d914

00020d90 <modem_info_string_get>:
{
   20d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   20d94:	2700      	movs	r7, #0
{
   20d96:	460d      	mov	r5, r1
   20d98:	b0b5      	sub	sp, #212	; 0xd4
   20d9a:	4604      	mov	r4, r0
   20d9c:	4616      	mov	r6, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   20d9e:	4639      	mov	r1, r7
   20da0:	227c      	movs	r2, #124	; 0x7c
   20da2:	a815      	add	r0, sp, #84	; 0x54
   20da4:	9714      	str	r7, [sp, #80]	; 0x50
   20da6:	f00a fa2d 	bl	2b204 <memset>
	size_t len = 0;
   20daa:	9702      	str	r7, [sp, #8]
	if ((buf == NULL) || (buf_size == 0)) {
   20dac:	2d00      	cmp	r5, #0
   20dae:	f000 8114 	beq.w	20fda <modem_info_string_get+0x24a>
   20db2:	2e00      	cmp	r6, #0
   20db4:	f000 8111 	beq.w	20fda <modem_info_string_get+0x24a>
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   20db8:	4b8c      	ldr	r3, [pc, #560]	; (20fec <modem_info_string_get+0x25c>)
	buf[0] = '\0';
   20dba:	702f      	strb	r7, [r5, #0]
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   20dbc:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
   20dc0:	2180      	movs	r1, #128	; 0x80
   20dc2:	683a      	ldr	r2, [r7, #0]
   20dc4:	a814      	add	r0, sp, #80	; 0x50
   20dc6:	f002 f83d 	bl	22e44 <nrf_modem_at_cmd>
	if (err != 0) {
   20dca:	4680      	mov	r8, r0
   20dcc:	2800      	cmp	r0, #0
   20dce:	f040 8107 	bne.w	20fe0 <modem_info_string_get+0x250>
	if (info == MODEM_INFO_SUP_BAND) {
   20dd2:	2c02      	cmp	r4, #2
   20dd4:	d121      	bne.n	20e1a <modem_info_string_get+0x8a>
		char *str_begin = strchr(recv_buf, '(');
   20dd6:	2128      	movs	r1, #40	; 0x28
   20dd8:	a814      	add	r0, sp, #80	; 0x50
   20dda:	f00a fa60 	bl	2b29e <strchr>
   20dde:	4604      	mov	r4, r0
		str_end = strchr(recv_buf, ')');
   20de0:	2129      	movs	r1, #41	; 0x29
   20de2:	a814      	add	r0, sp, #80	; 0x50
   20de4:	f00a fa5b 	bl	2b29e <strchr>
		if (!str_begin || !str_end) {
   20de8:	2c00      	cmp	r4, #0
   20dea:	f000 80fc 	beq.w	20fe6 <modem_info_string_get+0x256>
   20dee:	2800      	cmp	r0, #0
   20df0:	f000 80f9 	beq.w	20fe6 <modem_info_string_get+0x256>
		*(str_end + 1) = 0;
   20df4:	f880 8001 	strb.w	r8, [r0, #1]
		len = strlen(str_begin);
   20df8:	4620      	mov	r0, r4
   20dfa:	f7f8 f947 	bl	1908c <strlen>
		if (len >= buf_size) {
   20dfe:	42b0      	cmp	r0, r6
		len = strlen(str_begin);
   20e00:	4682      	mov	sl, r0
		if (len >= buf_size) {
   20e02:	d302      	bcc.n	20e0a <modem_info_string_get+0x7a>
		return -EMSGSIZE;
   20e04:	f06f 0a79 	mvn.w	sl, #121	; 0x79
   20e08:	e003      	b.n	20e12 <modem_info_string_get+0x82>
   20e0a:	4621      	mov	r1, r4
   20e0c:	4628      	mov	r0, r5
   20e0e:	f00a fa53 	bl	2b2b8 <strcpy>
}
   20e12:	4650      	mov	r0, sl
   20e14:	b035      	add	sp, #212	; 0xd4
   20e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = modem_info_parse(modem_data[info], recv_buf);
   20e1a:	4638      	mov	r0, r7
   20e1c:	a914      	add	r1, sp, #80	; 0x50
   20e1e:	f7ff ff7f 	bl	20d20 <modem_info_parse>
	if (err) {
   20e22:	4682      	mov	sl, r0
   20e24:	2800      	cmp	r0, #0
   20e26:	d1f4      	bne.n	20e12 <modem_info_string_get+0x82>
	if (info == MODEM_INFO_IP_ADDRESS) {
   20e28:	2c09      	cmp	r4, #9
   20e2a:	f040 8083 	bne.w	20f34 <modem_info_string_get+0x1a4>
	size_t len = 0;
   20e2e:	9003      	str	r0, [sp, #12]
	p = strstr(in_buf, "OK\r\n");
   20e30:	496f      	ldr	r1, [pc, #444]	; (20ff0 <modem_info_string_get+0x260>)
   20e32:	a814      	add	r0, sp, #80	; 0x50
   20e34:	f00a fa8d 	bl	2b352 <strstr>
	if (!p) {
   20e38:	2800      	cmp	r0, #0
   20e3a:	f000 80ce 	beq.w	20fda <modem_info_string_get+0x24a>
	while ((str_end = strstr(str_end, AT_CMD_RSP_DELIM)) != NULL) {
   20e3e:	4f6d      	ldr	r7, [pc, #436]	; (20ff4 <modem_info_string_get+0x264>)
	*p = '\0';
   20e40:	f880 a000 	strb.w	sl, [r0]
	char *str_end = in_buf;
   20e44:	a814      	add	r0, sp, #80	; 0x50
	while ((str_end = strstr(str_end, AT_CMD_RSP_DELIM)) != NULL) {
   20e46:	4639      	mov	r1, r7
   20e48:	f00a fa83 	bl	2b352 <strstr>
   20e4c:	4604      	mov	r4, r0
   20e4e:	2800      	cmp	r0, #0
   20e50:	d13c      	bne.n	20ecc <modem_info_string_get+0x13c>
	if (total_ip_count == 0) {
   20e52:	f1ba 0f00 	cmp.w	sl, #0
   20e56:	d0dc      	beq.n	20e12 <modem_info_string_get+0x82>
	first_address = true;
   20e58:	f04f 0901 	mov.w	r9, #1
	err = at_params_string_get(&m_param_list,
   20e5c:	f8df b198 	ldr.w	fp, [pc, #408]	; 20ff8 <modem_info_string_get+0x268>
   20e60:	f10a 37ff 	add.w	r7, sl, #4294967295
	str_end = strstr(&in_buf[line_start_idx], AT_CMD_RSP_DELIM);
   20e64:	ab14      	add	r3, sp, #80	; 0x50
   20e66:	eb03 0804 	add.w	r8, r3, r4
   20e6a:	4640      	mov	r0, r8
   20e6c:	4961      	ldr	r1, [pc, #388]	; (20ff4 <modem_info_string_get+0x264>)
   20e6e:	f00a fa70 	bl	2b352 <strstr>
	if (str_end == NULL) {
   20e72:	2800      	cmp	r0, #0
   20e74:	f000 80b7 	beq.w	20fe6 <modem_info_string_get+0x256>
	in_buf[++line_len + line_start_idx] = '\0';
   20e78:	2200      	movs	r2, #0
	line_len = str_end - &in_buf[line_start_idx];
   20e7a:	eba0 0008 	sub.w	r0, r0, r8
	in_buf[++line_len + line_start_idx] = '\0';
   20e7e:	3401      	adds	r4, #1
   20e80:	4404      	add	r4, r0
   20e82:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   20e86:	446b      	add	r3, sp
	err = modem_info_parse(modem_data[MODEM_INFO_IP_ADDRESS], &in_buf[line_start_idx]);
   20e88:	4641      	mov	r1, r8
   20e8a:	485c      	ldr	r0, [pc, #368]	; (20ffc <modem_info_string_get+0x26c>)
	in_buf[++line_len + line_start_idx] = '\0';
   20e8c:	f803 2c80 	strb.w	r2, [r3, #-128]
	err = modem_info_parse(modem_data[MODEM_INFO_IP_ADDRESS], &in_buf[line_start_idx]);
   20e90:	f7ff ff46 	bl	20d20 <modem_info_parse>
	if (err) {
   20e94:	4682      	mov	sl, r0
   20e96:	2800      	cmp	r0, #0
   20e98:	d1bb      	bne.n	20e12 <modem_info_string_get+0x82>
	len = sizeof(ip_buf);
   20e9a:	2340      	movs	r3, #64	; 0x40
	err = at_params_string_get(&m_param_list,
   20e9c:	f10d 0810 	add.w	r8, sp, #16
	len = sizeof(ip_buf);
   20ea0:	9303      	str	r3, [sp, #12]
	err = at_params_string_get(&m_param_list,
   20ea2:	4642      	mov	r2, r8
   20ea4:	2104      	movs	r1, #4
   20ea6:	4658      	mov	r0, fp
   20ea8:	ab03      	add	r3, sp, #12
   20eaa:	f008 fc74 	bl	29796 <at_params_string_get>
	if (err != 0) {
   20eae:	4682      	mov	sl, r0
   20eb0:	2800      	cmp	r0, #0
   20eb2:	d1ae      	bne.n	20e12 <modem_info_string_get+0x82>
	} else if (len >= sizeof(ip_buf)) {
   20eb4:	9a03      	ldr	r2, [sp, #12]
   20eb6:	2a3f      	cmp	r2, #63	; 0x3f
   20eb8:	d8a4      	bhi.n	20e04 <modem_info_string_get+0x74>
	if (len == 0) {
   20eba:	b95a      	cbnz	r2, 20ed4 <modem_info_string_get+0x144>
		line_start_idx += line_len + 1;
   20ebc:	3401      	adds	r4, #1
		if (--current_ip_idx) {
   20ebe:	bbbf      	cbnz	r7, 20f30 <modem_info_string_get+0x1a0>
	return strlen(out_buf);
   20ec0:	4628      	mov	r0, r5
}
   20ec2:	b035      	add	sp, #212	; 0xd4
   20ec4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return strlen(out_buf);
   20ec8:	f7f8 b8e0 	b.w	1908c <strlen>
		str_end++;
   20ecc:	1c60      	adds	r0, r4, #1
		total_ip_count++;
   20ece:	f10a 0a01 	add.w	sl, sl, #1
   20ed2:	e7b8      	b.n	20e46 <modem_info_string_get+0xb6>
	ip_buf[len] = '\0';
   20ed4:	f102 03d0 	add.w	r3, r2, #208	; 0xd0
   20ed8:	eb0d 0203 	add.w	r2, sp, r3
   20edc:	f802 0cc0 	strb.w	r0, [r2, #-192]
	ip_v6_str = strstr(ip_buf, " ");
   20ee0:	2120      	movs	r1, #32
   20ee2:	4640      	mov	r0, r8
   20ee4:	f00a f9db 	bl	2b29e <strchr>
	if (ip_v6_str) {
   20ee8:	b128      	cbz	r0, 20ef6 <modem_info_string_get+0x166>
		*ip_v6_str = '\0';
   20eea:	f880 a000 	strb.w	sl, [r0]
		len = strlen(ip_buf);
   20eee:	4640      	mov	r0, r8
   20ef0:	f7f8 f8cc 	bl	1908c <strlen>
   20ef4:	9003      	str	r0, [sp, #12]
	out_buf_len = strlen(out_buf);
   20ef6:	4628      	mov	r0, r5
   20ef8:	f7f8 f8c8 	bl	1908c <strlen>
	err = snprintk(out_buf + out_buf_len,
   20efc:	4a40      	ldr	r2, [pc, #256]	; (21000 <modem_info_string_get+0x270>)
   20efe:	4b41      	ldr	r3, [pc, #260]	; (21004 <modem_info_string_get+0x274>)
   20f00:	eba6 0a00 	sub.w	sl, r6, r0
   20f04:	f1b9 0f00 	cmp.w	r9, #0
   20f08:	bf18      	it	ne
   20f0a:	4613      	movne	r3, r2
   20f0c:	4651      	mov	r1, sl
   20f0e:	4a3e      	ldr	r2, [pc, #248]	; (21008 <modem_info_string_get+0x278>)
   20f10:	f8cd 8000 	str.w	r8, [sp]
   20f14:	4428      	add	r0, r5
   20f16:	f006 f860 	bl	26fda <snprintk>
	if ((err <= 0) || (err > (out_buf_size - out_buf_len))) {
   20f1a:	2800      	cmp	r0, #0
   20f1c:	f77f af72 	ble.w	20e04 <modem_info_string_get+0x74>
   20f20:	4582      	cmp	sl, r0
   20f22:	f4ff af6f 	bcc.w	20e04 <modem_info_string_get+0x74>
	if (--current_ip_idx) {
   20f26:	2f00      	cmp	r7, #0
   20f28:	d0ca      	beq.n	20ec0 <modem_info_string_get+0x130>
	first_address = false;
   20f2a:	f04f 0900 	mov.w	r9, #0
		line_start_idx  += line_len + 1;
   20f2e:	3401      	adds	r4, #1
		goto parse_line;
   20f30:	3f01      	subs	r7, #1
   20f32:	e797      	b.n	20e64 <modem_info_string_get+0xd4>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_INT) {
   20f34:	7abb      	ldrb	r3, [r7, #10]
   20f36:	2b01      	cmp	r3, #1
   20f38:	d131      	bne.n	20f9e <modem_info_string_get+0x20e>
		err = at_params_unsigned_short_get(&m_param_list,
   20f3a:	7a39      	ldrb	r1, [r7, #8]
   20f3c:	482e      	ldr	r0, [pc, #184]	; (20ff8 <modem_info_string_get+0x268>)
   20f3e:	aa04      	add	r2, sp, #16
   20f40:	f008 fbe5 	bl	2970e <at_params_unsigned_short_get>
		if (err) {
   20f44:	4682      	mov	sl, r0
   20f46:	2800      	cmp	r0, #0
   20f48:	f47f af63 	bne.w	20e12 <modem_info_string_get+0x82>
		len = snprintf(buf, buf_size, "%d", param_value);
   20f4c:	4631      	mov	r1, r6
   20f4e:	4628      	mov	r0, r5
   20f50:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   20f54:	4a2d      	ldr	r2, [pc, #180]	; (2100c <modem_info_string_get+0x27c>)
   20f56:	f004 fcfd 	bl	25954 <sniprintf>
   20f5a:	9002      	str	r0, [sp, #8]
		if ((len <= 0) || (len > buf_size)) {
   20f5c:	2800      	cmp	r0, #0
   20f5e:	f43f af51 	beq.w	20e04 <modem_info_string_get+0x74>
   20f62:	4286      	cmp	r6, r0
   20f64:	f4ff af4e 	bcc.w	20e04 <modem_info_string_get+0x74>
	if (info == MODEM_INFO_ICCID) {
   20f68:	2c0e      	cmp	r4, #14
   20f6a:	d111      	bne.n	20f90 <modem_info_string_get+0x200>
   20f6c:	462c      	mov	r4, r5
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   20f6e:	4628      	mov	r0, r5
   20f70:	f7f8 f88c 	bl	1908c <strlen>
   20f74:	1ca3      	adds	r3, r4, #2
   20f76:	1b64      	subs	r4, r4, r5
   20f78:	4284      	cmp	r4, r0
   20f7a:	d324      	bcc.n	20fc6 <modem_info_string_get+0x236>
		if ((len == ICCID_LEN) &&
   20f7c:	9b02      	ldr	r3, [sp, #8]
   20f7e:	2b14      	cmp	r3, #20
   20f80:	d106      	bne.n	20f90 <modem_info_string_get+0x200>
   20f82:	7ceb      	ldrb	r3, [r5, #19]
   20f84:	2b46      	cmp	r3, #70	; 0x46
			buf[len - 1] = '\0';
   20f86:	bf01      	itttt	eq
   20f88:	2300      	moveq	r3, #0
   20f8a:	74eb      	strbeq	r3, [r5, #19]
			--len;
   20f8c:	2313      	moveq	r3, #19
   20f8e:	9302      	streq	r3, [sp, #8]
	return len <= 0 ? -ENOTSUP : len;
   20f90:	9b02      	ldr	r3, [sp, #8]
   20f92:	2b00      	cmp	r3, #0
   20f94:	bf14      	ite	ne
   20f96:	469a      	movne	sl, r3
   20f98:	f06f 0a85 	mvneq.w	sl, #133	; 0x85
   20f9c:	e739      	b.n	20e12 <modem_info_string_get+0x82>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   20f9e:	2b02      	cmp	r3, #2
   20fa0:	d1e2      	bne.n	20f68 <modem_info_string_get+0x1d8>
		err = at_params_string_get(&m_param_list,
   20fa2:	462a      	mov	r2, r5
   20fa4:	7a39      	ldrb	r1, [r7, #8]
   20fa6:	4814      	ldr	r0, [pc, #80]	; (20ff8 <modem_info_string_get+0x268>)
   20fa8:	ab02      	add	r3, sp, #8
		len = buf_size - out_buf_len;
   20faa:	9602      	str	r6, [sp, #8]
		err = at_params_string_get(&m_param_list,
   20fac:	f008 fbf3 	bl	29796 <at_params_string_get>
		if (err != 0) {
   20fb0:	4682      	mov	sl, r0
   20fb2:	2800      	cmp	r0, #0
   20fb4:	f47f af2d 	bne.w	20e12 <modem_info_string_get+0x82>
		} else if (len >= buf_size) {
   20fb8:	9b02      	ldr	r3, [sp, #8]
   20fba:	429e      	cmp	r6, r3
   20fbc:	f67f af22 	bls.w	20e04 <modem_info_string_get+0x74>
		buf[accumulated_len] = '\0';
   20fc0:	2200      	movs	r2, #0
   20fc2:	54ea      	strb	r2, [r5, r3]
   20fc4:	e7d0      	b.n	20f68 <modem_info_string_get+0x1d8>
		current_char = buf[i];
   20fc6:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   20fca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   20fce:	461c      	mov	r4, r3
		buf[i] = next_char;
   20fd0:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   20fd4:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   20fd8:	e7c9      	b.n	20f6e <modem_info_string_get+0x1de>
		return -EINVAL;
   20fda:	f06f 0a15 	mvn.w	sl, #21
   20fde:	e718      	b.n	20e12 <modem_info_string_get+0x82>
		return -EIO;
   20fe0:	f06f 0a04 	mvn.w	sl, #4
   20fe4:	e715      	b.n	20e12 <modem_info_string_get+0x82>
			return -EFAULT;
   20fe6:	f06f 0a0d 	mvn.w	sl, #13
   20fea:	e712      	b.n	20e12 <modem_info_string_get+0x82>
   20fec:	0002c56c 	.word	0x0002c56c
   20ff0:	0002dd06 	.word	0x0002dd06
   20ff4:	0002df5a 	.word	0x0002df5a
   20ff8:	2000d90c 	.word	0x2000d90c
   20ffc:	0002c654 	.word	0x0002c654
   21000:	0002df5c 	.word	0x0002df5c
   21004:	0002dfa5 	.word	0x0002dfa5
   21008:	0002dfa8 	.word	0x0002dfa8
   2100c:	0002cd80 	.word	0x0002cd80

00021010 <modem_info_init>:

int modem_info_init(void)
{
	int err = 0;

	if (m_param_list.params == NULL) {
   21010:	4803      	ldr	r0, [pc, #12]	; (21020 <modem_info_init+0x10>)
   21012:	6843      	ldr	r3, [r0, #4]
   21014:	b913      	cbnz	r3, 2101c <modem_info_init+0xc>
		/* Init at_cmd_parser storage module */
		err = at_params_list_init(&m_param_list,
   21016:	210a      	movs	r1, #10
   21018:	f008 bab5 	b.w	29586 <at_params_list_init>
					  CONFIG_MODEM_INFO_MAX_AT_PARAMS_RSP);
	}

	return err;
}
   2101c:	2000      	movs	r0, #0
   2101e:	4770      	bx	lr
   21020:	2000d90c 	.word	0x2000d90c

00021024 <on_cnec_esm>:

	return pdn;
}

static void on_cnec_esm(const char *notif)
{
   21024:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t cid;
	uint32_t esm_err;
	struct pdn *pdn;

	/* +CNEC_ESM: <cause>,<cid> */
	esm_err = strtoul(notif + strlen("+CNEC_ESM: "), &p, 10);
   21026:	220a      	movs	r2, #10
   21028:	a901      	add	r1, sp, #4
   2102a:	300b      	adds	r0, #11
   2102c:	f004 feaa 	bl	25d84 <strtoul>
   21030:	4605      	mov	r5, r0

	if (!p || *p != ',') {
   21032:	9801      	ldr	r0, [sp, #4]
   21034:	b1d0      	cbz	r0, 2106c <on_cnec_esm+0x48>
   21036:	7803      	ldrb	r3, [r0, #0]
   21038:	2b2c      	cmp	r3, #44	; 0x2c
   2103a:	d117      	bne.n	2106c <on_cnec_esm+0x48>
		return;
	}

	cid = strtoul(p + 1, NULL, 10);
   2103c:	220a      	movs	r2, #10
   2103e:	2100      	movs	r1, #0
   21040:	3001      	adds	r0, #1
   21042:	f004 fe9f 	bl	25d84 <strtoul>
   21046:	4604      	mov	r4, r0
	return list->head;
   21048:	4b0c      	ldr	r3, [pc, #48]	; (2107c <on_cnec_esm+0x58>)
   2104a:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pdn_contexts, pdn, node) {
   2104c:	b173      	cbz	r3, 2106c <on_cnec_esm+0x48>
		if (pdn->context_id == cid) {
   2104e:	f993 2008 	ldrsb.w	r2, [r3, #8]
   21052:	4294      	cmp	r4, r2
   21054:	d1f9      	bne.n	2104a <on_cnec_esm+0x26>
	pdn = pdn_find(cid);
	if (!pdn) {
		return;
	}

	if (pdn->callback) {
   21056:	685b      	ldr	r3, [r3, #4]
   21058:	b953      	cbnz	r3, 21070 <on_cnec_esm+0x4c>
		pdn->callback((intptr_t)cid, PDN_EVENT_CNEC_ESM, esm_err);
	}

	if (cid == pdn_act_notif.cid) {
   2105a:	4b09      	ldr	r3, [pc, #36]	; (21080 <on_cnec_esm+0x5c>)
   2105c:	f993 2000 	ldrsb.w	r2, [r3]
   21060:	42a2      	cmp	r2, r4
   21062:	d103      	bne.n	2106c <on_cnec_esm+0x48>
		pdn_act_notif.esm = esm_err;
   21064:	705d      	strb	r5, [r3, #1]
	z_impl_k_sem_give(sem);
   21066:	4807      	ldr	r0, [pc, #28]	; (21084 <on_cnec_esm+0x60>)
   21068:	f003 fc84 	bl	24974 <z_impl_k_sem_give>
		k_sem_give(&sem_cnec);
	}
}
   2106c:	b003      	add	sp, #12
   2106e:	bd30      	pop	{r4, r5, pc}
		pdn->callback((intptr_t)cid, PDN_EVENT_CNEC_ESM, esm_err);
   21070:	462a      	mov	r2, r5
   21072:	2100      	movs	r1, #0
   21074:	b2e0      	uxtb	r0, r4
   21076:	4798      	blx	r3
   21078:	e7ef      	b.n	2105a <on_cnec_esm+0x36>
   2107a:	bf00      	nop
   2107c:	2000d918 	.word	0x2000d918
   21080:	2000c7a5 	.word	0x2000c7a5
   21084:	2000c968 	.word	0x2000c968

00021088 <on_modem_init>:
static void on_modem_init(int ret, void *ctx)
{
	int err;
	(void) err;

	if (ret != 0) {
   21088:	b910      	cbnz	r0, 21090 <on_modem_init+0x8>
	if (err) {
		LOG_ERR("Failed to set legacy PCO mode, err %d", err);
		return;
	}
#else
	err = nrf_modem_at_printf("AT%%XEPCO=1");
   2108a:	4802      	ldr	r0, [pc, #8]	; (21094 <on_modem_init+0xc>)
   2108c:	f001 be8e 	b.w	22dac <nrf_modem_at_printf>
		LOG_ERR("Failed to set auth params for default CID, err %d", err);
		return;
	}
#endif /* CONFIG_PDN_DEFAULT_AUTH_PAP || CONFIG_PDN_DEFAULT_AUTH_CHAP */
#endif /* CONFIG_PDN_DEFAULTS_OVERRIDE */
}
   21090:	4770      	bx	lr
   21092:	bf00      	nop
   21094:	0002e145 	.word	0x0002e145

00021098 <on_cfun>:

static void on_cfun(enum lte_lc_func_mode mode, void *ctx)
{
	int err;

	if (mode == LTE_LC_FUNC_MODE_NORMAL ||
   21098:	2801      	cmp	r0, #1
{
   2109a:	b508      	push	{r3, lr}
	if (mode == LTE_LC_FUNC_MODE_NORMAL ||
   2109c:	d001      	beq.n	210a2 <on_cfun+0xa>
   2109e:	2815      	cmp	r0, #21
   210a0:	d107      	bne.n	210b2 <on_cfun+0x1a>
	    mode == LTE_LC_FUNC_MODE_ACTIVATE_LTE) {
		LOG_DBG("Subscribing to +CNEC=16 and +CGEREP=1");
		err = nrf_modem_at_printf("AT+CNEC=16");
   210a2:	4804      	ldr	r0, [pc, #16]	; (210b4 <on_cfun+0x1c>)
   210a4:	f001 fe82 	bl	22dac <nrf_modem_at_printf>
		err = nrf_modem_at_printf("AT+CGEREP=1");
		if (err) {
			LOG_ERR("Unable to subscribe to +CGEREP=1, err %d", err);
		}
	}
}
   210a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = nrf_modem_at_printf("AT+CGEREP=1");
   210ac:	4802      	ldr	r0, [pc, #8]	; (210b8 <on_cfun+0x20>)
   210ae:	f001 be7d 	b.w	22dac <nrf_modem_at_printf>
}
   210b2:	bd08      	pop	{r3, pc}
   210b4:	0002e151 	.word	0x0002e151
   210b8:	0002e15c 	.word	0x0002e15c

000210bc <pdn_ctx_new>:
{
   210bc:	b510      	push	{r4, lr}
	pdn = k_malloc(sizeof(struct pdn));
   210be:	200c      	movs	r0, #12
   210c0:	f00a f85f 	bl	2b182 <k_malloc>
	if (!pdn) {
   210c4:	4604      	mov	r4, r0
   210c6:	b180      	cbz	r0, 210ea <pdn_ctx_new+0x2e>
	return z_impl_k_mutex_lock(mutex, timeout);
   210c8:	f04f 32ff 	mov.w	r2, #4294967295
   210cc:	f04f 33ff 	mov.w	r3, #4294967295
   210d0:	4808      	ldr	r0, [pc, #32]	; (210f4 <pdn_ctx_new+0x38>)
   210d2:	f003 fb65 	bl	247a0 <z_impl_k_mutex_lock>
	parent->next = child;
   210d6:	2300      	movs	r3, #0
   210d8:	6023      	str	r3, [r4, #0]
	return list->tail;
   210da:	4b07      	ldr	r3, [pc, #28]	; (210f8 <pdn_ctx_new+0x3c>)
   210dc:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   210de:	b932      	cbnz	r2, 210ee <pdn_ctx_new+0x32>
	list->head = node;
   210e0:	e9c3 4400 	strd	r4, r4, [r3]
	k_mutex_unlock(&list_mutex);
   210e4:	4803      	ldr	r0, [pc, #12]	; (210f4 <pdn_ctx_new+0x38>)
   210e6:	f008 fd02 	bl	29aee <k_mutex_unlock.isra.0>
}
   210ea:	4620      	mov	r0, r4
   210ec:	bd10      	pop	{r4, pc}
	parent->next = child;
   210ee:	6014      	str	r4, [r2, #0]
	list->tail = node;
   210f0:	605c      	str	r4, [r3, #4]
}
   210f2:	e7f7      	b.n	210e4 <pdn_ctx_new+0x28>
   210f4:	2000c8e8 	.word	0x2000c8e8
   210f8:	2000d918 	.word	0x2000d918

000210fc <on_cgev>:
{
   210fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} map[] = {
   21100:	4d31      	ldr	r5, [pc, #196]	; (211c8 <on_cgev+0xcc>)
{
   21102:	b090      	sub	sp, #64	; 0x40
	} map[] = {
   21104:	ac02      	add	r4, sp, #8
{
   21106:	4606      	mov	r6, r0
	} map[] = {
   21108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2110a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2110c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2110e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   21110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   21112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   21114:	e895 0003 	ldmia.w	r5, {r0, r1}
   21118:	e884 0003 	stmia.w	r4, {r0, r1}
	for (size_t i = 0; i < ARRAY_SIZE(map); i++) {
   2111c:	2400      	movs	r4, #0
   2111e:	f10d 0808 	add.w	r8, sp, #8
		p = strstr(notif, map[i].notif);
   21122:	f858 7034 	ldr.w	r7, [r8, r4, lsl #3]
   21126:	4630      	mov	r0, r6
   21128:	4639      	mov	r1, r7
   2112a:	f00a f912 	bl	2b352 <strstr>
   2112e:	4605      	mov	r5, r0
   21130:	9001      	str	r0, [sp, #4]
		if (!p) {
   21132:	b928      	cbnz	r0, 21140 <on_cgev+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(map); i++) {
   21134:	3401      	adds	r4, #1
   21136:	2c07      	cmp	r4, #7
   21138:	d1f3      	bne.n	21122 <on_cgev+0x26>
}
   2113a:	b010      	add	sp, #64	; 0x40
   2113c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p += strlen(map[i].notif);
   21140:	4638      	mov	r0, r7
   21142:	f7f7 ffa3 	bl	1908c <strlen>
   21146:	4603      	mov	r3, r0
		if (*p == ' ') {
   21148:	5ceb      	ldrb	r3, [r5, r3]
		p += strlen(map[i].notif);
   2114a:	1828      	adds	r0, r5, r0
		if (*p == ' ') {
   2114c:	2b20      	cmp	r3, #32
		p += strlen(map[i].notif);
   2114e:	9001      	str	r0, [sp, #4]
		if (*p == ' ') {
   21150:	d134      	bne.n	211bc <on_cgev+0xc0>
			cid = strtoul(p, &p, 10);
   21152:	220a      	movs	r2, #10
   21154:	a901      	add	r1, sp, #4
   21156:	f004 fe15 	bl	25d84 <strtoul>
   2115a:	b245      	sxtb	r5, r0
		if (cid == pdn_act_notif.cid && map[i].event == PDN_EVENT_ACTIVATED) {
   2115c:	4e1b      	ldr	r6, [pc, #108]	; (211cc <on_cgev+0xd0>)
   2115e:	f996 3000 	ldrsb.w	r3, [r6]
   21162:	42ab      	cmp	r3, r5
   21164:	d114      	bne.n	21190 <on_cgev+0x94>
   21166:	ab10      	add	r3, sp, #64	; 0x40
   21168:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2116c:	f813 3c34 	ldrb.w	r3, [r3, #-52]
   21170:	2b01      	cmp	r3, #1
   21172:	d10d      	bne.n	21190 <on_cgev+0x94>
			if (*p == ',') {
   21174:	9801      	ldr	r0, [sp, #4]
   21176:	7803      	ldrb	r3, [r0, #0]
   21178:	2b2c      	cmp	r3, #44	; 0x2c
   2117a:	d122      	bne.n	211c2 <on_cgev+0xc6>
				pdn_act_notif.reason = strtol(p + 1, NULL, 10);
   2117c:	220a      	movs	r2, #10
   2117e:	2100      	movs	r1, #0
   21180:	3001      	adds	r0, #1
   21182:	f004 fce5 	bl	25b50 <strtol>
   21186:	b240      	sxtb	r0, r0
   21188:	70b0      	strb	r0, [r6, #2]
	z_impl_k_sem_give(sem);
   2118a:	4811      	ldr	r0, [pc, #68]	; (211d0 <on_cgev+0xd4>)
   2118c:	f003 fbf2 	bl	24974 <z_impl_k_sem_give>
	return list->head;
   21190:	4b10      	ldr	r3, [pc, #64]	; (211d4 <on_cgev+0xd8>)
   21192:	681e      	ldr	r6, [r3, #0]
				pdn->callback(pdn->context_id, map[i].event, 0);
   21194:	ab10      	add	r3, sp, #64	; 0x40
   21196:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		SYS_SLIST_FOR_EACH_CONTAINER(&pdn_contexts, pdn, node) {
   2119a:	2e00      	cmp	r6, #0
   2119c:	d0cd      	beq.n	2113a <on_cgev+0x3e>
			if ((pdn->context_id == cid || cid == CID_UNASSIGNED) && pdn->callback) {
   2119e:	f996 0008 	ldrsb.w	r0, [r6, #8]
   211a2:	42a8      	cmp	r0, r5
   211a4:	d001      	beq.n	211aa <on_cgev+0xae>
   211a6:	1c6b      	adds	r3, r5, #1
   211a8:	d106      	bne.n	211b8 <on_cgev+0xbc>
   211aa:	6873      	ldr	r3, [r6, #4]
   211ac:	b123      	cbz	r3, 211b8 <on_cgev+0xbc>
				pdn->callback(pdn->context_id, map[i].event, 0);
   211ae:	2200      	movs	r2, #0
   211b0:	f814 1c34 	ldrb.w	r1, [r4, #-52]
   211b4:	b2c0      	uxtb	r0, r0
   211b6:	4798      	blx	r3
	return node->next;
   211b8:	6836      	ldr	r6, [r6, #0]
   211ba:	e7ee      	b.n	2119a <on_cgev+0x9e>
			cid = CID_UNASSIGNED;
   211bc:	f04f 35ff 	mov.w	r5, #4294967295
   211c0:	e7cc      	b.n	2115c <on_cgev+0x60>
   211c2:	f04f 30ff 	mov.w	r0, #4294967295
   211c6:	e7df      	b.n	21188 <on_cgev+0x8c>
   211c8:	0002bedc 	.word	0x0002bedc
   211cc:	2000c7a5 	.word	0x2000c7a5
   211d0:	2000c950 	.word	0x2000c950
   211d4:	2000d918 	.word	0x2000d918

000211d8 <pdn_esm_strerror>:
	{ 0x71, "Multiple accesses to a PDN connection not allowed" },
};

const char *pdn_esm_strerror(int reason)
{
	for (size_t i = 0; i < ARRAY_SIZE(esm_table); i++) {
   211d8:	2300      	movs	r3, #0
{
   211da:	b510      	push	{r4, lr}
		if (esm_table[i].reason == reason) {
   211dc:	4a06      	ldr	r2, [pc, #24]	; (211f8 <pdn_esm_strerror+0x20>)
   211de:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   211e2:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   211e6:	4284      	cmp	r4, r0
   211e8:	d101      	bne.n	211ee <pdn_esm_strerror+0x16>
			return esm_table[i].str;
   211ea:	6848      	ldr	r0, [r1, #4]
		}
	}

	return "<unknown>";
}
   211ec:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ARRAY_SIZE(esm_table); i++) {
   211ee:	3301      	adds	r3, #1
   211f0:	2b30      	cmp	r3, #48	; 0x30
   211f2:	d1f4      	bne.n	211de <pdn_esm_strerror+0x6>
	return "<unknown>";
   211f4:	4801      	ldr	r0, [pc, #4]	; (211fc <pdn_esm_strerror+0x24>)
   211f6:	e7f9      	b.n	211ec <pdn_esm_strerror+0x14>
   211f8:	0002c6cc 	.word	0x0002c6cc
   211fc:	0002d2bb 	.word	0x0002d2bb

00021200 <on_modem_lib_init>:
LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
{
   21200:	b508      	push	{r3, lr}
	int err;

	if (ret != 0) {
   21202:	b948      	cbnz	r0, 21218 <on_modem_lib_init+0x18>
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
   21204:	4905      	ldr	r1, [pc, #20]	; (2121c <on_modem_lib_init+0x1c>)
   21206:	4806      	ldr	r0, [pc, #24]	; (21220 <on_modem_lib_init+0x20>)
   21208:	f001 fdd0 	bl	22dac <nrf_modem_at_printf>
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		if (err) {
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
		}
	}
}
   2120c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
   21210:	4904      	ldr	r1, [pc, #16]	; (21224 <on_modem_lib_init+0x24>)
   21212:	4803      	ldr	r0, [pc, #12]	; (21220 <on_modem_lib_init+0x20>)
   21214:	f001 bdca 	b.w	22dac <nrf_modem_at_printf>
}
   21218:	bd08      	pop	{r3, pc}
   2121a:	bf00      	nop
   2121c:	0002e833 	.word	0x0002e833
   21220:	0002e1a1 	.word	0x0002e1a1
   21224:	0002e890 	.word	0x0002e890

00021228 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   21228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2122c:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   2122e:	4b15      	ldr	r3, [pc, #84]	; (21284 <tfm_ns_interface_dispatch+0x5c>)
   21230:	4604      	mov	r4, r0
   21232:	f893 8000 	ldrb.w	r8, [r3]
   21236:	460d      	mov	r5, r1
   21238:	4616      	mov	r6, r2
   2123a:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();
	int tfm_ns_saved_prio;

	if (!is_pre_kernel) {
   2123c:	f1b8 0f00 	cmp.w	r8, #0
   21240:	d115      	bne.n	2126e <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   21242:	4668      	mov	r0, sp
   21244:	f006 fca4 	bl	27b90 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   21248:	463a      	mov	r2, r7
   2124a:	4631      	mov	r1, r6
   2124c:	4628      	mov	r0, r5
   2124e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   21250:	47a0      	blx	r4
   21252:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   21254:	4668      	mov	r0, sp
   21256:	f006 fc9c 	bl	27b92 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   2125a:	f1b8 0f00 	cmp.w	r8, #0
   2125e:	d002      	beq.n	21266 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   21260:	4809      	ldr	r0, [pc, #36]	; (21288 <tfm_ns_interface_dispatch+0x60>)
   21262:	f003 fb17 	bl	24894 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   21266:	4620      	mov	r0, r4
   21268:	b022      	add	sp, #136	; 0x88
   2126a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   2126e:	f04f 32ff 	mov.w	r2, #4294967295
   21272:	f04f 33ff 	mov.w	r3, #4294967295
   21276:	4804      	ldr	r0, [pc, #16]	; (21288 <tfm_ns_interface_dispatch+0x60>)
   21278:	f003 fa92 	bl	247a0 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   2127c:	2800      	cmp	r0, #0
   2127e:	d0e0      	beq.n	21242 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   21280:	241f      	movs	r4, #31
   21282:	e7f0      	b.n	21266 <tfm_ns_interface_dispatch+0x3e>
   21284:	2000eafc 	.word	0x2000eafc
   21288:	2000c924 	.word	0x2000c924

0002128c <psa_generate_random>:
    return API_DISPATCH_NO_OUTVEC(in_vec);
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   2128c:	b570      	push	{r4, r5, r6, lr}
    struct tfm_crypto_pack_iovec iov = {
   2128e:	2630      	movs	r6, #48	; 0x30
{
   21290:	b092      	sub	sp, #72	; 0x48
    struct tfm_crypto_pack_iovec iov = {
   21292:	ab06      	add	r3, sp, #24
{
   21294:	4605      	mov	r5, r0
   21296:	460c      	mov	r4, r1
    struct tfm_crypto_pack_iovec iov = {
   21298:	4632      	mov	r2, r6
   2129a:	2100      	movs	r1, #0
   2129c:	4618      	mov	r0, r3
   2129e:	f009 ffb1 	bl	2b204 <memset>

    psa_invec in_vec[] = {
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   212a2:	e9cd 5404 	strd	r5, r4, [sp, #16]
    psa_invec in_vec[] = {
   212a6:	e9cd 0602 	strd	r0, r6, [sp, #8]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   212aa:	b154      	cbz	r4, 212c2 <psa_generate_random+0x36>
        return PSA_SUCCESS;
    }

    return API_DISPATCH(in_vec, out_vec);
   212ac:	2301      	movs	r3, #1
   212ae:	aa04      	add	r2, sp, #16
   212b0:	9200      	str	r2, [sp, #0]
   212b2:	2100      	movs	r1, #0
   212b4:	4804      	ldr	r0, [pc, #16]	; (212c8 <psa_generate_random+0x3c>)
   212b6:	9301      	str	r3, [sp, #4]
   212b8:	aa02      	add	r2, sp, #8
   212ba:	f000 f807 	bl	212cc <psa_call>
}
   212be:	b012      	add	sp, #72	; 0x48
   212c0:	bd70      	pop	{r4, r5, r6, pc}
        return PSA_SUCCESS;
   212c2:	4620      	mov	r0, r4
   212c4:	e7fb      	b.n	212be <psa_generate_random+0x32>
   212c6:	bf00      	nop
   212c8:	40000100 	.word	0x40000100

000212cc <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   212cc:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   212ce:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   212d2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   212d6:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   212d8:	d20d      	bcs.n	212f6 <psa_call+0x2a>
        (type < INT16_MIN) ||
   212da:	ea43 0504 	orr.w	r5, r3, r4
   212de:	2dff      	cmp	r5, #255	; 0xff
   212e0:	d809      	bhi.n	212f6 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   212e2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   212e6:	4613      	mov	r3, r2
   212e8:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   212ec:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   212ee:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   212f0:	4803      	ldr	r0, [pc, #12]	; (21300 <psa_call+0x34>)
   212f2:	f7ff bf99 	b.w	21228 <tfm_ns_interface_dispatch>
}
   212f6:	f06f 0080 	mvn.w	r0, #128	; 0x80
   212fa:	bc30      	pop	{r4, r5}
   212fc:	4770      	bx	lr
   212fe:	bf00      	nop
   21300:	00017c11 	.word	0x00017c11

00021304 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   21304:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   21306:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   21308:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   2130a:	fab2 f382 	clz	r3, r2
   2130e:	f1c3 031f 	rsb	r3, r3, #31
   21312:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   21314:	fa05 f403 	lsl.w	r4, r5, r3
   21318:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2131c:	e8d0 6fef 	ldaex	r6, [r0]
   21320:	4296      	cmp	r6, r2
   21322:	d104      	bne.n	2132e <nrfx_flag32_alloc+0x2a>
   21324:	e8c0 4fec 	stlex	ip, r4, [r0]
   21328:	f1bc 0f00 	cmp.w	ip, #0
   2132c:	d1f6      	bne.n	2131c <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2132e:	d1eb      	bne.n	21308 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   21330:	4801      	ldr	r0, [pc, #4]	; (21338 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   21332:	700b      	strb	r3, [r1, #0]
}
   21334:	bd70      	pop	{r4, r5, r6, pc}
   21336:	bf00      	nop
   21338:	0bad0000 	.word	0x0bad0000

0002133c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   2133c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   2133e:	6803      	ldr	r3, [r0, #0]
   21340:	40cb      	lsrs	r3, r1
   21342:	07db      	lsls	r3, r3, #31
   21344:	d410      	bmi.n	21368 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   21346:	2301      	movs	r3, #1
   21348:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   2134a:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   2134c:	ea43 0102 	orr.w	r1, r3, r2
   21350:	e8d0 4fef 	ldaex	r4, [r0]
   21354:	4294      	cmp	r4, r2
   21356:	d104      	bne.n	21362 <nrfx_flag32_free+0x26>
   21358:	e8c0 1fec 	stlex	ip, r1, [r0]
   2135c:	f1bc 0f00 	cmp.w	ip, #0
   21360:	d1f6      	bne.n	21350 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   21362:	d1f2      	bne.n	2134a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   21364:	4801      	ldr	r0, [pc, #4]	; (2136c <nrfx_flag32_free+0x30>)
}
   21366:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   21368:	4801      	ldr	r0, [pc, #4]	; (21370 <nrfx_flag32_free+0x34>)
   2136a:	e7fc      	b.n	21366 <nrfx_flag32_free+0x2a>
   2136c:	0bad0000 	.word	0x0bad0000
   21370:	0bad0004 	.word	0x0bad0004

00021374 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   21374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   21376:	4604      	mov	r4, r0
   21378:	b118      	cbz	r0, 21382 <clock_stop+0xe>
   2137a:	2801      	cmp	r0, #1
   2137c:	d01e      	beq.n	213bc <clock_stop+0x48>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   2137e:	b003      	add	sp, #12
   21380:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   21382:	2202      	movs	r2, #2
   21384:	4b27      	ldr	r3, [pc, #156]	; (21424 <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   21386:	4607      	mov	r7, r0
   21388:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2138c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   21390:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21394:	2201      	movs	r2, #1
   21396:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   21398:	2301      	movs	r3, #1
   2139a:	f242 7510 	movw	r5, #10000	; 0x2710
   2139e:	4e21      	ldr	r6, [pc, #132]	; (21424 <clock_stop+0xb0>)
   213a0:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   213a4:	b1b4      	cbz	r4, 213d4 <clock_stop+0x60>
   213a6:	2c01      	cmp	r4, #1
   213a8:	d1e9      	bne.n	2137e <clock_stop+0xa>
            if (p_clk_src != NULL)
   213aa:	b387      	cbz	r7, 2140e <clock_stop+0x9a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   213ac:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   213b0:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   213b4:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   213b6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   213ba:	e013      	b.n	213e4 <clock_stop+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   213bc:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   213be:	4b19      	ldr	r3, [pc, #100]	; (21424 <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   213c0:	f10d 0707 	add.w	r7, sp, #7
   213c4:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   213c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   213cc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   213d0:	6058      	str	r0, [r3, #4]
   213d2:	e7e1      	b.n	21398 <clock_stop+0x24>
            if (p_clk_src != NULL)
   213d4:	b18f      	cbz	r7, 213fa <clock_stop+0x86>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   213d6:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   213da:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   213de:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   213e0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   213e4:	03da      	lsls	r2, r3, #15
   213e6:	d5ca      	bpl.n	2137e <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   213e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   213ec:	2801      	cmp	r0, #1
   213ee:	d1c6      	bne.n	2137e <clock_stop+0xa>
   213f0:	f008 fb9a 	bl	29b28 <nrfx_busy_wait>
   213f4:	3d01      	subs	r5, #1
   213f6:	d1d5      	bne.n	213a4 <clock_stop+0x30>
   213f8:	e7c1      	b.n	2137e <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   213fa:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   213fe:	03d9      	lsls	r1, r3, #15
   21400:	d5bd      	bpl.n	2137e <clock_stop+0xa>
   21402:	2001      	movs	r0, #1
   21404:	f008 fb90 	bl	29b28 <nrfx_busy_wait>
   21408:	3d01      	subs	r5, #1
   2140a:	d1f6      	bne.n	213fa <clock_stop+0x86>
   2140c:	e7b7      	b.n	2137e <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2140e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   21412:	03db      	lsls	r3, r3, #15
   21414:	d5b3      	bpl.n	2137e <clock_stop+0xa>
   21416:	2001      	movs	r0, #1
   21418:	f008 fb86 	bl	29b28 <nrfx_busy_wait>
   2141c:	3d01      	subs	r5, #1
   2141e:	d1f6      	bne.n	2140e <clock_stop+0x9a>
   21420:	e7ad      	b.n	2137e <clock_stop+0xa>
   21422:	bf00      	nop
   21424:	40005000 	.word	0x40005000

00021428 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   21428:	4b04      	ldr	r3, [pc, #16]	; (2143c <nrfx_clock_init+0x14>)
   2142a:	791a      	ldrb	r2, [r3, #4]
   2142c:	b922      	cbnz	r2, 21438 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   2142e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   21430:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   21432:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   21434:	4802      	ldr	r0, [pc, #8]	; (21440 <nrfx_clock_init+0x18>)
   21436:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   21438:	4802      	ldr	r0, [pc, #8]	; (21444 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2143a:	4770      	bx	lr
   2143c:	2000d920 	.word	0x2000d920
   21440:	0bad0000 	.word	0x0bad0000
   21444:	0bad000c 	.word	0x0bad000c

00021448 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   21448:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2144a:	2005      	movs	r0, #5
   2144c:	f7f9 fda4 	bl	1af98 <arch_irq_is_enabled>
   21450:	b910      	cbnz	r0, 21458 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   21452:	2005      	movs	r0, #5
   21454:	f7f9 fd7e 	bl	1af54 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   21458:	2201      	movs	r2, #1
   2145a:	4b02      	ldr	r3, [pc, #8]	; (21464 <nrfx_clock_enable+0x1c>)
   2145c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   21460:	bd08      	pop	{r3, pc}
   21462:	bf00      	nop
   21464:	40005000 	.word	0x40005000

00021468 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   21468:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   2146a:	b110      	cbz	r0, 21472 <nrfx_clock_start+0xa>
   2146c:	2801      	cmp	r0, #1
   2146e:	d02e      	beq.n	214ce <nrfx_clock_start+0x66>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   21470:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   21472:	4a1c      	ldr	r2, [pc, #112]	; (214e4 <nrfx_clock_start+0x7c>)
   21474:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   21478:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   2147c:	03c9      	lsls	r1, r1, #15
   2147e:	d40e      	bmi.n	2149e <nrfx_clock_start+0x36>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   21480:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   21484:	07db      	lsls	r3, r3, #31
   21486:	d513      	bpl.n	214b0 <nrfx_clock_start+0x48>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   21488:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   2148c:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   21490:	3b01      	subs	r3, #1
   21492:	2b01      	cmp	r3, #1
   21494:	d809      	bhi.n	214aa <nrfx_clock_start+0x42>
    p_reg->INTENSET = mask;
   21496:	2302      	movs	r3, #2
   21498:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   2149c:	e7e8      	b.n	21470 <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2149e:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   214a2:	2b02      	cmp	r3, #2
   214a4:	d005      	beq.n	214b2 <nrfx_clock_start+0x4a>
   214a6:	2b01      	cmp	r3, #1
   214a8:	d002      	beq.n	214b0 <nrfx_clock_start+0x48>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   214aa:	2000      	movs	r0, #0
   214ac:	f7ff ff62 	bl	21374 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   214b0:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   214b2:	4a0c      	ldr	r2, [pc, #48]	; (214e4 <nrfx_clock_start+0x7c>)
   214b4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   214b8:	2300      	movs	r3, #0
   214ba:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   214be:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   214c2:	2302      	movs	r3, #2
   214c4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   214c8:	2301      	movs	r3, #1
   214ca:	6093      	str	r3, [r2, #8]
}
   214cc:	e7d0      	b.n	21470 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   214ce:	2200      	movs	r2, #0
   214d0:	4b04      	ldr	r3, [pc, #16]	; (214e4 <nrfx_clock_start+0x7c>)
   214d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   214d6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   214da:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   214de:	6018      	str	r0, [r3, #0]
}
   214e0:	e7c6      	b.n	21470 <nrfx_clock_start+0x8>
   214e2:	bf00      	nop
   214e4:	40005000 	.word	0x40005000

000214e8 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   214e8:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   214ea:	4b17      	ldr	r3, [pc, #92]	; (21548 <nrfx_power_clock_irq_handler+0x60>)
   214ec:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   214f0:	b152      	cbz	r2, 21508 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   214f2:	2000      	movs	r0, #0
   214f4:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   214f8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   214fc:	2201      	movs	r2, #1
   214fe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   21502:	4b12      	ldr	r3, [pc, #72]	; (2154c <nrfx_power_clock_irq_handler+0x64>)
   21504:	681b      	ldr	r3, [r3, #0]
   21506:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   21508:	4b0f      	ldr	r3, [pc, #60]	; (21548 <nrfx_power_clock_irq_handler+0x60>)
   2150a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   2150e:	b18a      	cbz	r2, 21534 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21510:	2200      	movs	r2, #0
   21512:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   21516:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2151a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2151e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   21522:	f002 0203 	and.w	r2, r2, #3
   21526:	2a01      	cmp	r2, #1
   21528:	f04f 0102 	mov.w	r1, #2
   2152c:	d103      	bne.n	21536 <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2152e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21532:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   21534:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   21536:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2153a:	4b04      	ldr	r3, [pc, #16]	; (2154c <nrfx_power_clock_irq_handler+0x64>)
   2153c:	2001      	movs	r0, #1
}
   2153e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   21542:	681b      	ldr	r3, [r3, #0]
   21544:	4718      	bx	r3
   21546:	bf00      	nop
   21548:	40005000 	.word	0x40005000
   2154c:	2000d920 	.word	0x2000d920

00021550 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   21550:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   21552:	4801      	ldr	r0, [pc, #4]	; (21558 <nrfx_dppi_channel_alloc+0x8>)
   21554:	f7ff bed6 	b.w	21304 <nrfx_flag32_alloc>
   21558:	2000c688 	.word	0x2000c688

0002155c <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2155c:	4a06      	ldr	r2, [pc, #24]	; (21578 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
   2155e:	f000 001f 	and.w	r0, r0, #31
   21562:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   21566:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    cnf &= ~to_update;
   2156a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2156e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   21572:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
   21576:	4770      	bx	lr
   21578:	40842500 	.word	0x40842500

0002157c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2157c:	4b03      	ldr	r3, [pc, #12]	; (2158c <pin_in_use_by_te+0x10>)
   2157e:	3008      	adds	r0, #8
   21580:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   21584:	f3c0 1040 	ubfx	r0, r0, #5, #1
   21588:	4770      	bx	lr
   2158a:	bf00      	nop
   2158c:	2000c68c 	.word	0x2000c68c

00021590 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   21590:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   21592:	4c0d      	ldr	r4, [pc, #52]	; (215c8 <call_handler+0x38>)
   21594:	f100 0308 	add.w	r3, r0, #8
   21598:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   2159c:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2159e:	05da      	lsls	r2, r3, #23
{
   215a0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   215a2:	d507      	bpl.n	215b4 <call_handler+0x24>
   215a4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   215a8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   215ac:	6852      	ldr	r2, [r2, #4]
   215ae:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   215b2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   215b4:	68a3      	ldr	r3, [r4, #8]
   215b6:	b12b      	cbz	r3, 215c4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   215b8:	4631      	mov	r1, r6
   215ba:	4628      	mov	r0, r5
   215bc:	68e2      	ldr	r2, [r4, #12]
    }
}
   215be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   215c2:	4718      	bx	r3
}
   215c4:	bd70      	pop	{r4, r5, r6, pc}
   215c6:	bf00      	nop
   215c8:	2000c68c 	.word	0x2000c68c

000215cc <release_handler>:
{
   215cc:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   215ce:	4a12      	ldr	r2, [pc, #72]	; (21618 <release_handler+0x4c>)
   215d0:	3008      	adds	r0, #8
   215d2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   215d6:	05d9      	lsls	r1, r3, #23
   215d8:	d51b      	bpl.n	21612 <release_handler+0x46>
   215da:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   215de:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   215e2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   215e6:	2000      	movs	r0, #0
   215e8:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   215ec:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   215f0:	f413 7f80 	tst.w	r3, #256	; 0x100
   215f4:	d003      	beq.n	215fe <release_handler+0x32>
   215f6:	f3c3 2343 	ubfx	r3, r3, #9, #4
   215fa:	4299      	cmp	r1, r3
   215fc:	d009      	beq.n	21612 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   215fe:	3001      	adds	r0, #1
   21600:	2820      	cmp	r0, #32
   21602:	d1f3      	bne.n	215ec <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   21604:	2300      	movs	r3, #0
   21606:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2160a:	4804      	ldr	r0, [pc, #16]	; (2161c <release_handler+0x50>)
}
   2160c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2160e:	f7ff be95 	b.w	2133c <nrfx_flag32_free>
}
   21612:	bc10      	pop	{r4}
   21614:	4770      	bx	lr
   21616:	bf00      	nop
   21618:	2000c68c 	.word	0x2000c68c
   2161c:	2000c6e0 	.word	0x2000c6e0

00021620 <pin_handler_trigger_uninit>:
{
   21620:	b538      	push	{r3, r4, r5, lr}
   21622:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   21624:	f7ff ffaa 	bl	2157c <pin_in_use_by_te>
   21628:	4c0b      	ldr	r4, [pc, #44]	; (21658 <pin_handler_trigger_uninit+0x38>)
   2162a:	f102 0508 	add.w	r5, r2, #8
   2162e:	b160      	cbz	r0, 2164a <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   21630:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21632:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   21636:	0b5b      	lsrs	r3, r3, #13
   21638:	009b      	lsls	r3, r3, #2
   2163a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2163e:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   21642:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
   21646:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   2164a:	4610      	mov	r0, r2
   2164c:	f7ff ffbe 	bl	215cc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   21650:	2300      	movs	r3, #0
   21652:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   21656:	bd38      	pop	{r3, r4, r5, pc}
   21658:	2000c68c 	.word	0x2000c68c

0002165c <nrfx_gpiote_input_configure>:
{
   2165c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21660:	4604      	mov	r4, r0
   21662:	461d      	mov	r5, r3
    if (p_input_config)
   21664:	b309      	cbz	r1, 216aa <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21666:	4f4e      	ldr	r7, [pc, #312]	; (217a0 <nrfx_gpiote_input_configure+0x144>)
   21668:	f100 0808 	add.w	r8, r0, #8
   2166c:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   21670:	07b3      	lsls	r3, r6, #30
   21672:	d506      	bpl.n	21682 <nrfx_gpiote_input_configure+0x26>
   21674:	f7ff ff82 	bl	2157c <pin_in_use_by_te>
   21678:	b118      	cbz	r0, 21682 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
   2167a:	484a      	ldr	r0, [pc, #296]	; (217a4 <nrfx_gpiote_input_configure+0x148>)
}
   2167c:	b002      	add	sp, #8
   2167e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
   21682:	4849      	ldr	r0, [pc, #292]	; (217a8 <nrfx_gpiote_input_configure+0x14c>)
    *p_pin = pin_number & 0x1F;
   21684:	f004 031f 	and.w	r3, r4, #31
   21688:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2168c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   21690:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
   21692:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   21696:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2169a:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2169e:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
   216a2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
   216a6:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
   216aa:	b19a      	cbz	r2, 216d4 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   216ac:	4e3c      	ldr	r6, [pc, #240]	; (217a0 <nrfx_gpiote_input_configure+0x144>)
   216ae:	f104 0708 	add.w	r7, r4, #8
   216b2:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   216b6:	7813      	ldrb	r3, [r2, #0]
        if (pin_is_output(pin))
   216b8:	f011 0f02 	tst.w	r1, #2
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   216bc:	6850      	ldr	r0, [r2, #4]
        if (pin_is_output(pin))
   216be:	d00c      	beq.n	216da <nrfx_gpiote_input_configure+0x7e>
            if (use_evt)
   216c0:	2800      	cmp	r0, #0
   216c2:	d1da      	bne.n	2167a <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   216c4:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
   216c8:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   216cc:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
   216d0:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
   216d4:	bbd5      	cbnz	r5, 2174c <nrfx_gpiote_input_configure+0xf0>
        err = NRFX_SUCCESS;
   216d6:	4835      	ldr	r0, [pc, #212]	; (217ac <nrfx_gpiote_input_configure+0x150>)
   216d8:	e7d0      	b.n	2167c <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   216da:	f021 0120 	bic.w	r1, r1, #32
   216de:	04c9      	lsls	r1, r1, #19
   216e0:	0cc9      	lsrs	r1, r1, #19
   216e2:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
   216e6:	2800      	cmp	r0, #0
   216e8:	d0ec      	beq.n	216c4 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   216ea:	2b03      	cmp	r3, #3
   216ec:	d8c5      	bhi.n	2167a <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   216ee:	6852      	ldr	r2, [r2, #4]
   216f0:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   216f4:	4662      	mov	r2, ip
   216f6:	0092      	lsls	r2, r2, #2
   216f8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   216fc:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   21700:	b923      	cbnz	r3, 2170c <nrfx_gpiote_input_configure+0xb0>
    p_reg->CONFIG[idx] = 0;
   21702:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   21706:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
   2170a:	e7db      	b.n	216c4 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2170c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   21710:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   21714:	f020 0003 	bic.w	r0, r0, #3
   21718:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2171c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   21720:	f041 0120 	orr.w	r1, r1, #32
   21724:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   21728:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   2172c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21730:	0220      	lsls	r0, r4, #8
   21732:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   21736:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   2173a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   2173e:	ea40 000e 	orr.w	r0, r0, lr
   21742:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   21746:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
   2174a:	e7bb      	b.n	216c4 <nrfx_gpiote_input_configure+0x68>
    release_handler(pin);
   2174c:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   2174e:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   21752:	f7ff ff3b 	bl	215cc <release_handler>
    if (!handler)
   21756:	2e00      	cmp	r6, #0
   21758:	d0bd      	beq.n	216d6 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2175a:	4d11      	ldr	r5, [pc, #68]	; (217a0 <nrfx_gpiote_input_configure+0x144>)
   2175c:	e9d5 2300 	ldrd	r2, r3, [r5]
   21760:	4296      	cmp	r6, r2
   21762:	d101      	bne.n	21768 <nrfx_gpiote_input_configure+0x10c>
   21764:	429f      	cmp	r7, r3
   21766:	d018      	beq.n	2179a <nrfx_gpiote_input_configure+0x13e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   21768:	4811      	ldr	r0, [pc, #68]	; (217b0 <nrfx_gpiote_input_configure+0x154>)
   2176a:	f10d 0107 	add.w	r1, sp, #7
   2176e:	f7ff fdc9 	bl	21304 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   21772:	4b0e      	ldr	r3, [pc, #56]	; (217ac <nrfx_gpiote_input_configure+0x150>)
   21774:	4298      	cmp	r0, r3
   21776:	d181      	bne.n	2167c <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
   21778:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
   2177c:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   21780:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   21782:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   21784:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   21788:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2178c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   21790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   21794:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   21798:	e79d      	b.n	216d6 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2179a:	2200      	movs	r2, #0
   2179c:	e7ee      	b.n	2177c <nrfx_gpiote_input_configure+0x120>
   2179e:	bf00      	nop
   217a0:	2000c68c 	.word	0x2000c68c
   217a4:	0bad0004 	.word	0x0bad0004
   217a8:	40842500 	.word	0x40842500
   217ac:	0bad0000 	.word	0x0bad0000
   217b0:	2000c6e0 	.word	0x2000c6e0

000217b4 <nrfx_gpiote_output_configure>:
{
   217b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   217b6:	4604      	mov	r4, r0
    if (p_config)
   217b8:	b379      	cbz	r1, 2181a <nrfx_gpiote_output_configure+0x66>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   217ba:	4e3a      	ldr	r6, [pc, #232]	; (218a4 <nrfx_gpiote_output_configure+0xf0>)
   217bc:	f100 0708 	add.w	r7, r0, #8
   217c0:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   217c4:	07ab      	lsls	r3, r5, #30
   217c6:	d404      	bmi.n	217d2 <nrfx_gpiote_output_configure+0x1e>
   217c8:	f7ff fed8 	bl	2157c <pin_in_use_by_te>
   217cc:	b108      	cbz	r0, 217d2 <nrfx_gpiote_output_configure+0x1e>
{
   217ce:	4836      	ldr	r0, [pc, #216]	; (218a8 <nrfx_gpiote_output_configure+0xf4>)
}
   217d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   217d2:	f015 0f1c 	tst.w	r5, #28
   217d6:	784b      	ldrb	r3, [r1, #1]
   217d8:	d122      	bne.n	21820 <nrfx_gpiote_output_configure+0x6c>
    *p_pin = pin_number & 0x1F;
   217da:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   217de:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 218ac <nrfx_gpiote_output_configure+0xf8>
   217e2:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   217e6:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   217ea:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   217ee:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
   217f0:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   217f4:	7809      	ldrb	r1, [r1, #0]
   217f6:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    cnf &= ~to_update;
   217fa:	f02c 0c07 	bic.w	ip, ip, #7
   217fe:	ea43 030c 	orr.w	r3, r3, ip
   21802:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   21806:	4929      	ldr	r1, [pc, #164]	; (218ac <nrfx_gpiote_output_configure+0xf8>)
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   21808:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   2180c:	3080      	adds	r0, #128	; 0x80
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   2180e:	f045 0503 	orr.w	r5, r5, #3
   21812:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   21816:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
   2181a:	b922      	cbnz	r2, 21826 <nrfx_gpiote_output_configure+0x72>
    return NRFX_SUCCESS;
   2181c:	4824      	ldr	r0, [pc, #144]	; (218b0 <nrfx_gpiote_output_configure+0xfc>)
   2181e:	e7d7      	b.n	217d0 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   21820:	2b01      	cmp	r3, #1
   21822:	d1da      	bne.n	217da <nrfx_gpiote_output_configure+0x26>
   21824:	e7d3      	b.n	217ce <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21826:	4e1f      	ldr	r6, [pc, #124]	; (218a4 <nrfx_gpiote_output_configure+0xf0>)
   21828:	f104 0708 	add.w	r7, r4, #8
   2182c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   21830:	0783      	lsls	r3, r0, #30
   21832:	d5cc      	bpl.n	217ce <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   21834:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
   21838:	2300      	movs	r3, #0
   2183a:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   2183c:	f020 0020 	bic.w	r0, r0, #32
   21840:	0089      	lsls	r1, r1, #2
   21842:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   21846:	04c0      	lsls	r0, r0, #19
   21848:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   2184c:	0cc0      	lsrs	r0, r0, #19
   2184e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   21852:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   21856:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   2185a:	7855      	ldrb	r5, [r2, #1]
   2185c:	2d00      	cmp	r5, #0
   2185e:	d0dd      	beq.n	2181c <nrfx_gpiote_output_configure+0x68>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   21860:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   21864:	7892      	ldrb	r2, [r2, #2]
   21866:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   2186a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2186e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21872:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   21876:	0223      	lsls	r3, r4, #8
   21878:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2187c:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2187e:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   21882:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   21886:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21888:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   2188a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2188e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21892:	4313      	orrs	r3, r2
   21894:	f040 0020 	orr.w	r0, r0, #32
   21898:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   2189c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   218a0:	e7bc      	b.n	2181c <nrfx_gpiote_output_configure+0x68>
   218a2:	bf00      	nop
   218a4:	2000c68c 	.word	0x2000c68c
   218a8:	0bad0004 	.word	0x0bad0004
   218ac:	40842500 	.word	0x40842500
   218b0:	0bad0000 	.word	0x0bad0000

000218b4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   218b4:	4b01      	ldr	r3, [pc, #4]	; (218bc <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   218b6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   218ba:	4770      	bx	lr
   218bc:	2000c68c 	.word	0x2000c68c

000218c0 <nrfx_gpiote_channel_get>:
{
   218c0:	b508      	push	{r3, lr}
   218c2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   218c4:	f7ff fe5a 	bl	2157c <pin_in_use_by_te>
   218c8:	b138      	cbz	r0, 218da <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   218ca:	4b05      	ldr	r3, [pc, #20]	; (218e0 <nrfx_gpiote_channel_get+0x20>)
   218cc:	3208      	adds	r2, #8
   218ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   218d2:	4804      	ldr	r0, [pc, #16]	; (218e4 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   218d4:	0b5b      	lsrs	r3, r3, #13
   218d6:	700b      	strb	r3, [r1, #0]
}
   218d8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   218da:	4803      	ldr	r0, [pc, #12]	; (218e8 <nrfx_gpiote_channel_get+0x28>)
   218dc:	e7fc      	b.n	218d8 <nrfx_gpiote_channel_get+0x18>
   218de:	bf00      	nop
   218e0:	2000c68c 	.word	0x2000c68c
   218e4:	0bad0000 	.word	0x0bad0000
   218e8:	0bad0004 	.word	0x0bad0004

000218ec <nrfx_gpiote_init>:
{
   218ec:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   218ee:	4c0f      	ldr	r4, [pc, #60]	; (2192c <nrfx_gpiote_init+0x40>)
   218f0:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   218f4:	b9bd      	cbnz	r5, 21926 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   218f6:	2240      	movs	r2, #64	; 0x40
   218f8:	4629      	mov	r1, r5
   218fa:	f104 0010 	add.w	r0, r4, #16
   218fe:	f009 fc81 	bl	2b204 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   21902:	2031      	movs	r0, #49	; 0x31
   21904:	f7f9 fb26 	bl	1af54 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21908:	4b09      	ldr	r3, [pc, #36]	; (21930 <nrfx_gpiote_init+0x44>)
    return err_code;
   2190a:	480a      	ldr	r0, [pc, #40]	; (21934 <nrfx_gpiote_init+0x48>)
   2190c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   21910:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   21914:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   21918:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2191c:	2301      	movs	r3, #1
   2191e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   21922:	6563      	str	r3, [r4, #84]	; 0x54
}
   21924:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   21926:	4804      	ldr	r0, [pc, #16]	; (21938 <nrfx_gpiote_init+0x4c>)
   21928:	e7fc      	b.n	21924 <nrfx_gpiote_init+0x38>
   2192a:	bf00      	nop
   2192c:	2000c68c 	.word	0x2000c68c
   21930:	40031000 	.word	0x40031000
   21934:	0bad0000 	.word	0x0bad0000
   21938:	0bad0005 	.word	0x0bad0005

0002193c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   2193c:	4b03      	ldr	r3, [pc, #12]	; (2194c <nrfx_gpiote_is_init+0x10>)
   2193e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   21942:	3800      	subs	r0, #0
   21944:	bf18      	it	ne
   21946:	2001      	movne	r0, #1
   21948:	4770      	bx	lr
   2194a:	bf00      	nop
   2194c:	2000c68c 	.word	0x2000c68c

00021950 <nrfx_gpiote_channel_free>:
{
   21950:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   21952:	4801      	ldr	r0, [pc, #4]	; (21958 <nrfx_gpiote_channel_free+0x8>)
   21954:	f7ff bcf2 	b.w	2133c <nrfx_flag32_free>
   21958:	2000c6dc 	.word	0x2000c6dc

0002195c <nrfx_gpiote_channel_alloc>:
{
   2195c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2195e:	4801      	ldr	r0, [pc, #4]	; (21964 <nrfx_gpiote_channel_alloc+0x8>)
   21960:	f7ff bcd0 	b.w	21304 <nrfx_flag32_alloc>
   21964:	2000c6dc 	.word	0x2000c6dc

00021968 <nrfx_gpiote_trigger_enable>:
{
   21968:	4602      	mov	r2, r0
   2196a:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2196c:	f7ff fe06 	bl	2157c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21970:	4b1b      	ldr	r3, [pc, #108]	; (219e0 <nrfx_gpiote_trigger_enable+0x78>)
   21972:	f102 0408 	add.w	r4, r2, #8
   21976:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2197a:	b1c8      	cbz	r0, 219b0 <nrfx_gpiote_trigger_enable+0x48>
   2197c:	f013 0402 	ands.w	r4, r3, #2
   21980:	d116      	bne.n	219b0 <nrfx_gpiote_trigger_enable+0x48>
    return ((uint32_t)p_reg + event);
   21982:	4818      	ldr	r0, [pc, #96]	; (219e4 <nrfx_gpiote_trigger_enable+0x7c>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21984:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   21986:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21988:	5084      	str	r4, [r0, r2]
   2198a:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2198c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   21990:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   21994:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   21998:	f040 0001 	orr.w	r0, r0, #1
   2199c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   219a0:	b129      	cbz	r1, 219ae <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   219a2:	2201      	movs	r2, #1
   219a4:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   219a8:	4a0f      	ldr	r2, [pc, #60]	; (219e8 <nrfx_gpiote_trigger_enable+0x80>)
   219aa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   219ae:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   219b0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   219b4:	2b04      	cmp	r3, #4
   219b6:	d00e      	beq.n	219d6 <nrfx_gpiote_trigger_enable+0x6e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   219b8:	2b05      	cmp	r3, #5
   219ba:	d00e      	beq.n	219da <nrfx_gpiote_trigger_enable+0x72>
    return p_reg->IN;
   219bc:	4b0b      	ldr	r3, [pc, #44]	; (219ec <nrfx_gpiote_trigger_enable+0x84>)
   219be:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
   219c0:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   219c4:	40d9      	lsrs	r1, r3
   219c6:	f001 0101 	and.w	r1, r1, #1
   219ca:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   219cc:	4610      	mov	r0, r2
}
   219ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   219d2:	f7ff bdc3 	b.w	2155c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   219d6:	2103      	movs	r1, #3
   219d8:	e7f8      	b.n	219cc <nrfx_gpiote_trigger_enable+0x64>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   219da:	2102      	movs	r1, #2
   219dc:	e7f6      	b.n	219cc <nrfx_gpiote_trigger_enable+0x64>
   219de:	bf00      	nop
   219e0:	2000c68c 	.word	0x2000c68c
   219e4:	40031100 	.word	0x40031100
   219e8:	40031000 	.word	0x40031000
   219ec:	40842500 	.word	0x40842500

000219f0 <nrfx_gpiote_trigger_disable>:
{
   219f0:	b508      	push	{r3, lr}
   219f2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   219f4:	f7ff fdc2 	bl	2157c <pin_in_use_by_te>
   219f8:	b1c0      	cbz	r0, 21a2c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   219fa:	4b0f      	ldr	r3, [pc, #60]	; (21a38 <nrfx_gpiote_trigger_disable+0x48>)
   219fc:	f102 0108 	add.w	r1, r2, #8
   21a00:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21a04:	0799      	lsls	r1, r3, #30
   21a06:	d411      	bmi.n	21a2c <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   21a08:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21a0a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   21a0c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   21a0e:	490b      	ldr	r1, [pc, #44]	; (21a3c <nrfx_gpiote_trigger_disable+0x4c>)
   21a10:	009b      	lsls	r3, r3, #2
   21a12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21a16:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   21a1a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   21a1e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   21a22:	f022 0203 	bic.w	r2, r2, #3
   21a26:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   21a2a:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21a2c:	2100      	movs	r1, #0
}
   21a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21a32:	4610      	mov	r0, r2
   21a34:	f7ff bd92 	b.w	2155c <nrf_gpio_cfg_sense_set>
   21a38:	2000c68c 	.word	0x2000c68c
   21a3c:	40031000 	.word	0x40031000

00021a40 <nrfx_gpiote_pin_uninit>:
{
   21a40:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   21a42:	4b0c      	ldr	r3, [pc, #48]	; (21a74 <nrfx_gpiote_pin_uninit+0x34>)
   21a44:	f100 0208 	add.w	r2, r0, #8
   21a48:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   21a4c:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   21a4e:	07db      	lsls	r3, r3, #31
   21a50:	d50d      	bpl.n	21a6e <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
   21a52:	f7ff ffcd 	bl	219f0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   21a56:	4620      	mov	r0, r4
   21a58:	f7ff fde2 	bl	21620 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   21a5c:	2202      	movs	r2, #2
   21a5e:	4b06      	ldr	r3, [pc, #24]	; (21a78 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
   21a60:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
   21a64:	3480      	adds	r4, #128	; 0x80
   21a66:	4805      	ldr	r0, [pc, #20]	; (21a7c <nrfx_gpiote_pin_uninit+0x3c>)
   21a68:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   21a6c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   21a6e:	4804      	ldr	r0, [pc, #16]	; (21a80 <nrfx_gpiote_pin_uninit+0x40>)
   21a70:	e7fc      	b.n	21a6c <nrfx_gpiote_pin_uninit+0x2c>
   21a72:	bf00      	nop
   21a74:	2000c68c 	.word	0x2000c68c
   21a78:	40842500 	.word	0x40842500
   21a7c:	0bad0000 	.word	0x0bad0000
   21a80:	0bad0004 	.word	0x0bad0004

00021a84 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   21a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   21a88:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   21a8a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21a8c:	462c      	mov	r4, r5
{
   21a8e:	4b4d      	ldr	r3, [pc, #308]	; (21bc4 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
   21a90:	484d      	ldr	r0, [pc, #308]	; (21bc8 <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21a92:	494e      	ldr	r1, [pc, #312]	; (21bcc <nrfx_gpiote_irq_handler+0x148>)
{
   21a94:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21a96:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   21a98:	b136      	cbz	r6, 21aa8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   21a9a:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   21a9e:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21aa0:	bf1e      	ittt	ne
   21aa2:	601c      	strne	r4, [r3, #0]
   21aa4:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   21aa6:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21aa8:	3304      	adds	r3, #4
   21aaa:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   21aac:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21ab0:	d1f1      	bne.n	21a96 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21ab2:	4f45      	ldr	r7, [pc, #276]	; (21bc8 <nrfx_gpiote_irq_handler+0x144>)
   21ab4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   21ab8:	b193      	cbz	r3, 21ae0 <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
   21aba:	4e45      	ldr	r6, [pc, #276]	; (21bd0 <nrfx_gpiote_irq_handler+0x14c>)
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   21abc:	f10d 090c 	add.w	r9, sp, #12
   21ac0:	6a33      	ldr	r3, [r6, #32]
   21ac2:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   21ac4:	6233      	str	r3, [r6, #32]
   21ac6:	f04f 0a01 	mov.w	sl, #1
            while (latch[i])
   21aca:	9803      	ldr	r0, [sp, #12]
   21acc:	b970      	cbnz	r0, 21aec <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21ace:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
   21ad2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   21ad6:	6a33      	ldr	r3, [r6, #32]
   21ad8:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   21ada:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
   21adc:	2b00      	cmp	r3, #0
   21ade:	d1f2      	bne.n	21ac6 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   21ae0:	2401      	movs	r4, #1
    while (mask)
   21ae2:	2d00      	cmp	r5, #0
   21ae4:	d156      	bne.n	21b94 <nrfx_gpiote_irq_handler+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   21ae6:	b005      	add	sp, #20
   21ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   21aec:	fa90 fba0 	rbit	fp, r0
   21af0:	fabb fb8b 	clz	fp, fp
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21af4:	4a37      	ldr	r2, [pc, #220]	; (21bd4 <nrfx_gpiote_irq_handler+0x150>)
   21af6:	f10b 0308 	add.w	r3, fp, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   21afa:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
   21afe:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   21b02:	f00b 0407 	and.w	r4, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   21b06:	f819 300c 	ldrb.w	r3, [r9, ip]
   21b0a:	fa0a f404 	lsl.w	r4, sl, r4
   21b0e:	ea23 0304 	bic.w	r3, r3, r4
   21b12:	f809 300c 	strb.w	r3, [r9, ip]
   21b16:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   21b1a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
   21b1e:	f3c1 0282 	ubfx	r2, r1, #2, #3
    if (is_level(trigger))
   21b22:	06c9      	lsls	r1, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21b24:	4690      	mov	r8, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   21b26:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
   21b2a:	d518      	bpl.n	21b5e <nrfx_gpiote_irq_handler+0xda>
        call_handler(pin, trigger);
   21b2c:	4611      	mov	r1, r2
   21b2e:	4658      	mov	r0, fp
   21b30:	9301      	str	r3, [sp, #4]
   21b32:	f7ff fd2d 	bl	21590 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   21b36:	9b01      	ldr	r3, [sp, #4]
   21b38:	b2e4      	uxtb	r4, r4
   21b3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
   21b3e:	f3c3 4301 	ubfx	r3, r3, #16, #2
   21b42:	429c      	cmp	r4, r3
   21b44:	d107      	bne.n	21b56 <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21b46:	2100      	movs	r1, #0
   21b48:	4658      	mov	r0, fp
   21b4a:	f7ff fd07 	bl	2155c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   21b4e:	4621      	mov	r1, r4
   21b50:	4658      	mov	r0, fp
   21b52:	f7ff fd03 	bl	2155c <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   21b56:	fa0a f00b 	lsl.w	r0, sl, fp
   21b5a:	6230      	str	r0, [r6, #32]
}
   21b5c:	e7b5      	b.n	21aca <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   21b5e:	2c02      	cmp	r4, #2
   21b60:	d10c      	bne.n	21b7c <nrfx_gpiote_irq_handler+0xf8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   21b62:	2103      	movs	r1, #3
   21b64:	4658      	mov	r0, fp
   21b66:	f7ff fcf9 	bl	2155c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   21b6a:	f008 0305 	and.w	r3, r8, #5
   21b6e:	2b01      	cmp	r3, #1
   21b70:	d1f1      	bne.n	21b56 <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
   21b72:	4641      	mov	r1, r8
   21b74:	4658      	mov	r0, fp
   21b76:	f7ff fd0b 	bl	21590 <call_handler>
   21b7a:	e7ec      	b.n	21b56 <nrfx_gpiote_irq_handler+0xd2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   21b7c:	2102      	movs	r1, #2
   21b7e:	4658      	mov	r0, fp
   21b80:	9201      	str	r2, [sp, #4]
   21b82:	f7ff fceb 	bl	2155c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   21b86:	9a01      	ldr	r2, [sp, #4]
   21b88:	2a03      	cmp	r2, #3
   21b8a:	d0f2      	beq.n	21b72 <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   21b8c:	2c03      	cmp	r4, #3
   21b8e:	d1e2      	bne.n	21b56 <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   21b90:	428a      	cmp	r2, r1
   21b92:	e7ed      	b.n	21b70 <nrfx_gpiote_irq_handler+0xec>
        uint32_t ch = NRF_CTZ(mask);
   21b94:	fa95 f3a5 	rbit	r3, r5
   21b98:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   21b9c:	fa04 f203 	lsl.w	r2, r4, r3
   21ba0:	009b      	lsls	r3, r3, #2
   21ba2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21ba6:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   21baa:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   21bae:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   21bb2:	f3c0 2004 	ubfx	r0, r0, #8, #5
   21bb6:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   21bba:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   21bbe:	f7ff fce7 	bl	21590 <call_handler>
   21bc2:	e78e      	b.n	21ae2 <nrfx_gpiote_irq_handler+0x5e>
   21bc4:	40031100 	.word	0x40031100
   21bc8:	40031000 	.word	0x40031000
   21bcc:	40031120 	.word	0x40031120
   21bd0:	40842500 	.word	0x40842500
   21bd4:	2000c68c 	.word	0x2000c68c

00021bd8 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   21bd8:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   21bda:	4c08      	ldr	r4, [pc, #32]	; (21bfc <nrfx_ipc_init+0x24>)
{
   21bdc:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   21bde:	7923      	ldrb	r3, [r4, #4]
{
   21be0:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   21be2:	b943      	cbnz	r3, 21bf6 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   21be4:	202a      	movs	r0, #42	; 0x2a
   21be6:	f7f9 f9b5 	bl	1af54 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   21bea:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   21bec:	4804      	ldr	r0, [pc, #16]	; (21c00 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   21bee:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   21bf0:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   21bf2:	60a5      	str	r5, [r4, #8]
}
   21bf4:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   21bf6:	4803      	ldr	r0, [pc, #12]	; (21c04 <nrfx_ipc_init+0x2c>)
   21bf8:	e7fc      	b.n	21bf4 <nrfx_ipc_init+0x1c>
   21bfa:	bf00      	nop
   21bfc:	2000d928 	.word	0x2000d928
   21c00:	0bad0000 	.word	0x0bad0000
   21c04:	0bad000c 	.word	0x0bad000c

00021c08 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   21c08:	2300      	movs	r3, #0
{
   21c0a:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   21c0c:	4a0d      	ldr	r2, [pc, #52]	; (21c44 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   21c0e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   21c12:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   21c16:	3301      	adds	r3, #1
   21c18:	2b08      	cmp	r3, #8
   21c1a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   21c1e:	d1f6      	bne.n	21c0e <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   21c20:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   21c22:	4a08      	ldr	r2, [pc, #32]	; (21c44 <nrfx_ipc_config_load+0x3c>)
   21c24:	f100 011c 	add.w	r1, r0, #28
   21c28:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   21c2c:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   21c30:	3301      	adds	r3, #1
   21c32:	2b08      	cmp	r3, #8
   21c34:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   21c38:	d1f6      	bne.n	21c28 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   21c3a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   21c3c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   21c40:	bd30      	pop	{r4, r5, pc}
   21c42:	bf00      	nop
   21c44:	4002a000 	.word	0x4002a000

00021c48 <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
   21c48:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   21c4a:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->SEND_CNF[index] = channels_mask;
   21c4e:	4a13      	ldr	r2, [pc, #76]	; (21c9c <nrfx_ipc_uninit+0x54>)
   21c50:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   21c54:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   21c58:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   21c5c:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   21c60:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   21c64:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   21c68:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   21c6c:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
   21c70:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   21c74:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   21c78:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   21c7c:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   21c80:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   21c84:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   21c88:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
   21c8c:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
   21c90:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   21c94:	4a02      	ldr	r2, [pc, #8]	; (21ca0 <nrfx_ipc_uninit+0x58>)
   21c96:	7113      	strb	r3, [r2, #4]
}
   21c98:	4770      	bx	lr
   21c9a:	bf00      	nop
   21c9c:	4002a000 	.word	0x4002a000
   21ca0:	2000d928 	.word	0x2000d928

00021ca4 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   21ca4:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   21ca6:	4a02      	ldr	r2, [pc, #8]	; (21cb0 <nrfx_ipc_receive_event_enable+0xc>)
   21ca8:	4083      	lsls	r3, r0
   21caa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   21cae:	4770      	bx	lr
   21cb0:	4002a000 	.word	0x4002a000

00021cb4 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   21cb4:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
   21cb6:	4a02      	ldr	r2, [pc, #8]	; (21cc0 <nrfx_ipc_receive_event_disable+0xc>)
   21cb8:	4083      	lsls	r3, r0
   21cba:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   21cbe:	4770      	bx	lr
   21cc0:	4002a000 	.word	0x4002a000

00021cc4 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   21cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   21cc6:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21cc8:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   21cca:	4b0b      	ldr	r3, [pc, #44]	; (21cf8 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   21ccc:	4d0b      	ldr	r5, [pc, #44]	; (21cfc <nrfx_ipc_irq_handler+0x38>)
   21cce:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   21cd2:	b904      	cbnz	r4, 21cd6 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   21cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   21cd6:	fa94 f0a4 	rbit	r0, r4
   21cda:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   21cde:	fa06 f300 	lsl.w	r3, r6, r0
   21ce2:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21ce6:	4b06      	ldr	r3, [pc, #24]	; (21d00 <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   21ce8:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21cea:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   21cec:	682b      	ldr	r3, [r5, #0]
   21cee:	2b00      	cmp	r3, #0
   21cf0:	d0ef      	beq.n	21cd2 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   21cf2:	68a9      	ldr	r1, [r5, #8]
   21cf4:	4798      	blx	r3
   21cf6:	e7ec      	b.n	21cd2 <nrfx_ipc_irq_handler+0xe>
   21cf8:	4002a000 	.word	0x4002a000
   21cfc:	2000d928 	.word	0x2000d928
   21d00:	4002a100 	.word	0x4002a100

00021d04 <spim_pin_uninit>:
    return err_code;
}

static void spim_pin_uninit(uint32_t pin)
{
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   21d04:	1c43      	adds	r3, r0, #1
   21d06:	d006      	beq.n	21d16 <spim_pin_uninit+0x12>
    reg->PIN_CNF[pin_number] = cnf;
   21d08:	2202      	movs	r2, #2
   21d0a:	4b03      	ldr	r3, [pc, #12]	; (21d18 <spim_pin_uninit+0x14>)
    *p_pin = pin_number & 0x1F;
   21d0c:	f000 001f 	and.w	r0, r0, #31
    reg->PIN_CNF[pin_number] = cnf;
   21d10:	3080      	adds	r0, #128	; 0x80
   21d12:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    {
        return;
    }

    nrf_gpio_cfg_default(pin);
}
   21d16:	4770      	bx	lr
   21d18:	40842500 	.word	0x40842500

00021d1c <nrf_gpio_pin_write>:
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   21d1c:	2301      	movs	r3, #1
    *p_pin = pin_number & 0x1F;
   21d1e:	f000 001f 	and.w	r0, r0, #31
   21d22:	4a03      	ldr	r2, [pc, #12]	; (21d30 <nrf_gpio_pin_write+0x14>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   21d24:	4083      	lsls	r3, r0
    if (value == 0)
   21d26:	b909      	cbnz	r1, 21d2c <nrf_gpio_pin_write+0x10>
    p_reg->OUTCLR = clr_mask;
   21d28:	60d3      	str	r3, [r2, #12]
}
   21d2a:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
   21d2c:	6093      	str	r3, [r2, #8]
}
   21d2e:	4770      	bx	lr
   21d30:	40842500 	.word	0x40842500

00021d34 <nrfx_spim_init>:
{
   21d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21d38:	460c      	mov	r4, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   21d3a:	4d4e      	ldr	r5, [pc, #312]	; (21e74 <nrfx_spim_init+0x140>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21d3c:	7901      	ldrb	r1, [r0, #4]
{
   21d3e:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   21d40:	014f      	lsls	r7, r1, #5
   21d42:	eb05 1141 	add.w	r1, r5, r1, lsl #5
   21d46:	7f08      	ldrb	r0, [r1, #28]
   21d48:	2800      	cmp	r0, #0
   21d4a:	f040 8090 	bne.w	21e6e <nrfx_spim_init+0x13a>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   21d4e:	f8d6 8000 	ldr.w	r8, [r6]
    p_cb->handler = handler;
   21d52:	51ea      	str	r2, [r5, r7]
    p_cb->p_context = p_context;
   21d54:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   21d56:	7be0      	ldrb	r0, [r4, #15]
   21d58:	7f8a      	ldrb	r2, [r1, #30]
   21d5a:	f360 0200 	bfi	r2, r0, #0, #1
   21d5e:	778a      	strb	r2, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   21d60:	7920      	ldrb	r0, [r4, #4]
   21d62:	b2d2      	uxtb	r2, r2
   21d64:	f360 0241 	bfi	r2, r0, #1, #1
   21d68:	778a      	strb	r2, [r1, #30]
    p_cb->ss_pin = p_config->ss_pin;
   21d6a:	78e3      	ldrb	r3, [r4, #3]
   21d6c:	77cb      	strb	r3, [r1, #31]
    if (!p_config->skip_gpio_cfg)
   21d6e:	7be3      	ldrb	r3, [r4, #15]
   21d70:	f8d6 a000 	ldr.w	sl, [r6]
   21d74:	2b00      	cmp	r3, #0
   21d76:	d138      	bne.n	21dea <nrfx_spim_init+0xb6>
        nrf_gpio_pin_write(p_config->sck_pin,
   21d78:	7b21      	ldrb	r1, [r4, #12]
   21d7a:	7820      	ldrb	r0, [r4, #0]
   21d7c:	2901      	cmp	r1, #1
   21d7e:	bf94      	ite	ls
   21d80:	2100      	movls	r1, #0
   21d82:	2101      	movhi	r1, #1
   21d84:	f7ff ffca 	bl	21d1c <nrf_gpio_pin_write>
    reg->PIN_CNF[pin_number] = cnf;
   21d88:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   21d8a:	7823      	ldrb	r3, [r4, #0]
    reg->PIN_CNF[pin_number] = cnf;
   21d8c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 21e78 <nrfx_spim_init+0x144>
    *p_pin = pin_number & 0x1F;
   21d90:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   21d94:	3380      	adds	r3, #128	; 0x80
   21d96:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   21d9a:	7863      	ldrb	r3, [r4, #1]
   21d9c:	2bff      	cmp	r3, #255	; 0xff
   21d9e:	d00b      	beq.n	21db8 <nrfx_spim_init+0x84>
    *p_pin = pin_number & 0x1F;
   21da0:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   21da4:	409a      	lsls	r2, r3
    p_reg->OUTCLR = clr_mask;
   21da6:	f8c9 200c 	str.w	r2, [r9, #12]
    reg->PIN_CNF[pin_number] = cnf;
   21daa:	2203      	movs	r2, #3
    *p_pin = pin_number & 0x1F;
   21dac:	7863      	ldrb	r3, [r4, #1]
   21dae:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   21db2:	3380      	adds	r3, #128	; 0x80
   21db4:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   21db8:	78a3      	ldrb	r3, [r4, #2]
   21dba:	2bff      	cmp	r3, #255	; 0xff
   21dbc:	d006      	beq.n	21dcc <nrfx_spim_init+0x98>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   21dbe:	7ba2      	ldrb	r2, [r4, #14]
    *p_pin = pin_number & 0x1F;
   21dc0:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   21dc4:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
   21dc6:	3380      	adds	r3, #128	; 0x80
   21dc8:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   21dcc:	78e0      	ldrb	r0, [r4, #3]
   21dce:	28ff      	cmp	r0, #255	; 0xff
   21dd0:	d00b      	beq.n	21dea <nrfx_spim_init+0xb6>
                               p_config->ss_active_high ? 0 : 1);
   21dd2:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
   21dd4:	f081 0101 	eor.w	r1, r1, #1
   21dd8:	f7ff ffa0 	bl	21d1c <nrf_gpio_pin_write>
   21ddc:	2203      	movs	r2, #3
    *p_pin = pin_number & 0x1F;
   21dde:	78e3      	ldrb	r3, [r4, #3]
   21de0:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   21de4:	3380      	adds	r3, #128	; 0x80
   21de6:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   21dea:	7c23      	ldrb	r3, [r4, #16]
   21dec:	b993      	cbnz	r3, 21e14 <nrfx_spim_init+0xe0>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   21dee:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   21df0:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   21df2:	2bff      	cmp	r3, #255	; 0xff
   21df4:	bf18      	it	ne
   21df6:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   21df8:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   21dfa:	bf08      	it	eq
   21dfc:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   21e00:	2bff      	cmp	r3, #255	; 0xff
   21e02:	bf08      	it	eq
   21e04:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   21e08:	f8ca 1508 	str.w	r1, [sl, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   21e0c:	f8ca 250c 	str.w	r2, [sl, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   21e10:	f8ca 3510 	str.w	r3, [sl, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   21e14:	68a3      	ldr	r3, [r4, #8]
   21e16:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   21e1a:	7b63      	ldrb	r3, [r4, #13]
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   21e1c:	7b22      	ldrb	r2, [r4, #12]
   21e1e:	3b00      	subs	r3, #0
   21e20:	bf18      	it	ne
   21e22:	2301      	movne	r3, #1
    switch (spi_mode)
   21e24:	2a02      	cmp	r2, #2
   21e26:	d01c      	beq.n	21e62 <nrfx_spim_init+0x12e>
   21e28:	2a03      	cmp	r2, #3
   21e2a:	d01d      	beq.n	21e68 <nrfx_spim_init+0x134>
   21e2c:	2a01      	cmp	r2, #1
   21e2e:	d101      	bne.n	21e34 <nrfx_spim_init+0x100>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   21e30:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   21e34:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   21e38:	79a3      	ldrb	r3, [r4, #6]
   21e3a:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   21e3e:	2307      	movs	r3, #7
   21e40:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    if (p_cb->handler)
   21e44:	59eb      	ldr	r3, [r5, r7]
   21e46:	b123      	cbz	r3, 21e52 <nrfx_spim_init+0x11e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   21e48:	6830      	ldr	r0, [r6, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   21e4a:	f340 3007 	sbfx	r0, r0, #12, #8
   21e4e:	f7f9 f881 	bl	1af54 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   21e52:	2300      	movs	r3, #0
   21e54:	443d      	add	r5, r7
   21e56:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   21e58:	2301      	movs	r3, #1
    return err_code;
   21e5a:	4808      	ldr	r0, [pc, #32]	; (21e7c <nrfx_spim_init+0x148>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   21e5c:	772b      	strb	r3, [r5, #28]
}
   21e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   21e62:	f043 0304 	orr.w	r3, r3, #4
        break;
   21e66:	e7e5      	b.n	21e34 <nrfx_spim_init+0x100>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   21e68:	f043 0306 	orr.w	r3, r3, #6
        break;
   21e6c:	e7e2      	b.n	21e34 <nrfx_spim_init+0x100>
        return err_code;
   21e6e:	4804      	ldr	r0, [pc, #16]	; (21e80 <nrfx_spim_init+0x14c>)
   21e70:	e7f5      	b.n	21e5e <nrfx_spim_init+0x12a>
   21e72:	bf00      	nop
   21e74:	2000d934 	.word	0x2000d934
   21e78:	40842500 	.word	0x40842500
   21e7c:	0bad0000 	.word	0x0bad0000
   21e80:	0bad0005 	.word	0x0bad0005

00021e84 <nrfx_spim_uninit>:

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   21e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21e86:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   21e88:	4d1f      	ldr	r5, [pc, #124]	; (21f08 <nrfx_spim_uninit+0x84>)
   21e8a:	015e      	lsls	r6, r3, #5
   21e8c:	eb05 1743 	add.w	r7, r5, r3, lsl #5
   21e90:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   21e92:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   21e94:	b1b3      	cbz	r3, 21ec4 <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   21e96:	f344 3007 	sbfx	r0, r4, #12, #8
   21e9a:	f7f9 f869 	bl	1af70 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   21e9e:	4b1b      	ldr	r3, [pc, #108]	; (21f0c <nrfx_spim_uninit+0x88>)
   21ea0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   21ea4:	7f7b      	ldrb	r3, [r7, #29]
   21ea6:	b16b      	cbz	r3, 21ec4 <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21ea8:	2301      	movs	r3, #1
   21eaa:	2764      	movs	r7, #100	; 0x64
   21eac:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21eae:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   21eb2:	b923      	cbnz	r3, 21ebe <nrfx_spim_uninit+0x3a>
   21eb4:	2001      	movs	r0, #1
   21eb6:	f007 fe37 	bl	29b28 <nrfx_busy_wait>
   21eba:	3f01      	subs	r7, #1
   21ebc:	d1f7      	bne.n	21eae <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
   21ebe:	2200      	movs	r2, #0
   21ec0:	19ab      	adds	r3, r5, r6
   21ec2:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   21ec4:	2300      	movs	r3, #0
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   21ec6:	19a9      	adds	r1, r5, r6
   21ec8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   21ecc:	7f8b      	ldrb	r3, [r1, #30]
   21ece:	07db      	lsls	r3, r3, #31
   21ed0:	d415      	bmi.n	21efe <nrfx_spim_uninit+0x7a>
    return p_reg->PSEL.SCK;
   21ed2:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   21ed6:	f7ff ff15 	bl	21d04 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   21eda:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   21ede:	f7ff ff11 	bl	21d04 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   21ee2:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   21ee6:	f7ff ff0d 	bl	21d04 <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   21eea:	7fcb      	ldrb	r3, [r1, #31]
   21eec:	2bff      	cmp	r3, #255	; 0xff
   21eee:	d006      	beq.n	21efe <nrfx_spim_uninit+0x7a>
   21ef0:	2102      	movs	r1, #2
   21ef2:	4a07      	ldr	r2, [pc, #28]	; (21f10 <nrfx_spim_uninit+0x8c>)
    *p_pin = pin_number & 0x1F;
   21ef4:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   21ef8:	3380      	adds	r3, #128	; 0x80
   21efa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   21efe:	2300      	movs	r3, #0
   21f00:	4435      	add	r5, r6
   21f02:	772b      	strb	r3, [r5, #28]
}
   21f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21f06:	bf00      	nop
   21f08:	2000d934 	.word	0x2000d934
   21f0c:	00080152 	.word	0x00080152
   21f10:	40842500 	.word	0x40842500

00021f14 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   21f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21f18:	4f38      	ldr	r7, [pc, #224]	; (21ffc <nrfx_spim_xfer+0xe8>)
   21f1a:	7903      	ldrb	r3, [r0, #4]
{
   21f1c:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21f1e:	eb07 1843 	add.w	r8, r7, r3, lsl #5
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   21f22:	f898 201d 	ldrb.w	r2, [r8, #29]
{
   21f26:	4681      	mov	r9, r0
   21f28:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
   21f2a:	015e      	lsls	r6, r3, #5
   21f2c:	2a00      	cmp	r2, #0
   21f2e:	d163      	bne.n	21ff8 <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   21f30:	59ba      	ldr	r2, [r7, r6]
   21f32:	b12a      	cbz	r2, 21f40 <nrfx_spim_xfer+0x2c>
   21f34:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   21f38:	bf04      	itt	eq
   21f3a:	2201      	moveq	r2, #1
   21f3c:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   21f40:	eb07 0c06 	add.w	ip, r7, r6
   21f44:	f10c 0c0c 	add.w	ip, ip, #12
   21f48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   21f4c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   21f50:	2101      	movs	r1, #1
   21f52:	4640      	mov	r0, r8
   21f54:	f007 fdec 	bl	29b30 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   21f58:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   21f5a:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   21f5e:	b121      	cbz	r1, 21f6a <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   21f60:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   21f64:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   21f68:	d106      	bne.n	21f78 <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   21f6a:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   21f6c:	b152      	cbz	r2, 21f84 <nrfx_spim_xfer+0x70>
   21f6e:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   21f72:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   21f76:	d005      	beq.n	21f84 <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
   21f78:	2300      	movs	r3, #0
   21f7a:	443e      	add	r6, r7
        return err_code;
   21f7c:	4820      	ldr	r0, [pc, #128]	; (22000 <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
   21f7e:	7773      	strb	r3, [r6, #29]
}
   21f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   21f84:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   21f86:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   21f8a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   21f8e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   21f92:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   21f96:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21f9a:	2200      	movs	r2, #0
   21f9c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   21fa0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   21fa4:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   21fa8:	bf18      	it	ne
   21faa:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   21fac:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   21fb0:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   21fb4:	bf18      	it	ne
   21fb6:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   21fb8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   21fbc:	072a      	lsls	r2, r5, #28
   21fbe:	d507      	bpl.n	21fd0 <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
   21fc0:	59ba      	ldr	r2, [r7, r6]
   21fc2:	b972      	cbnz	r2, 21fe2 <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
   21fc4:	2100      	movs	r1, #0
   21fc6:	4640      	mov	r0, r8
   21fc8:	f007 fdb2 	bl	29b30 <set_ss_pin_state>
    return err_code;
   21fcc:	480d      	ldr	r0, [pc, #52]	; (22004 <nrfx_spim_xfer+0xf0>)
   21fce:	e7d7      	b.n	21f80 <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21fd0:	2201      	movs	r2, #1
   21fd2:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   21fd4:	59ba      	ldr	r2, [r7, r6]
   21fd6:	b922      	cbnz	r2, 21fe2 <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21fd8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   21fdc:	2a00      	cmp	r2, #0
   21fde:	d0fb      	beq.n	21fd8 <nrfx_spim_xfer+0xc4>
   21fe0:	e7f0      	b.n	21fc4 <nrfx_spim_xfer+0xb0>
    if (!enable)
   21fe2:	f015 0f04 	tst.w	r5, #4
   21fe6:	f04f 0240 	mov.w	r2, #64	; 0x40
   21fea:	d002      	beq.n	21ff2 <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
   21fec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   21ff0:	e7ec      	b.n	21fcc <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
   21ff2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   21ff6:	e7e9      	b.n	21fcc <nrfx_spim_xfer+0xb8>
        return err_code;
   21ff8:	4803      	ldr	r0, [pc, #12]	; (22008 <nrfx_spim_xfer+0xf4>)
   21ffa:	e7c1      	b.n	21f80 <nrfx_spim_xfer+0x6c>
   21ffc:	2000d934 	.word	0x2000d934
   22000:	0bad000a 	.word	0x0bad000a
   22004:	0bad0000 	.word	0x0bad0000
   22008:	0bad000b 	.word	0x0bad000b

0002200c <nrfx_spim_3_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   2200c:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2200e:	4b0c      	ldr	r3, [pc, #48]	; (22040 <nrfx_spim_3_irq_handler+0x34>)
   22010:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   22014:	b192      	cbz	r2, 2203c <nrfx_spim_3_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22016:	2500      	movs	r5, #0
    set_ss_pin_state(p_cb, false);
   22018:	4c0a      	ldr	r4, [pc, #40]	; (22044 <nrfx_spim_3_irq_handler+0x38>)
   2201a:	4629      	mov	r1, r5
   2201c:	4620      	mov	r0, r4
   2201e:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   22022:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   22026:	f007 fd83 	bl	29b30 <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2202a:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   2202e:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   22030:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   22032:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   22036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2203a:	4718      	bx	r3
}
   2203c:	bd70      	pop	{r4, r5, r6, pc}
   2203e:	bf00      	nop
   22040:	4000b000 	.word	0x4000b000
   22044:	2000d934 	.word	0x2000d934

00022048 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   22048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_config);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2204a:	f04f 0e34 	mov.w	lr, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   2204e:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   22050:	4d22      	ldr	r5, [pc, #136]	; (220dc <nrfx_twim_init+0x94>)
   22052:	fb0e fe06 	mul.w	lr, lr, r6
   22056:	eb05 040e 	add.w	r4, r5, lr
   2205a:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   2205e:	2f00      	cmp	r7, #0
   22060:	d139      	bne.n	220d6 <nrfx_twim_init+0x8e>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   22062:	f8d0 c000 	ldr.w	ip, [r0]
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
   22066:	60a7      	str	r7, [r4, #8]
    p_cb->handler         = event_handler;
   22068:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->p_context       = p_context;
   2206c:	6063      	str	r3, [r4, #4]
    p_cb->repeated        = false;
   2206e:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   22072:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   22076:	7b4b      	ldrb	r3, [r1, #13]
   22078:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   2207c:	7b8b      	ldrb	r3, [r1, #14]
   2207e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   22082:	b1c3      	cbz	r3, 220b6 <nrfx_twim_init+0x6e>
   22084:	7bcb      	ldrb	r3, [r1, #15]
   22086:	b92b      	cbnz	r3, 22094 <nrfx_twim_init+0x4c>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   22088:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   2208c:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   22090:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   22094:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   22096:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524

    if (p_cb->handler)
   2209a:	b122      	cbz	r2, 220a6 <nrfx_twim_init+0x5e>
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   2209c:	6800      	ldr	r0, [r0, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   2209e:	f340 3007 	sbfx	r0, r0, #12, #8
   220a2:	f7f8 ff57 	bl	1af54 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   220a6:	2334      	movs	r3, #52	; 0x34
   220a8:	fb03 5506 	mla	r5, r3, r6, r5
   220ac:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   220ae:	480c      	ldr	r0, [pc, #48]	; (220e0 <nrfx_twim_init+0x98>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   220b0:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   220b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   220b6:	f240 670c 	movw	r7, #1548	; 0x60c
    *p_pin = pin_number & 0x1F;
   220ba:	680b      	ldr	r3, [r1, #0]
    reg->PIN_CNF[pin_number] = cnf;
   220bc:	4c09      	ldr	r4, [pc, #36]	; (220e4 <nrfx_twim_init+0x9c>)
    *p_pin = pin_number & 0x1F;
   220be:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   220c2:	3380      	adds	r3, #128	; 0x80
   220c4:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
   220c8:	684b      	ldr	r3, [r1, #4]
   220ca:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   220ce:	3380      	adds	r3, #128	; 0x80
   220d0:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   220d4:	e7d6      	b.n	22084 <nrfx_twim_init+0x3c>
        return err_code;
   220d6:	4804      	ldr	r0, [pc, #16]	; (220e8 <nrfx_twim_init+0xa0>)
   220d8:	e7ec      	b.n	220b4 <nrfx_twim_init+0x6c>
   220da:	bf00      	nop
   220dc:	2000d954 	.word	0x2000d954
   220e0:	0bad0000 	.word	0x0bad0000
   220e4:	40842500 	.word	0x40842500
   220e8:	0bad0005 	.word	0x0bad0005

000220ec <nrfx_twim_enable>:
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   220ec:	2106      	movs	r1, #6
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
   220ee:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   220f0:	7902      	ldrb	r2, [r0, #4]
   220f2:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   220f6:	2134      	movs	r1, #52	; 0x34
   220f8:	4b03      	ldr	r3, [pc, #12]	; (22108 <nrfx_twim_enable+0x1c>)
   220fa:	fb01 3302 	mla	r3, r1, r2, r3
   220fe:	2202      	movs	r2, #2
   22100:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   22104:	4770      	bx	lr
   22106:	bf00      	nop
   22108:	2000d954 	.word	0x2000d954

0002210c <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2210c:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   2210e:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   22110:	2034      	movs	r0, #52	; 0x34
   22112:	4b0b      	ldr	r3, [pc, #44]	; (22140 <nrfx_twim_disable+0x34>)
   22114:	fb00 3301 	mla	r3, r0, r1, r3
   22118:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   2211a:	480a      	ldr	r0, [pc, #40]	; (22144 <nrfx_twim_disable+0x38>)
   2211c:	6099      	str	r1, [r3, #8]
   2211e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   22122:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   22126:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   2212a:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   2212e:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22132:	2201      	movs	r2, #1
    p_cb->busy = false;
   22134:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22138:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   2213c:	4770      	bx	lr
   2213e:	bf00      	nop
   22140:	2000d954 	.word	0x2000d954
   22144:	019c0202 	.word	0x019c0202

00022148 <nrfx_twim_xfer>:
                            nrfx_twim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
    nrfx_err_t err_code = NRFX_SUCCESS;
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    p_cb->error = false;
   22148:	2334      	movs	r3, #52	; 0x34


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   2214a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2214e:	4617      	mov	r7, r2
    p_cb->error = false;
   22150:	2200      	movs	r2, #0
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22152:	f890 e004 	ldrb.w	lr, [r0, #4]
    p_cb->error = false;
   22156:	f8df c2e4 	ldr.w	ip, [pc, #740]	; 2243c <nrfx_twim_xfer+0x2f4>
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   2215a:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   2215c:	fb03 c30e 	mla	r3, r3, lr, ip
   22160:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   22164:	684b      	ldr	r3, [r1, #4]
{
   22166:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   22168:	b14b      	cbz	r3, 2217e <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2216a:	68cb      	ldr	r3, [r1, #12]
   2216c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   22170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   22174:	d003      	beq.n	2217e <nrfx_twim_xfer+0x36>
        return err_code;
   22176:	4eb2      	ldr	r6, [pc, #712]	; (22440 <nrfx_twim_xfer+0x2f8>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   22178:	4630      	mov	r0, r6
   2217a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   2217e:	2634      	movs	r6, #52	; 0x34
   22180:	fb06 c60e 	mla	r6, r6, lr, ip
    p_reg->INTENCLR = mask;
   22184:	4baf      	ldr	r3, [pc, #700]	; (22444 <nrfx_twim_xfer+0x2fc>)
   22186:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   2218a:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   2218e:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   22192:	b123      	cbz	r3, 2219e <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   22194:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   22196:	4eac      	ldr	r6, [pc, #688]	; (22448 <nrfx_twim_xfer+0x300>)
    p_reg->INTENSET = mask;
   22198:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   2219c:	e7ec      	b.n	22178 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   2219e:	f017 0f14 	tst.w	r7, #20
   221a2:	bf0c      	ite	eq
   221a4:	2301      	moveq	r3, #1
   221a6:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   221a8:	46a9      	mov	r9, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   221aa:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   221ae:	f106 080c 	add.w	r8, r6, #12
   221b2:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   221b6:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   221ba:	f8d9 3000 	ldr.w	r3, [r9]
    p_cb->flags = flags;
   221be:	6237      	str	r7, [r6, #32]
    p_cb->xfer_desc = *p_xfer_desc;
   221c0:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   221c4:	f3c7 1300 	ubfx	r3, r7, #4, #1
   221c8:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   221cc:	786b      	ldrb	r3, [r5, #1]
   221ce:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   221d2:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   221d6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   221da:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   221de:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   221e2:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   221e6:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   221ea:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   221ee:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   221f2:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   221f6:	bf18      	it	ne
   221f8:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   221fa:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   221fe:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   22202:	bf18      	it	ne
   22204:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   22206:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   2220a:	782b      	ldrb	r3, [r5, #0]
   2220c:	2b03      	cmp	r3, #3
   2220e:	f200 80b9 	bhi.w	22384 <nrfx_twim_xfer+0x23c>
   22212:	e8df f003 	tbb	[pc, r3]
   22216:	a48b      	.short	0xa48b
   22218:	026d      	.short	0x026d
   2221a:	692b      	ldr	r3, [r5, #16]
   2221c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   22220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   22224:	d1a7      	bne.n	22176 <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
   22226:	f44f 7380 	mov.w	r3, #256	; 0x100
   2222a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   2222e:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22230:	68ea      	ldr	r2, [r5, #12]
   22232:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22236:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2223a:	2300      	movs	r3, #0
   2223c:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   22240:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22244:	2201      	movs	r2, #1
   22246:	6222      	str	r2, [r4, #32]
   22248:	60a2      	str	r2, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2224a:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   2224e:	2a00      	cmp	r2, #0
   22250:	d0fb      	beq.n	2224a <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22252:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   22256:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2225a:	692a      	ldr	r2, [r5, #16]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   2225c:	68ab      	ldr	r3, [r5, #8]
   2225e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22262:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   22266:	2334      	movs	r3, #52	; 0x34
   22268:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   2226c:	fb03 c30e 	mla	r3, r3, lr, ip
   22270:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   22272:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   22274:	4e75      	ldr	r6, [pc, #468]	; (2244c <nrfx_twim_xfer+0x304>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   22276:	0738      	lsls	r0, r7, #28
   22278:	d407      	bmi.n	2228a <nrfx_twim_xfer+0x142>
   2227a:	782a      	ldrb	r2, [r5, #0]
   2227c:	2a03      	cmp	r2, #3
   2227e:	d004      	beq.n	2228a <nrfx_twim_xfer+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22280:	2201      	movs	r2, #1
   22282:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   22284:	686b      	ldr	r3, [r5, #4]
   22286:	b903      	cbnz	r3, 2228a <nrfx_twim_xfer+0x142>
   22288:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   2228a:	2334      	movs	r3, #52	; 0x34
   2228c:	fb03 f30e 	mul.w	r3, r3, lr
   22290:	f85c 1003 	ldr.w	r1, [ip, r3]
   22294:	eb0c 0203 	add.w	r2, ip, r3
   22298:	2900      	cmp	r1, #0
   2229a:	d176      	bne.n	2238a <nrfx_twim_xfer+0x242>
   2229c:	2001      	movs	r0, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2229e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   222a2:	2b00      	cmp	r3, #0
   222a4:	f000 8089 	beq.w	223ba <nrfx_twim_xfer+0x272>
   222a8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   222ac:	2b00      	cmp	r3, #0
   222ae:	f040 8087 	bne.w	223c0 <nrfx_twim_xfer+0x278>
   222b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   222b6:	2b00      	cmp	r3, #0
   222b8:	f000 8095 	beq.w	223e6 <nrfx_twim_xfer+0x29e>
                transmission_finished = true;
   222bc:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   222be:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   222c2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   222c6:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   222ca:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   222ce:	2d00      	cmp	r5, #0
   222d0:	f000 8081 	beq.w	223d6 <nrfx_twim_xfer+0x28e>
   222d4:	f412 7f00 	tst.w	r2, #512	; 0x200
   222d8:	f402 7280 	and.w	r2, r2, #256	; 0x100
   222dc:	d17e      	bne.n	223dc <nrfx_twim_xfer+0x294>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   222de:	6220      	str	r0, [r4, #32]
   222e0:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   222e2:	2a00      	cmp	r2, #0
   222e4:	d0db      	beq.n	2229e <nrfx_twim_xfer+0x156>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   222e6:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
   222ea:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
   222ee:	e7d6      	b.n	2229e <nrfx_twim_xfer+0x156>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   222f0:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   222f2:	68ea      	ldr	r2, [r5, #12]
   222f4:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   222f8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   222fc:	692b      	ldr	r3, [r5, #16]
   222fe:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   22302:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   22306:	f47f af36 	bne.w	22176 <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   2230a:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2230c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   22310:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   22314:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   22318:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2231c:	2334      	movs	r3, #52	; 0x34
   2231e:	2202      	movs	r2, #2
   22320:	fb03 c30e 	mla	r3, r3, lr, ip
   22324:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22326:	2301      	movs	r3, #1
   22328:	6223      	str	r3, [r4, #32]
   2232a:	e7a2      	b.n	22272 <nrfx_twim_xfer+0x12a>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   2232c:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2232e:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   22330:	f017 0f20 	tst.w	r7, #32
   22334:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22338:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   2233c:	f04f 0334 	mov.w	r3, #52	; 0x34
   22340:	d008      	beq.n	22354 <nrfx_twim_xfer+0x20c>
    p_reg->SHORTS = mask;
   22342:	f44f 7280 	mov.w	r2, #256	; 0x100
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   22346:	fb03 c30e 	mla	r3, r3, lr, ip
   2234a:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   2234e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   22352:	e7e7      	b.n	22324 <nrfx_twim_xfer+0x1dc>
   22354:	f44f 7200 	mov.w	r2, #512	; 0x200
   22358:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2235c:	e7df      	b.n	2231e <nrfx_twim_xfer+0x1d6>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   2235e:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   22360:	68ea      	ldr	r2, [r5, #12]
   22362:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   22366:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   2236a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   2236e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   22372:	2334      	movs	r3, #52	; 0x34
   22374:	2202      	movs	r2, #2
   22376:	fb03 c30e 	mla	r3, r3, lr, ip
   2237a:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2237c:	2301      	movs	r3, #1
   2237e:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   22380:	2300      	movs	r3, #0
   22382:	e777      	b.n	22274 <nrfx_twim_xfer+0x12c>
    switch (p_xfer_desc->type)
   22384:	2308      	movs	r3, #8
   22386:	4e32      	ldr	r6, [pc, #200]	; (22450 <nrfx_twim_xfer+0x308>)
   22388:	e775      	b.n	22276 <nrfx_twim_xfer+0x12e>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   2238a:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
   2238c:	bf44      	itt	mi
   2238e:	2300      	movmi	r3, #0
   22390:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   22392:	067a      	lsls	r2, r7, #25
   22394:	d406      	bmi.n	223a4 <nrfx_twim_xfer+0x25c>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   22396:	2334      	movs	r3, #52	; 0x34
   22398:	fb03 c30e 	mla	r3, r3, lr, ip
   2239c:	689a      	ldr	r2, [r3, #8]
   2239e:	f042 0202 	orr.w	r2, r2, #2
   223a2:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   223a4:	2334      	movs	r3, #52	; 0x34
   223a6:	fb03 c30e 	mla	r3, r3, lr, ip
   223aa:	689a      	ldr	r2, [r3, #8]
   223ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   223b0:	609a      	str	r2, [r3, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   223b2:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENSET = mask;
   223b4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   223b8:	e6de      	b.n	22178 <nrfx_twim_xfer+0x30>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   223ba:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   223be:	b123      	cbz	r3, 223ca <nrfx_twim_xfer+0x282>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   223c0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   223c4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   223c8:	e773      	b.n	222b2 <nrfx_twim_xfer+0x16a>
   223ca:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   223ce:	2a00      	cmp	r2, #0
   223d0:	f43f af65 	beq.w	2229e <nrfx_twim_xfer+0x156>
   223d4:	e773      	b.n	222be <nrfx_twim_xfer+0x176>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   223d6:	6220      	str	r0, [r4, #32]
   223d8:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   223da:	e760      	b.n	2229e <nrfx_twim_xfer+0x156>
   223dc:	2a00      	cmp	r2, #0
   223de:	d182      	bne.n	222e6 <nrfx_twim_xfer+0x19e>
        } while (!transmission_finished);
   223e0:	2b00      	cmp	r3, #0
   223e2:	f43f af5c 	beq.w	2229e <nrfx_twim_xfer+0x156>
        p_cb->busy = false;
   223e6:	2134      	movs	r1, #52	; 0x34
   223e8:	2000      	movs	r0, #0
   223ea:	fb01 c20e 	mla	r2, r1, lr, ip
    uint32_t error_source = p_reg->ERRORSRC;
   223ee:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   223f2:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   223f6:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   223fa:	b18b      	cbz	r3, 22420 <nrfx_twim_xfer+0x2d8>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   223fc:	4a15      	ldr	r2, [pc, #84]	; (22454 <nrfx_twim_xfer+0x30c>)
   223fe:	f013 0f01 	tst.w	r3, #1
   22402:	4e15      	ldr	r6, [pc, #84]	; (22458 <nrfx_twim_xfer+0x310>)
   22404:	bf18      	it	ne
   22406:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   22408:	f013 0f02 	tst.w	r3, #2
   2240c:	f102 0201 	add.w	r2, r2, #1
   22410:	bf18      	it	ne
   22412:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   22414:	f013 0f04 	tst.w	r3, #4
   22418:	4b10      	ldr	r3, [pc, #64]	; (2245c <nrfx_twim_xfer+0x314>)
   2241a:	bf18      	it	ne
   2241c:	461e      	movne	r6, r3
   2241e:	e6ab      	b.n	22178 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   22420:	067b      	lsls	r3, r7, #25
   22422:	f53f aea9 	bmi.w	22178 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
   22426:	4620      	mov	r0, r4
   22428:	fb0e c101 	mla	r1, lr, r1, ip
   2242c:	f007 fb8c 	bl	29b48 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   22430:	4b09      	ldr	r3, [pc, #36]	; (22458 <nrfx_twim_xfer+0x310>)
   22432:	2800      	cmp	r0, #0
   22434:	bf08      	it	eq
   22436:	461e      	moveq	r6, r3
   22438:	e69e      	b.n	22178 <nrfx_twim_xfer+0x30>
   2243a:	bf00      	nop
   2243c:	2000d954 	.word	0x2000d954
   22440:	0bad000a 	.word	0x0bad000a
   22444:	019c0202 	.word	0x019c0202
   22448:	0bad000b 	.word	0x0bad000b
   2244c:	0bad0000 	.word	0x0bad0000
   22450:	0bad0004 	.word	0x0bad0004
   22454:	0bae0000 	.word	0x0bae0000
   22458:	0bad0001 	.word	0x0bad0001
   2245c:	0bae0002 	.word	0x0bae0002

00022460 <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
   22460:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22462:	4d5a      	ldr	r5, [pc, #360]	; (225cc <nrfx_twim_2_irq_handler+0x16c>)
   22464:	4c5a      	ldr	r4, [pc, #360]	; (225d0 <nrfx_twim_2_irq_handler+0x170>)
   22466:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   2246a:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   2246c:	b1fb      	cbz	r3, 224ae <nrfx_twim_2_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2246e:	2300      	movs	r3, #0
   22470:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   22474:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22478:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   2247c:	b9bb      	cbnz	r3, 224ae <nrfx_twim_2_irq_handler+0x4e>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   2247e:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   22480:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   22484:	2302      	movs	r3, #2
   22486:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   22488:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   2248a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2248e:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   22492:	b11b      	cbz	r3, 2249c <nrfx_twim_2_irq_handler+0x3c>
    return p_reg->SHORTS;
   22494:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   22498:	059e      	lsls	r6, r3, #22
   2249a:	d403      	bmi.n	224a4 <nrfx_twim_2_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2249c:	2201      	movs	r2, #1
   2249e:	4b4b      	ldr	r3, [pc, #300]	; (225cc <nrfx_twim_2_irq_handler+0x16c>)
   224a0:	621a      	str	r2, [r3, #32]
   224a2:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   224a4:	2301      	movs	r3, #1
   224a6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
   224aa:	b007      	add	sp, #28
   224ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   224ae:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   224b2:	2b00      	cmp	r3, #0
   224b4:	d05a      	beq.n	2256c <nrfx_twim_2_irq_handler+0x10c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   224b6:	2300      	movs	r3, #0
   224b8:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   224bc:	6a27      	ldr	r7, [r4, #32]
   224be:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   224c2:	067d      	lsls	r5, r7, #25
   224c4:	d40a      	bmi.n	224dc <nrfx_twim_2_irq_handler+0x7c>
   224c6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   224ca:	b93b      	cbnz	r3, 224dc <nrfx_twim_2_irq_handler+0x7c>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   224cc:	4940      	ldr	r1, [pc, #256]	; (225d0 <nrfx_twim_2_irq_handler+0x170>)
   224ce:	483f      	ldr	r0, [pc, #252]	; (225cc <nrfx_twim_2_irq_handler+0x16c>)
   224d0:	f007 fb3a 	bl	29b48 <xfer_completeness_check>
   224d4:	f080 0001 	eor.w	r0, r0, #1
   224d8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   224dc:	f017 0704 	ands.w	r7, r7, #4
            if (!p_cb->repeated || p_cb->error)
   224e0:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   224e4:	d120      	bne.n	22528 <nrfx_twim_2_irq_handler+0xc8>
            event.xfer_desc = p_cb->xfer_desc;
   224e6:	4e3b      	ldr	r6, [pc, #236]	; (225d4 <nrfx_twim_2_irq_handler+0x174>)
   224e8:	ad01      	add	r5, sp, #4
   224ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   224ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   224ee:	6833      	ldr	r3, [r6, #0]
   224f0:	602b      	str	r3, [r5, #0]
   224f2:	4b36      	ldr	r3, [pc, #216]	; (225cc <nrfx_twim_2_irq_handler+0x16c>)
   224f4:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   224f8:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   224fc:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   22500:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   22504:	f1bc 0f00 	cmp.w	ip, #0
   22508:	d002      	beq.n	22510 <nrfx_twim_2_irq_handler+0xb0>
   2250a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   2250e:	b15a      	cbz	r2, 22528 <nrfx_twim_2_irq_handler+0xc8>
    p_reg->SHORTS = mask;
   22510:	2200      	movs	r2, #0
   22512:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   22516:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   22518:	4a2f      	ldr	r2, [pc, #188]	; (225d8 <nrfx_twim_2_irq_handler+0x178>)
   2251a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   2251e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   22522:	4b2e      	ldr	r3, [pc, #184]	; (225dc <nrfx_twim_2_irq_handler+0x17c>)
   22524:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   22528:	4a28      	ldr	r2, [pc, #160]	; (225cc <nrfx_twim_2_irq_handler+0x16c>)
   2252a:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   2252e:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
   22530:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
   22534:	d443      	bmi.n	225be <nrfx_twim_2_irq_handler+0x15e>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   22536:	0759      	lsls	r1, r3, #29
   22538:	d443      	bmi.n	225c2 <nrfx_twim_2_irq_handler+0x162>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   2253a:	07da      	lsls	r2, r3, #31
   2253c:	d443      	bmi.n	225c6 <nrfx_twim_2_irq_handler+0x166>
    else if (p_cb->error)
   2253e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   22542:	009b      	lsls	r3, r3, #2
   22544:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   22546:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   2254a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   2254e:	b90b      	cbnz	r3, 22554 <nrfx_twim_2_irq_handler+0xf4>
        p_cb->busy = false;
   22550:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   22554:	6a23      	ldr	r3, [r4, #32]
   22556:	075b      	lsls	r3, r3, #29
   22558:	d503      	bpl.n	22562 <nrfx_twim_2_irq_handler+0x102>
   2255a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   2255e:	2b00      	cmp	r3, #0
   22560:	d0a3      	beq.n	224aa <nrfx_twim_2_irq_handler+0x4a>
        p_cb->handler(&event, p_cb->p_context);
   22562:	e9d4 3100 	ldrd	r3, r1, [r4]
   22566:	4668      	mov	r0, sp
   22568:	4798      	blx	r3
}
   2256a:	e79e      	b.n	224aa <nrfx_twim_2_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2256c:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   22570:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   22574:	7b23      	ldrb	r3, [r4, #12]
   22576:	b983      	cbnz	r3, 2259a <nrfx_twim_2_irq_handler+0x13a>
            event.xfer_desc = p_cb->xfer_desc;
   22578:	4f16      	ldr	r7, [pc, #88]	; (225d4 <nrfx_twim_2_irq_handler+0x174>)
   2257a:	ae01      	add	r6, sp, #4
   2257c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2257e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   22580:	683b      	ldr	r3, [r7, #0]
   22582:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   22584:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   22588:	2b00      	cmp	r3, #0
   2258a:	d1cd      	bne.n	22528 <nrfx_twim_2_irq_handler+0xc8>
    p_reg->SHORTS = mask;
   2258c:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   22590:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   22592:	4b11      	ldr	r3, [pc, #68]	; (225d8 <nrfx_twim_2_irq_handler+0x178>)
   22594:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   22598:	e7c1      	b.n	2251e <nrfx_twim_2_irq_handler+0xbe>
    p_reg->SHORTS = mask;
   2259a:	f44f 7300 	mov.w	r3, #512	; 0x200
   2259e:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   225a2:	f240 2302 	movw	r3, #514	; 0x202
   225a6:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   225a8:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   225ac:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   225b0:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   225b2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   225b6:	2301      	movs	r3, #1
   225b8:	60ab      	str	r3, [r5, #8]
   225ba:	622b      	str	r3, [r5, #32]
            return;
   225bc:	e775      	b.n	224aa <nrfx_twim_2_irq_handler+0x4a>
   225be:	2301      	movs	r3, #1
   225c0:	e7c1      	b.n	22546 <nrfx_twim_2_irq_handler+0xe6>
   225c2:	2302      	movs	r3, #2
   225c4:	e7bf      	b.n	22546 <nrfx_twim_2_irq_handler+0xe6>
   225c6:	2303      	movs	r3, #3
   225c8:	e7bd      	b.n	22546 <nrfx_twim_2_irq_handler+0xe6>
   225ca:	bf00      	nop
   225cc:	4000a000 	.word	0x4000a000
   225d0:	2000d954 	.word	0x2000d954
   225d4:	2000d960 	.word	0x2000d960
   225d8:	019c0202 	.word	0x019c0202
   225dc:	e000e100 	.word	0xe000e100

000225e0 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   225e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   225e4:	2501      	movs	r5, #1
    reg->PIN_CNF[pin_number] = cnf;
   225e6:	f240 630d 	movw	r3, #1549	; 0x60d
    p_reg->OUTSET = set_mask;
   225ea:	4c1b      	ldr	r4, [pc, #108]	; (22658 <nrfx_twi_twim_bus_recover+0x78>)
    *p_pin = pin_number & 0x1F;
   225ec:	f001 061f 	and.w	r6, r1, #31
   225f0:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   225f4:	fa05 f800 	lsl.w	r8, r5, r0
    reg->PIN_CNF[pin_number] = cnf;
   225f8:	f106 0280 	add.w	r2, r6, #128	; 0x80
   225fc:	3080      	adds	r0, #128	; 0x80
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   225fe:	40b5      	lsls	r5, r6
    p_reg->OUTSET = set_mask;
   22600:	f8c4 8008 	str.w	r8, [r4, #8]
   22604:	60a5      	str	r5, [r4, #8]
    reg->PIN_CNF[pin_number] = cnf;
   22606:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   2260a:	2004      	movs	r0, #4
   2260c:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
   22610:	f007 fa8a 	bl	29b28 <nrfx_busy_wait>
   22614:	2709      	movs	r7, #9
    return p_reg->IN;
   22616:	6923      	ldr	r3, [r4, #16]

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   22618:	421d      	tst	r5, r3
   2261a:	d10d      	bne.n	22638 <nrfx_twi_twim_bus_recover+0x58>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   2261c:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
   2261e:	f8c4 800c 	str.w	r8, [r4, #12]
   22622:	f007 fa81 	bl	29b28 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   22626:	3f01      	subs	r7, #1
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   22628:	2004      	movs	r0, #4
    p_reg->OUTSET = set_mask;
   2262a:	f8c4 8008 	str.w	r8, [r4, #8]
   2262e:	f007 fa7b 	bl	29b28 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   22632:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   22636:	d1ee      	bne.n	22616 <nrfx_twi_twim_bus_recover+0x36>
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   22638:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
   2263a:	60e5      	str	r5, [r4, #12]
   2263c:	f007 fa74 	bl	29b28 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   22640:	2004      	movs	r0, #4
    p_reg->OUTSET = set_mask;
   22642:	60a5      	str	r5, [r4, #8]
   22644:	f007 fa70 	bl	29b28 <nrfx_busy_wait>
    return p_reg->IN;
   22648:	6923      	ldr	r3, [r4, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   2264a:	4804      	ldr	r0, [pc, #16]	; (2265c <nrfx_twi_twim_bus_recover+0x7c>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2264c:	40f3      	lsrs	r3, r6
   2264e:	f003 0301 	and.w	r3, r3, #1
   22652:	1ac0      	subs	r0, r0, r3
   22654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22658:	40842500 	.word	0x40842500
   2265c:	0bad0001 	.word	0x0bad0001

00022660 <rpc_handle_data_message>:
   22660:	b570      	push	{r4, r5, r6, lr}
   22662:	6803      	ldr	r3, [r0, #0]
   22664:	4604      	mov	r4, r0
   22666:	3b03      	subs	r3, #3
   22668:	b2db      	uxtb	r3, r3
   2266a:	2b04      	cmp	r3, #4
   2266c:	d803      	bhi.n	22676 <rpc_handle_data_message+0x16>
   2266e:	4a09      	ldr	r2, [pc, #36]	; (22694 <rpc_handle_data_message+0x34>)
   22670:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   22674:	b92d      	cbnz	r5, 22682 <rpc_handle_data_message+0x22>
   22676:	68a0      	ldr	r0, [r4, #8]
   22678:	b108      	cbz	r0, 2267e <rpc_handle_data_message+0x1e>
   2267a:	f000 f825 	bl	226c8 <rpc_transport_msg_data_rx_free>
   2267e:	2000      	movs	r0, #0
   22680:	bd70      	pop	{r4, r5, r6, pc}
   22682:	f007 fae8 	bl	29c56 <rpc_client_msg_from_rpc_msg_get>
   22686:	6821      	ldr	r1, [r4, #0]
   22688:	462b      	mov	r3, r5
   2268a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2268e:	0c09      	lsrs	r1, r1, #16
   22690:	4718      	bx	r3
   22692:	bf00      	nop
   22694:	0002c84c 	.word	0x0002c84c

00022698 <rpc_transport_init>:
   22698:	4b01      	ldr	r3, [pc, #4]	; (226a0 <rpc_transport_init+0x8>)
   2269a:	699b      	ldr	r3, [r3, #24]
   2269c:	4718      	bx	r3
   2269e:	bf00      	nop
   226a0:	2000c6e8 	.word	0x2000c6e8

000226a4 <rpc_transport_msg_alloc>:
   226a4:	4b01      	ldr	r3, [pc, #4]	; (226ac <rpc_transport_msg_alloc+0x8>)
   226a6:	681b      	ldr	r3, [r3, #0]
   226a8:	4718      	bx	r3
   226aa:	bf00      	nop
   226ac:	2000c6e8 	.word	0x2000c6e8

000226b0 <rpc_transport_msg_data_tx_size>:
   226b0:	4b01      	ldr	r3, [pc, #4]	; (226b8 <rpc_transport_msg_data_tx_size+0x8>)
   226b2:	685b      	ldr	r3, [r3, #4]
   226b4:	4718      	bx	r3
   226b6:	bf00      	nop
   226b8:	2000c6e8 	.word	0x2000c6e8

000226bc <rpc_transport_msg_rx_free>:
   226bc:	4b01      	ldr	r3, [pc, #4]	; (226c4 <rpc_transport_msg_rx_free+0x8>)
   226be:	68db      	ldr	r3, [r3, #12]
   226c0:	4718      	bx	r3
   226c2:	bf00      	nop
   226c4:	2000c6e8 	.word	0x2000c6e8

000226c8 <rpc_transport_msg_data_rx_free>:
   226c8:	4b01      	ldr	r3, [pc, #4]	; (226d0 <rpc_transport_msg_data_rx_free+0x8>)
   226ca:	695b      	ldr	r3, [r3, #20]
   226cc:	4718      	bx	r3
   226ce:	bf00      	nop
   226d0:	2000c6e8 	.word	0x2000c6e8

000226d4 <rpc_transport_msg_send>:
   226d4:	4b01      	ldr	r3, [pc, #4]	; (226dc <rpc_transport_msg_send+0x8>)
   226d6:	689b      	ldr	r3, [r3, #8]
   226d8:	4718      	bx	r3
   226da:	bf00      	nop
   226dc:	2000c6e8 	.word	0x2000c6e8

000226e0 <rpc_transport_data_rx_suspend>:
   226e0:	4b01      	ldr	r3, [pc, #4]	; (226e8 <rpc_transport_data_rx_suspend+0x8>)
   226e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   226e4:	4718      	bx	r3
   226e6:	bf00      	nop
   226e8:	2000c6e8 	.word	0x2000c6e8

000226ec <rpc_transport_data_rx_resume>:
   226ec:	4b01      	ldr	r3, [pc, #4]	; (226f4 <rpc_transport_data_rx_resume+0x8>)
   226ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   226f0:	4718      	bx	r3
   226f2:	bf00      	nop
   226f4:	2000c6e8 	.word	0x2000c6e8

000226f8 <rpc_transport_ipc_msg_data_tx_size>:
   226f8:	4b01      	ldr	r3, [pc, #4]	; (22700 <rpc_transport_ipc_msg_data_tx_size+0x8>)
   226fa:	681b      	ldr	r3, [r3, #0]
   226fc:	68d8      	ldr	r0, [r3, #12]
   226fe:	4770      	bx	lr
   22700:	2000d988 	.word	0x2000d988

00022704 <rpc_transport_ipc_msg_rx_free>:
   22704:	2300      	movs	r3, #0
   22706:	b530      	push	{r4, r5, lr}
   22708:	4910      	ldr	r1, [pc, #64]	; (2274c <rpc_transport_ipc_msg_rx_free+0x48>)
   2270a:	680a      	ldr	r2, [r1, #0]
   2270c:	6814      	ldr	r4, [r2, #0]
   2270e:	42a3      	cmp	r3, r4
   22710:	d10b      	bne.n	2272a <rpc_transport_ipc_msg_rx_free+0x26>
   22712:	2300      	movs	r3, #0
   22714:	684a      	ldr	r2, [r1, #4]
   22716:	6811      	ldr	r1, [r2, #0]
   22718:	428b      	cmp	r3, r1
   2271a:	d015      	beq.n	22748 <rpc_transport_ipc_msg_rx_free+0x44>
   2271c:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   22720:	68a4      	ldr	r4, [r4, #8]
   22722:	42a0      	cmp	r0, r4
   22724:	d008      	beq.n	22738 <rpc_transport_ipc_msg_rx_free+0x34>
   22726:	3301      	adds	r3, #1
   22728:	e7f6      	b.n	22718 <rpc_transport_ipc_msg_rx_free+0x14>
   2272a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   2272e:	68ad      	ldr	r5, [r5, #8]
   22730:	42a8      	cmp	r0, r5
   22732:	d001      	beq.n	22738 <rpc_transport_ipc_msg_rx_free+0x34>
   22734:	3301      	adds	r3, #1
   22736:	e7ea      	b.n	2270e <rpc_transport_ipc_msg_rx_free+0xa>
   22738:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2273c:	6853      	ldr	r3, [r2, #4]
   2273e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   22742:	f043 0303 	orr.w	r3, r3, #3
   22746:	6053      	str	r3, [r2, #4]
   22748:	bd30      	pop	{r4, r5, pc}
   2274a:	bf00      	nop
   2274c:	2000d9a8 	.word	0x2000d9a8

00022750 <rpc_transport_ipc_msg_tx_free>:
   22750:	2200      	movs	r2, #0
   22752:	b530      	push	{r4, r5, lr}
   22754:	4b0b      	ldr	r3, [pc, #44]	; (22784 <rpc_transport_ipc_msg_tx_free+0x34>)
   22756:	6819      	ldr	r1, [r3, #0]
   22758:	680c      	ldr	r4, [r1, #0]
   2275a:	4294      	cmp	r4, r2
   2275c:	d00f      	beq.n	2277e <rpc_transport_ipc_msg_tx_free+0x2e>
   2275e:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   22762:	689d      	ldr	r5, [r3, #8]
   22764:	42a8      	cmp	r0, r5
   22766:	d10b      	bne.n	22780 <rpc_transport_ipc_msg_tx_free+0x30>
   22768:	f04f 0203 	mov.w	r2, #3
   2276c:	3304      	adds	r3, #4
   2276e:	e8d3 1fcf 	ldaexb	r1, [r3]
   22772:	2900      	cmp	r1, #0
   22774:	d103      	bne.n	2277e <rpc_transport_ipc_msg_tx_free+0x2e>
   22776:	e8c3 2fc0 	stlexb	r0, r2, [r3]
   2277a:	2800      	cmp	r0, #0
   2277c:	d1f7      	bne.n	2276e <rpc_transport_ipc_msg_tx_free+0x1e>
   2277e:	bd30      	pop	{r4, r5, pc}
   22780:	3201      	adds	r2, #1
   22782:	e7ea      	b.n	2275a <rpc_transport_ipc_msg_tx_free+0xa>
   22784:	2000d9a0 	.word	0x2000d9a0

00022788 <handle_modem_rpc_msg>:
   22788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2278c:	2500      	movs	r5, #0
   2278e:	4606      	mov	r6, r0
   22790:	460f      	mov	r7, r1
   22792:	4628      	mov	r0, r5
   22794:	f8df 8064 	ldr.w	r8, [pc, #100]	; 227fc <handle_modem_rpc_msg+0x74>
   22798:	6833      	ldr	r3, [r6, #0]
   2279a:	42ab      	cmp	r3, r5
   2279c:	d801      	bhi.n	227a2 <handle_modem_rpc_msg+0x1a>
   2279e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   227a2:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   227a6:	6863      	ldr	r3, [r4, #4]
   227a8:	b2db      	uxtb	r3, r3
   227aa:	2b01      	cmp	r3, #1
   227ac:	d117      	bne.n	227de <handle_modem_rpc_msg+0x56>
   227ae:	6862      	ldr	r2, [r4, #4]
   227b0:	f8b8 3000 	ldrh.w	r3, [r8]
   227b4:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   227b8:	d111      	bne.n	227de <handle_modem_rpc_msg+0x56>
   227ba:	2f02      	cmp	r7, #2
   227bc:	68a0      	ldr	r0, [r4, #8]
   227be:	d110      	bne.n	227e2 <handle_modem_rpc_msg+0x5a>
   227c0:	f7ff ff4e 	bl	22660 <rpc_handle_data_message>
   227c4:	b990      	cbnz	r0, 227ec <handle_modem_rpc_msg+0x64>
   227c6:	6863      	ldr	r3, [r4, #4]
   227c8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   227cc:	f043 0303 	orr.w	r3, r3, #3
   227d0:	6063      	str	r3, [r4, #4]
   227d2:	2001      	movs	r0, #1
   227d4:	f8b8 3000 	ldrh.w	r3, [r8]
   227d8:	3301      	adds	r3, #1
   227da:	f8a8 3000 	strh.w	r3, [r8]
   227de:	3501      	adds	r5, #1
   227e0:	e7da      	b.n	22798 <handle_modem_rpc_msg+0x10>
   227e2:	6801      	ldr	r1, [r0, #0]
   227e4:	0c09      	lsrs	r1, r1, #16
   227e6:	f007 f9df 	bl	29ba8 <rpc_handle_ctrl_message>
   227ea:	e7eb      	b.n	227c4 <handle_modem_rpc_msg+0x3c>
   227ec:	2801      	cmp	r0, #1
   227ee:	d1f0      	bne.n	227d2 <handle_modem_rpc_msg+0x4a>
   227f0:	6863      	ldr	r3, [r4, #4]
   227f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   227f6:	f043 0302 	orr.w	r3, r3, #2
   227fa:	e7e9      	b.n	227d0 <handle_modem_rpc_msg+0x48>
   227fc:	2000dd96 	.word	0x2000dd96

00022800 <rpc_message_handler>:
   22800:	b538      	push	{r3, r4, r5, lr}
   22802:	4d07      	ldr	r5, [pc, #28]	; (22820 <rpc_message_handler+0x20>)
   22804:	2101      	movs	r1, #1
   22806:	6828      	ldr	r0, [r5, #0]
   22808:	f7ff ffbe 	bl	22788 <handle_modem_rpc_msg>
   2280c:	2102      	movs	r1, #2
   2280e:	4604      	mov	r4, r0
   22810:	6868      	ldr	r0, [r5, #4]
   22812:	f7ff ffb9 	bl	22788 <handle_modem_rpc_msg>
   22816:	2800      	cmp	r0, #0
   22818:	d1f4      	bne.n	22804 <rpc_message_handler+0x4>
   2281a:	2c00      	cmp	r4, #0
   2281c:	d1f2      	bne.n	22804 <rpc_message_handler+0x4>
   2281e:	bd38      	pop	{r3, r4, r5, pc}
   22820:	2000d9a8 	.word	0x2000d9a8

00022824 <ipc_irq_handler>:
   22824:	b570      	push	{r4, r5, r6, lr}
   22826:	2807      	cmp	r0, #7
   22828:	d868      	bhi.n	228fc <ipc_irq_handler+0xd8>
   2282a:	e8df f000 	tbb	[pc, r0]
   2282e:	670b      	.short	0x670b
   22830:	674b674f 	.word	0x674b674f
   22834:	0440      	.short	0x0440
   22836:	f001 fd75 	bl	24324 <ipc_trace_handler>
   2283a:	2003      	movs	r0, #3
   2283c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   22840:	f7fc bb00 	b.w	1ee44 <nrf_modem_os_event_notify>
   22844:	2003      	movs	r0, #3
   22846:	4b2e      	ldr	r3, [pc, #184]	; (22900 <ipc_irq_handler+0xdc>)
   22848:	f8d3 4614 	ldr.w	r4, [r3, #1556]	; 0x614
   2284c:	f8d3 6618 	ldr.w	r6, [r3, #1560]	; 0x618
   22850:	4b2c      	ldr	r3, [pc, #176]	; (22904 <ipc_irq_handler+0xe0>)
   22852:	781d      	ldrb	r5, [r3, #0]
   22854:	7018      	strb	r0, [r3, #0]
   22856:	f001 fd3b 	bl	242d0 <nrf_modem_state_set>
   2285a:	4b2b      	ldr	r3, [pc, #172]	; (22908 <ipc_irq_handler+0xe4>)
   2285c:	b2ed      	uxtb	r5, r5
   2285e:	6818      	ldr	r0, [r3, #0]
   22860:	f006 fc6f 	bl	29142 <nrf_modem_os_sem_give>
   22864:	2d01      	cmp	r5, #1
   22866:	d11c      	bne.n	228a2 <ipc_irq_handler+0x7e>
   22868:	4b28      	ldr	r3, [pc, #160]	; (2290c <ipc_irq_handler+0xe8>)
   2286a:	429c      	cmp	r4, r3
   2286c:	d010      	beq.n	22890 <ipc_irq_handler+0x6c>
   2286e:	d809      	bhi.n	22884 <ipc_irq_handler+0x60>
   22870:	3b02      	subs	r3, #2
   22872:	429c      	cmp	r4, r3
   22874:	d00f      	beq.n	22896 <ipc_irq_handler+0x72>
   22876:	3301      	adds	r3, #1
   22878:	429c      	cmp	r4, r3
   2287a:	d00f      	beq.n	2289c <ipc_irq_handler+0x78>
   2287c:	4b24      	ldr	r3, [pc, #144]	; (22910 <ipc_irq_handler+0xec>)
   2287e:	601c      	str	r4, [r3, #0]
   22880:	2000      	movs	r0, #0
   22882:	e7db      	b.n	2283c <ipc_irq_handler+0x18>
   22884:	4b23      	ldr	r3, [pc, #140]	; (22914 <ipc_irq_handler+0xf0>)
   22886:	429c      	cmp	r4, r3
   22888:	d1f8      	bne.n	2287c <ipc_irq_handler+0x58>
   2288a:	f06f 040c 	mvn.w	r4, #12
   2288e:	e7f5      	b.n	2287c <ipc_irq_handler+0x58>
   22890:	f06f 040b 	mvn.w	r4, #11
   22894:	e7f2      	b.n	2287c <ipc_irq_handler+0x58>
   22896:	f06f 0415 	mvn.w	r4, #21
   2289a:	e7ef      	b.n	2287c <ipc_irq_handler+0x58>
   2289c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   228a0:	e7ec      	b.n	2287c <ipc_irq_handler+0x58>
   228a2:	4631      	mov	r1, r6
   228a4:	f3c4 000b 	ubfx	r0, r4, #0, #12
   228a8:	f001 fd06 	bl	242b8 <nrf_modem_fault_handler_internal>
   228ac:	e7e8      	b.n	22880 <ipc_irq_handler+0x5c>
   228ae:	2202      	movs	r2, #2
   228b0:	4b14      	ldr	r3, [pc, #80]	; (22904 <ipc_irq_handler+0xe0>)
   228b2:	2000      	movs	r0, #0
   228b4:	701a      	strb	r2, [r3, #0]
   228b6:	f001 fd0b 	bl	242d0 <nrf_modem_state_set>
   228ba:	4b13      	ldr	r3, [pc, #76]	; (22908 <ipc_irq_handler+0xe4>)
   228bc:	6818      	ldr	r0, [r3, #0]
   228be:	f006 fc40 	bl	29142 <nrf_modem_os_sem_give>
   228c2:	e7dd      	b.n	22880 <ipc_irq_handler+0x5c>
   228c4:	f7ff ff9c 	bl	22800 <rpc_message_handler>
   228c8:	2002      	movs	r0, #2
   228ca:	e7b7      	b.n	2283c <ipc_irq_handler+0x18>
   228cc:	4b0d      	ldr	r3, [pc, #52]	; (22904 <ipc_irq_handler+0xe0>)
   228ce:	781a      	ldrb	r2, [r3, #0]
   228d0:	2a01      	cmp	r2, #1
   228d2:	b2d0      	uxtb	r0, r2
   228d4:	d10e      	bne.n	228f4 <ipc_irq_handler+0xd0>
   228d6:	4a10      	ldr	r2, [pc, #64]	; (22918 <ipc_irq_handler+0xf4>)
   228d8:	6811      	ldr	r1, [r2, #0]
   228da:	4a10      	ldr	r2, [pc, #64]	; (2291c <ipc_irq_handler+0xf8>)
   228dc:	688c      	ldr	r4, [r1, #8]
   228de:	6054      	str	r4, [r2, #4]
   228e0:	6849      	ldr	r1, [r1, #4]
   228e2:	6011      	str	r1, [r2, #0]
   228e4:	2200      	movs	r2, #0
   228e6:	701a      	strb	r2, [r3, #0]
   228e8:	f001 fcf2 	bl	242d0 <nrf_modem_state_set>
   228ec:	4b06      	ldr	r3, [pc, #24]	; (22908 <ipc_irq_handler+0xe4>)
   228ee:	6818      	ldr	r0, [r3, #0]
   228f0:	f006 fc27 	bl	29142 <nrf_modem_os_sem_give>
   228f4:	f7ff ff84 	bl	22800 <rpc_message_handler>
   228f8:	2001      	movs	r0, #1
   228fa:	e79f      	b.n	2283c <ipc_irq_handler+0x18>
   228fc:	bd70      	pop	{r4, r5, r6, pc}
   228fe:	bf00      	nop
   22900:	4002a000 	.word	0x4002a000
   22904:	2000eaf0 	.word	0x2000eaf0
   22908:	2000d990 	.word	0x2000d990
   2290c:	00010022 	.word	0x00010022
   22910:	2000d9a4 	.word	0x2000d9a4
   22914:	00013032 	.word	0x00013032
   22918:	2000d98c 	.word	0x2000d98c
   2291c:	2000d9a8 	.word	0x2000d9a8

00022920 <rpc_transport_ipc_data_msg_send>:
   22920:	b570      	push	{r4, r5, r6, lr}
   22922:	4b16      	ldr	r3, [pc, #88]	; (2297c <rpc_transport_ipc_data_msg_send+0x5c>)
   22924:	6842      	ldr	r2, [r0, #4]
   22926:	681b      	ldr	r3, [r3, #0]
   22928:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2292c:	f042 0202 	orr.w	r2, r2, #2
   22930:	1ac3      	subs	r3, r0, r3
   22932:	6042      	str	r2, [r0, #4]
   22934:	4812      	ldr	r0, [pc, #72]	; (22980 <rpc_transport_ipc_data_msg_send+0x60>)
   22936:	4a13      	ldr	r2, [pc, #76]	; (22984 <rpc_transport_ipc_data_msg_send+0x64>)
   22938:	6801      	ldr	r1, [r0, #0]
   2293a:	f3c3 1389 	ubfx	r3, r3, #6, #10
   2293e:	e8d2 4fdf 	ldaexh	r4, [r2]
   22942:	1c65      	adds	r5, r4, #1
   22944:	e8c2 5fd6 	stlexh	r6, r5, [r2]
   22948:	2e00      	cmp	r6, #0
   2294a:	d1f8      	bne.n	2293e <rpc_transport_ipc_data_msg_send+0x1e>
   2294c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   22950:	684a      	ldr	r2, [r1, #4]
   22952:	b292      	uxth	r2, r2
   22954:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   22958:	604a      	str	r2, [r1, #4]
   2295a:	6802      	ldr	r2, [r0, #0]
   2295c:	2003      	movs	r0, #3
   2295e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   22962:	6853      	ldr	r3, [r2, #4]
   22964:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   22968:	f043 0301 	orr.w	r3, r3, #1
   2296c:	6053      	str	r3, [r2, #4]
   2296e:	f006 fbde 	bl	2912e <nrf_modem_os_busywait>
   22972:	2201      	movs	r2, #1
   22974:	4b04      	ldr	r3, [pc, #16]	; (22988 <rpc_transport_ipc_data_msg_send+0x68>)
   22976:	60da      	str	r2, [r3, #12]
   22978:	bd70      	pop	{r4, r5, r6, pc}
   2297a:	bf00      	nop
   2297c:	2000d998 	.word	0x2000d998
   22980:	2000d9a0 	.word	0x2000d9a0
   22984:	2000dd98 	.word	0x2000dd98
   22988:	4002a000 	.word	0x4002a000

0002298c <rpc_transport_ipc_ctrl_msg_alloc>:
   2298c:	230a      	movs	r3, #10
   2298e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22990:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   22994:	4e0c      	ldr	r6, [pc, #48]	; (229c8 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   22996:	4f0d      	ldr	r7, [pc, #52]	; (229cc <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
   22998:	9301      	str	r3, [sp, #4]
   2299a:	6831      	ldr	r1, [r6, #0]
   2299c:	6838      	ldr	r0, [r7, #0]
   2299e:	f007 f935 	bl	29c0c <rpc_transport_ipc_msg_alloc>
   229a2:	4604      	mov	r4, r0
   229a4:	b940      	cbnz	r0, 229b8 <rpc_transport_ipc_ctrl_msg_alloc+0x2c>
   229a6:	f006 fbca 	bl	2913e <nrf_modem_os_is_in_isr>
   229aa:	b940      	cbnz	r0, 229be <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   229ac:	2001      	movs	r0, #1
   229ae:	a901      	add	r1, sp, #4
   229b0:	f7fc f96a 	bl	1ec88 <nrf_modem_os_timedwait>
   229b4:	306e      	adds	r0, #110	; 0x6e
   229b6:	d1f0      	bne.n	2299a <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   229b8:	4620      	mov	r0, r4
   229ba:	b003      	add	sp, #12
   229bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   229be:	9801      	ldr	r0, [sp, #4]
   229c0:	4368      	muls	r0, r5
   229c2:	f006 fbb4 	bl	2912e <nrf_modem_os_busywait>
   229c6:	e7e8      	b.n	2299a <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   229c8:	2000d994 	.word	0x2000d994
   229cc:	2000d99c 	.word	0x2000d99c

000229d0 <rpc_transport_ipc_data_msg_alloc>:
   229d0:	4b05      	ldr	r3, [pc, #20]	; (229e8 <rpc_transport_ipc_data_msg_alloc+0x18>)
   229d2:	781b      	ldrb	r3, [r3, #0]
   229d4:	b92b      	cbnz	r3, 229e2 <rpc_transport_ipc_data_msg_alloc+0x12>
   229d6:	4b05      	ldr	r3, [pc, #20]	; (229ec <rpc_transport_ipc_data_msg_alloc+0x1c>)
   229d8:	6819      	ldr	r1, [r3, #0]
   229da:	4b05      	ldr	r3, [pc, #20]	; (229f0 <rpc_transport_ipc_data_msg_alloc+0x20>)
   229dc:	6818      	ldr	r0, [r3, #0]
   229de:	f007 b915 	b.w	29c0c <rpc_transport_ipc_msg_alloc>
   229e2:	2000      	movs	r0, #0
   229e4:	4770      	bx	lr
   229e6:	bf00      	nop
   229e8:	2000eaef 	.word	0x2000eaef
   229ec:	2000d998 	.word	0x2000d998
   229f0:	2000d9a0 	.word	0x2000d9a0

000229f4 <rpc_transport_ipc_init>:
   229f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   229f8:	b095      	sub	sp, #84	; 0x54
   229fa:	2238      	movs	r2, #56	; 0x38
   229fc:	2100      	movs	r1, #0
   229fe:	4606      	mov	r6, r0
   22a00:	a803      	add	r0, sp, #12
   22a02:	f008 fbff 	bl	2b204 <memset>
   22a06:	2302      	movs	r3, #2
   22a08:	9304      	str	r3, [sp, #16]
   22a0a:	2308      	movs	r3, #8
   22a0c:	9306      	str	r3, [sp, #24]
   22a0e:	2320      	movs	r3, #32
   22a10:	9308      	str	r3, [sp, #32]
   22a12:	2304      	movs	r3, #4
   22a14:	930d      	str	r3, [sp, #52]	; 0x34
   22a16:	2310      	movs	r3, #16
   22a18:	2540      	movs	r5, #64	; 0x40
   22a1a:	930f      	str	r3, [sp, #60]	; 0x3c
   22a1c:	2380      	movs	r3, #128	; 0x80
   22a1e:	2201      	movs	r2, #1
   22a20:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
   22a24:	23d5      	movs	r3, #213	; 0xd5
   22a26:	2100      	movs	r1, #0
   22a28:	4855      	ldr	r0, [pc, #340]	; (22b80 <rpc_transport_ipc_init+0x18c>)
   22a2a:	920b      	str	r2, [sp, #44]	; 0x2c
   22a2c:	9313      	str	r3, [sp, #76]	; 0x4c
   22a2e:	f7fc f9ed 	bl	1ee0c <nrf_modem_os_sem_init>
   22a32:	4605      	mov	r5, r0
   22a34:	2800      	cmp	r0, #0
   22a36:	f040 809f 	bne.w	22b78 <rpc_transport_ipc_init+0x184>
   22a3a:	4602      	mov	r2, r0
   22a3c:	4951      	ldr	r1, [pc, #324]	; (22b84 <rpc_transport_ipc_init+0x190>)
   22a3e:	7930      	ldrb	r0, [r6, #4]
   22a40:	f7ff f8ca 	bl	21bd8 <nrfx_ipc_init>
   22a44:	a803      	add	r0, sp, #12
   22a46:	f7ff f8df 	bl	21c08 <nrfx_ipc_config_load>
   22a4a:	6834      	ldr	r4, [r6, #0]
   22a4c:	6862      	ldr	r2, [r4, #4]
   22a4e:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
   22a52:	f040 8089 	bne.w	22b68 <rpc_transport_ipc_init+0x174>
   22a56:	6961      	ldr	r1, [r4, #20]
   22a58:	68e3      	ldr	r3, [r4, #12]
   22a5a:	440b      	add	r3, r1
   22a5c:	69e1      	ldr	r1, [r4, #28]
   22a5e:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
   22a62:	440b      	add	r3, r1
   22a64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   22a68:	d87e      	bhi.n	22b68 <rpc_transport_ipc_init+0x174>
   22a6a:	6820      	ldr	r0, [r4, #0]
   22a6c:	4629      	mov	r1, r5
   22a6e:	f008 fbc9 	bl	2b204 <memset>
   22a72:	6833      	ldr	r3, [r6, #0]
   22a74:	681c      	ldr	r4, [r3, #0]
   22a76:	f8d3 901c 	ldr.w	r9, [r3, #28]
   22a7a:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   22a7e:	9201      	str	r2, [sp, #4]
   22a80:	f104 0760 	add.w	r7, r4, #96	; 0x60
   22a84:	4a40      	ldr	r2, [pc, #256]	; (22b88 <rpc_transport_ipc_init+0x194>)
   22a86:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
   22a8a:	f104 0b20 	add.w	fp, r4, #32
   22a8e:	f1b9 0f00 	cmp.w	r9, #0
   22a92:	d15c      	bne.n	22b4e <rpc_transport_ipc_init+0x15a>
   22a94:	f8c2 b000 	str.w	fp, [r2]
   22a98:	2500      	movs	r5, #0
   22a9a:	f04f 0a01 	mov.w	sl, #1
   22a9e:	7025      	strb	r5, [r4, #0]
   22aa0:	7065      	strb	r5, [r4, #1]
   22aa2:	f884 a002 	strb.w	sl, [r4, #2]
   22aa6:	70e5      	strb	r5, [r4, #3]
   22aa8:	6833      	ldr	r3, [r6, #0]
   22aaa:	4640      	mov	r0, r8
   22aac:	691b      	ldr	r3, [r3, #16]
   22aae:	6063      	str	r3, [r4, #4]
   22ab0:	6833      	ldr	r3, [r6, #0]
   22ab2:	695b      	ldr	r3, [r3, #20]
   22ab4:	f8c4 b014 	str.w	fp, [r4, #20]
   22ab8:	60a3      	str	r3, [r4, #8]
   22aba:	4b34      	ldr	r3, [pc, #208]	; (22b8c <rpc_transport_ipc_init+0x198>)
   22abc:	f8c4 9018 	str.w	r9, [r4, #24]
   22ac0:	f8c3 8000 	str.w	r8, [r3]
   22ac4:	4b32      	ldr	r3, [pc, #200]	; (22b90 <rpc_transport_ipc_init+0x19c>)
   22ac6:	60e7      	str	r7, [r4, #12]
   22ac8:	601f      	str	r7, [r3, #0]
   22aca:	2308      	movs	r3, #8
   22acc:	f8c4 8010 	str.w	r8, [r4, #16]
   22ad0:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
   22ad4:	f888 5001 	strb.w	r5, [r8, #1]
   22ad8:	f888 5002 	strb.w	r5, [r8, #2]
   22adc:	f888 5003 	strb.w	r5, [r8, #3]
   22ae0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   22ae4:	707d      	strb	r5, [r7, #1]
   22ae6:	70bd      	strb	r5, [r7, #2]
   22ae8:	70fd      	strb	r5, [r7, #3]
   22aea:	f007 f877 	bl	29bdc <rpc_list_preambles_init>
   22aee:	4638      	mov	r0, r7
   22af0:	f007 f874 	bl	29bdc <rpc_list_preambles_init>
   22af4:	4b27      	ldr	r3, [pc, #156]	; (22b94 <rpc_transport_ipc_init+0x1a0>)
   22af6:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   22afa:	601a      	str	r2, [r3, #0]
   22afc:	4b26      	ldr	r3, [pc, #152]	; (22b98 <rpc_transport_ipc_init+0x1a4>)
   22afe:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
   22b02:	601a      	str	r2, [r3, #0]
   22b04:	6831      	ldr	r1, [r6, #0]
   22b06:	4b25      	ldr	r3, [pc, #148]	; (22b9c <rpc_transport_ipc_init+0x1a8>)
   22b08:	6019      	str	r1, [r3, #0]
   22b0a:	4b25      	ldr	r3, [pc, #148]	; (22ba0 <rpc_transport_ipc_init+0x1ac>)
   22b0c:	4925      	ldr	r1, [pc, #148]	; (22ba4 <rpc_transport_ipc_init+0x1b0>)
   22b0e:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
   22b12:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
   22b16:	4b24      	ldr	r3, [pc, #144]	; (22ba8 <rpc_transport_ipc_init+0x1b4>)
   22b18:	4c24      	ldr	r4, [pc, #144]	; (22bac <rpc_transport_ipc_init+0x1b8>)
   22b1a:	801d      	strh	r5, [r3, #0]
   22b1c:	4b24      	ldr	r3, [pc, #144]	; (22bb0 <rpc_transport_ipc_init+0x1bc>)
   22b1e:	6025      	str	r5, [r4, #0]
   22b20:	801d      	strh	r5, [r3, #0]
   22b22:	4b24      	ldr	r3, [pc, #144]	; (22bb4 <rpc_transport_ipc_init+0x1c0>)
   22b24:	f883 a000 	strb.w	sl, [r3]
   22b28:	4b23      	ldr	r3, [pc, #140]	; (22bb8 <rpc_transport_ipc_init+0x1c4>)
   22b2a:	9502      	str	r5, [sp, #8]
   22b2c:	611d      	str	r5, [r3, #16]
   22b2e:	691b      	ldr	r3, [r3, #16]
   22b30:	9302      	str	r3, [sp, #8]
   22b32:	9b02      	ldr	r3, [sp, #8]
   22b34:	4b12      	ldr	r3, [pc, #72]	; (22b80 <rpc_transport_ipc_init+0x18c>)
   22b36:	6818      	ldr	r0, [r3, #0]
   22b38:	f006 fb05 	bl	29146 <nrf_modem_os_sem_take>
   22b3c:	b9c8      	cbnz	r0, 22b72 <rpc_transport_ipc_init+0x17e>
   22b3e:	6824      	ldr	r4, [r4, #0]
   22b40:	b9a4      	cbnz	r4, 22b6c <rpc_transport_ipc_init+0x178>
   22b42:	4b1e      	ldr	r3, [pc, #120]	; (22bbc <rpc_transport_ipc_init+0x1c8>)
   22b44:	701c      	strb	r4, [r3, #0]
   22b46:	4620      	mov	r0, r4
   22b48:	b015      	add	sp, #84	; 0x54
   22b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22b4e:	699b      	ldr	r3, [r3, #24]
   22b50:	f104 0940 	add.w	r9, r4, #64	; 0x40
   22b54:	6463      	str	r3, [r4, #68]	; 0x44
   22b56:	6833      	ldr	r3, [r6, #0]
   22b58:	4648      	mov	r0, r9
   22b5a:	69db      	ldr	r3, [r3, #28]
   22b5c:	f8c2 b000 	str.w	fp, [r2]
   22b60:	6423      	str	r3, [r4, #64]	; 0x40
   22b62:	f001 fbc3 	bl	242ec <ipc_trace_init>
   22b66:	e797      	b.n	22a98 <rpc_transport_ipc_init+0xa4>
   22b68:	f06f 0415 	mvn.w	r4, #21
   22b6c:	f7ff f86c 	bl	21c48 <nrfx_ipc_uninit>
   22b70:	e7e9      	b.n	22b46 <rpc_transport_ipc_init+0x152>
   22b72:	f06f 0473 	mvn.w	r4, #115	; 0x73
   22b76:	e7f9      	b.n	22b6c <rpc_transport_ipc_init+0x178>
   22b78:	f06f 042d 	mvn.w	r4, #45	; 0x2d
   22b7c:	e7e3      	b.n	22b46 <rpc_transport_ipc_init+0x152>
   22b7e:	bf00      	nop
   22b80:	2000d990 	.word	0x2000d990
   22b84:	00022825 	.word	0x00022825
   22b88:	2000d98c 	.word	0x2000d98c
   22b8c:	2000d9a0 	.word	0x2000d9a0
   22b90:	2000d99c 	.word	0x2000d99c
   22b94:	2000d998 	.word	0x2000d998
   22b98:	2000d994 	.word	0x2000d994
   22b9c:	2000d988 	.word	0x2000d988
   22ba0:	4002a000 	.word	0x4002a000
   22ba4:	000249f0 	.word	0x000249f0
   22ba8:	2000dd98 	.word	0x2000dd98
   22bac:	2000d9a4 	.word	0x2000d9a4
   22bb0:	2000dd96 	.word	0x2000dd96
   22bb4:	2000eaf0 	.word	0x2000eaf0
   22bb8:	40005600 	.word	0x40005600
   22bbc:	2000eaef 	.word	0x2000eaef

00022bc0 <rpc_transport_ipc_ctrl_msg_send>:
   22bc0:	b570      	push	{r4, r5, r6, lr}
   22bc2:	4b16      	ldr	r3, [pc, #88]	; (22c1c <rpc_transport_ipc_ctrl_msg_send+0x5c>)
   22bc4:	6842      	ldr	r2, [r0, #4]
   22bc6:	681b      	ldr	r3, [r3, #0]
   22bc8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   22bcc:	f042 0201 	orr.w	r2, r2, #1
   22bd0:	1ac3      	subs	r3, r0, r3
   22bd2:	6042      	str	r2, [r0, #4]
   22bd4:	4812      	ldr	r0, [pc, #72]	; (22c20 <rpc_transport_ipc_ctrl_msg_send+0x60>)
   22bd6:	4a13      	ldr	r2, [pc, #76]	; (22c24 <rpc_transport_ipc_ctrl_msg_send+0x64>)
   22bd8:	6801      	ldr	r1, [r0, #0]
   22bda:	f3c3 1389 	ubfx	r3, r3, #6, #10
   22bde:	e8d2 4fdf 	ldaexh	r4, [r2]
   22be2:	1c65      	adds	r5, r4, #1
   22be4:	e8c2 5fd6 	stlexh	r6, r5, [r2]
   22be8:	2e00      	cmp	r6, #0
   22bea:	d1f8      	bne.n	22bde <rpc_transport_ipc_ctrl_msg_send+0x1e>
   22bec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   22bf0:	684a      	ldr	r2, [r1, #4]
   22bf2:	b292      	uxth	r2, r2
   22bf4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   22bf8:	604a      	str	r2, [r1, #4]
   22bfa:	6802      	ldr	r2, [r0, #0]
   22bfc:	2003      	movs	r0, #3
   22bfe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   22c02:	6853      	ldr	r3, [r2, #4]
   22c04:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   22c08:	f043 0301 	orr.w	r3, r3, #1
   22c0c:	6053      	str	r3, [r2, #4]
   22c0e:	f006 fa8e 	bl	2912e <nrf_modem_os_busywait>
   22c12:	2201      	movs	r2, #1
   22c14:	4b04      	ldr	r3, [pc, #16]	; (22c28 <rpc_transport_ipc_ctrl_msg_send+0x68>)
   22c16:	605a      	str	r2, [r3, #4]
   22c18:	bd70      	pop	{r4, r5, r6, pc}
   22c1a:	bf00      	nop
   22c1c:	2000d994 	.word	0x2000d994
   22c20:	2000d99c 	.word	0x2000d99c
   22c24:	2000dd98 	.word	0x2000dd98
   22c28:	4002a000 	.word	0x4002a000

00022c2c <rpc_transport_ipc_request_shutdown>:
   22c2c:	b510      	push	{r4, lr}
   22c2e:	f7ff fead 	bl	2298c <rpc_transport_ipc_ctrl_msg_alloc>
   22c32:	2401      	movs	r4, #1
   22c34:	2200      	movs	r2, #0
   22c36:	2103      	movs	r1, #3
   22c38:	7004      	strb	r4, [r0, #0]
   22c3a:	7081      	strb	r1, [r0, #2]
   22c3c:	7042      	strb	r2, [r0, #1]
   22c3e:	70c2      	strb	r2, [r0, #3]
   22c40:	f7ff ffbe 	bl	22bc0 <rpc_transport_ipc_ctrl_msg_send>
   22c44:	4b05      	ldr	r3, [pc, #20]	; (22c5c <rpc_transport_ipc_request_shutdown+0x30>)
   22c46:	701c      	strb	r4, [r3, #0]
   22c48:	f006 ffdb 	bl	29c02 <rpc_transport_ipc_data_rx_suspend>
   22c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22c50:	4b03      	ldr	r3, [pc, #12]	; (22c60 <rpc_transport_ipc_request_shutdown+0x34>)
   22c52:	f247 5130 	movw	r1, #30000	; 0x7530
   22c56:	6818      	ldr	r0, [r3, #0]
   22c58:	f006 ba75 	b.w	29146 <nrf_modem_os_sem_take>
   22c5c:	2000eaef 	.word	0x2000eaef
   22c60:	2000d990 	.word	0x2000d990

00022c64 <rpc_transport_ipc_msg_data_rx_free>:
   22c64:	b510      	push	{r4, lr}
   22c66:	4b0a      	ldr	r3, [pc, #40]	; (22c90 <rpc_transport_ipc_msg_data_rx_free+0x2c>)
   22c68:	4604      	mov	r4, r0
   22c6a:	781b      	ldrb	r3, [r3, #0]
   22c6c:	2b03      	cmp	r3, #3
   22c6e:	d00e      	beq.n	22c8e <rpc_transport_ipc_msg_data_rx_free+0x2a>
   22c70:	f7ff fe8c 	bl	2298c <rpc_transport_ipc_ctrl_msg_alloc>
   22c74:	b158      	cbz	r0, 22c8e <rpc_transport_ipc_msg_data_rx_free+0x2a>
   22c76:	2101      	movs	r1, #1
   22c78:	2200      	movs	r2, #0
   22c7a:	7001      	strb	r1, [r0, #0]
   22c7c:	2102      	movs	r1, #2
   22c7e:	6084      	str	r4, [r0, #8]
   22c80:	7042      	strb	r2, [r0, #1]
   22c82:	7081      	strb	r1, [r0, #2]
   22c84:	70c2      	strb	r2, [r0, #3]
   22c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22c8a:	f7ff bf99 	b.w	22bc0 <rpc_transport_ipc_ctrl_msg_send>
   22c8e:	bd10      	pop	{r4, pc}
   22c90:	2000eaf0 	.word	0x2000eaf0

00022c94 <at_cmd_send>:
   22c94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22c98:	4605      	mov	r5, r0
   22c9a:	2000      	movs	r0, #0
   22c9c:	4617      	mov	r7, r2
   22c9e:	4688      	mov	r8, r1
   22ca0:	461e      	mov	r6, r3
   22ca2:	f006 ffda 	bl	29c5a <rpc_client_msg_alloc>
   22ca6:	4602      	mov	r2, r0
   22ca8:	b940      	cbnz	r0, 22cbc <at_cmd_send+0x28>
   22caa:	b115      	cbz	r5, 22cb2 <at_cmd_send+0x1e>
   22cac:	4628      	mov	r0, r5
   22cae:	f007 f800 	bl	29cb2 <rpc_client_msg_data_tx_free>
   22cb2:	f06f 000b 	mvn.w	r0, #11
   22cb6:	b002      	add	sp, #8
   22cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22cbc:	f06f 0358 	mvn.w	r3, #88	; 0x58
   22cc0:	2400      	movs	r4, #0
   22cc2:	7303      	strb	r3, [r0, #12]
   22cc4:	2304      	movs	r3, #4
   22cc6:	6005      	str	r5, [r0, #0]
   22cc8:	4d0e      	ldr	r5, [pc, #56]	; (22d04 <at_cmd_send+0x70>)
   22cca:	7203      	strb	r3, [r0, #8]
   22ccc:	7344      	strb	r4, [r0, #13]
   22cce:	7384      	strb	r4, [r0, #14]
   22cd0:	73c4      	strb	r4, [r0, #15]
   22cd2:	7244      	strb	r4, [r0, #9]
   22cd4:	7284      	strb	r4, [r0, #10]
   22cd6:	72c4      	strb	r4, [r0, #11]
   22cd8:	f8c0 8004 	str.w	r8, [r0, #4]
   22cdc:	4639      	mov	r1, r7
   22cde:	2003      	movs	r0, #3
   22ce0:	702c      	strb	r4, [r5, #0]
   22ce2:	f006 ffd6 	bl	29c92 <rpc_client_msg_send>
   22ce6:	f04f 33ff 	mov.w	r3, #4294967295
   22cea:	9301      	str	r3, [sp, #4]
   22cec:	782b      	ldrb	r3, [r5, #0]
   22cee:	42b3      	cmp	r3, r6
   22cf0:	d101      	bne.n	22cf6 <at_cmd_send+0x62>
   22cf2:	2000      	movs	r0, #0
   22cf4:	e7df      	b.n	22cb6 <at_cmd_send+0x22>
   22cf6:	2002      	movs	r0, #2
   22cf8:	a901      	add	r1, sp, #4
   22cfa:	f7fb ffc5 	bl	1ec88 <nrf_modem_os_timedwait>
   22cfe:	2800      	cmp	r0, #0
   22d00:	d0f4      	beq.n	22cec <at_cmd_send+0x58>
   22d02:	e7d8      	b.n	22cb6 <at_cmd_send+0x22>
   22d04:	2000eaf1 	.word	0x2000eaf1

00022d08 <at_response_match>:
   22d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22d0a:	4605      	mov	r5, r0
   22d0c:	2400      	movs	r4, #0
   22d0e:	4f0f      	ldr	r7, [pc, #60]	; (22d4c <at_response_match+0x44>)
   22d10:	f857 6b04 	ldr.w	r6, [r7], #4
   22d14:	4628      	mov	r0, r5
   22d16:	4631      	mov	r1, r6
   22d18:	f008 fb1b 	bl	2b352 <strstr>
   22d1c:	b928      	cbnz	r0, 22d2a <at_response_match+0x22>
   22d1e:	3401      	adds	r4, #1
   22d20:	2c04      	cmp	r4, #4
   22d22:	d1f5      	bne.n	22d10 <at_response_match+0x8>
   22d24:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   22d28:	e00d      	b.n	22d46 <at_response_match+0x3e>
   22d2a:	b16c      	cbz	r4, 22d48 <at_response_match+0x40>
   22d2c:	1ea3      	subs	r3, r4, #2
   22d2e:	2b01      	cmp	r3, #1
   22d30:	d8f8      	bhi.n	22d24 <at_response_match+0x1c>
   22d32:	4630      	mov	r0, r6
   22d34:	f7f6 f9aa 	bl	1908c <strlen>
   22d38:	220a      	movs	r2, #10
   22d3a:	2100      	movs	r1, #0
   22d3c:	4428      	add	r0, r5
   22d3e:	f002 ff07 	bl	25b50 <strtol>
   22d42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   22d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22d48:	4620      	mov	r0, r4
   22d4a:	e7fc      	b.n	22d46 <at_response_match+0x3e>
   22d4c:	0002c860 	.word	0x0002c860

00022d50 <at_vsprintf>:
   22d50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22d54:	2500      	movs	r5, #0
   22d56:	4681      	mov	r9, r0
   22d58:	460f      	mov	r7, r1
   22d5a:	4810      	ldr	r0, [pc, #64]	; (22d9c <at_vsprintf+0x4c>)
   22d5c:	4629      	mov	r1, r5
   22d5e:	4690      	mov	r8, r2
   22d60:	461e      	mov	r6, r3
   22d62:	9301      	str	r3, [sp, #4]
   22d64:	f003 f818 	bl	25d98 <vsniprintf>
   22d68:	1e04      	subs	r4, r0, #0
   22d6a:	db11      	blt.n	22d90 <at_vsprintf+0x40>
   22d6c:	3401      	adds	r4, #1
   22d6e:	4620      	mov	r0, r4
   22d70:	f006 ff9d 	bl	29cae <rpc_client_msg_data_tx_alloc>
   22d74:	f8c9 0000 	str.w	r0, [r9]
   22d78:	b168      	cbz	r0, 22d96 <at_vsprintf+0x46>
   22d7a:	4633      	mov	r3, r6
   22d7c:	4642      	mov	r2, r8
   22d7e:	4621      	mov	r1, r4
   22d80:	9601      	str	r6, [sp, #4]
   22d82:	f003 f809 	bl	25d98 <vsniprintf>
   22d86:	4628      	mov	r0, r5
   22d88:	603c      	str	r4, [r7, #0]
   22d8a:	b003      	add	sp, #12
   22d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22d90:	f06f 0015 	mvn.w	r0, #21
   22d94:	e7f9      	b.n	22d8a <at_vsprintf+0x3a>
   22d96:	f06f 000b 	mvn.w	r0, #11
   22d9a:	e7f6      	b.n	22d8a <at_vsprintf+0x3a>
   22d9c:	0002bf40 	.word	0x0002bf40

00022da0 <nrf_modem_at_notif_handler_set>:
   22da0:	4b01      	ldr	r3, [pc, #4]	; (22da8 <nrf_modem_at_notif_handler_set+0x8>)
   22da2:	6018      	str	r0, [r3, #0]
   22da4:	2000      	movs	r0, #0
   22da6:	4770      	bx	lr
   22da8:	2000d9bc 	.word	0x2000d9bc

00022dac <nrf_modem_at_printf>:
   22dac:	b40f      	push	{r0, r1, r2, r3}
   22dae:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   22db0:	9c08      	ldr	r4, [sp, #32]
   22db2:	f001 fa93 	bl	242dc <nrf_modem_state_is_initialized>
   22db6:	2800      	cmp	r0, #0
   22db8:	d039      	beq.n	22e2e <nrf_modem_at_printf+0x82>
   22dba:	2c00      	cmp	r4, #0
   22dbc:	d03a      	beq.n	22e34 <nrf_modem_at_printf+0x88>
   22dbe:	4622      	mov	r2, r4
   22dc0:	ab09      	add	r3, sp, #36	; 0x24
   22dc2:	a903      	add	r1, sp, #12
   22dc4:	a802      	add	r0, sp, #8
   22dc6:	9301      	str	r3, [sp, #4]
   22dc8:	f7ff ffc2 	bl	22d50 <at_vsprintf>
   22dcc:	4604      	mov	r4, r0
   22dce:	b960      	cbnz	r0, 22dea <nrf_modem_at_printf+0x3e>
   22dd0:	4e1a      	ldr	r6, [pc, #104]	; (22e3c <nrf_modem_at_printf+0x90>)
   22dd2:	f04f 31ff 	mov.w	r1, #4294967295
   22dd6:	6830      	ldr	r0, [r6, #0]
   22dd8:	f006 f9b5 	bl	29146 <nrf_modem_os_sem_take>
   22ddc:	4603      	mov	r3, r0
   22dde:	9802      	ldr	r0, [sp, #8]
   22de0:	b14b      	cbz	r3, 22df6 <nrf_modem_at_printf+0x4a>
   22de2:	f006 ff66 	bl	29cb2 <rpc_client_msg_data_tx_free>
   22de6:	f06f 040a 	mvn.w	r4, #10
   22dea:	4620      	mov	r0, r4
   22dec:	b004      	add	sp, #16
   22dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   22df2:	b004      	add	sp, #16
   22df4:	4770      	bx	lr
   22df6:	2302      	movs	r3, #2
   22df8:	2201      	movs	r2, #1
   22dfa:	9903      	ldr	r1, [sp, #12]
   22dfc:	f7ff ff4a 	bl	22c94 <at_cmd_send>
   22e00:	4604      	mov	r4, r0
   22e02:	b118      	cbz	r0, 22e0c <nrf_modem_at_printf+0x60>
   22e04:	6830      	ldr	r0, [r6, #0]
   22e06:	f006 f99c 	bl	29142 <nrf_modem_os_sem_give>
   22e0a:	e7ee      	b.n	22dea <nrf_modem_at_printf+0x3e>
   22e0c:	4d0c      	ldr	r5, [pc, #48]	; (22e40 <nrf_modem_at_printf+0x94>)
   22e0e:	682b      	ldr	r3, [r5, #0]
   22e10:	6818      	ldr	r0, [r3, #0]
   22e12:	f7ff ff79 	bl	22d08 <at_response_match>
   22e16:	4604      	mov	r4, r0
   22e18:	6830      	ldr	r0, [r6, #0]
   22e1a:	f006 f992 	bl	29142 <nrf_modem_os_sem_give>
   22e1e:	682b      	ldr	r3, [r5, #0]
   22e20:	6818      	ldr	r0, [r3, #0]
   22e22:	f006 ff40 	bl	29ca6 <rpc_client_msg_data_rx_free>
   22e26:	6828      	ldr	r0, [r5, #0]
   22e28:	f006 ff3a 	bl	29ca0 <rpc_client_msg_rx_free>
   22e2c:	e7dd      	b.n	22dea <nrf_modem_at_printf+0x3e>
   22e2e:	f04f 34ff 	mov.w	r4, #4294967295
   22e32:	e7da      	b.n	22dea <nrf_modem_at_printf+0x3e>
   22e34:	f06f 040d 	mvn.w	r4, #13
   22e38:	e7d7      	b.n	22dea <nrf_modem_at_printf+0x3e>
   22e3a:	bf00      	nop
   22e3c:	2000d9c4 	.word	0x2000d9c4
   22e40:	2000d9c0 	.word	0x2000d9c0

00022e44 <nrf_modem_at_cmd>:
   22e44:	b40c      	push	{r2, r3}
   22e46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22e4a:	b085      	sub	sp, #20
   22e4c:	4606      	mov	r6, r0
   22e4e:	460d      	mov	r5, r1
   22e50:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   22e52:	f001 fa43 	bl	242dc <nrf_modem_state_is_initialized>
   22e56:	2800      	cmp	r0, #0
   22e58:	d076      	beq.n	22f48 <nrf_modem_at_cmd+0x104>
   22e5a:	2e00      	cmp	r6, #0
   22e5c:	d077      	beq.n	22f4e <nrf_modem_at_cmd+0x10a>
   22e5e:	2c00      	cmp	r4, #0
   22e60:	d075      	beq.n	22f4e <nrf_modem_at_cmd+0x10a>
   22e62:	2d00      	cmp	r5, #0
   22e64:	d076      	beq.n	22f54 <nrf_modem_at_cmd+0x110>
   22e66:	4622      	mov	r2, r4
   22e68:	ab0d      	add	r3, sp, #52	; 0x34
   22e6a:	a903      	add	r1, sp, #12
   22e6c:	a802      	add	r0, sp, #8
   22e6e:	9301      	str	r3, [sp, #4]
   22e70:	f7ff ff6e 	bl	22d50 <at_vsprintf>
   22e74:	4604      	mov	r4, r0
   22e76:	bba0      	cbnz	r0, 22ee2 <nrf_modem_at_cmd+0x9e>
   22e78:	4b38      	ldr	r3, [pc, #224]	; (22f5c <nrf_modem_at_cmd+0x118>)
   22e7a:	9f02      	ldr	r7, [sp, #8]
   22e7c:	f8d3 8000 	ldr.w	r8, [r3]
   22e80:	f1b8 0f00 	cmp.w	r8, #0
   22e84:	d00f      	beq.n	22ea6 <nrf_modem_at_cmd+0x62>
   22e86:	4b36      	ldr	r3, [pc, #216]	; (22f60 <nrf_modem_at_cmd+0x11c>)
   22e88:	f8d3 9000 	ldr.w	r9, [r3]
   22e8c:	454c      	cmp	r4, r9
   22e8e:	d00a      	beq.n	22ea6 <nrf_modem_at_cmd+0x62>
   22e90:	4638      	mov	r0, r7
   22e92:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
   22e96:	f008 fa5c 	bl	2b352 <strstr>
   22e9a:	b198      	cbz	r0, 22ec4 <nrf_modem_at_cmd+0x80>
   22e9c:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
   22ea0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   22ea4:	b983      	cbnz	r3, 22ec8 <nrf_modem_at_cmd+0x84>
   22ea6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 22f64 <nrf_modem_at_cmd+0x120>
   22eaa:	f04f 31ff 	mov.w	r1, #4294967295
   22eae:	f8d8 0000 	ldr.w	r0, [r8]
   22eb2:	f006 f948 	bl	29146 <nrf_modem_os_sem_take>
   22eb6:	b1d0      	cbz	r0, 22eee <nrf_modem_at_cmd+0xaa>
   22eb8:	4638      	mov	r0, r7
   22eba:	f006 fefa 	bl	29cb2 <rpc_client_msg_data_tx_free>
   22ebe:	f06f 040a 	mvn.w	r4, #10
   22ec2:	e00e      	b.n	22ee2 <nrf_modem_at_cmd+0x9e>
   22ec4:	3401      	adds	r4, #1
   22ec6:	e7e1      	b.n	22e8c <nrf_modem_at_cmd+0x48>
   22ec8:	463a      	mov	r2, r7
   22eca:	4629      	mov	r1, r5
   22ecc:	4630      	mov	r0, r6
   22ece:	4798      	blx	r3
   22ed0:	4604      	mov	r4, r0
   22ed2:	b918      	cbnz	r0, 22edc <nrf_modem_at_cmd+0x98>
   22ed4:	4630      	mov	r0, r6
   22ed6:	f7ff ff17 	bl	22d08 <at_response_match>
   22eda:	4604      	mov	r4, r0
   22edc:	4638      	mov	r0, r7
   22ede:	f006 fee8 	bl	29cb2 <rpc_client_msg_data_tx_free>
   22ee2:	4620      	mov	r0, r4
   22ee4:	b005      	add	sp, #20
   22ee6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22eea:	b002      	add	sp, #8
   22eec:	4770      	bx	lr
   22eee:	2302      	movs	r3, #2
   22ef0:	2201      	movs	r2, #1
   22ef2:	4638      	mov	r0, r7
   22ef4:	9903      	ldr	r1, [sp, #12]
   22ef6:	f7ff fecd 	bl	22c94 <at_cmd_send>
   22efa:	4604      	mov	r4, r0
   22efc:	b120      	cbz	r0, 22f08 <nrf_modem_at_cmd+0xc4>
   22efe:	f8d8 0000 	ldr.w	r0, [r8]
   22f02:	f006 f91e 	bl	29142 <nrf_modem_os_sem_give>
   22f06:	e7ec      	b.n	22ee2 <nrf_modem_at_cmd+0x9e>
   22f08:	4f17      	ldr	r7, [pc, #92]	; (22f68 <nrf_modem_at_cmd+0x124>)
   22f0a:	4630      	mov	r0, r6
   22f0c:	683c      	ldr	r4, [r7, #0]
   22f0e:	6862      	ldr	r2, [r4, #4]
   22f10:	6821      	ldr	r1, [r4, #0]
   22f12:	42aa      	cmp	r2, r5
   22f14:	bf28      	it	cs
   22f16:	462a      	movcs	r2, r5
   22f18:	f008 f967 	bl	2b1ea <memcpy>
   22f1c:	6863      	ldr	r3, [r4, #4]
   22f1e:	42ab      	cmp	r3, r5
   22f20:	d80f      	bhi.n	22f42 <nrf_modem_at_cmd+0xfe>
   22f22:	6820      	ldr	r0, [r4, #0]
   22f24:	f7ff fef0 	bl	22d08 <at_response_match>
   22f28:	4604      	mov	r4, r0
   22f2a:	f8d8 0000 	ldr.w	r0, [r8]
   22f2e:	f006 f908 	bl	29142 <nrf_modem_os_sem_give>
   22f32:	683b      	ldr	r3, [r7, #0]
   22f34:	6818      	ldr	r0, [r3, #0]
   22f36:	f006 feb6 	bl	29ca6 <rpc_client_msg_data_rx_free>
   22f3a:	6838      	ldr	r0, [r7, #0]
   22f3c:	f006 feb0 	bl	29ca0 <rpc_client_msg_rx_free>
   22f40:	e7cf      	b.n	22ee2 <nrf_modem_at_cmd+0x9e>
   22f42:	f06f 0406 	mvn.w	r4, #6
   22f46:	e7f0      	b.n	22f2a <nrf_modem_at_cmd+0xe6>
   22f48:	f04f 34ff 	mov.w	r4, #4294967295
   22f4c:	e7c9      	b.n	22ee2 <nrf_modem_at_cmd+0x9e>
   22f4e:	f06f 040d 	mvn.w	r4, #13
   22f52:	e7c6      	b.n	22ee2 <nrf_modem_at_cmd+0x9e>
   22f54:	f06f 0415 	mvn.w	r4, #21
   22f58:	e7c3      	b.n	22ee2 <nrf_modem_at_cmd+0x9e>
   22f5a:	bf00      	nop
   22f5c:	2000d9b4 	.word	0x2000d9b4
   22f60:	2000d9b0 	.word	0x2000d9b0
   22f64:	2000d9c4 	.word	0x2000d9c4
   22f68:	2000d9c0 	.word	0x2000d9c0

00022f6c <nrf_modem_at_scanf>:
   22f6c:	b40e      	push	{r1, r2, r3}
   22f6e:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
   22f70:	9f07      	ldr	r7, [sp, #28]
   22f72:	4606      	mov	r6, r0
   22f74:	f001 f9b2 	bl	242dc <nrf_modem_state_is_initialized>
   22f78:	2800      	cmp	r0, #0
   22f7a:	d042      	beq.n	23002 <nrf_modem_at_scanf+0x96>
   22f7c:	2e00      	cmp	r6, #0
   22f7e:	d043      	beq.n	23008 <nrf_modem_at_scanf+0x9c>
   22f80:	2f00      	cmp	r7, #0
   22f82:	d041      	beq.n	23008 <nrf_modem_at_scanf+0x9c>
   22f84:	4630      	mov	r0, r6
   22f86:	f7f6 f881 	bl	1908c <strlen>
   22f8a:	1c45      	adds	r5, r0, #1
   22f8c:	4628      	mov	r0, r5
   22f8e:	f006 fe8e 	bl	29cae <rpc_client_msg_data_tx_alloc>
   22f92:	4604      	mov	r4, r0
   22f94:	2800      	cmp	r0, #0
   22f96:	d03a      	beq.n	2300e <nrf_modem_at_scanf+0xa2>
   22f98:	4631      	mov	r1, r6
   22f9a:	4e1e      	ldr	r6, [pc, #120]	; (23014 <nrf_modem_at_scanf+0xa8>)
   22f9c:	462a      	mov	r2, r5
   22f9e:	f008 f9a5 	bl	2b2ec <strncpy>
   22fa2:	f04f 31ff 	mov.w	r1, #4294967295
   22fa6:	6830      	ldr	r0, [r6, #0]
   22fa8:	f006 f8cd 	bl	29146 <nrf_modem_os_sem_take>
   22fac:	b150      	cbz	r0, 22fc4 <nrf_modem_at_scanf+0x58>
   22fae:	4620      	mov	r0, r4
   22fb0:	f006 fe7f 	bl	29cb2 <rpc_client_msg_data_tx_free>
   22fb4:	f06f 040a 	mvn.w	r4, #10
   22fb8:	4620      	mov	r0, r4
   22fba:	b002      	add	sp, #8
   22fbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   22fc0:	b003      	add	sp, #12
   22fc2:	4770      	bx	lr
   22fc4:	4620      	mov	r0, r4
   22fc6:	2302      	movs	r3, #2
   22fc8:	2201      	movs	r2, #1
   22fca:	4629      	mov	r1, r5
   22fcc:	f7ff fe62 	bl	22c94 <at_cmd_send>
   22fd0:	4604      	mov	r4, r0
   22fd2:	b990      	cbnz	r0, 22ffa <nrf_modem_at_scanf+0x8e>
   22fd4:	4d10      	ldr	r5, [pc, #64]	; (23018 <nrf_modem_at_scanf+0xac>)
   22fd6:	aa08      	add	r2, sp, #32
   22fd8:	682b      	ldr	r3, [r5, #0]
   22fda:	4639      	mov	r1, r7
   22fdc:	6818      	ldr	r0, [r3, #0]
   22fde:	9201      	str	r2, [sp, #4]
   22fe0:	f002 ff0c 	bl	25dfc <vsiscanf>
   22fe4:	682b      	ldr	r3, [r5, #0]
   22fe6:	1e04      	subs	r4, r0, #0
   22fe8:	6818      	ldr	r0, [r3, #0]
   22fea:	bf08      	it	eq
   22fec:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   22ff0:	f006 fe59 	bl	29ca6 <rpc_client_msg_data_rx_free>
   22ff4:	6828      	ldr	r0, [r5, #0]
   22ff6:	f006 fe53 	bl	29ca0 <rpc_client_msg_rx_free>
   22ffa:	6830      	ldr	r0, [r6, #0]
   22ffc:	f006 f8a1 	bl	29142 <nrf_modem_os_sem_give>
   23000:	e7da      	b.n	22fb8 <nrf_modem_at_scanf+0x4c>
   23002:	f04f 34ff 	mov.w	r4, #4294967295
   23006:	e7d7      	b.n	22fb8 <nrf_modem_at_scanf+0x4c>
   23008:	f06f 040d 	mvn.w	r4, #13
   2300c:	e7d4      	b.n	22fb8 <nrf_modem_at_scanf+0x4c>
   2300e:	f06f 040b 	mvn.w	r4, #11
   23012:	e7d1      	b.n	22fb8 <nrf_modem_at_scanf+0x4c>
   23014:	2000d9c4 	.word	0x2000d9c4
   23018:	2000d9c0 	.word	0x2000d9c0

0002301c <rpc_at_event_handler>:
   2301c:	b538      	push	{r3, r4, r5, lr}
   2301e:	68c3      	ldr	r3, [r0, #12]
   23020:	4604      	mov	r4, r0
   23022:	2ba7      	cmp	r3, #167	; 0xa7
   23024:	d003      	beq.n	2302e <rpc_at_event_handler+0x12>
   23026:	6820      	ldr	r0, [r4, #0]
   23028:	f006 fe3d 	bl	29ca6 <rpc_client_msg_data_rx_free>
   2302c:	e008      	b.n	23040 <rpc_at_event_handler+0x24>
   2302e:	2903      	cmp	r1, #3
   23030:	d008      	beq.n	23044 <rpc_at_event_handler+0x28>
   23032:	2904      	cmp	r1, #4
   23034:	d021      	beq.n	2307a <rpc_at_event_handler+0x5e>
   23036:	2902      	cmp	r1, #2
   23038:	bf02      	ittt	eq
   2303a:	2201      	moveq	r2, #1
   2303c:	4b12      	ldreq	r3, [pc, #72]	; (23088 <rpc_at_event_handler+0x6c>)
   2303e:	701a      	strbeq	r2, [r3, #0]
   23040:	2000      	movs	r0, #0
   23042:	bd38      	pop	{r3, r4, r5, pc}
   23044:	4d11      	ldr	r5, [pc, #68]	; (2308c <rpc_at_event_handler+0x70>)
   23046:	682b      	ldr	r3, [r5, #0]
   23048:	b13b      	cbz	r3, 2305a <rpc_at_event_handler+0x3e>
   2304a:	6800      	ldr	r0, [r0, #0]
   2304c:	4798      	blx	r3
   2304e:	2300      	movs	r3, #0
   23050:	6820      	ldr	r0, [r4, #0]
   23052:	602b      	str	r3, [r5, #0]
   23054:	f006 fe27 	bl	29ca6 <rpc_client_msg_data_rx_free>
   23058:	e006      	b.n	23068 <rpc_at_event_handler+0x4c>
   2305a:	4b0b      	ldr	r3, [pc, #44]	; (23088 <rpc_at_event_handler+0x6c>)
   2305c:	781a      	ldrb	r2, [r3, #0]
   2305e:	2a02      	cmp	r2, #2
   23060:	d105      	bne.n	2306e <rpc_at_event_handler+0x52>
   23062:	6800      	ldr	r0, [r0, #0]
   23064:	2800      	cmp	r0, #0
   23066:	d1f5      	bne.n	23054 <rpc_at_event_handler+0x38>
   23068:	2000      	movs	r0, #0
   2306a:	b2c0      	uxtb	r0, r0
   2306c:	e7e9      	b.n	23042 <rpc_at_event_handler+0x26>
   2306e:	4a08      	ldr	r2, [pc, #32]	; (23090 <rpc_at_event_handler+0x74>)
   23070:	6010      	str	r0, [r2, #0]
   23072:	2202      	movs	r2, #2
   23074:	2001      	movs	r0, #1
   23076:	701a      	strb	r2, [r3, #0]
   23078:	e7f7      	b.n	2306a <rpc_at_event_handler+0x4e>
   2307a:	4b06      	ldr	r3, [pc, #24]	; (23094 <rpc_at_event_handler+0x78>)
   2307c:	681b      	ldr	r3, [r3, #0]
   2307e:	2b00      	cmp	r3, #0
   23080:	d0d1      	beq.n	23026 <rpc_at_event_handler+0xa>
   23082:	6800      	ldr	r0, [r0, #0]
   23084:	4798      	blx	r3
   23086:	e7ce      	b.n	23026 <rpc_at_event_handler+0xa>
   23088:	2000eaf1 	.word	0x2000eaf1
   2308c:	2000d9b8 	.word	0x2000d9b8
   23090:	2000d9c0 	.word	0x2000d9c0
   23094:	2000d9bc 	.word	0x2000d9bc

00023098 <rpc_at_init>:
   23098:	2201      	movs	r2, #1
   2309a:	b510      	push	{r4, lr}
   2309c:	4611      	mov	r1, r2
   2309e:	4807      	ldr	r0, [pc, #28]	; (230bc <rpc_at_init+0x24>)
   230a0:	f7fb feb4 	bl	1ee0c <nrf_modem_os_sem_init>
   230a4:	4601      	mov	r1, r0
   230a6:	b928      	cbnz	r0, 230b4 <rpc_at_init+0x1c>
   230a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   230ac:	2301      	movs	r3, #1
   230ae:	2205      	movs	r2, #5
   230b0:	f7ff bdf0 	b.w	22c94 <at_cmd_send>
   230b4:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   230b8:	bd10      	pop	{r4, pc}
   230ba:	bf00      	nop
   230bc:	2000d9c4 	.word	0x2000d9c4

000230c0 <sock_init>:
   230c0:	f44f 7248 	mov.w	r2, #800	; 0x320
   230c4:	2100      	movs	r1, #0
   230c6:	b508      	push	{r3, lr}
   230c8:	4808      	ldr	r0, [pc, #32]	; (230ec <sock_init+0x2c>)
   230ca:	f008 f89b 	bl	2b204 <memset>
   230ce:	2300      	movs	r3, #0
   230d0:	4619      	mov	r1, r3
   230d2:	4a07      	ldr	r2, [pc, #28]	; (230f0 <sock_init+0x30>)
   230d4:	4807      	ldr	r0, [pc, #28]	; (230f4 <sock_init+0x34>)
   230d6:	7013      	strb	r3, [r2, #0]
   230d8:	4a04      	ldr	r2, [pc, #16]	; (230ec <sock_init+0x2c>)
   230da:	3301      	adds	r3, #1
   230dc:	2b08      	cmp	r3, #8
   230de:	e9c2 0100 	strd	r0, r1, [r2]
   230e2:	6091      	str	r1, [r2, #8]
   230e4:	f102 0264 	add.w	r2, r2, #100	; 0x64
   230e8:	d1f7      	bne.n	230da <sock_init+0x1a>
   230ea:	bd08      	pop	{r3, pc}
   230ec:	2000d9c8 	.word	0x2000d9c8
   230f0:	2000eaf2 	.word	0x2000eaf2
   230f4:	1badf11e 	.word	0x1badf11e

000230f8 <sock_open>:
   230f8:	b570      	push	{r4, r5, r6, lr}
   230fa:	2300      	movs	r3, #0
   230fc:	2464      	movs	r4, #100	; 0x64
   230fe:	4a0e      	ldr	r2, [pc, #56]	; (23138 <sock_open+0x40>)
   23100:	4d0e      	ldr	r5, [pc, #56]	; (2313c <sock_open+0x44>)
   23102:	fb04 f103 	mul.w	r1, r4, r3
   23106:	5856      	ldr	r6, [r2, r1]
   23108:	1888      	adds	r0, r1, r2
   2310a:	42ae      	cmp	r6, r5
   2310c:	d10e      	bne.n	2312c <sock_open+0x34>
   2310e:	f04f 33ff 	mov.w	r3, #4294967295
   23112:	5053      	str	r3, [r2, r1]
   23114:	4a0a      	ldr	r2, [pc, #40]	; (23140 <sock_open+0x48>)
   23116:	7f03      	ldrb	r3, [r0, #28]
   23118:	7812      	ldrb	r2, [r2, #0]
   2311a:	f362 1386 	bfi	r3, r2, #6, #1
   2311e:	7703      	strb	r3, [r0, #28]
   23120:	2302      	movs	r3, #2
   23122:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
   23126:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   2312a:	bd70      	pop	{r4, r5, r6, pc}
   2312c:	3301      	adds	r3, #1
   2312e:	2b08      	cmp	r3, #8
   23130:	d1e7      	bne.n	23102 <sock_open+0xa>
   23132:	2000      	movs	r0, #0
   23134:	e7f9      	b.n	2312a <sock_open+0x32>
   23136:	bf00      	nop
   23138:	2000d9c8 	.word	0x2000d9c8
   2313c:	1badf11e 	.word	0x1badf11e
   23140:	2000eaf2 	.word	0x2000eaf2

00023144 <sock_find>:
   23144:	b530      	push	{r4, r5, lr}
   23146:	4602      	mov	r2, r0
   23148:	2300      	movs	r3, #0
   2314a:	2564      	movs	r5, #100	; 0x64
   2314c:	4905      	ldr	r1, [pc, #20]	; (23164 <sock_find+0x20>)
   2314e:	fb05 f403 	mul.w	r4, r5, r3
   23152:	1860      	adds	r0, r4, r1
   23154:	590c      	ldr	r4, [r1, r4]
   23156:	4294      	cmp	r4, r2
   23158:	d003      	beq.n	23162 <sock_find+0x1e>
   2315a:	3301      	adds	r3, #1
   2315c:	2b08      	cmp	r3, #8
   2315e:	d1f6      	bne.n	2314e <sock_find+0xa>
   23160:	2000      	movs	r0, #0
   23162:	bd30      	pop	{r4, r5, pc}
   23164:	2000d9c8 	.word	0x2000d9c8

00023168 <_sock_close>:
   23168:	b538      	push	{r3, r4, r5, lr}
   2316a:	f7ff ffeb 	bl	23144 <sock_find>
   2316e:	4604      	mov	r4, r0
   23170:	1d05      	adds	r5, r0, #4
   23172:	4628      	mov	r0, r5
   23174:	f006 ff27 	bl	29fc6 <pkt_flush>
   23178:	6c20      	ldr	r0, [r4, #64]	; 0x40
   2317a:	b108      	cbz	r0, 23180 <_sock_close+0x18>
   2317c:	f7fb fe86 	bl	1ee8c <nrf_modem_os_free>
   23180:	2260      	movs	r2, #96	; 0x60
   23182:	2100      	movs	r1, #0
   23184:	4628      	mov	r0, r5
   23186:	f008 f83d 	bl	2b204 <memset>
   2318a:	4b01      	ldr	r3, [pc, #4]	; (23190 <_sock_close+0x28>)
   2318c:	6023      	str	r3, [r4, #0]
   2318e:	bd38      	pop	{r3, r4, r5, pc}
   23190:	1badf11e 	.word	0x1badf11e

00023194 <sock_shutdown>:
   23194:	b570      	push	{r4, r5, r6, lr}
   23196:	2400      	movs	r4, #0
   23198:	4d05      	ldr	r5, [pc, #20]	; (231b0 <sock_shutdown+0x1c>)
   2319a:	4e06      	ldr	r6, [pc, #24]	; (231b4 <sock_shutdown+0x20>)
   2319c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   231a0:	42b0      	cmp	r0, r6
   231a2:	d001      	beq.n	231a8 <sock_shutdown+0x14>
   231a4:	f7ff ffe0 	bl	23168 <_sock_close>
   231a8:	3419      	adds	r4, #25
   231aa:	2cc8      	cmp	r4, #200	; 0xc8
   231ac:	d1f6      	bne.n	2319c <sock_shutdown+0x8>
   231ae:	bd70      	pop	{r4, r5, r6, pc}
   231b0:	2000d9c8 	.word	0x2000d9c8
   231b4:	1badf11e 	.word	0x1badf11e

000231b8 <sock_flow_control_set>:
   231b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   231bc:	1e02      	subs	r2, r0, #0
   231be:	4c10      	ldr	r4, [pc, #64]	; (23200 <sock_flow_control_set+0x48>)
   231c0:	bf18      	it	ne
   231c2:	2201      	movne	r2, #1
   231c4:	4606      	mov	r6, r0
   231c6:	2500      	movs	r5, #0
   231c8:	46a0      	mov	r8, r4
   231ca:	f04f 0964 	mov.w	r9, #100	; 0x64
   231ce:	4b0d      	ldr	r3, [pc, #52]	; (23204 <sock_flow_control_set+0x4c>)
   231d0:	4f0d      	ldr	r7, [pc, #52]	; (23208 <sock_flow_control_set+0x50>)
   231d2:	701a      	strb	r2, [r3, #0]
   231d4:	6823      	ldr	r3, [r4, #0]
   231d6:	42bb      	cmp	r3, r7
   231d8:	d00a      	beq.n	231f0 <sock_flow_control_set+0x38>
   231da:	fb09 8305 	mla	r3, r9, r5, r8
   231de:	7f1a      	ldrb	r2, [r3, #28]
   231e0:	f366 1286 	bfi	r2, r6, #6, #1
   231e4:	771a      	strb	r2, [r3, #28]
   231e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   231e8:	b113      	cbz	r3, 231f0 <sock_flow_control_set+0x38>
   231ea:	4620      	mov	r0, r4
   231ec:	f006 fda2 	bl	29d34 <sock_pollcb>
   231f0:	3501      	adds	r5, #1
   231f2:	2d08      	cmp	r5, #8
   231f4:	f104 0464 	add.w	r4, r4, #100	; 0x64
   231f8:	d1ec      	bne.n	231d4 <sock_flow_control_set+0x1c>
   231fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   231fe:	bf00      	nop
   23200:	2000d9c8 	.word	0x2000d9c8
   23204:	2000eaf2 	.word	0x2000eaf2
   23208:	1badf11e 	.word	0x1badf11e

0002320c <sock_proto_is_valid>:
   2320c:	2811      	cmp	r0, #17
   2320e:	dc06      	bgt.n	2321e <sock_proto_is_valid+0x12>
   23210:	2800      	cmp	r0, #0
   23212:	db0d      	blt.n	23230 <sock_proto_is_valid+0x24>
   23214:	4b08      	ldr	r3, [pc, #32]	; (23238 <sock_proto_is_valid+0x2c>)
   23216:	40c3      	lsrs	r3, r0
   23218:	f003 0001 	and.w	r0, r3, #1
   2321c:	4770      	bx	lr
   2321e:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   23222:	d007      	beq.n	23234 <sock_proto_is_valid+0x28>
   23224:	f240 1311 	movw	r3, #273	; 0x111
   23228:	1ac3      	subs	r3, r0, r3
   2322a:	4258      	negs	r0, r3
   2322c:	4158      	adcs	r0, r3
   2322e:	4770      	bx	lr
   23230:	2000      	movs	r0, #0
   23232:	4770      	bx	lr
   23234:	2001      	movs	r0, #1
   23236:	4770      	bx	lr
   23238:	00020041 	.word	0x00020041

0002323c <on_getaddrinfo_res>:
   2323c:	2301      	movs	r3, #1
   2323e:	4a03      	ldr	r2, [pc, #12]	; (2324c <on_getaddrinfo_res+0x10>)
   23240:	7013      	strb	r3, [r2, #0]
   23242:	4a03      	ldr	r2, [pc, #12]	; (23250 <on_getaddrinfo_res+0x14>)
   23244:	6010      	str	r0, [r2, #0]
   23246:	4618      	mov	r0, r3
   23248:	4770      	bx	lr
   2324a:	bf00      	nop
   2324c:	2000eaf3 	.word	0x2000eaf3
   23250:	2000dce8 	.word	0x2000dce8

00023254 <addrinfo_init>:
   23254:	2201      	movs	r2, #1
   23256:	b508      	push	{r3, lr}
   23258:	4611      	mov	r1, r2
   2325a:	4804      	ldr	r0, [pc, #16]	; (2326c <addrinfo_init+0x18>)
   2325c:	f7fb fdd6 	bl	1ee0c <nrf_modem_os_sem_init>
   23260:	2800      	cmp	r0, #0
   23262:	bf18      	it	ne
   23264:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   23268:	bd08      	pop	{r3, pc}
   2326a:	bf00      	nop
   2326c:	2000dcec 	.word	0x2000dcec

00023270 <nrf_getaddrinfo>:
   23270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23274:	b085      	sub	sp, #20
   23276:	4682      	mov	sl, r0
   23278:	460f      	mov	r7, r1
   2327a:	4616      	mov	r6, r2
   2327c:	461d      	mov	r5, r3
   2327e:	f001 f82d 	bl	242dc <nrf_modem_state_is_initialized>
   23282:	b928      	cbnz	r0, 23290 <nrf_getaddrinfo+0x20>
   23284:	2001      	movs	r0, #1
   23286:	f005 ff54 	bl	29132 <nrf_modem_os_errno_set>
   2328a:	f06f 040a 	mvn.w	r4, #10
   2328e:	e01c      	b.n	232ca <nrf_getaddrinfo+0x5a>
   23290:	ea5a 0307 	orrs.w	r3, sl, r7
   23294:	f000 8158 	beq.w	23548 <nrf_getaddrinfo+0x2d8>
   23298:	b31e      	cbz	r6, 232e2 <nrf_getaddrinfo+0x72>
   2329a:	6833      	ldr	r3, [r6, #0]
   2329c:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
   232a0:	f023 0302 	bic.w	r3, r3, #2
   232a4:	2b00      	cmp	r3, #0
   232a6:	f040 8152 	bne.w	2354e <nrf_getaddrinfo+0x2de>
   232aa:	6870      	ldr	r0, [r6, #4]
   232ac:	b938      	cbnz	r0, 232be <nrf_getaddrinfo+0x4e>
   232ae:	68b0      	ldr	r0, [r6, #8]
   232b0:	b178      	cbz	r0, 232d2 <nrf_getaddrinfo+0x62>
   232b2:	f006 fe25 	bl	29f00 <sock_type_is_valid>
   232b6:	b960      	cbnz	r0, 232d2 <nrf_getaddrinfo+0x62>
   232b8:	f06f 0406 	mvn.w	r4, #6
   232bc:	e005      	b.n	232ca <nrf_getaddrinfo+0x5a>
   232be:	f006 fe19 	bl	29ef4 <sock_family_is_valid>
   232c2:	2800      	cmp	r0, #0
   232c4:	d1f3      	bne.n	232ae <nrf_getaddrinfo+0x3e>
   232c6:	f06f 0405 	mvn.w	r4, #5
   232ca:	4620      	mov	r0, r4
   232cc:	b005      	add	sp, #20
   232ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   232d2:	68f0      	ldr	r0, [r6, #12]
   232d4:	b128      	cbz	r0, 232e2 <nrf_getaddrinfo+0x72>
   232d6:	68b1      	ldr	r1, [r6, #8]
   232d8:	f006 fe18 	bl	29f0c <sock_proto_supports_type>
   232dc:	b908      	cbnz	r0, 232e2 <nrf_getaddrinfo+0x72>
   232de:	206b      	movs	r0, #107	; 0x6b
   232e0:	e7d1      	b.n	23286 <nrf_getaddrinfo+0x16>
   232e2:	4b9e      	ldr	r3, [pc, #632]	; (2355c <nrf_getaddrinfo+0x2ec>)
   232e4:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   232e8:	6818      	ldr	r0, [r3, #0]
   232ea:	f005 ff2c 	bl	29146 <nrf_modem_os_sem_take>
   232ee:	4604      	mov	r4, r0
   232f0:	2800      	cmp	r0, #0
   232f2:	f040 812f 	bne.w	23554 <nrf_getaddrinfo+0x2e4>
   232f6:	2f00      	cmp	r7, #0
   232f8:	d062      	beq.n	233c0 <nrf_getaddrinfo+0x150>
   232fa:	b1f6      	cbz	r6, 2333a <nrf_getaddrinfo+0xca>
   232fc:	6833      	ldr	r3, [r6, #0]
   232fe:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
   23302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   23306:	d118      	bne.n	2333a <nrf_getaddrinfo+0xca>
   23308:	6833      	ldr	r3, [r6, #0]
   2330a:	04db      	lsls	r3, r3, #19
   2330c:	d443      	bmi.n	23396 <nrf_getaddrinfo+0x126>
   2330e:	f04f 38ff 	mov.w	r8, #4294967295
   23312:	6870      	ldr	r0, [r6, #4]
   23314:	b108      	cbz	r0, 2331a <nrf_getaddrinfo+0xaa>
   23316:	f000 fe6b 	bl	23ff0 <nrf_af_to_rpc_af>
   2331a:	4b91      	ldr	r3, [pc, #580]	; (23560 <nrf_getaddrinfo+0x2f0>)
   2331c:	4a91      	ldr	r2, [pc, #580]	; (23564 <nrf_getaddrinfo+0x2f4>)
   2331e:	6018      	str	r0, [r3, #0]
   23320:	68b3      	ldr	r3, [r6, #8]
   23322:	2b00      	cmp	r3, #0
   23324:	bf08      	it	eq
   23326:	2301      	moveq	r3, #1
   23328:	6013      	str	r3, [r2, #0]
   2332a:	68f3      	ldr	r3, [r6, #12]
   2332c:	4a8e      	ldr	r2, [pc, #568]	; (23568 <nrf_getaddrinfo+0x2f8>)
   2332e:	2b00      	cmp	r3, #0
   23330:	bf08      	it	eq
   23332:	2306      	moveq	r3, #6
   23334:	6013      	str	r3, [r2, #0]
   23336:	6833      	ldr	r3, [r6, #0]
   23338:	e01c      	b.n	23374 <nrf_getaddrinfo+0x104>
   2333a:	220a      	movs	r2, #10
   2333c:	2100      	movs	r1, #0
   2333e:	4638      	mov	r0, r7
   23340:	f002 fd20 	bl	25d84 <strtoul>
   23344:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   23348:	1e42      	subs	r2, r0, #1
   2334a:	429a      	cmp	r2, r3
   2334c:	f200 80f9 	bhi.w	23542 <nrf_getaddrinfo+0x2d2>
   23350:	4a86      	ldr	r2, [pc, #536]	; (2356c <nrf_getaddrinfo+0x2fc>)
   23352:	0203      	lsls	r3, r0, #8
   23354:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
   23358:	8013      	strh	r3, [r2, #0]
   2335a:	2e00      	cmp	r6, #0
   2335c:	d1d4      	bne.n	23308 <nrf_getaddrinfo+0x98>
   2335e:	2300      	movs	r3, #0
   23360:	2101      	movs	r1, #1
   23362:	4a7f      	ldr	r2, [pc, #508]	; (23560 <nrf_getaddrinfo+0x2f0>)
   23364:	f04f 38ff 	mov.w	r8, #4294967295
   23368:	6013      	str	r3, [r2, #0]
   2336a:	4a7e      	ldr	r2, [pc, #504]	; (23564 <nrf_getaddrinfo+0x2f4>)
   2336c:	6011      	str	r1, [r2, #0]
   2336e:	2106      	movs	r1, #6
   23370:	4a7d      	ldr	r2, [pc, #500]	; (23568 <nrf_getaddrinfo+0x2f8>)
   23372:	6011      	str	r1, [r2, #0]
   23374:	4f7e      	ldr	r7, [pc, #504]	; (23570 <nrf_getaddrinfo+0x300>)
   23376:	4650      	mov	r0, sl
   23378:	603b      	str	r3, [r7, #0]
   2337a:	f1ba 0f00 	cmp.w	sl, #0
   2337e:	d16f      	bne.n	23460 <nrf_getaddrinfo+0x1f0>
   23380:	f006 fc6b 	bl	29c5a <rpc_client_msg_alloc>
   23384:	4606      	mov	r6, r0
   23386:	bb00      	cbnz	r0, 233ca <nrf_getaddrinfo+0x15a>
   23388:	f06f 0409 	mvn.w	r4, #9
   2338c:	4b73      	ldr	r3, [pc, #460]	; (2355c <nrf_getaddrinfo+0x2ec>)
   2338e:	6818      	ldr	r0, [r3, #0]
   23390:	f005 fed7 	bl	29142 <nrf_modem_os_sem_give>
   23394:	e799      	b.n	232ca <nrf_getaddrinfo+0x5a>
   23396:	213a      	movs	r1, #58	; 0x3a
   23398:	4638      	mov	r0, r7
   2339a:	f007 ff80 	bl	2b29e <strchr>
   2339e:	b100      	cbz	r0, 233a2 <nrf_getaddrinfo+0x132>
   233a0:	1c47      	adds	r7, r0, #1
   233a2:	4638      	mov	r0, r7
   233a4:	4973      	ldr	r1, [pc, #460]	; (23574 <nrf_getaddrinfo+0x304>)
   233a6:	f007 ffd4 	bl	2b352 <strstr>
   233aa:	220a      	movs	r2, #10
   233ac:	b128      	cbz	r0, 233ba <nrf_getaddrinfo+0x14a>
   233ae:	2100      	movs	r1, #0
   233b0:	3003      	adds	r0, #3
   233b2:	f002 fbcd 	bl	25b50 <strtol>
   233b6:	4680      	mov	r8, r0
   233b8:	e7ab      	b.n	23312 <nrf_getaddrinfo+0xa2>
   233ba:	4601      	mov	r1, r0
   233bc:	4638      	mov	r0, r7
   233be:	e7f8      	b.n	233b2 <nrf_getaddrinfo+0x142>
   233c0:	4b6a      	ldr	r3, [pc, #424]	; (2356c <nrf_getaddrinfo+0x2fc>)
   233c2:	8018      	strh	r0, [r3, #0]
   233c4:	2e00      	cmp	r6, #0
   233c6:	d0ca      	beq.n	2335e <nrf_getaddrinfo+0xee>
   233c8:	e7a1      	b.n	2330e <nrf_getaddrinfo+0x9e>
   233ca:	f8c0 8010 	str.w	r8, [r0, #16]
   233ce:	4b64      	ldr	r3, [pc, #400]	; (23560 <nrf_getaddrinfo+0x2f0>)
   233d0:	f8df b190 	ldr.w	fp, [pc, #400]	; 23564 <nrf_getaddrinfo+0x2f4>
   233d4:	681b      	ldr	r3, [r3, #0]
   233d6:	f8df a190 	ldr.w	sl, [pc, #400]	; 23568 <nrf_getaddrinfo+0x2f8>
   233da:	61b3      	str	r3, [r6, #24]
   233dc:	f8db 3000 	ldr.w	r3, [fp]
   233e0:	4632      	mov	r2, r6
   233e2:	61f3      	str	r3, [r6, #28]
   233e4:	f8da 3000 	ldr.w	r3, [sl]
   233e8:	f247 010d 	movw	r1, #28685	; 0x700d
   233ec:	6233      	str	r3, [r6, #32]
   233ee:	683b      	ldr	r3, [r7, #0]
   233f0:	2004      	movs	r0, #4
   233f2:	6173      	str	r3, [r6, #20]
   233f4:	f006 fc4d 	bl	29c92 <rpc_client_msg_send>
   233f8:	2300      	movs	r3, #0
   233fa:	4e5f      	ldr	r6, [pc, #380]	; (23578 <nrf_getaddrinfo+0x308>)
   233fc:	7033      	strb	r3, [r6, #0]
   233fe:	f04f 33ff 	mov.w	r3, #4294967295
   23402:	9303      	str	r3, [sp, #12]
   23404:	7833      	ldrb	r3, [r6, #0]
   23406:	2b01      	cmp	r3, #1
   23408:	d13c      	bne.n	23484 <nrf_getaddrinfo+0x214>
   2340a:	f8df 8170 	ldr.w	r8, [pc, #368]	; 2357c <nrf_getaddrinfo+0x30c>
   2340e:	f8d8 3000 	ldr.w	r3, [r8]
   23412:	6958      	ldr	r0, [r3, #20]
   23414:	2800      	cmp	r0, #0
   23416:	f040 8090 	bne.w	2353a <nrf_getaddrinfo+0x2ca>
   2341a:	2020      	movs	r0, #32
   2341c:	f8d3 9000 	ldr.w	r9, [r3]
   23420:	f7fb fd2c 	bl	1ee7c <nrf_modem_os_alloc>
   23424:	6028      	str	r0, [r5, #0]
   23426:	b170      	cbz	r0, 23446 <nrf_getaddrinfo+0x1d6>
   23428:	f109 0318 	add.w	r3, r9, #24
   2342c:	4a4f      	ldr	r2, [pc, #316]	; (2356c <nrf_getaddrinfo+0x2fc>)
   2342e:	9301      	str	r3, [sp, #4]
   23430:	4618      	mov	r0, r3
   23432:	8812      	ldrh	r2, [r2, #0]
   23434:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   23438:	f006 fc43 	bl	29cc2 <sockaddr_init>
   2343c:	4606      	mov	r6, r0
   2343e:	bb68      	cbnz	r0, 2349c <nrf_getaddrinfo+0x22c>
   23440:	6828      	ldr	r0, [r5, #0]
   23442:	f7fb fd23 	bl	1ee8c <nrf_modem_os_free>
   23446:	f06f 0409 	mvn.w	r4, #9
   2344a:	f8d8 3000 	ldr.w	r3, [r8]
   2344e:	6818      	ldr	r0, [r3, #0]
   23450:	b108      	cbz	r0, 23456 <nrf_getaddrinfo+0x1e6>
   23452:	f006 fc28 	bl	29ca6 <rpc_client_msg_data_rx_free>
   23456:	f8d8 0000 	ldr.w	r0, [r8]
   2345a:	f006 fc21 	bl	29ca0 <rpc_client_msg_rx_free>
   2345e:	e795      	b.n	2338c <nrf_getaddrinfo+0x11c>
   23460:	f7f5 fe14 	bl	1908c <strlen>
   23464:	f006 fbf9 	bl	29c5a <rpc_client_msg_alloc>
   23468:	4606      	mov	r6, r0
   2346a:	2800      	cmp	r0, #0
   2346c:	d08c      	beq.n	23388 <nrf_getaddrinfo+0x118>
   2346e:	f8c0 8010 	str.w	r8, [r0, #16]
   23472:	4650      	mov	r0, sl
   23474:	f7f5 fe0a 	bl	1908c <strlen>
   23478:	4651      	mov	r1, sl
   2347a:	4602      	mov	r2, r0
   2347c:	6830      	ldr	r0, [r6, #0]
   2347e:	f007 feb4 	bl	2b1ea <memcpy>
   23482:	e7a4      	b.n	233ce <nrf_getaddrinfo+0x15e>
   23484:	2002      	movs	r0, #2
   23486:	a903      	add	r1, sp, #12
   23488:	f7fb fbfe 	bl	1ec88 <nrf_modem_os_timedwait>
   2348c:	2800      	cmp	r0, #0
   2348e:	d0b9      	beq.n	23404 <nrf_getaddrinfo+0x194>
   23490:	206e      	movs	r0, #110	; 0x6e
   23492:	f005 fe4e 	bl	29132 <nrf_modem_os_errno_set>
   23496:	f06f 040a 	mvn.w	r4, #10
   2349a:	e777      	b.n	2338c <nrf_getaddrinfo+0x11c>
   2349c:	f8d9 2008 	ldr.w	r2, [r9, #8]
   234a0:	2a01      	cmp	r2, #1
   234a2:	d004      	beq.n	234ae <nrf_getaddrinfo+0x23e>
   234a4:	2a02      	cmp	r2, #2
   234a6:	d01a      	beq.n	234de <nrf_getaddrinfo+0x26e>
   234a8:	f06f 0405 	mvn.w	r4, #5
   234ac:	e7cd      	b.n	2344a <nrf_getaddrinfo+0x1da>
   234ae:	2110      	movs	r1, #16
   234b0:	682a      	ldr	r2, [r5, #0]
   234b2:	6111      	str	r1, [r2, #16]
   234b4:	683a      	ldr	r2, [r7, #0]
   234b6:	6829      	ldr	r1, [r5, #0]
   234b8:	f012 0202 	ands.w	r2, r2, #2
   234bc:	d03b      	beq.n	23536 <nrf_getaddrinfo+0x2c6>
   234be:	9101      	str	r1, [sp, #4]
   234c0:	f8b9 0016 	ldrh.w	r0, [r9, #22]
   234c4:	3001      	adds	r0, #1
   234c6:	f7fb fcd9 	bl	1ee7c <nrf_modem_os_alloc>
   234ca:	9901      	ldr	r1, [sp, #4]
   234cc:	6188      	str	r0, [r1, #24]
   234ce:	682a      	ldr	r2, [r5, #0]
   234d0:	6990      	ldr	r0, [r2, #24]
   234d2:	b938      	cbnz	r0, 234e4 <nrf_getaddrinfo+0x274>
   234d4:	4628      	mov	r0, r5
   234d6:	f7fb fcd9 	bl	1ee8c <nrf_modem_os_free>
   234da:	4630      	mov	r0, r6
   234dc:	e7b1      	b.n	23442 <nrf_getaddrinfo+0x1d2>
   234de:	2124      	movs	r1, #36	; 0x24
   234e0:	682a      	ldr	r2, [r5, #0]
   234e2:	e7e6      	b.n	234b2 <nrf_getaddrinfo+0x242>
   234e4:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   234e8:	f109 0318 	add.w	r3, r9, #24
   234ec:	440b      	add	r3, r1
   234ee:	4619      	mov	r1, r3
   234f0:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   234f4:	f007 fe79 	bl	2b1ea <memcpy>
   234f8:	2000      	movs	r0, #0
   234fa:	6829      	ldr	r1, [r5, #0]
   234fc:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   23500:	6989      	ldr	r1, [r1, #24]
   23502:	5488      	strb	r0, [r1, r2]
   23504:	682a      	ldr	r2, [r5, #0]
   23506:	9201      	str	r2, [sp, #4]
   23508:	f8d9 0008 	ldr.w	r0, [r9, #8]
   2350c:	f007 f94c 	bl	2a7a8 <rpc_af_to_nrf_af>
   23510:	9a01      	ldr	r2, [sp, #4]
   23512:	6050      	str	r0, [r2, #4]
   23514:	682b      	ldr	r3, [r5, #0]
   23516:	f8db 2000 	ldr.w	r2, [fp]
   2351a:	609a      	str	r2, [r3, #8]
   2351c:	682b      	ldr	r3, [r5, #0]
   2351e:	f8da 2000 	ldr.w	r2, [sl]
   23522:	60da      	str	r2, [r3, #12]
   23524:	682b      	ldr	r3, [r5, #0]
   23526:	683a      	ldr	r2, [r7, #0]
   23528:	601a      	str	r2, [r3, #0]
   2352a:	2200      	movs	r2, #0
   2352c:	682b      	ldr	r3, [r5, #0]
   2352e:	615e      	str	r6, [r3, #20]
   23530:	682b      	ldr	r3, [r5, #0]
   23532:	61da      	str	r2, [r3, #28]
   23534:	e789      	b.n	2344a <nrf_getaddrinfo+0x1da>
   23536:	618a      	str	r2, [r1, #24]
   23538:	e7e4      	b.n	23504 <nrf_getaddrinfo+0x294>
   2353a:	f007 f97b 	bl	2a834 <rpc_error_to_nrf_gai_errno>
   2353e:	4604      	mov	r4, r0
   23540:	e783      	b.n	2344a <nrf_getaddrinfo+0x1da>
   23542:	f06f 0407 	mvn.w	r4, #7
   23546:	e721      	b.n	2338c <nrf_getaddrinfo+0x11c>
   23548:	f06f 0401 	mvn.w	r4, #1
   2354c:	e6bd      	b.n	232ca <nrf_getaddrinfo+0x5a>
   2354e:	f04f 34ff 	mov.w	r4, #4294967295
   23552:	e6ba      	b.n	232ca <nrf_getaddrinfo+0x5a>
   23554:	f06f 0402 	mvn.w	r4, #2
   23558:	e6b7      	b.n	232ca <nrf_getaddrinfo+0x5a>
   2355a:	bf00      	nop
   2355c:	2000dcec 	.word	0x2000dcec
   23560:	2000dcf8 	.word	0x2000dcf8
   23564:	2000dcf4 	.word	0x2000dcf4
   23568:	2000dcf0 	.word	0x2000dcf0
   2356c:	2000dd9a 	.word	0x2000dd9a
   23570:	2000dcfc 	.word	0x2000dcfc
   23574:	0002e1ff 	.word	0x0002e1ff
   23578:	2000eaf3 	.word	0x2000eaf3
   2357c:	2000dce8 	.word	0x2000dce8

00023580 <rpc_ip_event_handler>:
   23580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23582:	f248 030f 	movw	r3, #32783	; 0x800f
   23586:	4299      	cmp	r1, r3
   23588:	4606      	mov	r6, r0
   2358a:	460d      	mov	r5, r1
   2358c:	d03b      	beq.n	23606 <rpc_ip_event_handler+0x86>
   2358e:	d822      	bhi.n	235d6 <rpc_ip_event_handler+0x56>
   23590:	f248 030d 	movw	r3, #32781	; 0x800d
   23594:	4299      	cmp	r1, r3
   23596:	d02f      	beq.n	235f8 <rpc_ip_event_handler+0x78>
   23598:	f248 030e 	movw	r3, #32782	; 0x800e
   2359c:	4299      	cmp	r1, r3
   2359e:	d02f      	beq.n	23600 <rpc_ip_event_handler+0x80>
   235a0:	6900      	ldr	r0, [r0, #16]
   235a2:	f7ff fdcf 	bl	23144 <sock_find>
   235a6:	4604      	mov	r4, r0
   235a8:	b308      	cbz	r0, 235ee <rpc_ip_event_handler+0x6e>
   235aa:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   235ae:	d91e      	bls.n	235ee <rpc_ip_event_handler+0x6e>
   235b0:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
   235b4:	3d01      	subs	r5, #1
   235b6:	2d0b      	cmp	r5, #11
   235b8:	d819      	bhi.n	235ee <rpc_ip_event_handler+0x6e>
   235ba:	e8df f015 	tbh	[pc, r5, lsl #1]
   235be:	0090      	.short	0x0090
   235c0:	009400b3 	.word	0x009400b3
   235c4:	00940094 	.word	0x00940094
   235c8:	00ee00ee 	.word	0x00ee00ee
   235cc:	00990094 	.word	0x00990094
   235d0:	00180018 	.word	0x00180018
   235d4:	00d2      	.short	0x00d2
   235d6:	f249 0304 	movw	r3, #36868	; 0x9004
   235da:	4299      	cmp	r1, r3
   235dc:	d016      	beq.n	2360c <rpc_ip_event_handler+0x8c>
   235de:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   235e2:	d924      	bls.n	2362e <rpc_ip_event_handler+0xae>
   235e4:	68c0      	ldr	r0, [r0, #12]
   235e6:	f7ff fdad 	bl	23144 <sock_find>
   235ea:	4604      	mov	r4, r0
   235ec:	bb70      	cbnz	r0, 2364c <rpc_ip_event_handler+0xcc>
   235ee:	6830      	ldr	r0, [r6, #0]
   235f0:	b1b0      	cbz	r0, 23620 <rpc_ip_event_handler+0xa0>
   235f2:	f006 fb58 	bl	29ca6 <rpc_client_msg_data_rx_free>
   235f6:	e013      	b.n	23620 <rpc_ip_event_handler+0xa0>
   235f8:	f7ff fe20 	bl	2323c <on_getaddrinfo_res>
   235fc:	b2c0      	uxtb	r0, r0
   235fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23600:	f006 fd02 	bl	2a008 <on_getifaddrs_res>
   23604:	e7fa      	b.n	235fc <rpc_ip_event_handler+0x7c>
   23606:	f006 fcec 	bl	29fe2 <on_conf_dnssrv_res>
   2360a:	e7f7      	b.n	235fc <rpc_ip_event_handler+0x7c>
   2360c:	6903      	ldr	r3, [r0, #16]
   2360e:	2b03      	cmp	r3, #3
   23610:	d806      	bhi.n	23620 <rpc_ip_event_handler+0xa0>
   23612:	e8df f003 	tbb	[pc, r3]
   23616:	0a02      	.short	0x0a02
   23618:	0702      	.short	0x0702
   2361a:	2000      	movs	r0, #0
   2361c:	f7ff fdcc 	bl	231b8 <sock_flow_control_set>
   23620:	2000      	movs	r0, #0
   23622:	e7ec      	b.n	235fe <rpc_ip_event_handler+0x7e>
   23624:	2201      	movs	r2, #1
   23626:	4b65      	ldr	r3, [pc, #404]	; (237bc <rpc_ip_event_handler+0x23c>)
   23628:	701a      	strb	r2, [r3, #0]
   2362a:	2001      	movs	r0, #1
   2362c:	e7f6      	b.n	2361c <rpc_ip_event_handler+0x9c>
   2362e:	6900      	ldr	r0, [r0, #16]
   23630:	f7ff fd88 	bl	23144 <sock_find>
   23634:	4604      	mov	r4, r0
   23636:	2800      	cmp	r0, #0
   23638:	d0d9      	beq.n	235ee <rpc_ip_event_handler+0x6e>
   2363a:	f248 0381 	movw	r3, #32897	; 0x8081
   2363e:	429d      	cmp	r5, r3
   23640:	d1d5      	bne.n	235ee <rpc_ip_event_handler+0x6e>
   23642:	4601      	mov	r1, r0
   23644:	4630      	mov	r0, r6
   23646:	f000 fc2d 	bl	23ea4 <on_tls_attach_res>
   2364a:	e04f      	b.n	236ec <rpc_ip_event_handler+0x16c>
   2364c:	f249 0302 	movw	r3, #36866	; 0x9002
   23650:	429d      	cmp	r5, r3
   23652:	f000 809e 	beq.w	23792 <rpc_ip_event_handler+0x212>
   23656:	d835      	bhi.n	236c4 <rpc_ip_event_handler+0x144>
   23658:	f006 fbe7 	bl	29e2a <sock_has_stream_error>
   2365c:	4607      	mov	r7, r0
   2365e:	b9e0      	cbnz	r0, 2369a <rpc_ip_event_handler+0x11a>
   23660:	2010      	movs	r0, #16
   23662:	f7fb fc0b 	bl	1ee7c <nrf_modem_os_alloc>
   23666:	4605      	mov	r5, r0
   23668:	b1b8      	cbz	r0, 2369a <rpc_ip_event_handler+0x11a>
   2366a:	4639      	mov	r1, r7
   2366c:	2210      	movs	r2, #16
   2366e:	f007 fdc9 	bl	2b204 <memset>
   23672:	6833      	ldr	r3, [r6, #0]
   23674:	606b      	str	r3, [r5, #4]
   23676:	6873      	ldr	r3, [r6, #4]
   23678:	812b      	strh	r3, [r5, #8]
   2367a:	8a71      	ldrh	r1, [r6, #18]
   2367c:	2900      	cmp	r1, #0
   2367e:	f000 8097 	beq.w	237b0 <rpc_ip_event_handler+0x230>
   23682:	8a32      	ldrh	r2, [r6, #16]
   23684:	f106 0014 	add.w	r0, r6, #20
   23688:	f006 fb1b 	bl	29cc2 <sockaddr_init>
   2368c:	60e8      	str	r0, [r5, #12]
   2368e:	2800      	cmp	r0, #0
   23690:	f040 808e 	bne.w	237b0 <rpc_ip_event_handler+0x230>
   23694:	4628      	mov	r0, r5
   23696:	f7fb fbf9 	bl	1ee8c <nrf_modem_os_free>
   2369a:	6830      	ldr	r0, [r6, #0]
   2369c:	f006 fb03 	bl	29ca6 <rpc_client_msg_data_rx_free>
   236a0:	4620      	mov	r0, r4
   236a2:	f006 fb84 	bl	29dae <sock_is_stream>
   236a6:	b148      	cbz	r0, 236bc <rpc_ip_event_handler+0x13c>
   236a8:	4620      	mov	r0, r4
   236aa:	f006 fbbe 	bl	29e2a <sock_has_stream_error>
   236ae:	b928      	cbnz	r0, 236bc <rpc_ip_event_handler+0x13c>
   236b0:	230c      	movs	r3, #12
   236b2:	61a3      	str	r3, [r4, #24]
   236b4:	7f23      	ldrb	r3, [r4, #28]
   236b6:	f063 037e 	orn	r3, r3, #126	; 0x7e
   236ba:	7723      	strb	r3, [r4, #28]
   236bc:	4620      	mov	r0, r4
   236be:	f006 fb7b 	bl	29db8 <sock_is_datagram>
   236c2:	e025      	b.n	23710 <rpc_ip_event_handler+0x190>
   236c4:	f249 0303 	movw	r3, #36867	; 0x9003
   236c8:	429d      	cmp	r5, r3
   236ca:	d018      	beq.n	236fe <rpc_ip_event_handler+0x17e>
   236cc:	f249 0382 	movw	r3, #36994	; 0x9082
   236d0:	429d      	cmp	r5, r3
   236d2:	d18c      	bne.n	235ee <rpc_ip_event_handler+0x6e>
   236d4:	4601      	mov	r1, r0
   236d6:	4630      	mov	r0, r6
   236d8:	f000 fbf8 	bl	23ecc <on_tls_handshake_ntf>
   236dc:	e006      	b.n	236ec <rpc_ip_event_handler+0x16c>
   236de:	6973      	ldr	r3, [r6, #20]
   236e0:	b90b      	cbnz	r3, 236e6 <rpc_ip_event_handler+0x166>
   236e2:	69b3      	ldr	r3, [r6, #24]
   236e4:	6003      	str	r3, [r0, #0]
   236e6:	4630      	mov	r0, r6
   236e8:	f007 f8ee 	bl	2a8c8 <res_forward>
   236ec:	4605      	mov	r5, r0
   236ee:	e010      	b.n	23712 <rpc_ip_event_handler+0x192>
   236f0:	7f03      	ldrb	r3, [r0, #28]
   236f2:	f023 0303 	bic.w	r3, r3, #3
   236f6:	f043 0303 	orr.w	r3, r3, #3
   236fa:	7703      	strb	r3, [r0, #28]
   236fc:	e7f3      	b.n	236e6 <rpc_ip_event_handler+0x166>
   236fe:	7f03      	ldrb	r3, [r0, #28]
   23700:	f043 0301 	orr.w	r3, r3, #1
   23704:	7703      	strb	r3, [r0, #28]
   23706:	6930      	ldr	r0, [r6, #16]
   23708:	2869      	cmp	r0, #105	; 0x69
   2370a:	d112      	bne.n	23732 <rpc_ip_event_handler+0x1b2>
   2370c:	2368      	movs	r3, #104	; 0x68
   2370e:	61a3      	str	r3, [r4, #24]
   23710:	2500      	movs	r5, #0
   23712:	4620      	mov	r0, r4
   23714:	f006 fb97 	bl	29e46 <sock_has_pollcb>
   23718:	b110      	cbz	r0, 23720 <rpc_ip_event_handler+0x1a0>
   2371a:	4620      	mov	r0, r4
   2371c:	f006 fb0a 	bl	29d34 <sock_pollcb>
   23720:	b2e8      	uxtb	r0, r5
   23722:	e76c      	b.n	235fe <rpc_ip_event_handler+0x7e>
   23724:	7f03      	ldrb	r3, [r0, #28]
   23726:	68f5      	ldr	r5, [r6, #12]
   23728:	f36f 0382 	bfc	r3, #2, #1
   2372c:	7703      	strb	r3, [r0, #28]
   2372e:	6970      	ldr	r0, [r6, #20]
   23730:	b118      	cbz	r0, 2373a <rpc_ip_event_handler+0x1ba>
   23732:	f000 fc71 	bl	24018 <rpc_error_to_nrf_errno>
   23736:	61a0      	str	r0, [r4, #24]
   23738:	e7ea      	b.n	23710 <rpc_ip_event_handler+0x190>
   2373a:	4620      	mov	r0, r4
   2373c:	f006 fb46 	bl	29dcc <sock_proto_is_secure>
   23740:	b918      	cbnz	r0, 2374a <rpc_ip_event_handler+0x1ca>
   23742:	7f23      	ldrb	r3, [r4, #28]
   23744:	f043 0308 	orr.w	r3, r3, #8
   23748:	7723      	strb	r3, [r4, #28]
   2374a:	4620      	mov	r0, r4
   2374c:	f006 fb3e 	bl	29dcc <sock_proto_is_secure>
   23750:	2800      	cmp	r0, #0
   23752:	d0cb      	beq.n	236ec <rpc_ip_event_handler+0x16c>
   23754:	2d00      	cmp	r5, #0
   23756:	d0dc      	beq.n	23712 <rpc_ip_event_handler+0x192>
   23758:	2100      	movs	r1, #0
   2375a:	4620      	mov	r0, r4
   2375c:	f000 fbd0 	bl	23f00 <tls_attach>
   23760:	e7d6      	b.n	23710 <rpc_ip_event_handler+0x190>
   23762:	7f43      	ldrb	r3, [r0, #29]
   23764:	3b01      	subs	r3, #1
   23766:	7743      	strb	r3, [r0, #29]
   23768:	6973      	ldr	r3, [r6, #20]
   2376a:	2b00      	cmp	r3, #0
   2376c:	d1bb      	bne.n	236e6 <rpc_ip_event_handler+0x166>
   2376e:	4630      	mov	r0, r6
   23770:	f007 f8a8 	bl	2a8c4 <res_cookie_get>
   23774:	69b2      	ldr	r2, [r6, #24]
   23776:	6843      	ldr	r3, [r0, #4]
   23778:	601a      	str	r2, [r3, #0]
   2377a:	6842      	ldr	r2, [r0, #4]
   2377c:	7f13      	ldrb	r3, [r2, #28]
   2377e:	f043 0308 	orr.w	r3, r3, #8
   23782:	7713      	strb	r3, [r2, #28]
   23784:	6843      	ldr	r3, [r0, #4]
   23786:	6922      	ldr	r2, [r4, #16]
   23788:	611a      	str	r2, [r3, #16]
   2378a:	6843      	ldr	r3, [r0, #4]
   2378c:	6962      	ldr	r2, [r4, #20]
   2378e:	615a      	str	r2, [r3, #20]
   23790:	e7a9      	b.n	236e6 <rpc_ip_event_handler+0x166>
   23792:	7f43      	ldrb	r3, [r0, #29]
   23794:	3301      	adds	r3, #1
   23796:	7743      	strb	r3, [r0, #29]
   23798:	e7ba      	b.n	23710 <rpc_ip_event_handler+0x190>
   2379a:	4630      	mov	r0, r6
   2379c:	f007 f892 	bl	2a8c4 <res_cookie_get>
   237a0:	6973      	ldr	r3, [r6, #20]
   237a2:	b913      	cbnz	r3, 237aa <rpc_ip_event_handler+0x22a>
   237a4:	69b3      	ldr	r3, [r6, #24]
   237a6:	6043      	str	r3, [r0, #4]
   237a8:	e79d      	b.n	236e6 <rpc_ip_event_handler+0x166>
   237aa:	f04f 33ff 	mov.w	r3, #4294967295
   237ae:	e7fa      	b.n	237a6 <rpc_ip_event_handler+0x226>
   237b0:	4629      	mov	r1, r5
   237b2:	4620      	mov	r0, r4
   237b4:	f006 fadb 	bl	29d6e <sock_pkt_append>
   237b8:	e7aa      	b.n	23710 <rpc_ip_event_handler+0x190>
   237ba:	bf00      	nop
   237bc:	2000eaf4 	.word	0x2000eaf4

000237c0 <nrf_close>:
   237c0:	b570      	push	{r4, r5, r6, lr}
   237c2:	4604      	mov	r4, r0
   237c4:	f7ff fcbe 	bl	23144 <sock_find>
   237c8:	4605      	mov	r5, r0
   237ca:	b930      	cbnz	r0, 237da <nrf_close+0x1a>
   237cc:	2009      	movs	r0, #9
   237ce:	f005 fcb0 	bl	29132 <nrf_modem_os_errno_set>
   237d2:	f04f 36ff 	mov.w	r6, #4294967295
   237d6:	4630      	mov	r0, r6
   237d8:	bd70      	pop	{r4, r5, r6, pc}
   237da:	f000 fd7f 	bl	242dc <nrf_modem_state_is_initialized>
   237de:	b960      	cbnz	r0, 237fa <nrf_close+0x3a>
   237e0:	2600      	movs	r6, #0
   237e2:	4628      	mov	r0, r5
   237e4:	f006 fb06 	bl	29df4 <sock_is_attaching>
   237e8:	b118      	cbz	r0, 237f2 <nrf_close+0x32>
   237ea:	4b0e      	ldr	r3, [pc, #56]	; (23824 <nrf_close+0x64>)
   237ec:	6818      	ldr	r0, [r3, #0]
   237ee:	f005 fca8 	bl	29142 <nrf_modem_os_sem_give>
   237f2:	4620      	mov	r0, r4
   237f4:	f7ff fcb8 	bl	23168 <_sock_close>
   237f8:	e7ed      	b.n	237d6 <nrf_close+0x16>
   237fa:	2000      	movs	r0, #0
   237fc:	f006 fa2d 	bl	29c5a <rpc_client_msg_alloc>
   23800:	4601      	mov	r1, r0
   23802:	b908      	cbnz	r0, 23808 <nrf_close+0x48>
   23804:	2069      	movs	r0, #105	; 0x69
   23806:	e7e2      	b.n	237ce <nrf_close+0xe>
   23808:	6104      	str	r4, [r0, #16]
   2380a:	f247 0009 	movw	r0, #28681	; 0x7009
   2380e:	f007 f82b 	bl	2a868 <req_forward>
   23812:	2800      	cmp	r0, #0
   23814:	d0e4      	beq.n	237e0 <nrf_close+0x20>
   23816:	2816      	cmp	r0, #22
   23818:	d0e2      	beq.n	237e0 <nrf_close+0x20>
   2381a:	f005 fc8a 	bl	29132 <nrf_modem_os_errno_set>
   2381e:	f04f 36ff 	mov.w	r6, #4294967295
   23822:	e7de      	b.n	237e2 <nrf_close+0x22>
   23824:	2000dd00 	.word	0x2000dd00

00023828 <nrf_sendto>:
   23828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2382c:	4698      	mov	r8, r3
   2382e:	2300      	movs	r3, #0
   23830:	b085      	sub	sp, #20
   23832:	4682      	mov	sl, r0
   23834:	4689      	mov	r9, r1
   23836:	4616      	mov	r6, r2
   23838:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2383c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   2383e:	f7ff fc81 	bl	23144 <sock_find>
   23842:	4605      	mov	r5, r0
   23844:	b940      	cbnz	r0, 23858 <nrf_sendto+0x30>
   23846:	2009      	movs	r0, #9
   23848:	f005 fc73 	bl	29132 <nrf_modem_os_errno_set>
   2384c:	f04f 34ff 	mov.w	r4, #4294967295
   23850:	4620      	mov	r0, r4
   23852:	b005      	add	sp, #20
   23854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23858:	f038 0340 	bics.w	r3, r8, #64	; 0x40
   2385c:	d001      	beq.n	23862 <nrf_sendto+0x3a>
   2385e:	205f      	movs	r0, #95	; 0x5f
   23860:	e7f2      	b.n	23848 <nrf_sendto+0x20>
   23862:	f006 faf5 	bl	29e50 <sock_has_rai_no_data>
   23866:	b128      	cbz	r0, 23874 <nrf_sendto+0x4c>
   23868:	4628      	mov	r0, r5
   2386a:	f006 fae1 	bl	29e30 <sock_has_error>
   2386e:	b128      	cbz	r0, 2387c <nrf_sendto+0x54>
   23870:	69a8      	ldr	r0, [r5, #24]
   23872:	e7e9      	b.n	23848 <nrf_sendto+0x20>
   23874:	4628      	mov	r0, r5
   23876:	f006 fac5 	bl	29e04 <sock_is_closed>
   2387a:	e7f8      	b.n	2386e <nrf_sendto+0x46>
   2387c:	4628      	mov	r0, r5
   2387e:	b1d7      	cbz	r7, 238b6 <nrf_sendto+0x8e>
   23880:	f006 fa95 	bl	29dae <sock_is_stream>
   23884:	bb00      	cbnz	r0, 238c8 <nrf_sendto+0xa0>
   23886:	4639      	mov	r1, r7
   23888:	4628      	mov	r0, r5
   2388a:	f006 fb6d 	bl	29f68 <sock_sockaddr_fam_is_valid>
   2388e:	b908      	cbnz	r0, 23894 <nrf_sendto+0x6c>
   23890:	206a      	movs	r0, #106	; 0x6a
   23892:	e7d9      	b.n	23848 <nrf_sendto+0x20>
   23894:	4638      	mov	r0, r7
   23896:	990f      	ldr	r1, [sp, #60]	; 0x3c
   23898:	f006 fb52 	bl	29f40 <sock_sockaddr_len_is_valid>
   2389c:	b908      	cbnz	r0, 238a2 <nrf_sendto+0x7a>
   2389e:	2016      	movs	r0, #22
   238a0:	e7d2      	b.n	23848 <nrf_sendto+0x20>
   238a2:	4628      	mov	r0, r5
   238a4:	f006 fa88 	bl	29db8 <sock_is_datagram>
   238a8:	b170      	cbz	r0, 238c8 <nrf_sendto+0xa0>
   238aa:	4628      	mov	r0, r5
   238ac:	f006 fa8e 	bl	29dcc <sock_proto_is_secure>
   238b0:	b150      	cbz	r0, 238c8 <nrf_sendto+0xa0>
   238b2:	207f      	movs	r0, #127	; 0x7f
   238b4:	e7c8      	b.n	23848 <nrf_sendto+0x20>
   238b6:	f006 fa7f 	bl	29db8 <sock_is_datagram>
   238ba:	b128      	cbz	r0, 238c8 <nrf_sendto+0xa0>
   238bc:	4628      	mov	r0, r5
   238be:	f006 fa95 	bl	29dec <sock_is_connected>
   238c2:	b908      	cbnz	r0, 238c8 <nrf_sendto+0xa0>
   238c4:	2079      	movs	r0, #121	; 0x79
   238c6:	e7bf      	b.n	23848 <nrf_sendto+0x20>
   238c8:	4628      	mov	r0, r5
   238ca:	f006 fb01 	bl	29ed0 <sock_sndtimeo_ms_get>
   238ce:	9001      	str	r0, [sp, #4]
   238d0:	4628      	mov	r0, r5
   238d2:	f006 fa93 	bl	29dfc <sock_is_nonblock>
   238d6:	bb78      	cbnz	r0, 23938 <nrf_sendto+0x110>
   238d8:	f3c8 1880 	ubfx	r8, r8, #6, #1
   238dc:	4628      	mov	r0, r5
   238de:	f006 fa66 	bl	29dae <sock_is_stream>
   238e2:	b140      	cbz	r0, 238f6 <nrf_sendto+0xce>
   238e4:	4628      	mov	r0, r5
   238e6:	f006 fa71 	bl	29dcc <sock_proto_is_secure>
   238ea:	b120      	cbz	r0, 238f6 <nrf_sendto+0xce>
   238ec:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
   238f0:	bf28      	it	cs
   238f2:	f44f 6600 	movcs.w	r6, #2048	; 0x800
   238f6:	f006 f9d8 	bl	29caa <rpc_client_msg_data_tx_size>
   238fa:	42b0      	cmp	r0, r6
   238fc:	d206      	bcs.n	2390c <nrf_sendto+0xe4>
   238fe:	4628      	mov	r0, r5
   23900:	f006 fa55 	bl	29dae <sock_is_stream>
   23904:	b1d8      	cbz	r0, 2393e <nrf_sendto+0x116>
   23906:	f006 f9d0 	bl	29caa <rpc_client_msg_data_tx_size>
   2390a:	4606      	mov	r6, r0
   2390c:	4628      	mov	r0, r5
   2390e:	f006 fa96 	bl	29e3e <sock_has_flow_control>
   23912:	b118      	cbz	r0, 2391c <nrf_sendto+0xf4>
   23914:	4628      	mov	r0, r5
   23916:	f006 fa75 	bl	29e04 <sock_is_closed>
   2391a:	b190      	cbz	r0, 23942 <nrf_sendto+0x11a>
   2391c:	4630      	mov	r0, r6
   2391e:	f006 f99c 	bl	29c5a <rpc_client_msg_alloc>
   23922:	4604      	mov	r4, r0
   23924:	b9e0      	cbnz	r0, 23960 <nrf_sendto+0x138>
   23926:	2001      	movs	r0, #1
   23928:	a901      	add	r1, sp, #4
   2392a:	f7fb f9ad 	bl	1ec88 <nrf_modem_os_timedwait>
   2392e:	b998      	cbnz	r0, 23958 <nrf_sendto+0x130>
   23930:	f1b8 0f00 	cmp.w	r8, #0
   23934:	d0f2      	beq.n	2391c <nrf_sendto+0xf4>
   23936:	e007      	b.n	23948 <nrf_sendto+0x120>
   23938:	f04f 0801 	mov.w	r8, #1
   2393c:	e7ce      	b.n	238dc <nrf_sendto+0xb4>
   2393e:	207a      	movs	r0, #122	; 0x7a
   23940:	e782      	b.n	23848 <nrf_sendto+0x20>
   23942:	f1b8 0f00 	cmp.w	r8, #0
   23946:	d001      	beq.n	2394c <nrf_sendto+0x124>
   23948:	200b      	movs	r0, #11
   2394a:	e77d      	b.n	23848 <nrf_sendto+0x20>
   2394c:	2002      	movs	r0, #2
   2394e:	a901      	add	r1, sp, #4
   23950:	f7fb f99a 	bl	1ec88 <nrf_modem_os_timedwait>
   23954:	2800      	cmp	r0, #0
   23956:	d0d9      	beq.n	2390c <nrf_sendto+0xe4>
   23958:	2800      	cmp	r0, #0
   2395a:	bfb8      	it	lt
   2395c:	4240      	neglt	r0, r0
   2395e:	e773      	b.n	23848 <nrf_sendto+0x20>
   23960:	f8c0 a010 	str.w	sl, [r0, #16]
   23964:	f1b9 0f00 	cmp.w	r9, #0
   23968:	d004      	beq.n	23974 <nrf_sendto+0x14c>
   2396a:	4632      	mov	r2, r6
   2396c:	4649      	mov	r1, r9
   2396e:	6800      	ldr	r0, [r0, #0]
   23970:	f007 fc3b 	bl	2b1ea <memcpy>
   23974:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
   23978:	f1bb 0f00 	cmp.w	fp, #0
   2397c:	d001      	beq.n	23982 <nrf_sendto+0x15a>
   2397e:	2300      	movs	r3, #0
   23980:	632b      	str	r3, [r5, #48]	; 0x30
   23982:	b3cf      	cbz	r7, 239f8 <nrf_sendto+0x1d0>
   23984:	4628      	mov	r0, r5
   23986:	f006 fa12 	bl	29dae <sock_is_stream>
   2398a:	bba8      	cbnz	r0, 239f8 <nrf_sendto+0x1d0>
   2398c:	2318      	movs	r3, #24
   2398e:	7260      	strb	r0, [r4, #9]
   23990:	7223      	strb	r3, [r4, #8]
   23992:	72a0      	strb	r0, [r4, #10]
   23994:	72e0      	strb	r0, [r4, #11]
   23996:	f8c4 b014 	str.w	fp, [r4, #20]
   2399a:	687b      	ldr	r3, [r7, #4]
   2399c:	2b01      	cmp	r3, #1
   2399e:	d012      	beq.n	239c6 <nrf_sendto+0x19e>
   239a0:	2b02      	cmp	r3, #2
   239a2:	d018      	beq.n	239d6 <nrf_sendto+0x1ae>
   239a4:	f247 0b07 	movw	fp, #28679	; 0x7007
   239a8:	4620      	mov	r0, r4
   239aa:	a902      	add	r1, sp, #8
   239ac:	f006 ff88 	bl	2a8c0 <req_cookie_set>
   239b0:	4621      	mov	r1, r4
   239b2:	4658      	mov	r0, fp
   239b4:	f006 ff58 	bl	2a868 <req_forward>
   239b8:	4603      	mov	r3, r0
   239ba:	bb40      	cbnz	r0, 23a0e <nrf_sendto+0x1e6>
   239bc:	e9dd 0402 	ldrd	r0, r4, [sp, #8]
   239c0:	f006 f96e 	bl	29ca0 <rpc_client_msg_rx_free>
   239c4:	e744      	b.n	23850 <nrf_sendto+0x28>
   239c6:	893b      	ldrh	r3, [r7, #8]
   239c8:	76e0      	strb	r0, [r4, #27]
   239ca:	8323      	strh	r3, [r4, #24]
   239cc:	2304      	movs	r3, #4
   239ce:	76a3      	strb	r3, [r4, #26]
   239d0:	68fb      	ldr	r3, [r7, #12]
   239d2:	61e3      	str	r3, [r4, #28]
   239d4:	e7e6      	b.n	239a4 <nrf_sendto+0x17c>
   239d6:	893b      	ldrh	r3, [r7, #8]
   239d8:	f104 021c 	add.w	r2, r4, #28
   239dc:	8323      	strh	r3, [r4, #24]
   239de:	2310      	movs	r3, #16
   239e0:	76e0      	strb	r0, [r4, #27]
   239e2:	76a3      	strb	r3, [r4, #26]
   239e4:	f107 0120 	add.w	r1, r7, #32
   239e8:	18fb      	adds	r3, r7, r3
   239ea:	f853 0b04 	ldr.w	r0, [r3], #4
   239ee:	428b      	cmp	r3, r1
   239f0:	f842 0b04 	str.w	r0, [r2], #4
   239f4:	d1f9      	bne.n	239ea <nrf_sendto+0x1c2>
   239f6:	e7d5      	b.n	239a4 <nrf_sendto+0x17c>
   239f8:	2300      	movs	r3, #0
   239fa:	2204      	movs	r2, #4
   239fc:	f8c4 b014 	str.w	fp, [r4, #20]
   23a00:	7222      	strb	r2, [r4, #8]
   23a02:	f247 0b06 	movw	fp, #28678	; 0x7006
   23a06:	7263      	strb	r3, [r4, #9]
   23a08:	72a3      	strb	r3, [r4, #10]
   23a0a:	72e3      	strb	r3, [r4, #11]
   23a0c:	e7cc      	b.n	239a8 <nrf_sendto+0x180>
   23a0e:	280c      	cmp	r0, #12
   23a10:	dc0f      	bgt.n	23a32 <nrf_sendto+0x20a>
   23a12:	280a      	cmp	r0, #10
   23a14:	dd10      	ble.n	23a38 <nrf_sendto+0x210>
   23a16:	4b09      	ldr	r3, [pc, #36]	; (23a3c <nrf_sendto+0x214>)
   23a18:	781b      	ldrb	r3, [r3, #0]
   23a1a:	b92b      	cbnz	r3, 23a28 <nrf_sendto+0x200>
   23a1c:	2001      	movs	r0, #1
   23a1e:	a901      	add	r1, sp, #4
   23a20:	f7fb f932 	bl	1ec88 <nrf_modem_os_timedwait>
   23a24:	2800      	cmp	r0, #0
   23a26:	d197      	bne.n	23958 <nrf_sendto+0x130>
   23a28:	f1b8 0f00 	cmp.w	r8, #0
   23a2c:	f43f af6e 	beq.w	2390c <nrf_sendto+0xe4>
   23a30:	e78a      	b.n	23948 <nrf_sendto+0x120>
   23a32:	288c      	cmp	r0, #140	; 0x8c
   23a34:	f43f af08 	beq.w	23848 <nrf_sendto+0x20>
   23a38:	4618      	mov	r0, r3
   23a3a:	e705      	b.n	23848 <nrf_sendto+0x20>
   23a3c:	2000eaf4 	.word	0x2000eaf4

00023a40 <nrf_setsockopt>:
   23a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23a44:	b085      	sub	sp, #20
   23a46:	4681      	mov	r9, r0
   23a48:	4688      	mov	r8, r1
   23a4a:	4617      	mov	r7, r2
   23a4c:	461e      	mov	r6, r3
   23a4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   23a50:	f7ff fb78 	bl	23144 <sock_find>
   23a54:	4604      	mov	r4, r0
   23a56:	b938      	cbnz	r0, 23a68 <nrf_setsockopt+0x28>
   23a58:	2009      	movs	r0, #9
   23a5a:	f005 fb6a 	bl	29132 <nrf_modem_os_errno_set>
   23a5e:	f04f 30ff 	mov.w	r0, #4294967295
   23a62:	b005      	add	sp, #20
   23a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23a68:	b916      	cbnz	r6, 23a70 <nrf_setsockopt+0x30>
   23a6a:	b10d      	cbz	r5, 23a70 <nrf_setsockopt+0x30>
   23a6c:	2016      	movs	r0, #22
   23a6e:	e7f4      	b.n	23a5a <nrf_setsockopt+0x1a>
   23a70:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   23a74:	f000 80fe 	beq.w	23c74 <nrf_setsockopt+0x234>
   23a78:	dc0c      	bgt.n	23a94 <nrf_setsockopt+0x54>
   23a7a:	f1b8 0f01 	cmp.w	r8, #1
   23a7e:	d012      	beq.n	23aa6 <nrf_setsockopt+0x66>
   23a80:	f1b8 0f06 	cmp.w	r8, #6
   23a84:	f000 80f0 	beq.w	23c68 <nrf_setsockopt+0x228>
   23a88:	f1b8 0f00 	cmp.w	r8, #0
   23a8c:	f000 80f0 	beq.w	23c70 <nrf_setsockopt+0x230>
   23a90:	206d      	movs	r0, #109	; 0x6d
   23a92:	e7e2      	b.n	23a5a <nrf_setsockopt+0x1a>
   23a94:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   23a98:	f000 8092 	beq.w	23bc0 <nrf_setsockopt+0x180>
   23a9c:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   23aa0:	d1f6      	bne.n	23a90 <nrf_setsockopt+0x50>
   23aa2:	2f1e      	cmp	r7, #30
   23aa4:	e0e1      	b.n	23c6a <nrf_setsockopt+0x22a>
   23aa6:	2f3c      	cmp	r7, #60	; 0x3c
   23aa8:	dcf2      	bgt.n	23a90 <nrf_setsockopt+0x50>
   23aaa:	2f31      	cmp	r7, #49	; 0x31
   23aac:	dc0f      	bgt.n	23ace <nrf_setsockopt+0x8e>
   23aae:	2f15      	cmp	r7, #21
   23ab0:	d046      	beq.n	23b40 <nrf_setsockopt+0x100>
   23ab2:	dc29      	bgt.n	23b08 <nrf_setsockopt+0xc8>
   23ab4:	2f02      	cmp	r7, #2
   23ab6:	d03a      	beq.n	23b2e <nrf_setsockopt+0xee>
   23ab8:	2f14      	cmp	r7, #20
   23aba:	d1e9      	bne.n	23a90 <nrf_setsockopt+0x50>
   23abc:	f104 0020 	add.w	r0, r4, #32
   23ac0:	2d00      	cmp	r5, #0
   23ac2:	d143      	bne.n	23b4c <nrf_setsockopt+0x10c>
   23ac4:	2300      	movs	r3, #0
   23ac6:	6223      	str	r3, [r4, #32]
   23ac8:	6043      	str	r3, [r0, #4]
   23aca:	2000      	movs	r0, #0
   23acc:	e7c9      	b.n	23a62 <nrf_setsockopt+0x22>
   23ace:	3f32      	subs	r7, #50	; 0x32
   23ad0:	2f0a      	cmp	r7, #10
   23ad2:	d8dd      	bhi.n	23a90 <nrf_setsockopt+0x50>
   23ad4:	a301      	add	r3, pc, #4	; (adr r3, 23adc <nrf_setsockopt+0x9c>)
   23ad6:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
   23ada:	bf00      	nop
   23adc:	00023ba5 	.word	0x00023ba5
   23ae0:	00023b8b 	.word	0x00023b8b
   23ae4:	00023b93 	.word	0x00023b93
   23ae8:	00023b99 	.word	0x00023b99
   23aec:	00023b9f 	.word	0x00023b9f
   23af0:	00023a91 	.word	0x00023a91
   23af4:	00023a91 	.word	0x00023a91
   23af8:	00023a91 	.word	0x00023a91
   23afc:	00023a91 	.word	0x00023a91
   23b00:	00023a91 	.word	0x00023a91
   23b04:	00023b5d 	.word	0x00023b5d
   23b08:	2f19      	cmp	r7, #25
   23b0a:	d1c1      	bne.n	23a90 <nrf_setsockopt+0x50>
   23b0c:	2e00      	cmp	r6, #0
   23b0e:	d0ad      	beq.n	23a6c <nrf_setsockopt+0x2c>
   23b10:	2203      	movs	r2, #3
   23b12:	4969      	ldr	r1, [pc, #420]	; (23cb8 <nrf_setsockopt+0x278>)
   23b14:	4630      	mov	r0, r6
   23b16:	f007 fb58 	bl	2b1ca <memcmp>
   23b1a:	220a      	movs	r2, #10
   23b1c:	2100      	movs	r1, #0
   23b1e:	2800      	cmp	r0, #0
   23b20:	d14c      	bne.n	23bbc <nrf_setsockopt+0x17c>
   23b22:	1cf0      	adds	r0, r6, #3
   23b24:	f002 f92e 	bl	25d84 <strtoul>
   23b28:	2504      	movs	r5, #4
   23b2a:	9003      	str	r0, [sp, #12]
   23b2c:	ae03      	add	r6, sp, #12
   23b2e:	4628      	mov	r0, r5
   23b30:	f006 f893 	bl	29c5a <rpc_client_msg_alloc>
   23b34:	4604      	mov	r4, r0
   23b36:	2800      	cmp	r0, #0
   23b38:	f040 809e 	bne.w	23c78 <nrf_setsockopt+0x238>
   23b3c:	2069      	movs	r0, #105	; 0x69
   23b3e:	e78c      	b.n	23a5a <nrf_setsockopt+0x1a>
   23b40:	f104 0028 	add.w	r0, r4, #40	; 0x28
   23b44:	b915      	cbnz	r5, 23b4c <nrf_setsockopt+0x10c>
   23b46:	62a5      	str	r5, [r4, #40]	; 0x28
   23b48:	6045      	str	r5, [r0, #4]
   23b4a:	e7be      	b.n	23aca <nrf_setsockopt+0x8a>
   23b4c:	2d08      	cmp	r5, #8
   23b4e:	462a      	mov	r2, r5
   23b50:	4631      	mov	r1, r6
   23b52:	bf28      	it	cs
   23b54:	2208      	movcs	r2, #8
   23b56:	f007 fb48 	bl	2b1ea <memcpy>
   23b5a:	e7b6      	b.n	23aca <nrf_setsockopt+0x8a>
   23b5c:	b17e      	cbz	r6, 23b7e <nrf_setsockopt+0x13e>
   23b5e:	2d08      	cmp	r5, #8
   23b60:	d184      	bne.n	23a6c <nrf_setsockopt+0x2c>
   23b62:	f7fe fdbd 	bl	226e0 <rpc_transport_data_rx_suspend>
   23b66:	e896 0003 	ldmia.w	r6, {r0, r1}
   23b6a:	f104 0334 	add.w	r3, r4, #52	; 0x34
   23b6e:	e883 0003 	stmia.w	r3, {r0, r1}
   23b72:	4620      	mov	r0, r4
   23b74:	f006 f8de 	bl	29d34 <sock_pollcb>
   23b78:	f7fe fdb8 	bl	226ec <rpc_transport_data_rx_resume>
   23b7c:	e7a5      	b.n	23aca <nrf_setsockopt+0x8a>
   23b7e:	2d00      	cmp	r5, #0
   23b80:	f47f af74 	bne.w	23a6c <nrf_setsockopt+0x2c>
   23b84:	6365      	str	r5, [r4, #52]	; 0x34
   23b86:	63a5      	str	r5, [r4, #56]	; 0x38
   23b88:	e79f      	b.n	23aca <nrf_setsockopt+0x8a>
   23b8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   23b8e:	6323      	str	r3, [r4, #48]	; 0x30
   23b90:	e79b      	b.n	23aca <nrf_setsockopt+0x8a>
   23b92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   23b96:	e7fa      	b.n	23b8e <nrf_setsockopt+0x14e>
   23b98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   23b9c:	e7f7      	b.n	23b8e <nrf_setsockopt+0x14e>
   23b9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23ba2:	e7f4      	b.n	23b8e <nrf_setsockopt+0x14e>
   23ba4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   23ba8:	6323      	str	r3, [r4, #48]	; 0x30
   23baa:	2300      	movs	r3, #0
   23bac:	4648      	mov	r0, r9
   23bae:	461a      	mov	r2, r3
   23bb0:	4619      	mov	r1, r3
   23bb2:	e9cd 3300 	strd	r3, r3, [sp]
   23bb6:	f7ff fe37 	bl	23828 <nrf_sendto>
   23bba:	e752      	b.n	23a62 <nrf_setsockopt+0x22>
   23bbc:	4630      	mov	r0, r6
   23bbe:	e7b1      	b.n	23b24 <nrf_setsockopt+0xe4>
   23bc0:	1e7b      	subs	r3, r7, #1
   23bc2:	2b11      	cmp	r3, #17
   23bc4:	f63f af64 	bhi.w	23a90 <nrf_setsockopt+0x50>
   23bc8:	a201      	add	r2, pc, #4	; (adr r2, 23bd0 <nrf_setsockopt+0x190>)
   23bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   23bce:	bf00      	nop
   23bd0:	00023c29 	.word	0x00023c29
   23bd4:	00023c59 	.word	0x00023c59
   23bd8:	00023b2f 	.word	0x00023b2f
   23bdc:	00023a91 	.word	0x00023a91
   23be0:	00023c49 	.word	0x00023c49
   23be4:	00023c19 	.word	0x00023c19
   23be8:	00023a91 	.word	0x00023a91
   23bec:	00023a91 	.word	0x00023a91
   23bf0:	00023a91 	.word	0x00023a91
   23bf4:	00023a91 	.word	0x00023a91
   23bf8:	00023a91 	.word	0x00023a91
   23bfc:	00023c39 	.word	0x00023c39
   23c00:	00023b2f 	.word	0x00023b2f
   23c04:	00023b2f 	.word	0x00023b2f
   23c08:	00023b2f 	.word	0x00023b2f
   23c0c:	00023a91 	.word	0x00023a91
   23c10:	00023b2f 	.word	0x00023b2f
   23c14:	00023b2f 	.word	0x00023b2f
   23c18:	462a      	mov	r2, r5
   23c1a:	4631      	mov	r1, r6
   23c1c:	4620      	mov	r0, r4
   23c1e:	b005      	add	sp, #20
   23c20:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23c24:	f006 bced 	b.w	2a602 <tls_setopt_role>
   23c28:	462a      	mov	r2, r5
   23c2a:	4631      	mov	r1, r6
   23c2c:	4620      	mov	r0, r4
   23c2e:	b005      	add	sp, #20
   23c30:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23c34:	f006 bcf9 	b.w	2a62a <tls_setopt_taglist>
   23c38:	462a      	mov	r2, r5
   23c3a:	4631      	mov	r1, r6
   23c3c:	4620      	mov	r0, r4
   23c3e:	b005      	add	sp, #20
   23c40:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23c44:	f006 bd06 	b.w	2a654 <tls_setopt_sess_cache>
   23c48:	462a      	mov	r2, r5
   23c4a:	4631      	mov	r1, r6
   23c4c:	4620      	mov	r0, r4
   23c4e:	b005      	add	sp, #20
   23c50:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23c54:	f006 bd10 	b.w	2a678 <tls_setopt_peer_verify>
   23c58:	462a      	mov	r2, r5
   23c5a:	4631      	mov	r1, r6
   23c5c:	4620      	mov	r0, r4
   23c5e:	b005      	add	sp, #20
   23c60:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23c64:	f006 bd17 	b.w	2a696 <tls_setopt_hostname>
   23c68:	2f37      	cmp	r7, #55	; 0x37
   23c6a:	f43f af60 	beq.w	23b2e <nrf_setsockopt+0xee>
   23c6e:	e70f      	b.n	23a90 <nrf_setsockopt+0x50>
   23c70:	2f1f      	cmp	r7, #31
   23c72:	e7fa      	b.n	23c6a <nrf_setsockopt+0x22a>
   23c74:	2f20      	cmp	r7, #32
   23c76:	e7f8      	b.n	23c6a <nrf_setsockopt+0x22a>
   23c78:	2300      	movs	r3, #0
   23c7a:	2208      	movs	r2, #8
   23c7c:	7243      	strb	r3, [r0, #9]
   23c7e:	7202      	strb	r2, [r0, #8]
   23c80:	7283      	strb	r3, [r0, #10]
   23c82:	72c3      	strb	r3, [r0, #11]
   23c84:	f8c0 9010 	str.w	r9, [r0, #16]
   23c88:	4640      	mov	r0, r8
   23c8a:	f006 fdb6 	bl	2a7fa <nrf_sol_to_rpc_sol>
   23c8e:	6160      	str	r0, [r4, #20]
   23c90:	4638      	mov	r0, r7
   23c92:	f000 f9b5 	bl	24000 <nrf_so_to_rpc_so>
   23c96:	4631      	mov	r1, r6
   23c98:	61a0      	str	r0, [r4, #24]
   23c9a:	462a      	mov	r2, r5
   23c9c:	6820      	ldr	r0, [r4, #0]
   23c9e:	f007 faa4 	bl	2b1ea <memcpy>
   23ca2:	4621      	mov	r1, r4
   23ca4:	f247 0003 	movw	r0, #28675	; 0x7003
   23ca8:	6065      	str	r5, [r4, #4]
   23caa:	f006 fddd 	bl	2a868 <req_forward>
   23cae:	2800      	cmp	r0, #0
   23cb0:	f43f af0b 	beq.w	23aca <nrf_setsockopt+0x8a>
   23cb4:	e6d1      	b.n	23a5a <nrf_setsockopt+0x1a>
   23cb6:	bf00      	nop
   23cb8:	0002e1ff 	.word	0x0002e1ff

00023cbc <nrf_getsockopt>:
   23cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23cc0:	9c08      	ldr	r4, [sp, #32]
   23cc2:	4681      	mov	r9, r0
   23cc4:	4688      	mov	r8, r1
   23cc6:	4617      	mov	r7, r2
   23cc8:	461e      	mov	r6, r3
   23cca:	f7ff fa3b 	bl	23144 <sock_find>
   23cce:	b930      	cbnz	r0, 23cde <nrf_getsockopt+0x22>
   23cd0:	2009      	movs	r0, #9
   23cd2:	f005 fa2e 	bl	29132 <nrf_modem_os_errno_set>
   23cd6:	f04f 30ff 	mov.w	r0, #4294967295
   23cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23cde:	b106      	cbz	r6, 23ce2 <nrf_getsockopt+0x26>
   23ce0:	b90c      	cbnz	r4, 23ce6 <nrf_getsockopt+0x2a>
   23ce2:	200e      	movs	r0, #14
   23ce4:	e7f5      	b.n	23cd2 <nrf_getsockopt+0x16>
   23ce6:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   23cea:	f000 8096 	beq.w	23e1a <nrf_getsockopt+0x15e>
   23cee:	dc0c      	bgt.n	23d0a <nrf_getsockopt+0x4e>
   23cf0:	f1b8 0f01 	cmp.w	r8, #1
   23cf4:	d011      	beq.n	23d1a <nrf_getsockopt+0x5e>
   23cf6:	f1b8 0f06 	cmp.w	r8, #6
   23cfa:	f000 8082 	beq.w	23e02 <nrf_getsockopt+0x146>
   23cfe:	f1b8 0f00 	cmp.w	r8, #0
   23d02:	f000 8088 	beq.w	23e16 <nrf_getsockopt+0x15a>
   23d06:	206d      	movs	r0, #109	; 0x6d
   23d08:	e7e3      	b.n	23cd2 <nrf_getsockopt+0x16>
   23d0a:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   23d0e:	d024      	beq.n	23d5a <nrf_getsockopt+0x9e>
   23d10:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   23d14:	d1f7      	bne.n	23d06 <nrf_getsockopt+0x4a>
   23d16:	2f1e      	cmp	r7, #30
   23d18:	e074      	b.n	23e04 <nrf_getsockopt+0x148>
   23d1a:	2f14      	cmp	r7, #20
   23d1c:	d00a      	beq.n	23d34 <nrf_getsockopt+0x78>
   23d1e:	2f15      	cmp	r7, #21
   23d20:	d013      	beq.n	23d4a <nrf_getsockopt+0x8e>
   23d22:	2f04      	cmp	r7, #4
   23d24:	d1ef      	bne.n	23d06 <nrf_getsockopt+0x4a>
   23d26:	6983      	ldr	r3, [r0, #24]
   23d28:	6027      	str	r7, [r4, #0]
   23d2a:	6033      	str	r3, [r6, #0]
   23d2c:	2300      	movs	r3, #0
   23d2e:	6183      	str	r3, [r0, #24]
   23d30:	2000      	movs	r0, #0
   23d32:	e7d2      	b.n	23cda <nrf_getsockopt+0x1e>
   23d34:	6822      	ldr	r2, [r4, #0]
   23d36:	f100 0120 	add.w	r1, r0, #32
   23d3a:	2a08      	cmp	r2, #8
   23d3c:	bf28      	it	cs
   23d3e:	2208      	movcs	r2, #8
   23d40:	6022      	str	r2, [r4, #0]
   23d42:	4630      	mov	r0, r6
   23d44:	f007 fa51 	bl	2b1ea <memcpy>
   23d48:	e7f2      	b.n	23d30 <nrf_getsockopt+0x74>
   23d4a:	6822      	ldr	r2, [r4, #0]
   23d4c:	f100 0128 	add.w	r1, r0, #40	; 0x28
   23d50:	2a08      	cmp	r2, #8
   23d52:	bf28      	it	cs
   23d54:	2208      	movcs	r2, #8
   23d56:	6022      	str	r2, [r4, #0]
   23d58:	e7f3      	b.n	23d42 <nrf_getsockopt+0x86>
   23d5a:	1e7b      	subs	r3, r7, #1
   23d5c:	2b12      	cmp	r3, #18
   23d5e:	d8d2      	bhi.n	23d06 <nrf_getsockopt+0x4a>
   23d60:	a201      	add	r2, pc, #4	; (adr r2, 23d68 <nrf_getsockopt+0xac>)
   23d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   23d66:	bf00      	nop
   23d68:	00023dd5 	.word	0x00023dd5
   23d6c:	00023deb 	.word	0x00023deb
   23d70:	00023e09 	.word	0x00023e09
   23d74:	00023e09 	.word	0x00023e09
   23d78:	00023dcb 	.word	0x00023dcb
   23d7c:	00023db5 	.word	0x00023db5
   23d80:	00023d07 	.word	0x00023d07
   23d84:	00023d07 	.word	0x00023d07
   23d88:	00023d07 	.word	0x00023d07
   23d8c:	00023d07 	.word	0x00023d07
   23d90:	00023d07 	.word	0x00023d07
   23d94:	00023dc1 	.word	0x00023dc1
   23d98:	00023d07 	.word	0x00023d07
   23d9c:	00023e09 	.word	0x00023e09
   23da0:	00023e09 	.word	0x00023e09
   23da4:	00023e09 	.word	0x00023e09
   23da8:	00023d07 	.word	0x00023d07
   23dac:	00023d07 	.word	0x00023d07
   23db0:	00023e09 	.word	0x00023e09
   23db4:	2304      	movs	r3, #4
   23db6:	6023      	str	r3, [r4, #0]
   23db8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
   23dbc:	6033      	str	r3, [r6, #0]
   23dbe:	e7b7      	b.n	23d30 <nrf_getsockopt+0x74>
   23dc0:	2304      	movs	r3, #4
   23dc2:	6023      	str	r3, [r4, #0]
   23dc4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
   23dc8:	e7f8      	b.n	23dbc <nrf_getsockopt+0x100>
   23dca:	2304      	movs	r3, #4
   23dcc:	6023      	str	r3, [r4, #0]
   23dce:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
   23dd2:	e7f3      	b.n	23dbc <nrf_getsockopt+0x100>
   23dd4:	f890 2047 	ldrb.w	r2, [r0, #71]	; 0x47
   23dd8:	6823      	ldr	r3, [r4, #0]
   23dda:	0092      	lsls	r2, r2, #2
   23ddc:	429a      	cmp	r2, r3
   23dde:	bf28      	it	cs
   23de0:	461a      	movcs	r2, r3
   23de2:	f100 0148 	add.w	r1, r0, #72	; 0x48
   23de6:	6022      	str	r2, [r4, #0]
   23de8:	e7ab      	b.n	23d42 <nrf_getsockopt+0x86>
   23dea:	6c05      	ldr	r5, [r0, #64]	; 0x40
   23dec:	4628      	mov	r0, r5
   23dee:	f7f5 f94d 	bl	1908c <strlen>
   23df2:	6823      	ldr	r3, [r4, #0]
   23df4:	1c42      	adds	r2, r0, #1
   23df6:	429a      	cmp	r2, r3
   23df8:	bf28      	it	cs
   23dfa:	461a      	movcs	r2, r3
   23dfc:	4629      	mov	r1, r5
   23dfe:	6022      	str	r2, [r4, #0]
   23e00:	e79f      	b.n	23d42 <nrf_getsockopt+0x86>
   23e02:	2f37      	cmp	r7, #55	; 0x37
   23e04:	f47f af7f 	bne.w	23d06 <nrf_getsockopt+0x4a>
   23e08:	6820      	ldr	r0, [r4, #0]
   23e0a:	f005 ff26 	bl	29c5a <rpc_client_msg_alloc>
   23e0e:	4605      	mov	r5, r0
   23e10:	b928      	cbnz	r0, 23e1e <nrf_getsockopt+0x162>
   23e12:	2069      	movs	r0, #105	; 0x69
   23e14:	e75d      	b.n	23cd2 <nrf_getsockopt+0x16>
   23e16:	2f1f      	cmp	r7, #31
   23e18:	e7f4      	b.n	23e04 <nrf_getsockopt+0x148>
   23e1a:	2f20      	cmp	r7, #32
   23e1c:	e7f2      	b.n	23e04 <nrf_getsockopt+0x148>
   23e1e:	2300      	movs	r3, #0
   23e20:	2208      	movs	r2, #8
   23e22:	7243      	strb	r3, [r0, #9]
   23e24:	7202      	strb	r2, [r0, #8]
   23e26:	7283      	strb	r3, [r0, #10]
   23e28:	72c3      	strb	r3, [r0, #11]
   23e2a:	f8c0 9010 	str.w	r9, [r0, #16]
   23e2e:	4640      	mov	r0, r8
   23e30:	f006 fce3 	bl	2a7fa <nrf_sol_to_rpc_sol>
   23e34:	6168      	str	r0, [r5, #20]
   23e36:	4638      	mov	r0, r7
   23e38:	f000 f8e2 	bl	24000 <nrf_so_to_rpc_so>
   23e3c:	4629      	mov	r1, r5
   23e3e:	61a8      	str	r0, [r5, #24]
   23e40:	f247 0004 	movw	r0, #28676	; 0x7004
   23e44:	f8d5 8000 	ldr.w	r8, [r5]
   23e48:	f006 fd0e 	bl	2a868 <req_forward>
   23e4c:	4607      	mov	r7, r0
   23e4e:	b120      	cbz	r0, 23e5a <nrf_getsockopt+0x19e>
   23e50:	4640      	mov	r0, r8
   23e52:	f005 ff2e 	bl	29cb2 <rpc_client_msg_data_tx_free>
   23e56:	4638      	mov	r0, r7
   23e58:	e73b      	b.n	23cd2 <nrf_getsockopt+0x16>
   23e5a:	686a      	ldr	r2, [r5, #4]
   23e5c:	6823      	ldr	r3, [r4, #0]
   23e5e:	4641      	mov	r1, r8
   23e60:	429a      	cmp	r2, r3
   23e62:	bf28      	it	cs
   23e64:	461a      	movcs	r2, r3
   23e66:	4630      	mov	r0, r6
   23e68:	6022      	str	r2, [r4, #0]
   23e6a:	f007 f9be 	bl	2b1ea <memcpy>
   23e6e:	4640      	mov	r0, r8
   23e70:	f005 ff1f 	bl	29cb2 <rpc_client_msg_data_tx_free>
   23e74:	e75c      	b.n	23d30 <nrf_getsockopt+0x74>
   23e76:	bf00      	nop

00023e78 <rpc_ip_init>:
   23e78:	b508      	push	{r3, lr}
   23e7a:	f7ff f921 	bl	230c0 <sock_init>
   23e7e:	f7ff f9e9 	bl	23254 <addrinfo_init>
   23e82:	2200      	movs	r2, #0
   23e84:	4b05      	ldr	r3, [pc, #20]	; (23e9c <rpc_ip_init+0x24>)
   23e86:	4806      	ldr	r0, [pc, #24]	; (23ea0 <rpc_ip_init+0x28>)
   23e88:	701a      	strb	r2, [r3, #0]
   23e8a:	2201      	movs	r2, #1
   23e8c:	4611      	mov	r1, r2
   23e8e:	f7fa ffbd 	bl	1ee0c <nrf_modem_os_sem_init>
   23e92:	2800      	cmp	r0, #0
   23e94:	bf18      	it	ne
   23e96:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   23e9a:	bd08      	pop	{r3, pc}
   23e9c:	2000eaf4 	.word	0x2000eaf4
   23ea0:	2000dd00 	.word	0x2000dd00

00023ea4 <on_tls_attach_res>:
   23ea4:	b510      	push	{r4, lr}
   23ea6:	6943      	ldr	r3, [r0, #20]
   23ea8:	460c      	mov	r4, r1
   23eaa:	b15b      	cbz	r3, 23ec4 <on_tls_attach_res+0x20>
   23eac:	7f0b      	ldrb	r3, [r1, #28]
   23eae:	f36f 1304 	bfc	r3, #4, #1
   23eb2:	770b      	strb	r3, [r1, #28]
   23eb4:	6940      	ldr	r0, [r0, #20]
   23eb6:	f000 f8af 	bl	24018 <rpc_error_to_nrf_errno>
   23eba:	4b03      	ldr	r3, [pc, #12]	; (23ec8 <on_tls_attach_res+0x24>)
   23ebc:	61a0      	str	r0, [r4, #24]
   23ebe:	6818      	ldr	r0, [r3, #0]
   23ec0:	f005 f93f 	bl	29142 <nrf_modem_os_sem_give>
   23ec4:	2000      	movs	r0, #0
   23ec6:	bd10      	pop	{r4, pc}
   23ec8:	2000dd00 	.word	0x2000dd00

00023ecc <on_tls_handshake_ntf>:
   23ecc:	b510      	push	{r4, lr}
   23ece:	7f0b      	ldrb	r3, [r1, #28]
   23ed0:	460c      	mov	r4, r1
   23ed2:	f36f 1304 	bfc	r3, #4, #1
   23ed6:	770b      	strb	r3, [r1, #28]
   23ed8:	6900      	ldr	r0, [r0, #16]
   23eda:	b958      	cbnz	r0, 23ef4 <on_tls_handshake_ntf+0x28>
   23edc:	b2db      	uxtb	r3, r3
   23ede:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   23ee2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   23ee6:	770b      	strb	r3, [r1, #28]
   23ee8:	4b04      	ldr	r3, [pc, #16]	; (23efc <on_tls_handshake_ntf+0x30>)
   23eea:	6818      	ldr	r0, [r3, #0]
   23eec:	f005 f929 	bl	29142 <nrf_modem_os_sem_give>
   23ef0:	2000      	movs	r0, #0
   23ef2:	bd10      	pop	{r4, pc}
   23ef4:	f000 f890 	bl	24018 <rpc_error_to_nrf_errno>
   23ef8:	61a0      	str	r0, [r4, #24]
   23efa:	e7f5      	b.n	23ee8 <on_tls_handshake_ntf+0x1c>
   23efc:	2000dd00 	.word	0x2000dd00

00023f00 <tls_attach>:
   23f00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23f04:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 23fec <tls_attach+0xec>
   23f08:	4605      	mov	r5, r0
   23f0a:	f8d8 0000 	ldr.w	r0, [r8]
   23f0e:	9101      	str	r1, [sp, #4]
   23f10:	f005 f919 	bl	29146 <nrf_modem_os_sem_take>
   23f14:	4607      	mov	r7, r0
   23f16:	b150      	cbz	r0, 23f2e <tls_attach+0x2e>
   23f18:	9b01      	ldr	r3, [sp, #4]
   23f1a:	2b00      	cmp	r3, #0
   23f1c:	d163      	bne.n	23fe6 <tls_attach+0xe6>
   23f1e:	2310      	movs	r3, #16
   23f20:	61ab      	str	r3, [r5, #24]
   23f22:	f04f 37ff 	mov.w	r7, #4294967295
   23f26:	4638      	mov	r0, r7
   23f28:	b002      	add	sp, #8
   23f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23f2e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   23f30:	b1a8      	cbz	r0, 23f5e <tls_attach+0x5e>
   23f32:	f7f5 f8ab 	bl	1908c <strlen>
   23f36:	1c46      	adds	r6, r0, #1
   23f38:	4630      	mov	r0, r6
   23f3a:	f005 fe8e 	bl	29c5a <rpc_client_msg_alloc>
   23f3e:	4604      	mov	r4, r0
   23f40:	b978      	cbnz	r0, 23f62 <tls_attach+0x62>
   23f42:	4628      	mov	r0, r5
   23f44:	f005 ff5a 	bl	29dfc <sock_is_nonblock>
   23f48:	b108      	cbz	r0, 23f4e <tls_attach+0x4e>
   23f4a:	2369      	movs	r3, #105	; 0x69
   23f4c:	61ab      	str	r3, [r5, #24]
   23f4e:	f8d8 0000 	ldr.w	r0, [r8]
   23f52:	f005 f8f6 	bl	29142 <nrf_modem_os_sem_give>
   23f56:	2069      	movs	r0, #105	; 0x69
   23f58:	f005 f8eb 	bl	29132 <nrf_modem_os_errno_set>
   23f5c:	e7e1      	b.n	23f22 <tls_attach+0x22>
   23f5e:	463e      	mov	r6, r7
   23f60:	e7ea      	b.n	23f38 <tls_attach+0x38>
   23f62:	682b      	ldr	r3, [r5, #0]
   23f64:	2204      	movs	r2, #4
   23f66:	6103      	str	r3, [r0, #16]
   23f68:	2300      	movs	r3, #0
   23f6a:	7202      	strb	r2, [r0, #8]
   23f6c:	7243      	strb	r3, [r0, #9]
   23f6e:	7283      	strb	r3, [r0, #10]
   23f70:	72c3      	strb	r3, [r0, #11]
   23f72:	f895 2047 	ldrb.w	r2, [r5, #71]	; 0x47
   23f76:	f105 0144 	add.w	r1, r5, #68	; 0x44
   23f7a:	3201      	adds	r2, #1
   23f7c:	0092      	lsls	r2, r2, #2
   23f7e:	6082      	str	r2, [r0, #8]
   23f80:	3014      	adds	r0, #20
   23f82:	f007 f932 	bl	2b1ea <memcpy>
   23f86:	b1e6      	cbz	r6, 23fc2 <tls_attach+0xc2>
   23f88:	4632      	mov	r2, r6
   23f8a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   23f8c:	6820      	ldr	r0, [r4, #0]
   23f8e:	f007 f9ad 	bl	2b2ec <strncpy>
   23f92:	6066      	str	r6, [r4, #4]
   23f94:	7f2b      	ldrb	r3, [r5, #28]
   23f96:	2004      	movs	r0, #4
   23f98:	f043 0310 	orr.w	r3, r3, #16
   23f9c:	4622      	mov	r2, r4
   23f9e:	f247 0181 	movw	r1, #28801	; 0x7081
   23fa2:	772b      	strb	r3, [r5, #28]
   23fa4:	f005 fe75 	bl	29c92 <rpc_client_msg_send>
   23fa8:	4628      	mov	r0, r5
   23faa:	f005 ff27 	bl	29dfc <sock_is_nonblock>
   23fae:	2800      	cmp	r0, #0
   23fb0:	d1b9      	bne.n	23f26 <tls_attach+0x26>
   23fb2:	4628      	mov	r0, r5
   23fb4:	f005 ff1e 	bl	29df4 <sock_is_attaching>
   23fb8:	b940      	cbnz	r0, 23fcc <tls_attach+0xcc>
   23fba:	69a8      	ldr	r0, [r5, #24]
   23fbc:	2800      	cmp	r0, #0
   23fbe:	d0b2      	beq.n	23f26 <tls_attach+0x26>
   23fc0:	e7ca      	b.n	23f58 <tls_attach+0x58>
   23fc2:	7026      	strb	r6, [r4, #0]
   23fc4:	7066      	strb	r6, [r4, #1]
   23fc6:	70a6      	strb	r6, [r4, #2]
   23fc8:	70e6      	strb	r6, [r4, #3]
   23fca:	e7e2      	b.n	23f92 <tls_attach+0x92>
   23fcc:	2002      	movs	r0, #2
   23fce:	a901      	add	r1, sp, #4
   23fd0:	f7fa fe5a 	bl	1ec88 <nrf_modem_os_timedwait>
   23fd4:	f110 0f0b 	cmn.w	r0, #11
   23fd8:	d005      	beq.n	23fe6 <tls_attach+0xe6>
   23fda:	2800      	cmp	r0, #0
   23fdc:	d0e9      	beq.n	23fb2 <tls_attach+0xb2>
   23fde:	2800      	cmp	r0, #0
   23fe0:	bfb8      	it	lt
   23fe2:	4240      	neglt	r0, r0
   23fe4:	e7b8      	b.n	23f58 <tls_attach+0x58>
   23fe6:	2074      	movs	r0, #116	; 0x74
   23fe8:	e7b6      	b.n	23f58 <tls_attach+0x58>
   23fea:	bf00      	nop
   23fec:	2000dd00 	.word	0x2000dd00

00023ff0 <nrf_af_to_rpc_af>:
   23ff0:	2803      	cmp	r0, #3
   23ff2:	bf9c      	itt	ls
   23ff4:	4b01      	ldrls	r3, [pc, #4]	; (23ffc <nrf_af_to_rpc_af+0xc>)
   23ff6:	5618      	ldrsbls	r0, [r3, r0]
   23ff8:	4770      	bx	lr
   23ffa:	bf00      	nop
   23ffc:	0002e903 	.word	0x0002e903

00024000 <nrf_so_to_rpc_so>:
   24000:	3802      	subs	r0, #2
   24002:	2835      	cmp	r0, #53	; 0x35
   24004:	bf9a      	itte	ls
   24006:	4b03      	ldrls	r3, [pc, #12]	; (24014 <nrf_so_to_rpc_so+0x14>)
   24008:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   2400c:	f04f 30ff 	movhi.w	r0, #4294967295
   24010:	4770      	bx	lr
   24012:	bf00      	nop
   24014:	0002ca34 	.word	0x0002ca34

00024018 <rpc_error_to_nrf_errno>:
   24018:	2870      	cmp	r0, #112	; 0x70
   2401a:	bf9a      	itte	ls
   2401c:	4b02      	ldrls	r3, [pc, #8]	; (24028 <rpc_error_to_nrf_errno+0x10>)
   2401e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   24022:	4802      	ldrhi	r0, [pc, #8]	; (2402c <rpc_error_to_nrf_errno+0x14>)
   24024:	4770      	bx	lr
   24026:	bf00      	nop
   24028:	0002c870 	.word	0x0002c870
   2402c:	baadbaad 	.word	0xbaadbaad

00024030 <rpc_gnss_event_handler>:
   24030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24032:	6804      	ldr	r4, [r0, #0]
   24034:	4606      	mov	r6, r0
   24036:	b13c      	cbz	r4, 24048 <rpc_gnss_event_handler+0x18>
   24038:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   2403c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   24040:	d104      	bne.n	2404c <rpc_gnss_event_handler+0x1c>
   24042:	4b41      	ldr	r3, [pc, #260]	; (24148 <rpc_gnss_event_handler+0x118>)
   24044:	e9c3 1400 	strd	r1, r4, [r3]
   24048:	2000      	movs	r0, #0
   2404a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2404c:	4d3f      	ldr	r5, [pc, #252]	; (2414c <rpc_gnss_event_handler+0x11c>)
   2404e:	682b      	ldr	r3, [r5, #0]
   24050:	2b00      	cmp	r3, #0
   24052:	d06f      	beq.n	24134 <rpc_gnss_event_handler+0x104>
   24054:	f244 0204 	movw	r2, #16388	; 0x4004
   24058:	4291      	cmp	r1, r2
   2405a:	d80b      	bhi.n	24074 <rpc_gnss_event_handler+0x44>
   2405c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   24060:	d968      	bls.n	24134 <rpc_gnss_event_handler+0x104>
   24062:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
   24066:	3902      	subs	r1, #2
   24068:	2902      	cmp	r1, #2
   2406a:	d82a      	bhi.n	240c2 <rpc_gnss_event_handler+0x92>
   2406c:	e8df f001 	tbb	[pc, r1]
   24070:	5047      	.short	0x5047
   24072:	59          	.byte	0x59
   24073:	00          	.byte	0x00
   24074:	f244 1301 	movw	r3, #16641	; 0x4101
   24078:	4299      	cmp	r1, r3
   2407a:	d02e      	beq.n	240da <rpc_gnss_event_handler+0xaa>
   2407c:	f244 2301 	movw	r3, #16897	; 0x4201
   24080:	4299      	cmp	r1, r3
   24082:	d157      	bne.n	24134 <rpc_gnss_event_handler+0x104>
   24084:	4e32      	ldr	r6, [pc, #200]	; (24150 <rpc_gnss_event_handler+0x120>)
   24086:	6830      	ldr	r0, [r6, #0]
   24088:	b108      	cbz	r0, 2408e <rpc_gnss_event_handler+0x5e>
   2408a:	f005 fe0c 	bl	29ca6 <rpc_client_msg_data_rx_free>
   2408e:	2202      	movs	r2, #2
   24090:	4b30      	ldr	r3, [pc, #192]	; (24154 <rpc_gnss_event_handler+0x124>)
   24092:	6034      	str	r4, [r6, #0]
   24094:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   24098:	701a      	strb	r2, [r3, #0]
   2409a:	4e2f      	ldr	r6, [pc, #188]	; (24158 <rpc_gnss_event_handler+0x128>)
   2409c:	f014 0708 	ands.w	r7, r4, #8
   240a0:	682b      	ldr	r3, [r5, #0]
   240a2:	7832      	ldrb	r2, [r6, #0]
   240a4:	d025      	beq.n	240f2 <rpc_gnss_event_handler+0xc2>
   240a6:	b91a      	cbnz	r2, 240b0 <rpc_gnss_event_handler+0x80>
   240a8:	2005      	movs	r0, #5
   240aa:	4798      	blx	r3
   240ac:	2301      	movs	r3, #1
   240ae:	7033      	strb	r3, [r6, #0]
   240b0:	07e3      	lsls	r3, r4, #31
   240b2:	d502      	bpl.n	240ba <rpc_gnss_event_handler+0x8a>
   240b4:	2002      	movs	r0, #2
   240b6:	682b      	ldr	r3, [r5, #0]
   240b8:	4798      	blx	r3
   240ba:	2001      	movs	r0, #1
   240bc:	682b      	ldr	r3, [r5, #0]
   240be:	4798      	blx	r3
   240c0:	e7c2      	b.n	24048 <rpc_gnss_event_handler+0x18>
   240c2:	4e23      	ldr	r6, [pc, #140]	; (24150 <rpc_gnss_event_handler+0x120>)
   240c4:	6830      	ldr	r0, [r6, #0]
   240c6:	b108      	cbz	r0, 240cc <rpc_gnss_event_handler+0x9c>
   240c8:	f005 fded 	bl	29ca6 <rpc_client_msg_data_rx_free>
   240cc:	2200      	movs	r2, #0
   240ce:	4b21      	ldr	r3, [pc, #132]	; (24154 <rpc_gnss_event_handler+0x124>)
   240d0:	6034      	str	r4, [r6, #0]
   240d2:	701a      	strb	r2, [r3, #0]
   240d4:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
   240d8:	e7df      	b.n	2409a <rpc_gnss_event_handler+0x6a>
   240da:	4e1d      	ldr	r6, [pc, #116]	; (24150 <rpc_gnss_event_handler+0x120>)
   240dc:	6830      	ldr	r0, [r6, #0]
   240de:	b108      	cbz	r0, 240e4 <rpc_gnss_event_handler+0xb4>
   240e0:	f005 fde1 	bl	29ca6 <rpc_client_msg_data_rx_free>
   240e4:	2201      	movs	r2, #1
   240e6:	4b1b      	ldr	r3, [pc, #108]	; (24154 <rpc_gnss_event_handler+0x124>)
   240e8:	6034      	str	r4, [r6, #0]
   240ea:	701a      	strb	r2, [r3, #0]
   240ec:	f894 4041 	ldrb.w	r4, [r4, #65]	; 0x41
   240f0:	e7d3      	b.n	2409a <rpc_gnss_event_handler+0x6a>
   240f2:	2a00      	cmp	r2, #0
   240f4:	d0dc      	beq.n	240b0 <rpc_gnss_event_handler+0x80>
   240f6:	2006      	movs	r0, #6
   240f8:	4798      	blx	r3
   240fa:	7037      	strb	r7, [r6, #0]
   240fc:	e7d8      	b.n	240b0 <rpc_gnss_event_handler+0x80>
   240fe:	4e17      	ldr	r6, [pc, #92]	; (2415c <rpc_gnss_event_handler+0x12c>)
   24100:	6830      	ldr	r0, [r6, #0]
   24102:	b108      	cbz	r0, 24108 <rpc_gnss_event_handler+0xd8>
   24104:	f005 fdcf 	bl	29ca6 <rpc_client_msg_data_rx_free>
   24108:	2003      	movs	r0, #3
   2410a:	682b      	ldr	r3, [r5, #0]
   2410c:	6034      	str	r4, [r6, #0]
   2410e:	e7d6      	b.n	240be <rpc_gnss_event_handler+0x8e>
   24110:	4e13      	ldr	r6, [pc, #76]	; (24160 <rpc_gnss_event_handler+0x130>)
   24112:	6830      	ldr	r0, [r6, #0]
   24114:	b108      	cbz	r0, 2411a <rpc_gnss_event_handler+0xea>
   24116:	f005 fdc6 	bl	29ca6 <rpc_client_msg_data_rx_free>
   2411a:	2004      	movs	r0, #4
   2411c:	682b      	ldr	r3, [r5, #0]
   2411e:	6034      	str	r4, [r6, #0]
   24120:	e7cd      	b.n	240be <rpc_gnss_event_handler+0x8e>
   24122:	7822      	ldrb	r2, [r4, #0]
   24124:	2a03      	cmp	r2, #3
   24126:	d805      	bhi.n	24134 <rpc_gnss_event_handler+0x104>
   24128:	e8df f002 	tbb	[pc, r2]
   2412c:	0c0a0802 	.word	0x0c0a0802
   24130:	2007      	movs	r0, #7
   24132:	4798      	blx	r3
   24134:	6830      	ldr	r0, [r6, #0]
   24136:	f005 fdb6 	bl	29ca6 <rpc_client_msg_data_rx_free>
   2413a:	e785      	b.n	24048 <rpc_gnss_event_handler+0x18>
   2413c:	2008      	movs	r0, #8
   2413e:	e7f8      	b.n	24132 <rpc_gnss_event_handler+0x102>
   24140:	2009      	movs	r0, #9
   24142:	e7f6      	b.n	24132 <rpc_gnss_event_handler+0x102>
   24144:	200a      	movs	r0, #10
   24146:	e7f4      	b.n	24132 <rpc_gnss_event_handler+0x102>
   24148:	2000dd14 	.word	0x2000dd14
   2414c:	2000dd04 	.word	0x2000dd04
   24150:	2000dd10 	.word	0x2000dd10
   24154:	2000eaf5 	.word	0x2000eaf5
   24158:	2000eaf6 	.word	0x2000eaf6
   2415c:	2000dd0c 	.word	0x2000dd0c
   24160:	2000dd08 	.word	0x2000dd08

00024164 <rpc_gnss_init>:
   24164:	b508      	push	{r3, lr}
   24166:	2300      	movs	r3, #0
   24168:	4a09      	ldr	r2, [pc, #36]	; (24190 <rpc_gnss_init+0x2c>)
   2416a:	480a      	ldr	r0, [pc, #40]	; (24194 <rpc_gnss_init+0x30>)
   2416c:	7013      	strb	r3, [r2, #0]
   2416e:	4a0a      	ldr	r2, [pc, #40]	; (24198 <rpc_gnss_init+0x34>)
   24170:	7013      	strb	r3, [r2, #0]
   24172:	4a0a      	ldr	r2, [pc, #40]	; (2419c <rpc_gnss_init+0x38>)
   24174:	7013      	strb	r3, [r2, #0]
   24176:	4a0a      	ldr	r2, [pc, #40]	; (241a0 <rpc_gnss_init+0x3c>)
   24178:	7013      	strb	r3, [r2, #0]
   2417a:	4a0a      	ldr	r2, [pc, #40]	; (241a4 <rpc_gnss_init+0x40>)
   2417c:	6013      	str	r3, [r2, #0]
   2417e:	2201      	movs	r2, #1
   24180:	4611      	mov	r1, r2
   24182:	f7fa fe43 	bl	1ee0c <nrf_modem_os_sem_init>
   24186:	2800      	cmp	r0, #0
   24188:	bf18      	it	ne
   2418a:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   2418e:	bd08      	pop	{r3, pc}
   24190:	2000eaf6 	.word	0x2000eaf6
   24194:	2000dd1c 	.word	0x2000dd1c
   24198:	2000eaf8 	.word	0x2000eaf8
   2419c:	2000eaf7 	.word	0x2000eaf7
   241a0:	2000eaf5 	.word	0x2000eaf5
   241a4:	2000dd04 	.word	0x2000dd04

000241a8 <rpc_gnss_deinit>:
   241a8:	b510      	push	{r4, lr}
   241aa:	4c0b      	ldr	r4, [pc, #44]	; (241d8 <rpc_gnss_deinit+0x30>)
   241ac:	6820      	ldr	r0, [r4, #0]
   241ae:	b118      	cbz	r0, 241b8 <rpc_gnss_deinit+0x10>
   241b0:	f005 fd79 	bl	29ca6 <rpc_client_msg_data_rx_free>
   241b4:	2300      	movs	r3, #0
   241b6:	6023      	str	r3, [r4, #0]
   241b8:	4c08      	ldr	r4, [pc, #32]	; (241dc <rpc_gnss_deinit+0x34>)
   241ba:	6820      	ldr	r0, [r4, #0]
   241bc:	b118      	cbz	r0, 241c6 <rpc_gnss_deinit+0x1e>
   241be:	f005 fd72 	bl	29ca6 <rpc_client_msg_data_rx_free>
   241c2:	2300      	movs	r3, #0
   241c4:	6023      	str	r3, [r4, #0]
   241c6:	4c06      	ldr	r4, [pc, #24]	; (241e0 <rpc_gnss_deinit+0x38>)
   241c8:	6820      	ldr	r0, [r4, #0]
   241ca:	b118      	cbz	r0, 241d4 <rpc_gnss_deinit+0x2c>
   241cc:	f005 fd6b 	bl	29ca6 <rpc_client_msg_data_rx_free>
   241d0:	2300      	movs	r3, #0
   241d2:	6023      	str	r3, [r4, #0]
   241d4:	2000      	movs	r0, #0
   241d6:	bd10      	pop	{r4, pc}
   241d8:	2000dd10 	.word	0x2000dd10
   241dc:	2000dd0c 	.word	0x2000dd0c
   241e0:	2000dd08 	.word	0x2000dd08

000241e4 <modem_off>:
   241e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   241e6:	2501      	movs	r5, #1
   241e8:	4c07      	ldr	r4, [pc, #28]	; (24208 <modem_off+0x24>)
   241ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   241ee:	6165      	str	r5, [r4, #20]
   241f0:	f004 ff9d 	bl	2912e <nrf_modem_os_busywait>
   241f4:	2300      	movs	r3, #0
   241f6:	6163      	str	r3, [r4, #20]
   241f8:	9301      	str	r3, [sp, #4]
   241fa:	6125      	str	r5, [r4, #16]
   241fc:	6923      	ldr	r3, [r4, #16]
   241fe:	9301      	str	r3, [sp, #4]
   24200:	9b01      	ldr	r3, [sp, #4]
   24202:	b003      	add	sp, #12
   24204:	bd30      	pop	{r4, r5, pc}
   24206:	bf00      	nop
   24208:	40005600 	.word	0x40005600

0002420c <atomic_set.constprop.0.isra.0>:
   2420c:	4b03      	ldr	r3, [pc, #12]	; (2421c <atomic_set.constprop.0.isra.0+0x10>)
   2420e:	e8d3 2fef 	ldaex	r2, [r3]
   24212:	e8c3 0fe1 	stlex	r1, r0, [r3]
   24216:	2900      	cmp	r1, #0
   24218:	d1f9      	bne.n	2420e <atomic_set.constprop.0.isra.0+0x2>
   2421a:	4770      	bx	lr
   2421c:	2000dd20 	.word	0x2000dd20

00024220 <nrf_modem_init>:
   24220:	b570      	push	{r4, r5, r6, lr}
   24222:	4604      	mov	r4, r0
   24224:	b086      	sub	sp, #24
   24226:	b390      	cbz	r0, 2428e <nrf_modem_init+0x6e>
   24228:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2422a:	b3ab      	cbz	r3, 24298 <nrf_modem_init+0x78>
   2422c:	2201      	movs	r2, #1
   2422e:	4b1d      	ldr	r3, [pc, #116]	; (242a4 <nrf_modem_init+0x84>)
   24230:	e8d3 1fef 	ldaex	r1, [r3]
   24234:	2900      	cmp	r1, #0
   24236:	d103      	bne.n	24240 <nrf_modem_init+0x20>
   24238:	e8c3 2fe0 	stlex	r0, r2, [r3]
   2423c:	2800      	cmp	r0, #0
   2423e:	d1f7      	bne.n	24230 <nrf_modem_init+0x10>
   24240:	d12d      	bne.n	2429e <nrf_modem_init+0x7e>
   24242:	6a60      	ldr	r0, [r4, #36]	; 0x24
   24244:	f000 f832 	bl	242ac <nrf_modem_fault_handler_set>
   24248:	f7fa fe34 	bl	1eeb4 <nrf_modem_os_init>
   2424c:	6a23      	ldr	r3, [r4, #32]
   2424e:	ad02      	add	r5, sp, #8
   24250:	f88d 3004 	strb.w	r3, [sp, #4]
   24254:	4b14      	ldr	r3, [pc, #80]	; (242a8 <nrf_modem_init+0x88>)
   24256:	9400      	str	r4, [sp, #0]
   24258:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2425a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   2425e:	4668      	mov	r0, sp
   24260:	f005 fcba 	bl	29bd8 <rpc_init>
   24264:	4604      	mov	r4, r0
   24266:	b950      	cbnz	r0, 2427e <nrf_modem_init+0x5e>
   24268:	4606      	mov	r6, r0
   2426a:	f855 3b04 	ldr.w	r3, [r5], #4
   2426e:	4798      	blx	r3
   24270:	4604      	mov	r4, r0
   24272:	b920      	cbnz	r0, 2427e <nrf_modem_init+0x5e>
   24274:	3601      	adds	r6, #1
   24276:	2e04      	cmp	r6, #4
   24278:	d1f7      	bne.n	2426a <nrf_modem_init+0x4a>
   2427a:	2002      	movs	r0, #2
   2427c:	e004      	b.n	24288 <nrf_modem_init+0x68>
   2427e:	f7ff ffb1 	bl	241e4 <modem_off>
   24282:	f7fa fe2f 	bl	1eee4 <nrf_modem_os_shutdown>
   24286:	2000      	movs	r0, #0
   24288:	f7ff ffc0 	bl	2420c <atomic_set.constprop.0.isra.0>
   2428c:	e001      	b.n	24292 <nrf_modem_init+0x72>
   2428e:	f06f 040d 	mvn.w	r4, #13
   24292:	4620      	mov	r0, r4
   24294:	b006      	add	sp, #24
   24296:	bd70      	pop	{r4, r5, r6, pc}
   24298:	f06f 0415 	mvn.w	r4, #21
   2429c:	e7f9      	b.n	24292 <nrf_modem_init+0x72>
   2429e:	f04f 34ff 	mov.w	r4, #4294967295
   242a2:	e7f6      	b.n	24292 <nrf_modem_init+0x72>
   242a4:	2000dd20 	.word	0x2000dd20
   242a8:	0002bf14 	.word	0x0002bf14

000242ac <nrf_modem_fault_handler_set>:
   242ac:	4b01      	ldr	r3, [pc, #4]	; (242b4 <nrf_modem_fault_handler_set+0x8>)
   242ae:	6018      	str	r0, [r3, #0]
   242b0:	4770      	bx	lr
   242b2:	bf00      	nop
   242b4:	2000dd24 	.word	0x2000dd24

000242b8 <nrf_modem_fault_handler_internal>:
   242b8:	b507      	push	{r0, r1, r2, lr}
   242ba:	4b04      	ldr	r3, [pc, #16]	; (242cc <nrf_modem_fault_handler_internal+0x14>)
   242bc:	e9cd 0100 	strd	r0, r1, [sp]
   242c0:	681b      	ldr	r3, [r3, #0]
   242c2:	4668      	mov	r0, sp
   242c4:	4798      	blx	r3
   242c6:	b003      	add	sp, #12
   242c8:	f85d fb04 	ldr.w	pc, [sp], #4
   242cc:	2000dd24 	.word	0x2000dd24

000242d0 <nrf_modem_state_set>:
   242d0:	4b01      	ldr	r3, [pc, #4]	; (242d8 <nrf_modem_state_set+0x8>)
   242d2:	7018      	strb	r0, [r3, #0]
   242d4:	4770      	bx	lr
   242d6:	bf00      	nop
   242d8:	2000eaf9 	.word	0x2000eaf9

000242dc <nrf_modem_state_is_initialized>:
   242dc:	4b02      	ldr	r3, [pc, #8]	; (242e8 <nrf_modem_state_is_initialized+0xc>)
   242de:	7818      	ldrb	r0, [r3, #0]
   242e0:	1e43      	subs	r3, r0, #1
   242e2:	4258      	negs	r0, r3
   242e4:	4158      	adcs	r0, r3
   242e6:	4770      	bx	lr
   242e8:	2000eaf9 	.word	0x2000eaf9

000242ec <ipc_trace_init>:
   242ec:	2100      	movs	r1, #0
   242ee:	4b07      	ldr	r3, [pc, #28]	; (2430c <ipc_trace_init+0x20>)
   242f0:	2201      	movs	r2, #1
   242f2:	7019      	strb	r1, [r3, #0]
   242f4:	4b06      	ldr	r3, [pc, #24]	; (24310 <ipc_trace_init+0x24>)
   242f6:	7019      	strb	r1, [r3, #0]
   242f8:	4b06      	ldr	r3, [pc, #24]	; (24314 <ipc_trace_init+0x28>)
   242fa:	6019      	str	r1, [r3, #0]
   242fc:	4b06      	ldr	r3, [pc, #24]	; (24318 <ipc_trace_init+0x2c>)
   242fe:	6019      	str	r1, [r3, #0]
   24300:	4b06      	ldr	r3, [pc, #24]	; (2431c <ipc_trace_init+0x30>)
   24302:	6018      	str	r0, [r3, #0]
   24304:	4806      	ldr	r0, [pc, #24]	; (24320 <ipc_trace_init+0x34>)
   24306:	f7fa bd81 	b.w	1ee0c <nrf_modem_os_sem_init>
   2430a:	bf00      	nop
   2430c:	2000eafa 	.word	0x2000eafa
   24310:	2000eafb 	.word	0x2000eafb
   24314:	2000dd2c 	.word	0x2000dd2c
   24318:	2000dd30 	.word	0x2000dd30
   2431c:	2000dd40 	.word	0x2000dd40
   24320:	2000dd28 	.word	0x2000dd28

00024324 <ipc_trace_handler>:
   24324:	b470      	push	{r4, r5, r6}
   24326:	4b2d      	ldr	r3, [pc, #180]	; (243dc <ipc_trace_handler+0xb8>)
   24328:	681b      	ldr	r3, [r3, #0]
   2432a:	6919      	ldr	r1, [r3, #16]
   2432c:	6958      	ldr	r0, [r3, #20]
   2432e:	7c1a      	ldrb	r2, [r3, #16]
   24330:	2200      	movs	r2, #0
   24332:	741a      	strb	r2, [r3, #16]
   24334:	7c5c      	ldrb	r4, [r3, #17]
   24336:	745a      	strb	r2, [r3, #17]
   24338:	7c9c      	ldrb	r4, [r3, #18]
   2433a:	749a      	strb	r2, [r3, #18]
   2433c:	7cdc      	ldrb	r4, [r3, #19]
   2433e:	74da      	strb	r2, [r3, #19]
   24340:	7d1c      	ldrb	r4, [r3, #20]
   24342:	751a      	strb	r2, [r3, #20]
   24344:	7d5c      	ldrb	r4, [r3, #21]
   24346:	755a      	strb	r2, [r3, #21]
   24348:	7d9c      	ldrb	r4, [r3, #22]
   2434a:	2903      	cmp	r1, #3
   2434c:	759a      	strb	r2, [r3, #22]
   2434e:	7ddc      	ldrb	r4, [r3, #23]
   24350:	75da      	strb	r2, [r3, #23]
   24352:	d029      	beq.n	243a8 <ipc_trace_handler+0x84>
   24354:	2904      	cmp	r1, #4
   24356:	d033      	beq.n	243c0 <ipc_trace_handler+0x9c>
   24358:	2901      	cmp	r1, #1
   2435a:	d12f      	bne.n	243bc <ipc_trace_handler+0x98>
   2435c:	6885      	ldr	r5, [r0, #8]
   2435e:	4e20      	ldr	r6, [pc, #128]	; (243e0 <ipc_trace_handler+0xbc>)
   24360:	4295      	cmp	r5, r2
   24362:	d110      	bne.n	24386 <ipc_trace_handler+0x62>
   24364:	2101      	movs	r1, #1
   24366:	7a1a      	ldrb	r2, [r3, #8]
   24368:	2200      	movs	r2, #0
   2436a:	7219      	strb	r1, [r3, #8]
   2436c:	7a59      	ldrb	r1, [r3, #9]
   2436e:	725a      	strb	r2, [r3, #9]
   24370:	7a99      	ldrb	r1, [r3, #10]
   24372:	729a      	strb	r2, [r3, #10]
   24374:	7ada      	ldrb	r2, [r3, #11]
   24376:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   2437a:	72da      	strb	r2, [r3, #11]
   2437c:	4b19      	ldr	r3, [pc, #100]	; (243e4 <ipc_trace_handler+0xc0>)
   2437e:	bc70      	pop	{r4, r5, r6}
   24380:	6818      	ldr	r0, [r3, #0]
   24382:	f004 bede 	b.w	29142 <nrf_modem_os_sem_give>
   24386:	1c91      	adds	r1, r2, #2
   24388:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2438c:	684c      	ldr	r4, [r1, #4]
   2438e:	7821      	ldrb	r1, [r4, #0]
   24390:	2962      	cmp	r1, #98	; 0x62
   24392:	d007      	beq.n	243a4 <ipc_trace_handler+0x80>
   24394:	3963      	subs	r1, #99	; 0x63
   24396:	bf18      	it	ne
   24398:	2101      	movne	r1, #1
   2439a:	0049      	lsls	r1, r1, #1
   2439c:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
   243a0:	3201      	adds	r2, #1
   243a2:	e7dd      	b.n	24360 <ipc_trace_handler+0x3c>
   243a4:	2101      	movs	r1, #1
   243a6:	e7f9      	b.n	2439c <ipc_trace_handler+0x78>
   243a8:	7a18      	ldrb	r0, [r3, #8]
   243aa:	7219      	strb	r1, [r3, #8]
   243ac:	7a59      	ldrb	r1, [r3, #9]
   243ae:	725a      	strb	r2, [r3, #9]
   243b0:	7a99      	ldrb	r1, [r3, #10]
   243b2:	729a      	strb	r2, [r3, #10]
   243b4:	7ada      	ldrb	r2, [r3, #11]
   243b6:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   243ba:	72da      	strb	r2, [r3, #11]
   243bc:	bc70      	pop	{r4, r5, r6}
   243be:	4770      	bx	lr
   243c0:	7a18      	ldrb	r0, [r3, #8]
   243c2:	7219      	strb	r1, [r3, #8]
   243c4:	7a59      	ldrb	r1, [r3, #9]
   243c6:	725a      	strb	r2, [r3, #9]
   243c8:	7a99      	ldrb	r1, [r3, #10]
   243ca:	729a      	strb	r2, [r3, #10]
   243cc:	7ada      	ldrb	r2, [r3, #11]
   243ce:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   243d2:	72da      	strb	r2, [r3, #11]
   243d4:	2201      	movs	r2, #1
   243d6:	4b04      	ldr	r3, [pc, #16]	; (243e8 <ipc_trace_handler+0xc4>)
   243d8:	701a      	strb	r2, [r3, #0]
   243da:	e7ef      	b.n	243bc <ipc_trace_handler+0x98>
   243dc:	2000dd40 	.word	0x2000dd40
   243e0:	2000dd34 	.word	0x2000dd34
   243e4:	2000dd28 	.word	0x2000dd28
   243e8:	2000eafb 	.word	0x2000eafb

000243ec <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   243ec:	4b01      	ldr	r3, [pc, #4]	; (243f4 <z_impl_z_errno+0x8>)
   243ee:	6898      	ldr	r0, [r3, #8]
}
   243f0:	3064      	adds	r0, #100	; 0x64
   243f2:	4770      	bx	lr
   243f4:	2000dd44 	.word	0x2000dd44

000243f8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   243f8:	4b10      	ldr	r3, [pc, #64]	; (2443c <z_sys_init_run_level+0x44>)
{
   243fa:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   243fc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   24400:	3001      	adds	r0, #1
   24402:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   24406:	42a6      	cmp	r6, r4
   24408:	d800      	bhi.n	2440c <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   2440a:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   2440c:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   24410:	b18d      	cbz	r5, 24436 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   24412:	4628      	mov	r0, r5
   24414:	4798      	blx	r3
			if (rc != 0) {
   24416:	b138      	cbz	r0, 24428 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   24418:	2800      	cmp	r0, #0
   2441a:	bfb8      	it	lt
   2441c:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   2441e:	28ff      	cmp	r0, #255	; 0xff
   24420:	bfa8      	it	ge
   24422:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   24424:	68eb      	ldr	r3, [r5, #12]
   24426:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   24428:	68ea      	ldr	r2, [r5, #12]
   2442a:	7853      	ldrb	r3, [r2, #1]
   2442c:	f043 0301 	orr.w	r3, r3, #1
   24430:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24432:	3408      	adds	r4, #8
   24434:	e7e7      	b.n	24406 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   24436:	4798      	blx	r3
   24438:	e7fb      	b.n	24432 <z_sys_init_run_level+0x3a>
   2443a:	bf00      	nop
   2443c:	0002cb10 	.word	0x0002cb10

00024440 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   24440:	2201      	movs	r2, #1
{
   24442:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   24444:	4b09      	ldr	r3, [pc, #36]	; (2446c <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   24446:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   24448:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   2444a:	f7ff ffd5 	bl	243f8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   2444e:	f001 f98d 	bl	2576c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   24452:	2004      	movs	r0, #4
   24454:	f7ff ffd0 	bl	243f8 <z_sys_init_run_level>

	z_init_static_threads();
   24458:	f000 f92a 	bl	246b0 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   2445c:	f7f4 ffc4 	bl	193e8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   24460:	4a03      	ldr	r2, [pc, #12]	; (24470 <bg_thread_main+0x30>)
   24462:	7b13      	ldrb	r3, [r2, #12]
   24464:	f023 0301 	bic.w	r3, r3, #1
   24468:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2446a:	bd08      	pop	{r3, pc}
   2446c:	2000eafc 	.word	0x2000eafc
   24470:	2000cb30 	.word	0x2000cb30

00024474 <z_bss_zero>:
{
   24474:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   24476:	4803      	ldr	r0, [pc, #12]	; (24484 <z_bss_zero+0x10>)
   24478:	4a03      	ldr	r2, [pc, #12]	; (24488 <z_bss_zero+0x14>)
   2447a:	2100      	movs	r1, #0
   2447c:	1a12      	subs	r2, r2, r0
   2447e:	f006 fa61 	bl	2a944 <z_early_memset>
}
   24482:	bd08      	pop	{r3, pc}
   24484:	2000c9d0 	.word	0x2000c9d0
   24488:	2000eb00 	.word	0x2000eb00

0002448c <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   2448c:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   2448e:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   24490:	4e13      	ldr	r6, [pc, #76]	; (244e0 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   24492:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   24494:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   24498:	2300      	movs	r3, #0
{
   2449a:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   2449c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   244a0:	220f      	movs	r2, #15
   244a2:	9301      	str	r3, [sp, #4]
   244a4:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   244a8:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
   244aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   244ae:	4d0d      	ldr	r5, [pc, #52]	; (244e4 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   244b0:	490d      	ldr	r1, [pc, #52]	; (244e8 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   244b2:	fb03 5500 	mla	r5, r3, r0, r5
{
   244b6:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   244b8:	fb02 1100 	mla	r1, r2, r0, r1
   244bc:	4b0b      	ldr	r3, [pc, #44]	; (244ec <z_init_cpu+0x60>)
   244be:	4630      	mov	r0, r6
   244c0:	9500      	str	r5, [sp, #0]
   244c2:	f000 f899 	bl	245f8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   244c6:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   244c8:	742c      	strb	r4, [r5, #16]
   244ca:	f023 0304 	bic.w	r3, r3, #4
   244ce:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   244d0:	4b07      	ldr	r3, [pc, #28]	; (244f0 <z_init_cpu+0x64>)
   244d2:	3401      	adds	r4, #1
   244d4:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   244d8:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   244da:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   244dc:	b006      	add	sp, #24
   244de:	bd70      	pop	{r4, r5, r6, pc}
   244e0:	2000caa8 	.word	0x2000caa8
   244e4:	2000dd44 	.word	0x2000dd44
   244e8:	20010400 	.word	0x20010400
   244ec:	00024769 	.word	0x00024769
   244f0:	2000fc00 	.word	0x2000fc00

000244f4 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   244f4:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   244f6:	2000      	movs	r0, #0
{
   244f8:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   244fa:	f7ff ff7d 	bl	243f8 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   244fe:	4b2e      	ldr	r3, [pc, #184]	; (245b8 <z_cstart+0xc4>)
	uint32_t msp =
   24500:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   24504:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   24508:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2450c:	2400      	movs	r4, #0
   2450e:	23e0      	movs	r3, #224	; 0xe0
   24510:	4d2a      	ldr	r5, [pc, #168]	; (245bc <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   24512:	4e2b      	ldr	r6, [pc, #172]	; (245c0 <z_cstart+0xcc>)
   24514:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   24518:	77ec      	strb	r4, [r5, #31]
   2451a:	762c      	strb	r4, [r5, #24]
   2451c:	766c      	strb	r4, [r5, #25]
   2451e:	76ac      	strb	r4, [r5, #26]
   24520:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   24524:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   24526:	4f27      	ldr	r7, [pc, #156]	; (245c4 <z_cstart+0xd0>)
   24528:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2452c:	626b      	str	r3, [r5, #36]	; 0x24
   2452e:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   24532:	f7f6 ff69 	bl	1b408 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   24536:	f7f6 fced 	bl	1af14 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2453a:	f04f 33ff 	mov.w	r3, #4294967295
   2453e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   24540:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   24542:	f7f7 f96b 	bl	1b81c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   24546:	f7f7 f811 	bl	1b56c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   2454a:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   2454e:	ad06      	add	r5, sp, #24
   24550:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   24552:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   24556:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   2455a:	f001 f8e9 	bl	25730 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   2455e:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   24560:	f006 f9c9 	bl	2a8f6 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   24564:	2001      	movs	r0, #1
   24566:	f7ff ff47 	bl	243f8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2456a:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   2456c:	4d16      	ldr	r5, [pc, #88]	; (245c8 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2456e:	f7ff ff43 	bl	243f8 <z_sys_init_run_level>
	z_sched_init();
   24572:	f000 fddb 	bl	2512c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   24576:	4b15      	ldr	r3, [pc, #84]	; (245cc <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
   24578:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2457a:	9305      	str	r3, [sp, #20]
   2457c:	2301      	movs	r3, #1
   2457e:	4914      	ldr	r1, [pc, #80]	; (245d0 <z_cstart+0xdc>)
   24580:	f643 72a0 	movw	r2, #16288	; 0x3fa0
   24584:	e9cd 4303 	strd	r4, r3, [sp, #12]
   24588:	4628      	mov	r0, r5
   2458a:	463b      	mov	r3, r7
   2458c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   24590:	9400      	str	r4, [sp, #0]
   24592:	f000 f831 	bl	245f8 <z_setup_new_thread>
   24596:	4606      	mov	r6, r0
   24598:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   2459a:	4628      	mov	r0, r5
   2459c:	f022 0204 	bic.w	r2, r2, #4
   245a0:	736a      	strb	r2, [r5, #13]
   245a2:	f006 fb77 	bl	2ac94 <z_ready_thread>
	z_init_cpu(0);
   245a6:	4620      	mov	r0, r4
   245a8:	f7ff ff70 	bl	2448c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   245ac:	463a      	mov	r2, r7
   245ae:	4631      	mov	r1, r6
   245b0:	4628      	mov	r0, r5
   245b2:	f7f6 fdaf 	bl	1b114 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   245b6:	bf00      	nop
   245b8:	2000fc00 	.word	0x2000fc00
   245bc:	e000ed00 	.word	0xe000ed00
   245c0:	2000dd44 	.word	0x2000dd44
   245c4:	00024441 	.word	0x00024441
   245c8:	2000cb30 	.word	0x2000cb30
   245cc:	0002e907 	.word	0x0002e907
   245d0:	20010540 	.word	0x20010540

000245d4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   245d4:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   245d6:	4c06      	ldr	r4, [pc, #24]	; (245f0 <statics_init+0x1c>)
   245d8:	4d06      	ldr	r5, [pc, #24]	; (245f4 <statics_init+0x20>)
   245da:	42ac      	cmp	r4, r5
   245dc:	d301      	bcc.n	245e2 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   245de:	2000      	movs	r0, #0
   245e0:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   245e2:	4620      	mov	r0, r4
   245e4:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   245e8:	f006 f9b0 	bl	2a94c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   245ec:	3414      	adds	r4, #20
   245ee:	e7f4      	b.n	245da <statics_init+0x6>
   245f0:	2000c834 	.word	0x2000c834
   245f4:	2000c85c 	.word	0x2000c85c

000245f8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   245f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   245fc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   245fe:	f100 0558 	add.w	r5, r0, #88	; 0x58
   24602:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   24604:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   24606:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   2460a:	2500      	movs	r5, #0
{
   2460c:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   2460e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   24610:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   24612:	e9c0 5506 	strd	r5, r5, [r0, #24]
   24616:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   24618:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2461a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2461c:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
   24620:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   24624:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   24626:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   24628:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2462a:	9202      	str	r2, [sp, #8]
   2462c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   2462e:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24632:	9201      	str	r2, [sp, #4]
   24634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   24636:	9200      	str	r2, [sp, #0]
   24638:	4642      	mov	r2, r8
   2463a:	f7f6 fd4b 	bl	1b0d4 <arch_new_thread>
	if (!_current) {
   2463e:	4b05      	ldr	r3, [pc, #20]	; (24654 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   24640:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   24642:	689b      	ldr	r3, [r3, #8]
   24644:	b103      	cbz	r3, 24648 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   24646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   24648:	4640      	mov	r0, r8
   2464a:	6763      	str	r3, [r4, #116]	; 0x74
   2464c:	b004      	add	sp, #16
   2464e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24652:	bf00      	nop
   24654:	2000dd44 	.word	0x2000dd44

00024658 <z_impl_k_thread_create>:
{
   24658:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2465a:	2500      	movs	r5, #0
{
   2465c:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2465e:	9505      	str	r5, [sp, #20]
   24660:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   24662:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   24666:	9504      	str	r5, [sp, #16]
   24668:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   2466a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2466c:	9503      	str	r5, [sp, #12]
   2466e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   24670:	9502      	str	r5, [sp, #8]
   24672:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   24674:	9501      	str	r5, [sp, #4]
   24676:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   24678:	9500      	str	r5, [sp, #0]
   2467a:	f7ff ffbd 	bl	245f8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2467e:	f1b6 3fff 	cmp.w	r6, #4294967295
   24682:	bf08      	it	eq
   24684:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   24688:	d005      	beq.n	24696 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2468a:	ea56 0307 	orrs.w	r3, r6, r7
   2468e:	d105      	bne.n	2469c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   24690:	4620      	mov	r0, r4
   24692:	f000 fccb 	bl	2502c <z_sched_start>
}
   24696:	4620      	mov	r0, r4
   24698:	b007      	add	sp, #28
   2469a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2469c:	463a      	mov	r2, r7
   2469e:	4633      	mov	r3, r6
   246a0:	4902      	ldr	r1, [pc, #8]	; (246ac <z_impl_k_thread_create+0x54>)
   246a2:	f104 0018 	add.w	r0, r4, #24
   246a6:	f000 febd 	bl	25424 <z_add_timeout>
   246aa:	e7f4      	b.n	24696 <z_impl_k_thread_create+0x3e>
   246ac:	0002acf9 	.word	0x0002acf9

000246b0 <z_init_static_threads>:
{
   246b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   246b4:	4c29      	ldr	r4, [pc, #164]	; (2475c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   246b6:	4d2a      	ldr	r5, [pc, #168]	; (24760 <z_init_static_threads+0xb0>)
{
   246b8:	b087      	sub	sp, #28
   246ba:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   246bc:	42ae      	cmp	r6, r5
   246be:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   246c2:	d30f      	bcc.n	246e4 <z_init_static_threads+0x34>
	k_sched_lock();
   246c4:	f000 fd02 	bl	250cc <k_sched_lock>
   246c8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   246cc:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   246d0:	4c22      	ldr	r4, [pc, #136]	; (2475c <z_init_static_threads+0xac>)
   246d2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 24764 <z_init_static_threads+0xb4>
   246d6:	42ac      	cmp	r4, r5
   246d8:	d320      	bcc.n	2471c <z_init_static_threads+0x6c>
}
   246da:	b007      	add	sp, #28
   246dc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   246e0:	f000 bd08 	b.w	250f4 <k_sched_unlock>
		z_setup_new_thread(
   246e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   246e8:	9305      	str	r3, [sp, #20]
   246ea:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   246ee:	9304      	str	r3, [sp, #16]
   246f0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   246f4:	9303      	str	r3, [sp, #12]
   246f6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   246fa:	9302      	str	r3, [sp, #8]
   246fc:	f854 3c18 	ldr.w	r3, [r4, #-24]
   24700:	9301      	str	r3, [sp, #4]
   24702:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   24706:	9300      	str	r3, [sp, #0]
   24708:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   2470c:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   24710:	f7ff ff72 	bl	245f8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   24714:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   24718:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   2471a:	e7ce      	b.n	246ba <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2471c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2471e:	1c5a      	adds	r2, r3, #1
   24720:	d00d      	beq.n	2473e <z_init_static_threads+0x8e>
   24722:	2100      	movs	r1, #0
   24724:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   24726:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2472a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2472e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   24732:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24736:	d104      	bne.n	24742 <z_init_static_threads+0x92>
	z_sched_start(thread);
   24738:	4640      	mov	r0, r8
   2473a:	f000 fc77 	bl	2502c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2473e:	342c      	adds	r4, #44	; 0x2c
   24740:	e7c9      	b.n	246d6 <z_init_static_threads+0x26>
   24742:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24746:	2300      	movs	r3, #0
   24748:	f7f4 fb2e 	bl	18da8 <__aeabi_uldivmod>
   2474c:	4602      	mov	r2, r0
   2474e:	460b      	mov	r3, r1
   24750:	f108 0018 	add.w	r0, r8, #24
   24754:	4649      	mov	r1, r9
   24756:	f000 fe65 	bl	25424 <z_add_timeout>
   2475a:	e7f0      	b.n	2473e <z_init_static_threads+0x8e>
   2475c:	0002bd3c 	.word	0x0002bd3c
   24760:	0002bd3c 	.word	0x0002bd3c
   24764:	0002acf9 	.word	0x0002acf9

00024768 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   24768:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   2476a:	4c0b      	ldr	r4, [pc, #44]	; (24798 <idle+0x30>)
   2476c:	4d0b      	ldr	r5, [pc, #44]	; (2479c <idle+0x34>)
	__asm__ volatile(
   2476e:	f04f 0220 	mov.w	r2, #32
   24772:	f3ef 8311 	mrs	r3, BASEPRI
   24776:	f382 8812 	msr	BASEPRI_MAX, r2
   2477a:	f3bf 8f6f 	isb	sy
   2477e:	f006 fb52 	bl	2ae26 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   24782:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   24784:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   24786:	b913      	cbnz	r3, 2478e <idle+0x26>
	arch_cpu_idle();
   24788:	f7f6 fbca 	bl	1af20 <arch_cpu_idle>
}
   2478c:	e7ef      	b.n	2476e <idle+0x6>
   2478e:	f7f6 f96d 	bl	1aa6c <pm_system_suspend>
   24792:	2800      	cmp	r0, #0
   24794:	d1eb      	bne.n	2476e <idle+0x6>
   24796:	e7f7      	b.n	24788 <idle+0x20>
   24798:	2000dd44 	.word	0x2000dd44
   2479c:	2000eafc 	.word	0x2000eafc

000247a0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   247a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   247a4:	4604      	mov	r4, r0
   247a6:	4617      	mov	r7, r2
   247a8:	461e      	mov	r6, r3
   247aa:	f04f 0320 	mov.w	r3, #32
   247ae:	f3ef 8811 	mrs	r8, BASEPRI
   247b2:	f383 8812 	msr	BASEPRI_MAX, r3
   247b6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   247ba:	68c3      	ldr	r3, [r0, #12]
   247bc:	4a33      	ldr	r2, [pc, #204]	; (2488c <z_impl_k_mutex_lock+0xec>)
   247be:	b17b      	cbz	r3, 247e0 <z_impl_k_mutex_lock+0x40>
   247c0:	6880      	ldr	r0, [r0, #8]
   247c2:	6891      	ldr	r1, [r2, #8]
   247c4:	4288      	cmp	r0, r1
   247c6:	d019      	beq.n	247fc <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   247c8:	ea57 0306 	orrs.w	r3, r7, r6
   247cc:	d118      	bne.n	24800 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   247ce:	f388 8811 	msr	BASEPRI, r8
   247d2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   247d6:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   247da:	b002      	add	sp, #8
   247dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   247e0:	6891      	ldr	r1, [r2, #8]
   247e2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   247e6:	3301      	adds	r3, #1
   247e8:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   247ea:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   247ec:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   247ee:	60a3      	str	r3, [r4, #8]
   247f0:	f388 8811 	msr	BASEPRI, r8
   247f4:	f3bf 8f6f 	isb	sy
		return 0;
   247f8:	2000      	movs	r0, #0
   247fa:	e7ee      	b.n	247da <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   247fc:	6921      	ldr	r1, [r4, #16]
   247fe:	e7f2      	b.n	247e6 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   24800:	f991 100e 	ldrsb.w	r1, [r1, #14]
   24804:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   24808:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2480c:	4299      	cmp	r1, r3
   2480e:	bfa8      	it	ge
   24810:	4619      	movge	r1, r3
   24812:	4291      	cmp	r1, r2
   24814:	bfb8      	it	lt
   24816:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   24818:	428b      	cmp	r3, r1
   2481a:	dd2e      	ble.n	2487a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   2481c:	f006 f924 	bl	2aa68 <adjust_owner_prio.isra.0>
   24820:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   24822:	4622      	mov	r2, r4
   24824:	4641      	mov	r1, r8
   24826:	e9cd 7600 	strd	r7, r6, [sp]
   2482a:	4819      	ldr	r0, [pc, #100]	; (24890 <z_impl_k_mutex_lock+0xf0>)
   2482c:	f000 fb88 	bl	24f40 <z_pend_curr>
	if (got_mutex == 0) {
   24830:	2800      	cmp	r0, #0
   24832:	d0e1      	beq.n	247f8 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   24834:	f04f 0320 	mov.w	r3, #32
   24838:	f3ef 8611 	mrs	r6, BASEPRI
   2483c:	f383 8812 	msr	BASEPRI_MAX, r3
   24840:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   24844:	68a0      	ldr	r0, [r4, #8]
   24846:	b1d0      	cbz	r0, 2487e <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   24848:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2484a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2484c:	429c      	cmp	r4, r3
   2484e:	d00a      	beq.n	24866 <z_impl_k_mutex_lock+0xc6>
   24850:	b14b      	cbz	r3, 24866 <z_impl_k_mutex_lock+0xc6>
   24852:	f993 300e 	ldrsb.w	r3, [r3, #14]
   24856:	4299      	cmp	r1, r3
   24858:	bfa8      	it	ge
   2485a:	4619      	movge	r1, r3
   2485c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   24860:	4299      	cmp	r1, r3
   24862:	bfb8      	it	lt
   24864:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   24866:	f006 f8ff 	bl	2aa68 <adjust_owner_prio.isra.0>
   2486a:	b140      	cbz	r0, 2487e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   2486c:	4631      	mov	r1, r6
   2486e:	4808      	ldr	r0, [pc, #32]	; (24890 <z_impl_k_mutex_lock+0xf0>)
   24870:	f000 fbca 	bl	25008 <z_reschedule>
	return -EAGAIN;
   24874:	f06f 000a 	mvn.w	r0, #10
   24878:	e7af      	b.n	247da <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   2487a:	2500      	movs	r5, #0
   2487c:	e7d1      	b.n	24822 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   2487e:	2d00      	cmp	r5, #0
   24880:	d1f4      	bne.n	2486c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   24882:	f386 8811 	msr	BASEPRI, r6
   24886:	f3bf 8f6f 	isb	sy
   2488a:	e7f3      	b.n	24874 <z_impl_k_mutex_lock+0xd4>
   2488c:	2000dd44 	.word	0x2000dd44
   24890:	2000eafd 	.word	0x2000eafd

00024894 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   24894:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   24896:	6883      	ldr	r3, [r0, #8]
{
   24898:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   2489a:	b36b      	cbz	r3, 248f8 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2489c:	4a19      	ldr	r2, [pc, #100]	; (24904 <z_impl_k_mutex_unlock+0x70>)
   2489e:	6892      	ldr	r2, [r2, #8]
   248a0:	4293      	cmp	r3, r2
   248a2:	d12c      	bne.n	248fe <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   248a4:	68c3      	ldr	r3, [r0, #12]
   248a6:	2b01      	cmp	r3, #1
   248a8:	d903      	bls.n	248b2 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   248aa:	3b01      	subs	r3, #1
   248ac:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   248ae:	2000      	movs	r0, #0
}
   248b0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   248b2:	f04f 0320 	mov.w	r3, #32
   248b6:	f3ef 8511 	mrs	r5, BASEPRI
   248ba:	f383 8812 	msr	BASEPRI_MAX, r3
   248be:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   248c2:	6901      	ldr	r1, [r0, #16]
   248c4:	6880      	ldr	r0, [r0, #8]
   248c6:	f006 f8cf 	bl	2aa68 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   248ca:	4620      	mov	r0, r4
   248cc:	f006 fa18 	bl	2ad00 <z_unpend_first_thread>
	mutex->owner = new_owner;
   248d0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   248d2:	b158      	cbz	r0, 248ec <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   248d4:	f990 200e 	ldrsb.w	r2, [r0, #14]
   248d8:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   248da:	2200      	movs	r2, #0
   248dc:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   248de:	f006 f9d9 	bl	2ac94 <z_ready_thread>
		z_reschedule(&lock, key);
   248e2:	4629      	mov	r1, r5
   248e4:	4808      	ldr	r0, [pc, #32]	; (24908 <z_impl_k_mutex_unlock+0x74>)
   248e6:	f000 fb8f 	bl	25008 <z_reschedule>
   248ea:	e7e0      	b.n	248ae <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   248ec:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   248ee:	f385 8811 	msr	BASEPRI, r5
   248f2:	f3bf 8f6f 	isb	sy
   248f6:	e7da      	b.n	248ae <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   248f8:	f06f 0015 	mvn.w	r0, #21
   248fc:	e7d8      	b.n	248b0 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   248fe:	f04f 30ff 	mov.w	r0, #4294967295
   24902:	e7d5      	b.n	248b0 <z_impl_k_mutex_unlock+0x1c>
   24904:	2000dd44 	.word	0x2000dd44
   24908:	2000eafd 	.word	0x2000eafd

0002490c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   2490c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2490e:	4611      	mov	r1, r2
	__asm__ volatile(
   24910:	f04f 0220 	mov.w	r2, #32
   24914:	f3ef 8511 	mrs	r5, BASEPRI
   24918:	f382 8812 	msr	BASEPRI_MAX, r2
   2491c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   24920:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   24922:	b19c      	cbz	r4, 2494c <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24924:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   24926:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24928:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2492c:	4294      	cmp	r4, r2
	list->head = node;
   2492e:	6003      	str	r3, [r0, #0]
	list->tail = node;
   24930:	bf08      	it	eq
   24932:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   24934:	2101      	movs	r1, #1
   24936:	4620      	mov	r0, r4
   24938:	f006 f90b 	bl	2ab52 <z_queue_node_peek>
   2493c:	4604      	mov	r4, r0
	__asm__ volatile(
   2493e:	f385 8811 	msr	BASEPRI, r5
   24942:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   24946:	4620      	mov	r0, r4
   24948:	b003      	add	sp, #12
   2494a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2494c:	ea51 0203 	orrs.w	r2, r1, r3
   24950:	d0f5      	beq.n	2493e <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24952:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   24956:	e9cd 1300 	strd	r1, r3, [sp]
   2495a:	4610      	mov	r0, r2
   2495c:	4629      	mov	r1, r5
   2495e:	f000 faef 	bl	24f40 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   24962:	2800      	cmp	r0, #0
   24964:	d1ef      	bne.n	24946 <z_impl_k_queue_get+0x3a>
   24966:	4b02      	ldr	r3, [pc, #8]	; (24970 <z_impl_k_queue_get+0x64>)
   24968:	689b      	ldr	r3, [r3, #8]
   2496a:	695c      	ldr	r4, [r3, #20]
   2496c:	e7eb      	b.n	24946 <z_impl_k_queue_get+0x3a>
   2496e:	bf00      	nop
   24970:	2000dd44 	.word	0x2000dd44

00024974 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   24974:	b538      	push	{r3, r4, r5, lr}
   24976:	4604      	mov	r4, r0
	__asm__ volatile(
   24978:	f04f 0320 	mov.w	r3, #32
   2497c:	f3ef 8511 	mrs	r5, BASEPRI
   24980:	f383 8812 	msr	BASEPRI_MAX, r3
   24984:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   24988:	f006 f9ba 	bl	2ad00 <z_unpend_first_thread>

	if (thread != NULL) {
   2498c:	b148      	cbz	r0, 249a2 <z_impl_k_sem_give+0x2e>
   2498e:	2200      	movs	r2, #0
   24990:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   24992:	f006 f97f 	bl	2ac94 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   24996:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   24998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2499c:	4807      	ldr	r0, [pc, #28]	; (249bc <z_impl_k_sem_give+0x48>)
   2499e:	f000 bb33 	b.w	25008 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   249a2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   249a6:	429a      	cmp	r2, r3
   249a8:	bf18      	it	ne
   249aa:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   249ac:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   249ae:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   249b0:	f104 0010 	add.w	r0, r4, #16
   249b4:	f006 fbb3 	bl	2b11e <z_handle_obj_poll_events>
}
   249b8:	e7ed      	b.n	24996 <z_impl_k_sem_give+0x22>
   249ba:	bf00      	nop
   249bc:	2000eafd 	.word	0x2000eafd

000249c0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   249c0:	b513      	push	{r0, r1, r4, lr}
   249c2:	f04f 0420 	mov.w	r4, #32
   249c6:	f3ef 8111 	mrs	r1, BASEPRI
   249ca:	f384 8812 	msr	BASEPRI_MAX, r4
   249ce:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   249d2:	6884      	ldr	r4, [r0, #8]
   249d4:	b144      	cbz	r4, 249e8 <z_impl_k_sem_take+0x28>
		sem->count--;
   249d6:	3c01      	subs	r4, #1
   249d8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   249da:	f381 8811 	msr	BASEPRI, r1
   249de:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   249e2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   249e4:	b002      	add	sp, #8
   249e6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   249e8:	ea52 0403 	orrs.w	r4, r2, r3
   249ec:	d106      	bne.n	249fc <z_impl_k_sem_take+0x3c>
   249ee:	f381 8811 	msr	BASEPRI, r1
   249f2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   249f6:	f06f 000f 	mvn.w	r0, #15
   249fa:	e7f3      	b.n	249e4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   249fc:	e9cd 2300 	strd	r2, r3, [sp]
   24a00:	4602      	mov	r2, r0
   24a02:	4802      	ldr	r0, [pc, #8]	; (24a0c <z_impl_k_sem_take+0x4c>)
   24a04:	f000 fa9c 	bl	24f40 <z_pend_curr>
	return ret;
   24a08:	e7ec      	b.n	249e4 <z_impl_k_sem_take+0x24>
   24a0a:	bf00      	nop
   24a0c:	2000eafd 	.word	0x2000eafd

00024a10 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   24a10:	b570      	push	{r4, r5, r6, lr}
   24a12:	4604      	mov	r4, r0
	__asm__ volatile(
   24a14:	f04f 0320 	mov.w	r3, #32
   24a18:	f3ef 8511 	mrs	r5, BASEPRI
   24a1c:	f383 8812 	msr	BASEPRI_MAX, r3
   24a20:	f3bf 8f6f 	isb	sy
   24a24:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   24a28:	4620      	mov	r0, r4
   24a2a:	f006 f969 	bl	2ad00 <z_unpend_first_thread>
		if (thread == NULL) {
   24a2e:	b118      	cbz	r0, 24a38 <z_impl_k_sem_reset+0x28>
   24a30:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   24a32:	f006 f92f 	bl	2ac94 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   24a36:	e7f7      	b.n	24a28 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   24a38:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   24a3a:	2102      	movs	r1, #2
   24a3c:	f104 0010 	add.w	r0, r4, #16
   24a40:	f006 fb6d 	bl	2b11e <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   24a44:	4629      	mov	r1, r5
}
   24a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   24a4a:	4801      	ldr	r0, [pc, #4]	; (24a50 <z_impl_k_sem_reset+0x40>)
   24a4c:	f000 badc 	b.w	25008 <z_reschedule>
   24a50:	2000eafd 	.word	0x2000eafd

00024a54 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   24a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a58:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   24a5a:	f04f 38ff 	mov.w	r8, #4294967295
   24a5e:	f04f 39ff 	mov.w	r9, #4294967295
	return list->head;
   24a62:	4e48      	ldr	r6, [pc, #288]	; (24b84 <work_queue_main+0x130>)
{
   24a64:	b085      	sub	sp, #20
   24a66:	f04f 0320 	mov.w	r3, #32
   24a6a:	f3ef 8711 	mrs	r7, BASEPRI
   24a6e:	f383 8812 	msr	BASEPRI_MAX, r3
   24a72:	f3bf 8f6f 	isb	sy
   24a76:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   24a7a:	b98d      	cbnz	r5, 24aa0 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   24a7c:	2102      	movs	r1, #2
   24a7e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   24a82:	f006 f88d 	bl	2aba0 <flag_test_and_clear>
   24a86:	2800      	cmp	r0, #0
   24a88:	d143      	bne.n	24b12 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   24a8a:	2300      	movs	r3, #0
   24a8c:	4639      	mov	r1, r7
   24a8e:	e9cd 8900 	strd	r8, r9, [sp]
   24a92:	9302      	str	r3, [sp, #8]
   24a94:	f104 0290 	add.w	r2, r4, #144	; 0x90
   24a98:	483b      	ldr	r0, [pc, #236]	; (24b88 <work_queue_main+0x134>)
   24a9a:	f000 fc51 	bl	25340 <z_sched_wait>
			continue;
   24a9e:	e7e2      	b.n	24a66 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24aa0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   24aa4:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24aa6:	4295      	cmp	r5, r2
	list->head = node;
   24aa8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	list->tail = node;
   24aac:	bf08      	it	eq
   24aae:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	*flagp |= BIT(bit);
   24ab2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   24ab6:	f043 0302 	orr.w	r3, r3, #2
   24aba:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   24abe:	68eb      	ldr	r3, [r5, #12]
   24ac0:	f023 0304 	bic.w	r3, r3, #4
   24ac4:	f043 0301 	orr.w	r3, r3, #1
   24ac8:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   24aca:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   24acc:	f387 8811 	msr	BASEPRI, r7
   24ad0:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   24ad4:	4628      	mov	r0, r5
   24ad6:	4798      	blx	r3
	__asm__ volatile(
   24ad8:	f04f 0320 	mov.w	r3, #32
   24adc:	f3ef 8b11 	mrs	fp, BASEPRI
   24ae0:	f383 8812 	msr	BASEPRI_MAX, r3
   24ae4:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   24ae8:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24aea:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   24aec:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24af0:	d419      	bmi.n	24b26 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   24af2:	60ea      	str	r2, [r5, #12]
   24af4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   24af8:	f023 0302 	bic.w	r3, r3, #2
   24afc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	__asm__ volatile(
   24b00:	f38b 8811 	msr	BASEPRI, fp
   24b04:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   24b08:	05db      	lsls	r3, r3, #23
   24b0a:	d4ac      	bmi.n	24a66 <work_queue_main+0x12>
	z_impl_k_yield();
   24b0c:	f000 fb16 	bl	2513c <z_impl_k_yield>
}
   24b10:	e7a9      	b.n	24a66 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   24b12:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   24b16:	2200      	movs	r2, #0
   24b18:	2101      	movs	r1, #1
   24b1a:	4628      	mov	r0, r5
   24b1c:	f006 f94a 	bl	2adb4 <z_sched_wake>
   24b20:	2800      	cmp	r0, #0
   24b22:	d1f8      	bne.n	24b16 <work_queue_main+0xc2>
   24b24:	e7b1      	b.n	24a8a <work_queue_main+0x36>
	return list->head;
   24b26:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   24b28:	f023 0303 	bic.w	r3, r3, #3
   24b2c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   24b2e:	2800      	cmp	r0, #0
   24b30:	d0e0      	beq.n	24af4 <work_queue_main+0xa0>
	return node->next;
   24b32:	2700      	movs	r7, #0
	parent->next = child;
   24b34:	463b      	mov	r3, r7
	return node->next;
   24b36:	f8d0 a000 	ldr.w	sl, [r0]
   24b3a:	2800      	cmp	r0, #0
   24b3c:	d0da      	beq.n	24af4 <work_queue_main+0xa0>
		if (wc->work == work) {
   24b3e:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   24b40:	4601      	mov	r1, r0
		if (wc->work == work) {
   24b42:	4295      	cmp	r5, r2
   24b44:	d10c      	bne.n	24b60 <work_queue_main+0x10c>
   24b46:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   24b48:	b99f      	cbnz	r7, 24b72 <work_queue_main+0x11e>
   24b4a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   24b4c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   24b4e:	4282      	cmp	r2, r0
   24b50:	d100      	bne.n	24b54 <work_queue_main+0x100>
	list->tail = node;
   24b52:	6071      	str	r1, [r6, #4]
	parent->next = child;
   24b54:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   24b58:	f7ff ff0c 	bl	24974 <z_impl_k_sem_give>
}
   24b5c:	4639      	mov	r1, r7
   24b5e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   24b60:	f1ba 0f00 	cmp.w	sl, #0
   24b64:	d00b      	beq.n	24b7e <work_queue_main+0x12a>
	return node->next;
   24b66:	f8da 2000 	ldr.w	r2, [sl]
   24b6a:	4650      	mov	r0, sl
   24b6c:	460f      	mov	r7, r1
   24b6e:	4692      	mov	sl, r2
   24b70:	e7e3      	b.n	24b3a <work_queue_main+0xe6>
	parent->next = child;
   24b72:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   24b74:	6872      	ldr	r2, [r6, #4]
   24b76:	4282      	cmp	r2, r0
	list->tail = node;
   24b78:	bf08      	it	eq
   24b7a:	6077      	streq	r7, [r6, #4]
}
   24b7c:	e7ea      	b.n	24b54 <work_queue_main+0x100>
   24b7e:	4652      	mov	r2, sl
   24b80:	e7f3      	b.n	24b6a <work_queue_main+0x116>
   24b82:	bf00      	nop
   24b84:	2000dd68 	.word	0x2000dd68
   24b88:	2000eafd 	.word	0x2000eafd

00024b8c <submit_to_queue_locked>:
{
   24b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   24b8e:	68c3      	ldr	r3, [r0, #12]
{
   24b90:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24b92:	079a      	lsls	r2, r3, #30
{
   24b94:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24b96:	f3c3 0640 	ubfx	r6, r3, #1, #1
   24b9a:	d42c      	bmi.n	24bf6 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   24b9c:	075b      	lsls	r3, r3, #29
   24b9e:	d41a      	bmi.n	24bd6 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   24ba0:	680b      	ldr	r3, [r1, #0]
   24ba2:	b90b      	cbnz	r3, 24ba8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   24ba4:	6883      	ldr	r3, [r0, #8]
   24ba6:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   24ba8:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   24baa:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   24bac:	bf42      	ittt	mi
   24bae:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   24bb0:	2602      	movmi	r6, #2
			*queuep = work->queue;
   24bb2:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   24bb4:	683d      	ldr	r5, [r7, #0]
		ret = 1;
   24bb6:	bf58      	it	pl
   24bb8:	2601      	movpl	r6, #1
	if (queue == NULL) {
   24bba:	2d00      	cmp	r5, #0
   24bbc:	d03a      	beq.n	24c34 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   24bbe:	4b1f      	ldr	r3, [pc, #124]	; (24c3c <submit_to_queue_locked+0xb0>)
   24bc0:	689b      	ldr	r3, [r3, #8]
   24bc2:	42ab      	cmp	r3, r5
   24bc4:	d00a      	beq.n	24bdc <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   24bc6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   24bca:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   24bcc:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   24bd0:	d414      	bmi.n	24bfc <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   24bd2:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   24bd6:	2300      	movs	r3, #0
   24bd8:	603b      	str	r3, [r7, #0]
	return ret;
   24bda:	e025      	b.n	24c28 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   24bdc:	f005 ff32 	bl	2aa44 <k_is_in_isr>
   24be0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   24be4:	2800      	cmp	r0, #0
   24be6:	d1f0      	bne.n	24bca <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   24be8:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   24bea:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   24bee:	d5f0      	bpl.n	24bd2 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   24bf0:	b152      	cbz	r2, 24c08 <submit_to_queue_locked+0x7c>
   24bf2:	075b      	lsls	r3, r3, #29
   24bf4:	d408      	bmi.n	24c08 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   24bf6:	f06f 060f 	mvn.w	r6, #15
   24bfa:	e7ec      	b.n	24bd6 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   24bfc:	2a00      	cmp	r2, #0
   24bfe:	d1fa      	bne.n	24bf6 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   24c00:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   24c04:	2b00      	cmp	r3, #0
   24c06:	d1f6      	bne.n	24bf6 <submit_to_queue_locked+0x6a>
	parent->next = child;
   24c08:	2300      	movs	r3, #0
   24c0a:	6023      	str	r3, [r4, #0]
	return list->tail;
   24c0c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   24c10:	b963      	cbnz	r3, 24c2c <submit_to_queue_locked+0xa0>
	list->head = node;
   24c12:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   24c16:	4628      	mov	r0, r5
   24c18:	f005 ffcd 	bl	2abb6 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   24c1c:	68e3      	ldr	r3, [r4, #12]
   24c1e:	f043 0304 	orr.w	r3, r3, #4
   24c22:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   24c24:	683b      	ldr	r3, [r7, #0]
   24c26:	60a3      	str	r3, [r4, #8]
}
   24c28:	4630      	mov	r0, r6
   24c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   24c2c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   24c2e:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   24c32:	e7f0      	b.n	24c16 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   24c34:	f06f 0615 	mvn.w	r6, #21
   24c38:	e7cd      	b.n	24bd6 <submit_to_queue_locked+0x4a>
   24c3a:	bf00      	nop
   24c3c:	2000dd44 	.word	0x2000dd44

00024c40 <k_work_submit>:
{
   24c40:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   24c42:	4801      	ldr	r0, [pc, #4]	; (24c48 <k_work_submit+0x8>)
   24c44:	f005 bfd2 	b.w	2abec <k_work_submit_to_queue>
   24c48:	2000cbd8 	.word	0x2000cbd8

00024c4c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   24c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   24c4e:	4604      	mov	r4, r0
	list->head = NULL;
   24c50:	2000      	movs	r0, #0
   24c52:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   24c54:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   24c58:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   24c5a:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   24c5e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   24c62:	f104 0098 	add.w	r0, r4, #152	; 0x98
   24c66:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   24c6a:	b31d      	cbz	r5, 24cb4 <k_work_queue_start+0x68>
   24c6c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   24c6e:	2800      	cmp	r0, #0
   24c70:	f240 1001 	movw	r0, #257	; 0x101
   24c74:	bf08      	it	eq
   24c76:	2001      	moveq	r0, #1
	*flagp = flags;
   24c78:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   24c7c:	2000      	movs	r0, #0
   24c7e:	f04f 36ff 	mov.w	r6, #4294967295
   24c82:	f04f 37ff 	mov.w	r7, #4294967295
   24c86:	e9cd 3003 	strd	r3, r0, [sp, #12]
   24c8a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   24c8e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   24c92:	4620      	mov	r0, r4
   24c94:	4b08      	ldr	r3, [pc, #32]	; (24cb8 <k_work_queue_start+0x6c>)
   24c96:	9400      	str	r4, [sp, #0]
   24c98:	f7ff fcde 	bl	24658 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   24c9c:	b125      	cbz	r5, 24ca8 <k_work_queue_start+0x5c>
   24c9e:	6829      	ldr	r1, [r5, #0]
   24ca0:	b111      	cbz	r1, 24ca8 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   24ca2:	4620      	mov	r0, r4
   24ca4:	f005 fed4 	bl	2aa50 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   24ca8:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   24caa:	b009      	add	sp, #36	; 0x24
   24cac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   24cb0:	f005 bed1 	b.w	2aa56 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   24cb4:	2001      	movs	r0, #1
   24cb6:	e7df      	b.n	24c78 <k_work_queue_start+0x2c>
   24cb8:	00024a55 	.word	0x00024a55

00024cbc <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   24cbc:	89c3      	ldrh	r3, [r0, #14]
   24cbe:	2b7f      	cmp	r3, #127	; 0x7f
   24cc0:	d812      	bhi.n	24ce8 <sliceable+0x2c>
	int ret = slice_ticks;
   24cc2:	4b0a      	ldr	r3, [pc, #40]	; (24cec <sliceable+0x30>)
   24cc4:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   24cc6:	b163      	cbz	r3, 24ce2 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   24cc8:	4b09      	ldr	r3, [pc, #36]	; (24cf0 <sliceable+0x34>)
   24cca:	f990 200e 	ldrsb.w	r2, [r0, #14]
   24cce:	681b      	ldr	r3, [r3, #0]
   24cd0:	429a      	cmp	r2, r3
   24cd2:	db09      	blt.n	24ce8 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   24cd4:	7b43      	ldrb	r3, [r0, #13]
   24cd6:	06db      	lsls	r3, r3, #27
   24cd8:	d106      	bne.n	24ce8 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   24cda:	4b06      	ldr	r3, [pc, #24]	; (24cf4 <sliceable+0x38>)
   24cdc:	1ac3      	subs	r3, r0, r3
   24cde:	bf18      	it	ne
   24ce0:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   24ce2:	f003 0001 	and.w	r0, r3, #1
   24ce6:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   24ce8:	2300      	movs	r3, #0
   24cea:	e7fa      	b.n	24ce2 <sliceable+0x26>
   24cec:	2000dd78 	.word	0x2000dd78
   24cf0:	2000dd74 	.word	0x2000dd74
   24cf4:	2000caa8 	.word	0x2000caa8

00024cf8 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
   24cf8:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   24cfa:	4b04      	ldr	r3, [pc, #16]	; (24d0c <slice_timeout+0x14>)
   24cfc:	1ac0      	subs	r0, r0, r3
   24cfe:	4b04      	ldr	r3, [pc, #16]	; (24d10 <slice_timeout+0x18>)
   24d00:	10c0      	asrs	r0, r0, #3
   24d02:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
   24d04:	4b03      	ldr	r3, [pc, #12]	; (24d14 <slice_timeout+0x1c>)
   24d06:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   24d08:	4770      	bx	lr
   24d0a:	bf00      	nop
   24d0c:	2000cbb8 	.word	0x2000cbb8
   24d10:	aaaaaaab 	.word	0xaaaaaaab
   24d14:	2000eafd 	.word	0x2000eafd

00024d18 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   24d18:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   24d1a:	4b0e      	ldr	r3, [pc, #56]	; (24d54 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   24d1c:	4c0e      	ldr	r4, [pc, #56]	; (24d58 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   24d1e:	7c1e      	ldrb	r6, [r3, #16]
{
   24d20:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   24d22:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   24d26:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   24d2a:	4620      	mov	r0, r4
   24d2c:	f006 f865 	bl	2adfa <z_abort_timeout>
	slice_expired[cpu] = false;
   24d30:	2200      	movs	r2, #0
   24d32:	4b0a      	ldr	r3, [pc, #40]	; (24d5c <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
   24d34:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   24d36:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   24d38:	f7ff ffc0 	bl	24cbc <sliceable>
   24d3c:	b148      	cbz	r0, 24d52 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   24d3e:	4b08      	ldr	r3, [pc, #32]	; (24d60 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   24d40:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
   24d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
   24d46:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   24d48:	4906      	ldr	r1, [pc, #24]	; (24d64 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   24d4a:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   24d4c:	17d3      	asrs	r3, r2, #31
   24d4e:	f000 bb69 	b.w	25424 <z_add_timeout>
}
   24d52:	bd70      	pop	{r4, r5, r6, pc}
   24d54:	2000dd44 	.word	0x2000dd44
   24d58:	2000cbb8 	.word	0x2000cbb8
   24d5c:	2000eafd 	.word	0x2000eafd
   24d60:	2000dd78 	.word	0x2000dd78
   24d64:	00024cf9 	.word	0x00024cf9

00024d68 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   24d68:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   24d6a:	4d0d      	ldr	r5, [pc, #52]	; (24da0 <update_cache+0x38>)
   24d6c:	462b      	mov	r3, r5
   24d6e:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24d72:	429c      	cmp	r4, r3
   24d74:	d000      	beq.n	24d78 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   24d76:	b904      	cbnz	r4, 24d7a <update_cache+0x12>
   24d78:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   24d7a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   24d7c:	b938      	cbnz	r0, 24d8e <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   24d7e:	7b5a      	ldrb	r2, [r3, #13]
   24d80:	06d2      	lsls	r2, r2, #27
   24d82:	d104      	bne.n	24d8e <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   24d84:	69a2      	ldr	r2, [r4, #24]
   24d86:	b912      	cbnz	r2, 24d8e <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   24d88:	89da      	ldrh	r2, [r3, #14]
   24d8a:	2a7f      	cmp	r2, #127	; 0x7f
   24d8c:	d805      	bhi.n	24d9a <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   24d8e:	429c      	cmp	r4, r3
   24d90:	d002      	beq.n	24d98 <update_cache+0x30>
			z_reset_time_slice(thread);
   24d92:	4620      	mov	r0, r4
   24d94:	f7ff ffc0 	bl	24d18 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   24d98:	4623      	mov	r3, r4
   24d9a:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   24d9c:	bd38      	pop	{r3, r4, r5, pc}
   24d9e:	bf00      	nop
   24da0:	2000dd44 	.word	0x2000dd44

00024da4 <move_thread_to_end_of_prio_q>:
{
   24da4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   24da6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   24daa:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   24dac:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   24dae:	7b43      	ldrb	r3, [r0, #13]
   24db0:	da04      	bge.n	24dbc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24db6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   24db8:	f005 ff29 	bl	2ac0e <sys_dlist_remove>
	return list->head == list;
   24dbc:	4a15      	ldr	r2, [pc, #84]	; (24e14 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
   24dbe:	7b4b      	ldrb	r3, [r1, #13]
   24dc0:	4610      	mov	r0, r2
   24dc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   24dc6:	734b      	strb	r3, [r1, #13]
   24dc8:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   24dcc:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24dce:	4283      	cmp	r3, r0
   24dd0:	bf08      	it	eq
   24dd2:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24dd4:	b923      	cbnz	r3, 24de0 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   24dd6:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   24dda:	6021      	str	r1, [r4, #0]
	list->tail = node;
   24ddc:	6211      	str	r1, [r2, #32]
}
   24dde:	e00c      	b.n	24dfa <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   24de0:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   24de4:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   24de8:	42b5      	cmp	r5, r6
   24dea:	d00e      	beq.n	24e0a <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   24dec:	42ae      	cmp	r6, r5
   24dee:	dd0c      	ble.n	24e0a <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   24df0:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   24df2:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   24df6:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   24df8:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   24dfa:	6890      	ldr	r0, [r2, #8]
}
   24dfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   24e00:	1a43      	subs	r3, r0, r1
   24e02:	4258      	negs	r0, r3
   24e04:	4158      	adcs	r0, r3
   24e06:	f7ff bfaf 	b.w	24d68 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   24e0a:	429c      	cmp	r4, r3
   24e0c:	d0e3      	beq.n	24dd6 <move_thread_to_end_of_prio_q+0x32>
   24e0e:	681b      	ldr	r3, [r3, #0]
   24e10:	e7e0      	b.n	24dd4 <move_thread_to_end_of_prio_q+0x30>
   24e12:	bf00      	nop
   24e14:	2000dd44 	.word	0x2000dd44

00024e18 <ready_thread>:
{
   24e18:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   24e1a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   24e1e:	7b42      	ldrb	r2, [r0, #13]
   24e20:	2b00      	cmp	r3, #0
   24e22:	db29      	blt.n	24e78 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24e24:	06d3      	lsls	r3, r2, #27
   24e26:	d127      	bne.n	24e78 <ready_thread+0x60>
	return node->next != NULL;
   24e28:	6983      	ldr	r3, [r0, #24]
   24e2a:	bb2b      	cbnz	r3, 24e78 <ready_thread+0x60>
	return list->head == list;
   24e2c:	4913      	ldr	r1, [pc, #76]	; (24e7c <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   24e2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   24e32:	7342      	strb	r2, [r0, #13]
   24e34:	460a      	mov	r2, r1
   24e36:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24e3a:	4294      	cmp	r4, r2
   24e3c:	bf18      	it	ne
   24e3e:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   24e40:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24e42:	b923      	cbnz	r3, 24e4e <ready_thread+0x36>
	node->prev = tail;
   24e44:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   24e48:	6020      	str	r0, [r4, #0]
	list->tail = node;
   24e4a:	6208      	str	r0, [r1, #32]
}
   24e4c:	e00c      	b.n	24e68 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   24e4e:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   24e52:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   24e56:	42b5      	cmp	r5, r6
   24e58:	d00a      	beq.n	24e70 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   24e5a:	42ae      	cmp	r6, r5
   24e5c:	dd08      	ble.n	24e70 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   24e5e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24e60:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   24e64:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   24e66:	6058      	str	r0, [r3, #4]
		update_cache(0);
   24e68:	2000      	movs	r0, #0
}
   24e6a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   24e6c:	f7ff bf7c 	b.w	24d68 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   24e70:	42a3      	cmp	r3, r4
   24e72:	d0e7      	beq.n	24e44 <ready_thread+0x2c>
   24e74:	681b      	ldr	r3, [r3, #0]
   24e76:	e7e4      	b.n	24e42 <ready_thread+0x2a>
}
   24e78:	bc70      	pop	{r4, r5, r6}
   24e7a:	4770      	bx	lr
   24e7c:	2000dd44 	.word	0x2000dd44

00024e80 <unready_thread>:
{
   24e80:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   24e82:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   24e86:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   24e88:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   24e8a:	7b43      	ldrb	r3, [r0, #13]
   24e8c:	da04      	bge.n	24e98 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24e92:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   24e94:	f005 febb 	bl	2ac0e <sys_dlist_remove>
	update_cache(thread == _current);
   24e98:	4b04      	ldr	r3, [pc, #16]	; (24eac <unready_thread+0x2c>)
   24e9a:	6898      	ldr	r0, [r3, #8]
   24e9c:	1a43      	subs	r3, r0, r1
   24e9e:	4258      	negs	r0, r3
   24ea0:	4158      	adcs	r0, r3
}
   24ea2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   24ea6:	f7ff bf5f 	b.w	24d68 <update_cache>
   24eaa:	bf00      	nop
   24eac:	2000dd44 	.word	0x2000dd44

00024eb0 <pend_locked>:
{
   24eb0:	b570      	push	{r4, r5, r6, lr}
   24eb2:	4615      	mov	r5, r2
   24eb4:	461c      	mov	r4, r3
   24eb6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   24eb8:	f005 fec4 	bl	2ac44 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24ebc:	f1b4 3fff 	cmp.w	r4, #4294967295
   24ec0:	bf08      	it	eq
   24ec2:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   24ec6:	d008      	beq.n	24eda <pend_locked+0x2a>
   24ec8:	462a      	mov	r2, r5
   24eca:	4623      	mov	r3, r4
   24ecc:	f106 0018 	add.w	r0, r6, #24
   24ed0:	4902      	ldr	r1, [pc, #8]	; (24edc <pend_locked+0x2c>)
}
   24ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24ed6:	f000 baa5 	b.w	25424 <z_add_timeout>
   24eda:	bd70      	pop	{r4, r5, r6, pc}
   24edc:	0002acf9 	.word	0x0002acf9

00024ee0 <z_time_slice>:
{
   24ee0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   24ee2:	f04f 0320 	mov.w	r3, #32
   24ee6:	f3ef 8511 	mrs	r5, BASEPRI
   24eea:	f383 8812 	msr	BASEPRI_MAX, r3
   24eee:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   24ef2:	4b10      	ldr	r3, [pc, #64]	; (24f34 <z_time_slice+0x54>)
	if (pending_current == curr) {
   24ef4:	4a10      	ldr	r2, [pc, #64]	; (24f38 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   24ef6:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   24ef8:	6810      	ldr	r0, [r2, #0]
   24efa:	42a0      	cmp	r0, r4
   24efc:	d106      	bne.n	24f0c <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   24efe:	f7ff ff0b 	bl	24d18 <z_reset_time_slice>
	__asm__ volatile(
   24f02:	f385 8811 	msr	BASEPRI, r5
   24f06:	f3bf 8f6f 	isb	sy
}
   24f0a:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   24f0c:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   24f0e:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   24f10:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   24f12:	4a0a      	ldr	r2, [pc, #40]	; (24f3c <z_time_slice+0x5c>)
   24f14:	5cd3      	ldrb	r3, [r2, r3]
   24f16:	2b00      	cmp	r3, #0
   24f18:	d0f3      	beq.n	24f02 <z_time_slice+0x22>
   24f1a:	4620      	mov	r0, r4
   24f1c:	f7ff fece 	bl	24cbc <sliceable>
   24f20:	2800      	cmp	r0, #0
   24f22:	d0ee      	beq.n	24f02 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   24f24:	7b63      	ldrb	r3, [r4, #13]
   24f26:	06db      	lsls	r3, r3, #27
   24f28:	d102      	bne.n	24f30 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   24f2a:	4620      	mov	r0, r4
   24f2c:	f7ff ff3a 	bl	24da4 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   24f30:	4620      	mov	r0, r4
   24f32:	e7e4      	b.n	24efe <z_time_slice+0x1e>
   24f34:	2000dd44 	.word	0x2000dd44
   24f38:	2000dd70 	.word	0x2000dd70
   24f3c:	2000eafd 	.word	0x2000eafd

00024f40 <z_pend_curr>:
{
   24f40:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   24f42:	480c      	ldr	r0, [pc, #48]	; (24f74 <z_pend_curr+0x34>)
   24f44:	4d0c      	ldr	r5, [pc, #48]	; (24f78 <z_pend_curr+0x38>)
   24f46:	6886      	ldr	r6, [r0, #8]
{
   24f48:	460c      	mov	r4, r1
	pending_current = _current;
   24f4a:	602e      	str	r6, [r5, #0]
{
   24f4c:	4611      	mov	r1, r2
   24f4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   24f52:	f04f 0620 	mov.w	r6, #32
   24f56:	f3ef 8511 	mrs	r5, BASEPRI
   24f5a:	f386 8812 	msr	BASEPRI_MAX, r6
   24f5e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   24f62:	6880      	ldr	r0, [r0, #8]
   24f64:	f7ff ffa4 	bl	24eb0 <pend_locked>
	ret = arch_swap(key);
   24f68:	4620      	mov	r0, r4
}
   24f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24f6e:	f7f6 b857 	b.w	1b020 <arch_swap>
   24f72:	bf00      	nop
   24f74:	2000dd44 	.word	0x2000dd44
   24f78:	2000dd70 	.word	0x2000dd70

00024f7c <z_set_prio>:
{
   24f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24f7e:	4604      	mov	r4, r0
   24f80:	f04f 0320 	mov.w	r3, #32
   24f84:	f3ef 8611 	mrs	r6, BASEPRI
   24f88:	f383 8812 	msr	BASEPRI_MAX, r3
   24f8c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   24f90:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   24f92:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24f94:	06da      	lsls	r2, r3, #27
   24f96:	d119      	bne.n	24fcc <z_set_prio+0x50>
	return node->next != NULL;
   24f98:	6985      	ldr	r5, [r0, #24]
   24f9a:	b9bd      	cbnz	r5, 24fcc <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24fa0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   24fa2:	f005 fe34 	bl	2ac0e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   24fa6:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   24fa8:	4a16      	ldr	r2, [pc, #88]	; (25004 <z_set_prio+0x88>)
   24faa:	f063 037f 	orn	r3, r3, #127	; 0x7f
   24fae:	7343      	strb	r3, [r0, #13]
   24fb0:	4613      	mov	r3, r2
				thread->base.prio = prio;
   24fb2:	7381      	strb	r1, [r0, #14]
   24fb4:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24fb8:	4298      	cmp	r0, r3
   24fba:	bf18      	it	ne
   24fbc:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   24fbe:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24fc0:	b95d      	cbnz	r5, 24fda <z_set_prio+0x5e>
	node->prev = tail;
   24fc2:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   24fc6:	6004      	str	r4, [r0, #0]
	list->tail = node;
   24fc8:	6214      	str	r4, [r2, #32]
}
   24fca:	e011      	b.n	24ff0 <z_set_prio+0x74>
   24fcc:	2000      	movs	r0, #0
			thread->base.prio = prio;
   24fce:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
   24fd0:	f386 8811 	msr	BASEPRI, r6
   24fd4:	f3bf 8f6f 	isb	sy
}
   24fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   24fda:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   24fde:	42b9      	cmp	r1, r7
   24fe0:	d00b      	beq.n	24ffa <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   24fe2:	428f      	cmp	r7, r1
   24fe4:	dd09      	ble.n	24ffa <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   24fe6:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   24fe8:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   24fec:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   24fee:	606c      	str	r4, [r5, #4]
			update_cache(1);
   24ff0:	2001      	movs	r0, #1
   24ff2:	f7ff feb9 	bl	24d68 <update_cache>
   24ff6:	2001      	movs	r0, #1
   24ff8:	e7ea      	b.n	24fd0 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   24ffa:	42a8      	cmp	r0, r5
   24ffc:	d0e1      	beq.n	24fc2 <z_set_prio+0x46>
   24ffe:	682d      	ldr	r5, [r5, #0]
   25000:	e7de      	b.n	24fc0 <z_set_prio+0x44>
   25002:	bf00      	nop
   25004:	2000dd44 	.word	0x2000dd44

00025008 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25008:	b949      	cbnz	r1, 2501e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2500a:	f3ef 8005 	mrs	r0, IPSR
   2500e:	b930      	cbnz	r0, 2501e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   25010:	4b05      	ldr	r3, [pc, #20]	; (25028 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   25012:	699a      	ldr	r2, [r3, #24]
   25014:	689b      	ldr	r3, [r3, #8]
   25016:	429a      	cmp	r2, r3
   25018:	d001      	beq.n	2501e <z_reschedule+0x16>
   2501a:	f7f6 b801 	b.w	1b020 <arch_swap>
   2501e:	f381 8811 	msr	BASEPRI, r1
   25022:	f3bf 8f6f 	isb	sy
}
   25026:	4770      	bx	lr
   25028:	2000dd44 	.word	0x2000dd44

0002502c <z_sched_start>:
{
   2502c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2502e:	f04f 0220 	mov.w	r2, #32
   25032:	f3ef 8411 	mrs	r4, BASEPRI
   25036:	f382 8812 	msr	BASEPRI_MAX, r2
   2503a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   2503e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   25040:	0751      	lsls	r1, r2, #29
   25042:	d404      	bmi.n	2504e <z_sched_start+0x22>
	__asm__ volatile(
   25044:	f384 8811 	msr	BASEPRI, r4
   25048:	f3bf 8f6f 	isb	sy
}
   2504c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2504e:	f022 0204 	bic.w	r2, r2, #4
   25052:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   25054:	f7ff fee0 	bl	24e18 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   25058:	4621      	mov	r1, r4
}
   2505a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   2505e:	4801      	ldr	r0, [pc, #4]	; (25064 <z_sched_start+0x38>)
   25060:	f7ff bfd2 	b.w	25008 <z_reschedule>
   25064:	2000eafe 	.word	0x2000eafe

00025068 <z_impl_k_thread_suspend>:
{
   25068:	b570      	push	{r4, r5, r6, lr}
   2506a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2506c:	3018      	adds	r0, #24
   2506e:	f005 fec4 	bl	2adfa <z_abort_timeout>
	__asm__ volatile(
   25072:	f04f 0320 	mov.w	r3, #32
   25076:	f3ef 8611 	mrs	r6, BASEPRI
   2507a:	f383 8812 	msr	BASEPRI_MAX, r3
   2507e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   25082:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   25086:	7b63      	ldrb	r3, [r4, #13]
   25088:	2a00      	cmp	r2, #0
   2508a:	da05      	bge.n	25098 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2508c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   25090:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25092:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25094:	f005 fdbb 	bl	2ac0e <sys_dlist_remove>
		update_cache(thread == _current);
   25098:	4d0b      	ldr	r5, [pc, #44]	; (250c8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2509a:	7b63      	ldrb	r3, [r4, #13]
   2509c:	68a8      	ldr	r0, [r5, #8]
   2509e:	f043 0310 	orr.w	r3, r3, #16
   250a2:	7363      	strb	r3, [r4, #13]
   250a4:	1b03      	subs	r3, r0, r4
   250a6:	4258      	negs	r0, r3
   250a8:	4158      	adcs	r0, r3
   250aa:	f7ff fe5d 	bl	24d68 <update_cache>
	__asm__ volatile(
   250ae:	f386 8811 	msr	BASEPRI, r6
   250b2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   250b6:	68ab      	ldr	r3, [r5, #8]
   250b8:	42a3      	cmp	r3, r4
   250ba:	d103      	bne.n	250c4 <z_impl_k_thread_suspend+0x5c>
}
   250bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   250c0:	f005 be5e 	b.w	2ad80 <z_reschedule_unlocked>
}
   250c4:	bd70      	pop	{r4, r5, r6, pc}
   250c6:	bf00      	nop
   250c8:	2000dd44 	.word	0x2000dd44

000250cc <k_sched_lock>:
	__asm__ volatile(
   250cc:	f04f 0320 	mov.w	r3, #32
   250d0:	f3ef 8111 	mrs	r1, BASEPRI
   250d4:	f383 8812 	msr	BASEPRI_MAX, r3
   250d8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   250dc:	4b04      	ldr	r3, [pc, #16]	; (250f0 <k_sched_lock+0x24>)
   250de:	689a      	ldr	r2, [r3, #8]
   250e0:	7bd3      	ldrb	r3, [r2, #15]
   250e2:	3b01      	subs	r3, #1
   250e4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   250e6:	f381 8811 	msr	BASEPRI, r1
   250ea:	f3bf 8f6f 	isb	sy
}
   250ee:	4770      	bx	lr
   250f0:	2000dd44 	.word	0x2000dd44

000250f4 <k_sched_unlock>:
{
   250f4:	b510      	push	{r4, lr}
	__asm__ volatile(
   250f6:	f04f 0320 	mov.w	r3, #32
   250fa:	f3ef 8411 	mrs	r4, BASEPRI
   250fe:	f383 8812 	msr	BASEPRI_MAX, r3
   25102:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   25106:	4b08      	ldr	r3, [pc, #32]	; (25128 <k_sched_unlock+0x34>)
		update_cache(0);
   25108:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   2510a:	689a      	ldr	r2, [r3, #8]
   2510c:	7bd3      	ldrb	r3, [r2, #15]
   2510e:	3301      	adds	r3, #1
   25110:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   25112:	f7ff fe29 	bl	24d68 <update_cache>
	__asm__ volatile(
   25116:	f384 8811 	msr	BASEPRI, r4
   2511a:	f3bf 8f6f 	isb	sy
}
   2511e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   25122:	f005 be2d 	b.w	2ad80 <z_reschedule_unlocked>
   25126:	bf00      	nop
   25128:	2000dd44 	.word	0x2000dd44

0002512c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   2512c:	4b02      	ldr	r3, [pc, #8]	; (25138 <z_sched_init+0xc>)
   2512e:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   25132:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   25136:	4770      	bx	lr
   25138:	2000dd44 	.word	0x2000dd44

0002513c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   2513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2513e:	f04f 0320 	mov.w	r3, #32
   25142:	f3ef 8511 	mrs	r5, BASEPRI
   25146:	f383 8812 	msr	BASEPRI_MAX, r3
   2514a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2514e:	4919      	ldr	r1, [pc, #100]	; (251b4 <z_impl_k_yield+0x78>)
   25150:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25152:	7b43      	ldrb	r3, [r0, #13]
   25154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25158:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2515a:	f005 fd58 	bl	2ac0e <sys_dlist_remove>
	return list->head == list;
   2515e:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   25160:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   25162:	7b5a      	ldrb	r2, [r3, #13]
   25164:	f062 027f 	orn	r2, r2, #127	; 0x7f
   25168:	735a      	strb	r2, [r3, #13]
   2516a:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   2516e:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25170:	4282      	cmp	r2, r0
   25172:	bf08      	it	eq
   25174:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25176:	b922      	cbnz	r2, 25182 <z_impl_k_yield+0x46>
	node->prev = tail;
   25178:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   2517c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2517e:	620b      	str	r3, [r1, #32]
}
   25180:	e00c      	b.n	2519c <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   25182:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   25186:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   2518a:	42be      	cmp	r6, r7
   2518c:	d00e      	beq.n	251ac <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2518e:	42b7      	cmp	r7, r6
   25190:	dd0c      	ble.n	251ac <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   25192:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   25194:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   25198:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   2519a:	6053      	str	r3, [r2, #4]
	update_cache(1);
   2519c:	2001      	movs	r0, #1
   2519e:	f7ff fde3 	bl	24d68 <update_cache>
   251a2:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   251a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   251a8:	f7f5 bf3a 	b.w	1b020 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   251ac:	42a2      	cmp	r2, r4
   251ae:	d0e3      	beq.n	25178 <z_impl_k_yield+0x3c>
   251b0:	6812      	ldr	r2, [r2, #0]
   251b2:	e7e0      	b.n	25176 <z_impl_k_yield+0x3a>
   251b4:	2000dd44 	.word	0x2000dd44

000251b8 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   251b8:	ea50 0301 	orrs.w	r3, r0, r1
{
   251bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   251c0:	4605      	mov	r5, r0
   251c2:	460e      	mov	r6, r1
	if (ticks == 0) {
   251c4:	d103      	bne.n	251ce <z_tick_sleep+0x16>
	z_impl_k_yield();
   251c6:	f7ff ffb9 	bl	2513c <z_impl_k_yield>
		k_yield();
		return 0;
   251ca:	2000      	movs	r0, #0
   251cc:	e02c      	b.n	25228 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   251ce:	1c83      	adds	r3, r0, #2
   251d0:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   251d4:	db2a      	blt.n	2522c <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   251d6:	f005 fe36 	bl	2ae46 <sys_clock_tick_get_32>
   251da:	182c      	adds	r4, r5, r0
   251dc:	f04f 0320 	mov.w	r3, #32
   251e0:	f3ef 8811 	mrs	r8, BASEPRI
   251e4:	f383 8812 	msr	BASEPRI_MAX, r3
   251e8:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   251ec:	4f11      	ldr	r7, [pc, #68]	; (25234 <z_tick_sleep+0x7c>)
   251ee:	4b12      	ldr	r3, [pc, #72]	; (25238 <z_tick_sleep+0x80>)
   251f0:	68b8      	ldr	r0, [r7, #8]
   251f2:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   251f4:	f7ff fe44 	bl	24e80 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   251f8:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   251fa:	4910      	ldr	r1, [pc, #64]	; (2523c <z_tick_sleep+0x84>)
   251fc:	462a      	mov	r2, r5
   251fe:	4633      	mov	r3, r6
   25200:	3018      	adds	r0, #24
   25202:	f000 f90f 	bl	25424 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   25206:	68ba      	ldr	r2, [r7, #8]
   25208:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2520a:	7b53      	ldrb	r3, [r2, #13]
   2520c:	f043 0310 	orr.w	r3, r3, #16
   25210:	7353      	strb	r3, [r2, #13]
   25212:	f7f5 ff05 	bl	1b020 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   25216:	f005 fe16 	bl	2ae46 <sys_clock_tick_get_32>
   2521a:	1a20      	subs	r0, r4, r0
   2521c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   25220:	2801      	cmp	r0, #1
   25222:	f173 0300 	sbcs.w	r3, r3, #0
   25226:	dbd0      	blt.n	251ca <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   25228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   2522c:	f06f 0401 	mvn.w	r4, #1
   25230:	1a24      	subs	r4, r4, r0
   25232:	e7d3      	b.n	251dc <z_tick_sleep+0x24>
   25234:	2000dd44 	.word	0x2000dd44
   25238:	2000dd70 	.word	0x2000dd70
   2523c:	0002acf9 	.word	0x0002acf9

00025240 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25240:	f1b1 3fff 	cmp.w	r1, #4294967295
   25244:	bf08      	it	eq
   25246:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2524a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2524c:	d106      	bne.n	2525c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   2524e:	4b08      	ldr	r3, [pc, #32]	; (25270 <z_impl_k_sleep+0x30>)
   25250:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   25252:	f7ff ff09 	bl	25068 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   25256:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2525a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   2525c:	f7ff ffac 	bl	251b8 <z_tick_sleep>
   25260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   25264:	fb80 0303 	smull	r0, r3, r0, r3
   25268:	0bc0      	lsrs	r0, r0, #15
   2526a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2526e:	e7f4      	b.n	2525a <z_impl_k_sleep+0x1a>
   25270:	2000dd44 	.word	0x2000dd44

00025274 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   25274:	4b01      	ldr	r3, [pc, #4]	; (2527c <z_impl_z_current_get+0x8>)
   25276:	6898      	ldr	r0, [r3, #8]
   25278:	4770      	bx	lr
   2527a:	bf00      	nop
   2527c:	2000dd44 	.word	0x2000dd44

00025280 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   25280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25284:	4604      	mov	r4, r0
   25286:	f04f 0320 	mov.w	r3, #32
   2528a:	f3ef 8611 	mrs	r6, BASEPRI
   2528e:	f383 8812 	msr	BASEPRI_MAX, r3
   25292:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   25296:	7b03      	ldrb	r3, [r0, #12]
   25298:	07d9      	lsls	r1, r3, #31
   2529a:	d50b      	bpl.n	252b4 <z_thread_abort+0x34>
	__asm__ volatile(
   2529c:	f386 8811 	msr	BASEPRI, r6
   252a0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   252a4:	4040      	eors	r0, r0
   252a6:	f380 8811 	msr	BASEPRI, r0
   252aa:	f04f 0004 	mov.w	r0, #4
   252ae:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   252b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   252b4:	7b43      	ldrb	r3, [r0, #13]
   252b6:	071a      	lsls	r2, r3, #28
   252b8:	d504      	bpl.n	252c4 <z_thread_abort+0x44>
   252ba:	f386 8811 	msr	BASEPRI, r6
   252be:	f3bf 8f6f 	isb	sy
   252c2:	e7f5      	b.n	252b0 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   252c4:	f023 0220 	bic.w	r2, r3, #32
   252c8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   252cc:	09d2      	lsrs	r2, r2, #7
   252ce:	d120      	bne.n	25312 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   252d0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   252d2:	68a3      	ldr	r3, [r4, #8]
   252d4:	b113      	cbz	r3, 252dc <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   252d6:	4620      	mov	r0, r4
   252d8:	f005 fca1 	bl	2ac1e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   252dc:	f104 0018 	add.w	r0, r4, #24
   252e0:	f005 fd8b 	bl	2adfa <z_abort_timeout>
   252e4:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   252e8:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   252ec:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   252ee:	42bd      	cmp	r5, r7
   252f0:	d000      	beq.n	252f4 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   252f2:	b9b5      	cbnz	r5, 25322 <z_thread_abort+0xa2>
		update_cache(1);
   252f4:	2001      	movs	r0, #1
   252f6:	f7ff fd37 	bl	24d68 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   252fa:	4b10      	ldr	r3, [pc, #64]	; (2533c <z_thread_abort+0xbc>)
   252fc:	689b      	ldr	r3, [r3, #8]
   252fe:	42a3      	cmp	r3, r4
   25300:	d1db      	bne.n	252ba <z_thread_abort+0x3a>
   25302:	f3ef 8305 	mrs	r3, IPSR
   25306:	2b00      	cmp	r3, #0
   25308:	d1d7      	bne.n	252ba <z_thread_abort+0x3a>
   2530a:	4630      	mov	r0, r6
   2530c:	f7f5 fe88 	bl	1b020 <arch_swap>
	return ret;
   25310:	e7d3      	b.n	252ba <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25312:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   25316:	f043 0308 	orr.w	r3, r3, #8
   2531a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2531c:	f005 fc77 	bl	2ac0e <sys_dlist_remove>
}
   25320:	e7d7      	b.n	252d2 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   25322:	4628      	mov	r0, r5
   25324:	f005 fc7b 	bl	2ac1e <unpend_thread_no_timeout>
   25328:	f105 0018 	add.w	r0, r5, #24
   2532c:	f005 fd65 	bl	2adfa <z_abort_timeout>
		ready_thread(thread);
   25330:	4628      	mov	r0, r5
   25332:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   25336:	f7ff fd6f 	bl	24e18 <ready_thread>
   2533a:	e7d7      	b.n	252ec <z_thread_abort+0x6c>
   2533c:	2000dd44 	.word	0x2000dd44

00025340 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   25340:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   25342:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   25346:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   25348:	e9cd 6700 	strd	r6, r7, [sp]
   2534c:	f7ff fdf8 	bl	24f40 <z_pend_curr>

	if (data != NULL) {
   25350:	b11c      	cbz	r4, 2535a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   25352:	4b03      	ldr	r3, [pc, #12]	; (25360 <z_sched_wait+0x20>)
   25354:	689b      	ldr	r3, [r3, #8]
   25356:	695b      	ldr	r3, [r3, #20]
   25358:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2535a:	b002      	add	sp, #8
   2535c:	bdd0      	pop	{r4, r6, r7, pc}
   2535e:	bf00      	nop
   25360:	2000dd44 	.word	0x2000dd44

00025364 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   25364:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   25366:	4806      	ldr	r0, [pc, #24]	; (25380 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   25368:	4a06      	ldr	r2, [pc, #24]	; (25384 <z_data_copy+0x20>)
   2536a:	4907      	ldr	r1, [pc, #28]	; (25388 <z_data_copy+0x24>)
   2536c:	1a12      	subs	r2, r2, r0
   2536e:	f005 faeb 	bl	2a948 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   25372:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   25376:	4a05      	ldr	r2, [pc, #20]	; (2538c <z_data_copy+0x28>)
   25378:	4905      	ldr	r1, [pc, #20]	; (25390 <z_data_copy+0x2c>)
   2537a:	4806      	ldr	r0, [pc, #24]	; (25394 <z_data_copy+0x30>)
   2537c:	f005 bae4 	b.w	2a948 <z_early_memcpy>
   25380:	2000c580 	.word	0x2000c580
   25384:	2000c9d0 	.word	0x2000c9d0
   25388:	0002ead4 	.word	0x0002ead4
   2538c:	00000000 	.word	0x00000000
   25390:	0002eabc 	.word	0x0002eabc
   25394:	2000c580 	.word	0x2000c580

00025398 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   25398:	4b03      	ldr	r3, [pc, #12]	; (253a8 <elapsed+0x10>)
   2539a:	681b      	ldr	r3, [r3, #0]
   2539c:	b90b      	cbnz	r3, 253a2 <elapsed+0xa>
   2539e:	f7f9 bc19 	b.w	1ebd4 <sys_clock_elapsed>
}
   253a2:	2000      	movs	r0, #0
   253a4:	4770      	bx	lr
   253a6:	bf00      	nop
   253a8:	2000dd7c 	.word	0x2000dd7c

000253ac <next_timeout>:

static int32_t next_timeout(void)
{
   253ac:	b510      	push	{r4, lr}
	return list->head == list;
   253ae:	4b0e      	ldr	r3, [pc, #56]	; (253e8 <next_timeout+0x3c>)
   253b0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   253b2:	429c      	cmp	r4, r3
   253b4:	d104      	bne.n	253c0 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   253b6:	f7ff ffef 	bl	25398 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   253ba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   253be:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   253c0:	f7ff ffea 	bl	25398 <elapsed>
	if ((to == NULL) ||
   253c4:	2c00      	cmp	r4, #0
   253c6:	d0f8      	beq.n	253ba <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   253c8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   253cc:	1a1b      	subs	r3, r3, r0
   253ce:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   253d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   253d6:	f172 0100 	sbcs.w	r1, r2, #0
   253da:	daee      	bge.n	253ba <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   253dc:	2a00      	cmp	r2, #0
   253de:	bfac      	ite	ge
   253e0:	4618      	movge	r0, r3
   253e2:	2000      	movlt	r0, #0
	return ret;
   253e4:	e7eb      	b.n	253be <next_timeout+0x12>
   253e6:	bf00      	nop
   253e8:	2000c714 	.word	0x2000c714

000253ec <remove_timeout>:
{
   253ec:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   253ee:	b170      	cbz	r0, 2540e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   253f0:	4b0b      	ldr	r3, [pc, #44]	; (25420 <remove_timeout+0x34>)
   253f2:	685b      	ldr	r3, [r3, #4]
   253f4:	4298      	cmp	r0, r3
   253f6:	d00a      	beq.n	2540e <remove_timeout+0x22>
   253f8:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   253fa:	b143      	cbz	r3, 2540e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   253fc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   25400:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   25404:	1912      	adds	r2, r2, r4
   25406:	eb41 0105 	adc.w	r1, r1, r5
   2540a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   2540e:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   25412:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   25414:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25416:	2300      	movs	r3, #0
	node->prev = NULL;
   25418:	e9c0 3300 	strd	r3, r3, [r0]
}
   2541c:	bd30      	pop	{r4, r5, pc}
   2541e:	bf00      	nop
   25420:	2000c714 	.word	0x2000c714

00025424 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25424:	f1b3 3fff 	cmp.w	r3, #4294967295
   25428:	bf08      	it	eq
   2542a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2542e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25430:	4604      	mov	r4, r0
   25432:	461d      	mov	r5, r3
   25434:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25436:	d05c      	beq.n	254f2 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   25438:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   2543a:	f04f 0320 	mov.w	r3, #32
   2543e:	f3ef 8711 	mrs	r7, BASEPRI
   25442:	f383 8812 	msr	BASEPRI_MAX, r3
   25446:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2544a:	3201      	adds	r2, #1
   2544c:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   25450:	da24      	bge.n	2549c <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   25452:	f06f 0301 	mvn.w	r3, #1
   25456:	492c      	ldr	r1, [pc, #176]	; (25508 <z_add_timeout+0xe4>)
   25458:	e9d1 2000 	ldrd	r2, r0, [r1]
   2545c:	1a9b      	subs	r3, r3, r2
   2545e:	f04f 32ff 	mov.w	r2, #4294967295
   25462:	eb62 0000 	sbc.w	r0, r2, r0
   25466:	1b9e      	subs	r6, r3, r6
   25468:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   2546c:	2e01      	cmp	r6, #1
   2546e:	f170 0300 	sbcs.w	r3, r0, #0
   25472:	da01      	bge.n	25478 <z_add_timeout+0x54>
   25474:	2601      	movs	r6, #1
   25476:	2000      	movs	r0, #0
   25478:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   2547c:	4e23      	ldr	r6, [pc, #140]	; (2550c <z_add_timeout+0xe8>)
   2547e:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   25482:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25484:	45b4      	cmp	ip, r6
   25486:	bf08      	it	eq
   25488:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   2548c:	f1bc 0f00 	cmp.w	ip, #0
   25490:	d10d      	bne.n	254ae <z_add_timeout+0x8a>
	node->prev = tail;
   25492:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   25496:	602c      	str	r4, [r5, #0]
	list->tail = node;
   25498:	6074      	str	r4, [r6, #4]
}
   2549a:	e01c      	b.n	254d6 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   2549c:	f7ff ff7c 	bl	25398 <elapsed>
   254a0:	3601      	adds	r6, #1
   254a2:	f145 0500 	adc.w	r5, r5, #0
   254a6:	1836      	adds	r6, r6, r0
   254a8:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   254ac:	e7e4      	b.n	25478 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   254ae:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   254b2:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   254b6:	4293      	cmp	r3, r2
   254b8:	eb71 0e00 	sbcs.w	lr, r1, r0
   254bc:	da1a      	bge.n	254f4 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   254be:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   254c0:	f8dc 3004 	ldr.w	r3, [ip, #4]
   254c4:	eb60 0001 	sbc.w	r0, r0, r1
   254c8:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   254cc:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   254d0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   254d2:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   254d6:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   254d8:	42b3      	cmp	r3, r6
   254da:	d006      	beq.n	254ea <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   254dc:	429c      	cmp	r4, r3
   254de:	d104      	bne.n	254ea <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   254e0:	f7ff ff64 	bl	253ac <next_timeout>
   254e4:	2100      	movs	r1, #0
   254e6:	f7f9 fb43 	bl	1eb70 <sys_clock_set_timeout>
	__asm__ volatile(
   254ea:	f387 8811 	msr	BASEPRI, r7
   254ee:	f3bf 8f6f 	isb	sy
		}
	}
}
   254f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   254f4:	1a9b      	subs	r3, r3, r2
   254f6:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   254fa:	45ac      	cmp	ip, r5
   254fc:	e9c4 3104 	strd	r3, r1, [r4, #16]
   25500:	d0c7      	beq.n	25492 <z_add_timeout+0x6e>
   25502:	f8dc c000 	ldr.w	ip, [ip]
   25506:	e7c1      	b.n	2548c <z_add_timeout+0x68>
   25508:	2000cbd0 	.word	0x2000cbd0
   2550c:	2000c714 	.word	0x2000c714

00025510 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   25510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   25514:	f04f 0320 	mov.w	r3, #32
   25518:	f3ef 8c11 	mrs	ip, BASEPRI
   2551c:	f383 8812 	msr	BASEPRI_MAX, r3
   25520:	f3bf 8f6f 	isb	sy
	return list->head == list;
   25524:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 255d8 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   25528:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 255dc <sys_clock_announce+0xcc>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
   2552c:	2400      	movs	r4, #0
	announce_remaining = ticks;
   2552e:	f8c9 0000 	str.w	r0, [r9]
   25532:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   25536:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25538:	4550      	cmp	r0, sl
   2553a:	bf08      	it	eq
   2553c:	2000      	moveq	r0, #0
		curr_tick += dt;
   2553e:	4f28      	ldr	r7, [pc, #160]	; (255e0 <sys_clock_announce+0xd0>)
   25540:	46e0      	mov	r8, ip
   25542:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   25546:	f8d9 3000 	ldr.w	r3, [r9]
   2554a:	b380      	cbz	r0, 255ae <sys_clock_announce+0x9e>
   2554c:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   25550:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   25554:	42b3      	cmp	r3, r6
   25556:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   2555a:	da05      	bge.n	25568 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   2555c:	1af6      	subs	r6, r6, r3
   2555e:	eb6c 040e 	sbc.w	r4, ip, lr
   25562:	e9c0 6404 	strd	r6, r4, [r0, #16]
   25566:	e022      	b.n	255ae <sys_clock_announce+0x9e>
		curr_tick += dt;
   25568:	18b2      	adds	r2, r6, r2
   2556a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   2556e:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   25572:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   25576:	f7ff ff39 	bl	253ec <remove_timeout>
	__asm__ volatile(
   2557a:	f388 8811 	msr	BASEPRI, r8
   2557e:	f3bf 8f6f 	isb	sy
		t->fn(t);
   25582:	6883      	ldr	r3, [r0, #8]
   25584:	4798      	blx	r3
	__asm__ volatile(
   25586:	f04f 0320 	mov.w	r3, #32
   2558a:	f3ef 8811 	mrs	r8, BASEPRI
   2558e:	f383 8812 	msr	BASEPRI_MAX, r3
   25592:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   25596:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   2559a:	f8da 0000 	ldr.w	r0, [sl]
   2559e:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   255a0:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   255a2:	46c4      	mov	ip, r8
   255a4:	f8c9 3000 	str.w	r3, [r9]
   255a8:	d1ca      	bne.n	25540 <sys_clock_announce+0x30>
		curr_tick += dt;
   255aa:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   255ae:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   255b0:	189a      	adds	r2, r3, r2
   255b2:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
   255b6:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   255ba:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   255be:	f7ff fef5 	bl	253ac <next_timeout>
   255c2:	4621      	mov	r1, r4
   255c4:	f7f9 fad4 	bl	1eb70 <sys_clock_set_timeout>
	__asm__ volatile(
   255c8:	f388 8811 	msr	BASEPRI, r8
   255cc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   255d0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   255d4:	f7ff bc84 	b.w	24ee0 <z_time_slice>
   255d8:	2000c714 	.word	0x2000c714
   255dc:	2000dd7c 	.word	0x2000dd7c
   255e0:	2000cbd0 	.word	0x2000cbd0

000255e4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   255e4:	b510      	push	{r4, lr}
	__asm__ volatile(
   255e6:	f04f 0320 	mov.w	r3, #32
   255ea:	f3ef 8411 	mrs	r4, BASEPRI
   255ee:	f383 8812 	msr	BASEPRI_MAX, r3
   255f2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   255f6:	f7ff fecf 	bl	25398 <elapsed>
   255fa:	4603      	mov	r3, r0
   255fc:	4a05      	ldr	r2, [pc, #20]	; (25614 <sys_clock_tick_get+0x30>)
   255fe:	e9d2 0100 	ldrd	r0, r1, [r2]
   25602:	1818      	adds	r0, r3, r0
   25604:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   25608:	f384 8811 	msr	BASEPRI, r4
   2560c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   25610:	bd10      	pop	{r4, pc}
   25612:	bf00      	nop
   25614:	2000cbd0 	.word	0x2000cbd0

00025618 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   25618:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2561c:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2561e:	4b29      	ldr	r3, [pc, #164]	; (256c4 <z_impl_k_poll+0xac>)
{
   25620:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   25622:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   25624:	2301      	movs	r3, #1
   25626:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   2562a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   2562e:	ea52 0305 	orrs.w	r3, r2, r5
   25632:	bf0c      	ite	eq
   25634:	2301      	moveq	r3, #1
   25636:	2300      	movne	r3, #0
   25638:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   2563c:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   2563e:	f005 fc5f 	bl	2af00 <register_events>
   25642:	4681      	mov	r9, r0
	__asm__ volatile(
   25644:	f04f 0320 	mov.w	r3, #32
   25648:	f3ef 8a11 	mrs	sl, BASEPRI
   2564c:	f383 8812 	msr	BASEPRI_MAX, r3
   25650:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   25654:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   25658:	b964      	cbnz	r4, 25674 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   2565a:	4601      	mov	r1, r0
   2565c:	4652      	mov	r2, sl
   2565e:	4640      	mov	r0, r8
   25660:	f005 fd1f 	bl	2b0a2 <clear_event_registrations>
	__asm__ volatile(
   25664:	f38a 8811 	msr	BASEPRI, sl
   25668:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   2566c:	4620      	mov	r0, r4
   2566e:	b002      	add	sp, #8
   25670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   25674:	2300      	movs	r3, #0
   25676:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2567a:	ea56 0305 	orrs.w	r3, r6, r5
   2567e:	d106      	bne.n	2568e <z_impl_k_poll+0x76>
   25680:	f38a 8811 	msr	BASEPRI, sl
   25684:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   25688:	f06f 040a 	mvn.w	r4, #10
   2568c:	e7ee      	b.n	2566c <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2568e:	4651      	mov	r1, sl
   25690:	e9cd 6500 	strd	r6, r5, [sp]
   25694:	4a0c      	ldr	r2, [pc, #48]	; (256c8 <z_impl_k_poll+0xb0>)
   25696:	480d      	ldr	r0, [pc, #52]	; (256cc <z_impl_k_poll+0xb4>)
   25698:	f7ff fc52 	bl	24f40 <z_pend_curr>
   2569c:	4604      	mov	r4, r0
	__asm__ volatile(
   2569e:	f04f 0320 	mov.w	r3, #32
   256a2:	f3ef 8511 	mrs	r5, BASEPRI
   256a6:	f383 8812 	msr	BASEPRI_MAX, r3
   256aa:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   256ae:	462a      	mov	r2, r5
   256b0:	4649      	mov	r1, r9
   256b2:	4640      	mov	r0, r8
   256b4:	f005 fcf5 	bl	2b0a2 <clear_event_registrations>
	__asm__ volatile(
   256b8:	f385 8811 	msr	BASEPRI, r5
   256bc:	f3bf 8f6f 	isb	sy
	return swap_rc;
   256c0:	e7d4      	b.n	2566c <z_impl_k_poll+0x54>
   256c2:	bf00      	nop
   256c4:	2000dd44 	.word	0x2000dd44
   256c8:	2000c71c 	.word	0x2000c71c
   256cc:	2000eafe 	.word	0x2000eafe

000256d0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   256d0:	b538      	push	{r3, r4, r5, lr}
   256d2:	4603      	mov	r3, r0
	__asm__ volatile(
   256d4:	f04f 0220 	mov.w	r2, #32
   256d8:	f3ef 8511 	mrs	r5, BASEPRI
   256dc:	f382 8812 	msr	BASEPRI_MAX, r2
   256e0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   256e4:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   256e6:	2101      	movs	r1, #1
   256e8:	6081      	str	r1, [r0, #8]
	return list->head == list;
   256ea:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   256ec:	4283      	cmp	r3, r0
   256ee:	d106      	bne.n	256fe <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   256f0:	f385 8811 	msr	BASEPRI, r5
   256f4:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   256f8:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   256fa:	4620      	mov	r0, r4
   256fc:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   256fe:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   25702:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   25704:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25706:	2300      	movs	r3, #0
	node->prev = NULL;
   25708:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2570c:	f005 fc6f 	bl	2afee <signal_poll_event>
	z_reschedule(&lock, key);
   25710:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   25712:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   25714:	4801      	ldr	r0, [pc, #4]	; (2571c <z_impl_k_poll_signal_raise+0x4c>)
   25716:	f7ff fc77 	bl	25008 <z_reschedule>
	return rc;
   2571a:	e7ee      	b.n	256fa <z_impl_k_poll_signal_raise+0x2a>
   2571c:	2000eafe 	.word	0x2000eafe

00025720 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   25720:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   25722:	4601      	mov	r1, r0
   25724:	4801      	ldr	r0, [pc, #4]	; (2572c <k_aligned_alloc+0xc>)
   25726:	f005 bd12 	b.w	2b14e <z_heap_aligned_alloc>
   2572a:	bf00      	nop
   2572c:	2000c834 	.word	0x2000c834

00025730 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   25730:	4b01      	ldr	r3, [pc, #4]	; (25738 <k_thread_system_pool_assign+0x8>)
   25732:	6743      	str	r3, [r0, #116]	; 0x74
}
   25734:	4770      	bx	lr
   25736:	bf00      	nop
   25738:	2000c834 	.word	0x2000c834

0002573c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2573c:	b538      	push	{r3, r4, r5, lr}
   2573e:	4604      	mov	r4, r0
   25740:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   25742:	f005 f97f 	bl	2aa44 <k_is_in_isr>
   25746:	b920      	cbnz	r0, 25752 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   25748:	4b06      	ldr	r3, [pc, #24]	; (25764 <z_thread_aligned_alloc+0x28>)
   2574a:	689b      	ldr	r3, [r3, #8]
   2574c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   2574e:	b90b      	cbnz	r3, 25754 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   25750:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   25752:	4b05      	ldr	r3, [pc, #20]	; (25768 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   25754:	462a      	mov	r2, r5
   25756:	4621      	mov	r1, r4
   25758:	4618      	mov	r0, r3
}
   2575a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   2575e:	f005 bcf6 	b.w	2b14e <z_heap_aligned_alloc>
   25762:	bf00      	nop
   25764:	2000dd44 	.word	0x2000dd44
   25768:	2000c834 	.word	0x2000c834

0002576c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   2576c:	4801      	ldr	r0, [pc, #4]	; (25774 <boot_banner+0x8>)
   2576e:	f001 bc27 	b.w	26fc0 <printk>
   25772:	bf00      	nop
   25774:	0002e90f 	.word	0x0002e90f

00025778 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   25778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   2577a:	2400      	movs	r4, #0
   2577c:	4b08      	ldr	r3, [pc, #32]	; (257a0 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2577e:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
   25782:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   25784:	ab02      	add	r3, sp, #8
   25786:	9300      	str	r3, [sp, #0]
   25788:	4906      	ldr	r1, [pc, #24]	; (257a4 <k_sys_work_q_init+0x2c>)
   2578a:	f04f 33ff 	mov.w	r3, #4294967295
   2578e:	4806      	ldr	r0, [pc, #24]	; (257a8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   25790:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   25794:	f7ff fa5a 	bl	24c4c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   25798:	4620      	mov	r0, r4
   2579a:	b004      	add	sp, #16
   2579c:	bd10      	pop	{r4, pc}
   2579e:	bf00      	nop
   257a0:	0002e93d 	.word	0x0002e93d
   257a4:	2001ab90 	.word	0x2001ab90
   257a8:	2000cbd8 	.word	0x2000cbd8

000257ac <malloc>:
   257ac:	4b02      	ldr	r3, [pc, #8]	; (257b8 <malloc+0xc>)
   257ae:	4601      	mov	r1, r0
   257b0:	6818      	ldr	r0, [r3, #0]
   257b2:	f000 b84d 	b.w	25850 <_malloc_r>
   257b6:	bf00      	nop
   257b8:	2000c724 	.word	0x2000c724

000257bc <_free_r>:
   257bc:	b538      	push	{r3, r4, r5, lr}
   257be:	4605      	mov	r5, r0
   257c0:	2900      	cmp	r1, #0
   257c2:	d041      	beq.n	25848 <_free_r+0x8c>
   257c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
   257c8:	1f0c      	subs	r4, r1, #4
   257ca:	2b00      	cmp	r3, #0
   257cc:	bfb8      	it	lt
   257ce:	18e4      	addlt	r4, r4, r3
   257d0:	f000 fc12 	bl	25ff8 <__malloc_lock>
   257d4:	4a1d      	ldr	r2, [pc, #116]	; (2584c <_free_r+0x90>)
   257d6:	6813      	ldr	r3, [r2, #0]
   257d8:	b933      	cbnz	r3, 257e8 <_free_r+0x2c>
   257da:	6063      	str	r3, [r4, #4]
   257dc:	6014      	str	r4, [r2, #0]
   257de:	4628      	mov	r0, r5
   257e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   257e4:	f000 bc0e 	b.w	26004 <__malloc_unlock>
   257e8:	42a3      	cmp	r3, r4
   257ea:	d908      	bls.n	257fe <_free_r+0x42>
   257ec:	6820      	ldr	r0, [r4, #0]
   257ee:	1821      	adds	r1, r4, r0
   257f0:	428b      	cmp	r3, r1
   257f2:	bf01      	itttt	eq
   257f4:	6819      	ldreq	r1, [r3, #0]
   257f6:	685b      	ldreq	r3, [r3, #4]
   257f8:	1809      	addeq	r1, r1, r0
   257fa:	6021      	streq	r1, [r4, #0]
   257fc:	e7ed      	b.n	257da <_free_r+0x1e>
   257fe:	461a      	mov	r2, r3
   25800:	685b      	ldr	r3, [r3, #4]
   25802:	b10b      	cbz	r3, 25808 <_free_r+0x4c>
   25804:	42a3      	cmp	r3, r4
   25806:	d9fa      	bls.n	257fe <_free_r+0x42>
   25808:	6811      	ldr	r1, [r2, #0]
   2580a:	1850      	adds	r0, r2, r1
   2580c:	42a0      	cmp	r0, r4
   2580e:	d10b      	bne.n	25828 <_free_r+0x6c>
   25810:	6820      	ldr	r0, [r4, #0]
   25812:	4401      	add	r1, r0
   25814:	1850      	adds	r0, r2, r1
   25816:	6011      	str	r1, [r2, #0]
   25818:	4283      	cmp	r3, r0
   2581a:	d1e0      	bne.n	257de <_free_r+0x22>
   2581c:	6818      	ldr	r0, [r3, #0]
   2581e:	685b      	ldr	r3, [r3, #4]
   25820:	4408      	add	r0, r1
   25822:	6053      	str	r3, [r2, #4]
   25824:	6010      	str	r0, [r2, #0]
   25826:	e7da      	b.n	257de <_free_r+0x22>
   25828:	d902      	bls.n	25830 <_free_r+0x74>
   2582a:	230c      	movs	r3, #12
   2582c:	602b      	str	r3, [r5, #0]
   2582e:	e7d6      	b.n	257de <_free_r+0x22>
   25830:	6820      	ldr	r0, [r4, #0]
   25832:	1821      	adds	r1, r4, r0
   25834:	428b      	cmp	r3, r1
   25836:	bf02      	ittt	eq
   25838:	6819      	ldreq	r1, [r3, #0]
   2583a:	685b      	ldreq	r3, [r3, #4]
   2583c:	1809      	addeq	r1, r1, r0
   2583e:	6063      	str	r3, [r4, #4]
   25840:	bf08      	it	eq
   25842:	6021      	streq	r1, [r4, #0]
   25844:	6054      	str	r4, [r2, #4]
   25846:	e7ca      	b.n	257de <_free_r+0x22>
   25848:	bd38      	pop	{r3, r4, r5, pc}
   2584a:	bf00      	nop
   2584c:	2000dd84 	.word	0x2000dd84

00025850 <_malloc_r>:
   25850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25852:	1ccd      	adds	r5, r1, #3
   25854:	4606      	mov	r6, r0
   25856:	f025 0503 	bic.w	r5, r5, #3
   2585a:	3508      	adds	r5, #8
   2585c:	2d0c      	cmp	r5, #12
   2585e:	bf38      	it	cc
   25860:	250c      	movcc	r5, #12
   25862:	2d00      	cmp	r5, #0
   25864:	db01      	blt.n	2586a <_malloc_r+0x1a>
   25866:	42a9      	cmp	r1, r5
   25868:	d903      	bls.n	25872 <_malloc_r+0x22>
   2586a:	230c      	movs	r3, #12
   2586c:	6033      	str	r3, [r6, #0]
   2586e:	2000      	movs	r0, #0
   25870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25872:	f000 fbc1 	bl	25ff8 <__malloc_lock>
   25876:	4921      	ldr	r1, [pc, #132]	; (258fc <_malloc_r+0xac>)
   25878:	680a      	ldr	r2, [r1, #0]
   2587a:	4614      	mov	r4, r2
   2587c:	b99c      	cbnz	r4, 258a6 <_malloc_r+0x56>
   2587e:	4f20      	ldr	r7, [pc, #128]	; (25900 <_malloc_r+0xb0>)
   25880:	683b      	ldr	r3, [r7, #0]
   25882:	b923      	cbnz	r3, 2588e <_malloc_r+0x3e>
   25884:	4621      	mov	r1, r4
   25886:	4630      	mov	r0, r6
   25888:	f000 f854 	bl	25934 <_sbrk_r>
   2588c:	6038      	str	r0, [r7, #0]
   2588e:	4629      	mov	r1, r5
   25890:	4630      	mov	r0, r6
   25892:	f000 f84f 	bl	25934 <_sbrk_r>
   25896:	1c43      	adds	r3, r0, #1
   25898:	d123      	bne.n	258e2 <_malloc_r+0x92>
   2589a:	230c      	movs	r3, #12
   2589c:	4630      	mov	r0, r6
   2589e:	6033      	str	r3, [r6, #0]
   258a0:	f000 fbb0 	bl	26004 <__malloc_unlock>
   258a4:	e7e3      	b.n	2586e <_malloc_r+0x1e>
   258a6:	6823      	ldr	r3, [r4, #0]
   258a8:	1b5b      	subs	r3, r3, r5
   258aa:	d417      	bmi.n	258dc <_malloc_r+0x8c>
   258ac:	2b0b      	cmp	r3, #11
   258ae:	d903      	bls.n	258b8 <_malloc_r+0x68>
   258b0:	6023      	str	r3, [r4, #0]
   258b2:	441c      	add	r4, r3
   258b4:	6025      	str	r5, [r4, #0]
   258b6:	e004      	b.n	258c2 <_malloc_r+0x72>
   258b8:	6863      	ldr	r3, [r4, #4]
   258ba:	42a2      	cmp	r2, r4
   258bc:	bf0c      	ite	eq
   258be:	600b      	streq	r3, [r1, #0]
   258c0:	6053      	strne	r3, [r2, #4]
   258c2:	4630      	mov	r0, r6
   258c4:	f000 fb9e 	bl	26004 <__malloc_unlock>
   258c8:	f104 000b 	add.w	r0, r4, #11
   258cc:	1d23      	adds	r3, r4, #4
   258ce:	f020 0007 	bic.w	r0, r0, #7
   258d2:	1ac2      	subs	r2, r0, r3
   258d4:	bf1c      	itt	ne
   258d6:	1a1b      	subne	r3, r3, r0
   258d8:	50a3      	strne	r3, [r4, r2]
   258da:	e7c9      	b.n	25870 <_malloc_r+0x20>
   258dc:	4622      	mov	r2, r4
   258de:	6864      	ldr	r4, [r4, #4]
   258e0:	e7cc      	b.n	2587c <_malloc_r+0x2c>
   258e2:	1cc4      	adds	r4, r0, #3
   258e4:	f024 0403 	bic.w	r4, r4, #3
   258e8:	42a0      	cmp	r0, r4
   258ea:	d0e3      	beq.n	258b4 <_malloc_r+0x64>
   258ec:	1a21      	subs	r1, r4, r0
   258ee:	4630      	mov	r0, r6
   258f0:	f000 f820 	bl	25934 <_sbrk_r>
   258f4:	3001      	adds	r0, #1
   258f6:	d1dd      	bne.n	258b4 <_malloc_r+0x64>
   258f8:	e7cf      	b.n	2589a <_malloc_r+0x4a>
   258fa:	bf00      	nop
   258fc:	2000dd84 	.word	0x2000dd84
   25900:	2000dd80 	.word	0x2000dd80

00025904 <iprintf>:
   25904:	b40f      	push	{r0, r1, r2, r3}
   25906:	4b0a      	ldr	r3, [pc, #40]	; (25930 <iprintf+0x2c>)
   25908:	b513      	push	{r0, r1, r4, lr}
   2590a:	681c      	ldr	r4, [r3, #0]
   2590c:	b124      	cbz	r4, 25918 <iprintf+0x14>
   2590e:	69a3      	ldr	r3, [r4, #24]
   25910:	b913      	cbnz	r3, 25918 <iprintf+0x14>
   25912:	4620      	mov	r0, r4
   25914:	f000 fae0 	bl	25ed8 <__sinit>
   25918:	ab05      	add	r3, sp, #20
   2591a:	9a04      	ldr	r2, [sp, #16]
   2591c:	68a1      	ldr	r1, [r4, #8]
   2591e:	4620      	mov	r0, r4
   25920:	9301      	str	r3, [sp, #4]
   25922:	f000 fde9 	bl	264f8 <_vfiprintf_r>
   25926:	b002      	add	sp, #8
   25928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2592c:	b004      	add	sp, #16
   2592e:	4770      	bx	lr
   25930:	2000c724 	.word	0x2000c724

00025934 <_sbrk_r>:
   25934:	b538      	push	{r3, r4, r5, lr}
   25936:	2300      	movs	r3, #0
   25938:	4d05      	ldr	r5, [pc, #20]	; (25950 <_sbrk_r+0x1c>)
   2593a:	4604      	mov	r4, r0
   2593c:	4608      	mov	r0, r1
   2593e:	602b      	str	r3, [r5, #0]
   25940:	f7f5 ffc4 	bl	1b8cc <_sbrk>
   25944:	1c43      	adds	r3, r0, #1
   25946:	d102      	bne.n	2594e <_sbrk_r+0x1a>
   25948:	682b      	ldr	r3, [r5, #0]
   2594a:	b103      	cbz	r3, 2594e <_sbrk_r+0x1a>
   2594c:	6023      	str	r3, [r4, #0]
   2594e:	bd38      	pop	{r3, r4, r5, pc}
   25950:	2000dd88 	.word	0x2000dd88

00025954 <sniprintf>:
   25954:	b40c      	push	{r2, r3}
   25956:	4b18      	ldr	r3, [pc, #96]	; (259b8 <sniprintf+0x64>)
   25958:	b530      	push	{r4, r5, lr}
   2595a:	1e0c      	subs	r4, r1, #0
   2595c:	b09d      	sub	sp, #116	; 0x74
   2595e:	681d      	ldr	r5, [r3, #0]
   25960:	da08      	bge.n	25974 <sniprintf+0x20>
   25962:	238b      	movs	r3, #139	; 0x8b
   25964:	f04f 30ff 	mov.w	r0, #4294967295
   25968:	602b      	str	r3, [r5, #0]
   2596a:	b01d      	add	sp, #116	; 0x74
   2596c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   25970:	b002      	add	sp, #8
   25972:	4770      	bx	lr
   25974:	f44f 7302 	mov.w	r3, #520	; 0x208
   25978:	9002      	str	r0, [sp, #8]
   2597a:	9006      	str	r0, [sp, #24]
   2597c:	a902      	add	r1, sp, #8
   2597e:	f8ad 3014 	strh.w	r3, [sp, #20]
   25982:	bf14      	ite	ne
   25984:	f104 33ff 	addne.w	r3, r4, #4294967295
   25988:	4623      	moveq	r3, r4
   2598a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2598c:	4628      	mov	r0, r5
   2598e:	9304      	str	r3, [sp, #16]
   25990:	9307      	str	r3, [sp, #28]
   25992:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25996:	f8ad 3016 	strh.w	r3, [sp, #22]
   2599a:	ab21      	add	r3, sp, #132	; 0x84
   2599c:	9301      	str	r3, [sp, #4]
   2599e:	f000 fb37 	bl	26010 <_svfiprintf_r>
   259a2:	1c43      	adds	r3, r0, #1
   259a4:	bfbc      	itt	lt
   259a6:	238b      	movlt	r3, #139	; 0x8b
   259a8:	602b      	strlt	r3, [r5, #0]
   259aa:	2c00      	cmp	r4, #0
   259ac:	d0dd      	beq.n	2596a <sniprintf+0x16>
   259ae:	9b02      	ldr	r3, [sp, #8]
   259b0:	2200      	movs	r2, #0
   259b2:	701a      	strb	r2, [r3, #0]
   259b4:	e7d9      	b.n	2596a <sniprintf+0x16>
   259b6:	bf00      	nop
   259b8:	2000c724 	.word	0x2000c724

000259bc <siscanf>:
   259bc:	b40e      	push	{r1, r2, r3}
   259be:	b530      	push	{r4, r5, lr}
   259c0:	b09c      	sub	sp, #112	; 0x70
   259c2:	f44f 7201 	mov.w	r2, #516	; 0x204
   259c6:	ac1f      	add	r4, sp, #124	; 0x7c
   259c8:	f8ad 2014 	strh.w	r2, [sp, #20]
   259cc:	9002      	str	r0, [sp, #8]
   259ce:	f854 5b04 	ldr.w	r5, [r4], #4
   259d2:	9006      	str	r0, [sp, #24]
   259d4:	f7f3 fb5a 	bl	1908c <strlen>
   259d8:	4b0b      	ldr	r3, [pc, #44]	; (25a08 <siscanf+0x4c>)
   259da:	462a      	mov	r2, r5
   259dc:	9003      	str	r0, [sp, #12]
   259de:	a902      	add	r1, sp, #8
   259e0:	930b      	str	r3, [sp, #44]	; 0x2c
   259e2:	2300      	movs	r3, #0
   259e4:	9007      	str	r0, [sp, #28]
   259e6:	930f      	str	r3, [sp, #60]	; 0x3c
   259e8:	9314      	str	r3, [sp, #80]	; 0x50
   259ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   259ee:	4807      	ldr	r0, [pc, #28]	; (25a0c <siscanf+0x50>)
   259f0:	f8ad 3016 	strh.w	r3, [sp, #22]
   259f4:	4623      	mov	r3, r4
   259f6:	6800      	ldr	r0, [r0, #0]
   259f8:	9401      	str	r4, [sp, #4]
   259fa:	f000 fc05 	bl	26208 <__ssvfiscanf_r>
   259fe:	b01c      	add	sp, #112	; 0x70
   25a00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   25a04:	b003      	add	sp, #12
   25a06:	4770      	bx	lr
   25a08:	0002b237 	.word	0x0002b237
   25a0c:	2000c724 	.word	0x2000c724

00025a10 <strncasecmp>:
   25a10:	b570      	push	{r4, r5, r6, lr}
   25a12:	440a      	add	r2, r1
   25a14:	4605      	mov	r5, r0
   25a16:	4e0e      	ldr	r6, [pc, #56]	; (25a50 <strncasecmp+0x40>)
   25a18:	4291      	cmp	r1, r2
   25a1a:	d101      	bne.n	25a20 <strncasecmp+0x10>
   25a1c:	2000      	movs	r0, #0
   25a1e:	e011      	b.n	25a44 <strncasecmp+0x34>
   25a20:	f815 3b01 	ldrb.w	r3, [r5], #1
   25a24:	f811 4b01 	ldrb.w	r4, [r1], #1
   25a28:	5cf0      	ldrb	r0, [r6, r3]
   25a2a:	f000 0003 	and.w	r0, r0, #3
   25a2e:	2801      	cmp	r0, #1
   25a30:	5d30      	ldrb	r0, [r6, r4]
   25a32:	f000 0003 	and.w	r0, r0, #3
   25a36:	bf08      	it	eq
   25a38:	3320      	addeq	r3, #32
   25a3a:	2801      	cmp	r0, #1
   25a3c:	d103      	bne.n	25a46 <strncasecmp+0x36>
   25a3e:	3420      	adds	r4, #32
   25a40:	1b18      	subs	r0, r3, r4
   25a42:	d0e9      	beq.n	25a18 <strncasecmp+0x8>
   25a44:	bd70      	pop	{r4, r5, r6, pc}
   25a46:	1b18      	subs	r0, r3, r4
   25a48:	d1fc      	bne.n	25a44 <strncasecmp+0x34>
   25a4a:	2c00      	cmp	r4, #0
   25a4c:	d1e4      	bne.n	25a18 <strncasecmp+0x8>
   25a4e:	e7f9      	b.n	25a44 <strncasecmp+0x34>
   25a50:	0002e947 	.word	0x0002e947

00025a54 <_strtol_l.constprop.0>:
   25a54:	2b24      	cmp	r3, #36	; 0x24
   25a56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25a5a:	4686      	mov	lr, r0
   25a5c:	4690      	mov	r8, r2
   25a5e:	d801      	bhi.n	25a64 <_strtol_l.constprop.0+0x10>
   25a60:	2b01      	cmp	r3, #1
   25a62:	d106      	bne.n	25a72 <_strtol_l.constprop.0+0x1e>
   25a64:	f002 f8ec 	bl	27c40 <__errno>
   25a68:	2316      	movs	r3, #22
   25a6a:	6003      	str	r3, [r0, #0]
   25a6c:	2000      	movs	r0, #0
   25a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25a72:	460d      	mov	r5, r1
   25a74:	4835      	ldr	r0, [pc, #212]	; (25b4c <_strtol_l.constprop.0+0xf8>)
   25a76:	462a      	mov	r2, r5
   25a78:	f815 4b01 	ldrb.w	r4, [r5], #1
   25a7c:	5d06      	ldrb	r6, [r0, r4]
   25a7e:	f016 0608 	ands.w	r6, r6, #8
   25a82:	d1f8      	bne.n	25a76 <_strtol_l.constprop.0+0x22>
   25a84:	2c2d      	cmp	r4, #45	; 0x2d
   25a86:	d124      	bne.n	25ad2 <_strtol_l.constprop.0+0x7e>
   25a88:	782c      	ldrb	r4, [r5, #0]
   25a8a:	2601      	movs	r6, #1
   25a8c:	1c95      	adds	r5, r2, #2
   25a8e:	bb2b      	cbnz	r3, 25adc <_strtol_l.constprop.0+0x88>
   25a90:	2c30      	cmp	r4, #48	; 0x30
   25a92:	d030      	beq.n	25af6 <_strtol_l.constprop.0+0xa2>
   25a94:	230a      	movs	r3, #10
   25a96:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   25a9a:	2200      	movs	r2, #0
   25a9c:	f10c 3cff 	add.w	ip, ip, #4294967295
   25aa0:	4610      	mov	r0, r2
   25aa2:	fbbc f9f3 	udiv	r9, ip, r3
   25aa6:	fb03 ca19 	mls	sl, r3, r9, ip
   25aaa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   25aae:	2f09      	cmp	r7, #9
   25ab0:	d828      	bhi.n	25b04 <_strtol_l.constprop.0+0xb0>
   25ab2:	463c      	mov	r4, r7
   25ab4:	42a3      	cmp	r3, r4
   25ab6:	dd34      	ble.n	25b22 <_strtol_l.constprop.0+0xce>
   25ab8:	1c57      	adds	r7, r2, #1
   25aba:	d007      	beq.n	25acc <_strtol_l.constprop.0+0x78>
   25abc:	4581      	cmp	r9, r0
   25abe:	d32d      	bcc.n	25b1c <_strtol_l.constprop.0+0xc8>
   25ac0:	d101      	bne.n	25ac6 <_strtol_l.constprop.0+0x72>
   25ac2:	45a2      	cmp	sl, r4
   25ac4:	db2a      	blt.n	25b1c <_strtol_l.constprop.0+0xc8>
   25ac6:	fb00 4003 	mla	r0, r0, r3, r4
   25aca:	2201      	movs	r2, #1
   25acc:	f815 4b01 	ldrb.w	r4, [r5], #1
   25ad0:	e7eb      	b.n	25aaa <_strtol_l.constprop.0+0x56>
   25ad2:	2c2b      	cmp	r4, #43	; 0x2b
   25ad4:	bf04      	itt	eq
   25ad6:	782c      	ldrbeq	r4, [r5, #0]
   25ad8:	1c95      	addeq	r5, r2, #2
   25ada:	e7d8      	b.n	25a8e <_strtol_l.constprop.0+0x3a>
   25adc:	2b10      	cmp	r3, #16
   25ade:	d1da      	bne.n	25a96 <_strtol_l.constprop.0+0x42>
   25ae0:	2c30      	cmp	r4, #48	; 0x30
   25ae2:	d1d8      	bne.n	25a96 <_strtol_l.constprop.0+0x42>
   25ae4:	782a      	ldrb	r2, [r5, #0]
   25ae6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   25aea:	2a58      	cmp	r2, #88	; 0x58
   25aec:	d1d3      	bne.n	25a96 <_strtol_l.constprop.0+0x42>
   25aee:	786c      	ldrb	r4, [r5, #1]
   25af0:	2310      	movs	r3, #16
   25af2:	3502      	adds	r5, #2
   25af4:	e7cf      	b.n	25a96 <_strtol_l.constprop.0+0x42>
   25af6:	782b      	ldrb	r3, [r5, #0]
   25af8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   25afc:	2b58      	cmp	r3, #88	; 0x58
   25afe:	d0f6      	beq.n	25aee <_strtol_l.constprop.0+0x9a>
   25b00:	2308      	movs	r3, #8
   25b02:	e7c8      	b.n	25a96 <_strtol_l.constprop.0+0x42>
   25b04:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   25b08:	2f19      	cmp	r7, #25
   25b0a:	d801      	bhi.n	25b10 <_strtol_l.constprop.0+0xbc>
   25b0c:	3c37      	subs	r4, #55	; 0x37
   25b0e:	e7d1      	b.n	25ab4 <_strtol_l.constprop.0+0x60>
   25b10:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   25b14:	2f19      	cmp	r7, #25
   25b16:	d804      	bhi.n	25b22 <_strtol_l.constprop.0+0xce>
   25b18:	3c57      	subs	r4, #87	; 0x57
   25b1a:	e7cb      	b.n	25ab4 <_strtol_l.constprop.0+0x60>
   25b1c:	f04f 32ff 	mov.w	r2, #4294967295
   25b20:	e7d4      	b.n	25acc <_strtol_l.constprop.0+0x78>
   25b22:	1c53      	adds	r3, r2, #1
   25b24:	d108      	bne.n	25b38 <_strtol_l.constprop.0+0xe4>
   25b26:	2322      	movs	r3, #34	; 0x22
   25b28:	4660      	mov	r0, ip
   25b2a:	f8ce 3000 	str.w	r3, [lr]
   25b2e:	f1b8 0f00 	cmp.w	r8, #0
   25b32:	d09c      	beq.n	25a6e <_strtol_l.constprop.0+0x1a>
   25b34:	1e69      	subs	r1, r5, #1
   25b36:	e006      	b.n	25b46 <_strtol_l.constprop.0+0xf2>
   25b38:	b106      	cbz	r6, 25b3c <_strtol_l.constprop.0+0xe8>
   25b3a:	4240      	negs	r0, r0
   25b3c:	f1b8 0f00 	cmp.w	r8, #0
   25b40:	d095      	beq.n	25a6e <_strtol_l.constprop.0+0x1a>
   25b42:	2a00      	cmp	r2, #0
   25b44:	d1f6      	bne.n	25b34 <_strtol_l.constprop.0+0xe0>
   25b46:	f8c8 1000 	str.w	r1, [r8]
   25b4a:	e790      	b.n	25a6e <_strtol_l.constprop.0+0x1a>
   25b4c:	0002e947 	.word	0x0002e947

00025b50 <strtol>:
   25b50:	4613      	mov	r3, r2
   25b52:	460a      	mov	r2, r1
   25b54:	4601      	mov	r1, r0
   25b56:	4802      	ldr	r0, [pc, #8]	; (25b60 <strtol+0x10>)
   25b58:	6800      	ldr	r0, [r0, #0]
   25b5a:	f7ff bf7b 	b.w	25a54 <_strtol_l.constprop.0>
   25b5e:	bf00      	nop
   25b60:	2000c724 	.word	0x2000c724

00025b64 <_strtoll_l.constprop.0>:
   25b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25b68:	4690      	mov	r8, r2
   25b6a:	b085      	sub	sp, #20
   25b6c:	4689      	mov	r9, r1
   25b6e:	461e      	mov	r6, r3
   25b70:	460d      	mov	r5, r1
   25b72:	4a45      	ldr	r2, [pc, #276]	; (25c88 <_strtoll_l.constprop.0+0x124>)
   25b74:	9002      	str	r0, [sp, #8]
   25b76:	462b      	mov	r3, r5
   25b78:	f815 4b01 	ldrb.w	r4, [r5], #1
   25b7c:	5d17      	ldrb	r7, [r2, r4]
   25b7e:	f017 0708 	ands.w	r7, r7, #8
   25b82:	d1f8      	bne.n	25b76 <_strtoll_l.constprop.0+0x12>
   25b84:	2c2d      	cmp	r4, #45	; 0x2d
   25b86:	d141      	bne.n	25c0c <_strtoll_l.constprop.0+0xa8>
   25b88:	782c      	ldrb	r4, [r5, #0]
   25b8a:	2701      	movs	r7, #1
   25b8c:	1c9d      	adds	r5, r3, #2
   25b8e:	2e00      	cmp	r6, #0
   25b90:	d141      	bne.n	25c16 <_strtoll_l.constprop.0+0xb2>
   25b92:	2c30      	cmp	r4, #48	; 0x30
   25b94:	d04c      	beq.n	25c30 <_strtoll_l.constprop.0+0xcc>
   25b96:	260a      	movs	r6, #10
   25b98:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   25b9c:	f107 3bff 	add.w	fp, r7, #4294967295
   25ba0:	17f3      	asrs	r3, r6, #31
   25ba2:	4632      	mov	r2, r6
   25ba4:	f10a 3aff 	add.w	sl, sl, #4294967295
   25ba8:	4658      	mov	r0, fp
   25baa:	9303      	str	r3, [sp, #12]
   25bac:	4651      	mov	r1, sl
   25bae:	f7f3 f8fb 	bl	18da8 <__aeabi_uldivmod>
   25bb2:	9201      	str	r2, [sp, #4]
   25bb4:	2200      	movs	r2, #0
   25bb6:	468e      	mov	lr, r1
   25bb8:	4684      	mov	ip, r0
   25bba:	4611      	mov	r1, r2
   25bbc:	4610      	mov	r0, r2
   25bbe:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   25bc2:	2b09      	cmp	r3, #9
   25bc4:	d905      	bls.n	25bd2 <_strtoll_l.constprop.0+0x6e>
   25bc6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   25bca:	2b19      	cmp	r3, #25
   25bcc:	d837      	bhi.n	25c3e <_strtoll_l.constprop.0+0xda>
   25bce:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   25bd2:	429e      	cmp	r6, r3
   25bd4:	dd3d      	ble.n	25c52 <_strtoll_l.constprop.0+0xee>
   25bd6:	1c54      	adds	r4, r2, #1
   25bd8:	d015      	beq.n	25c06 <_strtoll_l.constprop.0+0xa2>
   25bda:	4584      	cmp	ip, r0
   25bdc:	eb7e 0201 	sbcs.w	r2, lr, r1
   25be0:	d334      	bcc.n	25c4c <_strtoll_l.constprop.0+0xe8>
   25be2:	458e      	cmp	lr, r1
   25be4:	bf08      	it	eq
   25be6:	4584      	cmpeq	ip, r0
   25be8:	d102      	bne.n	25bf0 <_strtoll_l.constprop.0+0x8c>
   25bea:	9a01      	ldr	r2, [sp, #4]
   25bec:	429a      	cmp	r2, r3
   25bee:	db2d      	blt.n	25c4c <_strtoll_l.constprop.0+0xe8>
   25bf0:	9a03      	ldr	r2, [sp, #12]
   25bf2:	4371      	muls	r1, r6
   25bf4:	fb00 1102 	mla	r1, r0, r2, r1
   25bf8:	fba6 0200 	umull	r0, r2, r6, r0
   25bfc:	440a      	add	r2, r1
   25bfe:	1818      	adds	r0, r3, r0
   25c00:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
   25c04:	2201      	movs	r2, #1
   25c06:	f815 4b01 	ldrb.w	r4, [r5], #1
   25c0a:	e7d8      	b.n	25bbe <_strtoll_l.constprop.0+0x5a>
   25c0c:	2c2b      	cmp	r4, #43	; 0x2b
   25c0e:	bf04      	itt	eq
   25c10:	782c      	ldrbeq	r4, [r5, #0]
   25c12:	1c9d      	addeq	r5, r3, #2
   25c14:	e7bb      	b.n	25b8e <_strtoll_l.constprop.0+0x2a>
   25c16:	2e10      	cmp	r6, #16
   25c18:	d1be      	bne.n	25b98 <_strtoll_l.constprop.0+0x34>
   25c1a:	2c30      	cmp	r4, #48	; 0x30
   25c1c:	d1bc      	bne.n	25b98 <_strtoll_l.constprop.0+0x34>
   25c1e:	782b      	ldrb	r3, [r5, #0]
   25c20:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   25c24:	2b58      	cmp	r3, #88	; 0x58
   25c26:	d1b7      	bne.n	25b98 <_strtoll_l.constprop.0+0x34>
   25c28:	786c      	ldrb	r4, [r5, #1]
   25c2a:	2610      	movs	r6, #16
   25c2c:	3502      	adds	r5, #2
   25c2e:	e7b3      	b.n	25b98 <_strtoll_l.constprop.0+0x34>
   25c30:	782b      	ldrb	r3, [r5, #0]
   25c32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   25c36:	2b58      	cmp	r3, #88	; 0x58
   25c38:	d0f6      	beq.n	25c28 <_strtoll_l.constprop.0+0xc4>
   25c3a:	2608      	movs	r6, #8
   25c3c:	e7ac      	b.n	25b98 <_strtoll_l.constprop.0+0x34>
   25c3e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   25c42:	2b19      	cmp	r3, #25
   25c44:	d805      	bhi.n	25c52 <_strtoll_l.constprop.0+0xee>
   25c46:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   25c4a:	e7c2      	b.n	25bd2 <_strtoll_l.constprop.0+0x6e>
   25c4c:	f04f 32ff 	mov.w	r2, #4294967295
   25c50:	e7d9      	b.n	25c06 <_strtoll_l.constprop.0+0xa2>
   25c52:	1c53      	adds	r3, r2, #1
   25c54:	d10a      	bne.n	25c6c <_strtoll_l.constprop.0+0x108>
   25c56:	2322      	movs	r3, #34	; 0x22
   25c58:	9a02      	ldr	r2, [sp, #8]
   25c5a:	4658      	mov	r0, fp
   25c5c:	4651      	mov	r1, sl
   25c5e:	6013      	str	r3, [r2, #0]
   25c60:	f1b8 0f00 	cmp.w	r8, #0
   25c64:	d10a      	bne.n	25c7c <_strtoll_l.constprop.0+0x118>
   25c66:	b005      	add	sp, #20
   25c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c6c:	b117      	cbz	r7, 25c74 <_strtoll_l.constprop.0+0x110>
   25c6e:	4240      	negs	r0, r0
   25c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   25c74:	f1b8 0f00 	cmp.w	r8, #0
   25c78:	d0f5      	beq.n	25c66 <_strtoll_l.constprop.0+0x102>
   25c7a:	b10a      	cbz	r2, 25c80 <_strtoll_l.constprop.0+0x11c>
   25c7c:	f105 39ff 	add.w	r9, r5, #4294967295
   25c80:	f8c8 9000 	str.w	r9, [r8]
   25c84:	e7ef      	b.n	25c66 <_strtoll_l.constprop.0+0x102>
   25c86:	bf00      	nop
   25c88:	0002e947 	.word	0x0002e947

00025c8c <strtoll>:
   25c8c:	4613      	mov	r3, r2
   25c8e:	460a      	mov	r2, r1
   25c90:	4601      	mov	r1, r0
   25c92:	4802      	ldr	r0, [pc, #8]	; (25c9c <strtoll+0x10>)
   25c94:	6800      	ldr	r0, [r0, #0]
   25c96:	f7ff bf65 	b.w	25b64 <_strtoll_l.constprop.0>
   25c9a:	bf00      	nop
   25c9c:	2000c724 	.word	0x2000c724

00025ca0 <_strtoul_l.constprop.0>:
   25ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25ca4:	4686      	mov	lr, r0
   25ca6:	460d      	mov	r5, r1
   25ca8:	4e35      	ldr	r6, [pc, #212]	; (25d80 <_strtoul_l.constprop.0+0xe0>)
   25caa:	4628      	mov	r0, r5
   25cac:	f815 4b01 	ldrb.w	r4, [r5], #1
   25cb0:	5d37      	ldrb	r7, [r6, r4]
   25cb2:	f017 0708 	ands.w	r7, r7, #8
   25cb6:	d1f8      	bne.n	25caa <_strtoul_l.constprop.0+0xa>
   25cb8:	2c2d      	cmp	r4, #45	; 0x2d
   25cba:	d126      	bne.n	25d0a <_strtoul_l.constprop.0+0x6a>
   25cbc:	782c      	ldrb	r4, [r5, #0]
   25cbe:	2701      	movs	r7, #1
   25cc0:	1c85      	adds	r5, r0, #2
   25cc2:	bb3b      	cbnz	r3, 25d14 <_strtoul_l.constprop.0+0x74>
   25cc4:	2c30      	cmp	r4, #48	; 0x30
   25cc6:	d032      	beq.n	25d2e <_strtoul_l.constprop.0+0x8e>
   25cc8:	230a      	movs	r3, #10
   25cca:	f04f 38ff 	mov.w	r8, #4294967295
   25cce:	2600      	movs	r6, #0
   25cd0:	fbb8 f8f3 	udiv	r8, r8, r3
   25cd4:	fb03 f908 	mul.w	r9, r3, r8
   25cd8:	4630      	mov	r0, r6
   25cda:	ea6f 0909 	mvn.w	r9, r9
   25cde:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   25ce2:	f1bc 0f09 	cmp.w	ip, #9
   25ce6:	d829      	bhi.n	25d3c <_strtoul_l.constprop.0+0x9c>
   25ce8:	4664      	mov	r4, ip
   25cea:	42a3      	cmp	r3, r4
   25cec:	dd37      	ble.n	25d5e <_strtoul_l.constprop.0+0xbe>
   25cee:	f1b6 3fff 	cmp.w	r6, #4294967295
   25cf2:	d007      	beq.n	25d04 <_strtoul_l.constprop.0+0x64>
   25cf4:	4580      	cmp	r8, r0
   25cf6:	d32f      	bcc.n	25d58 <_strtoul_l.constprop.0+0xb8>
   25cf8:	d101      	bne.n	25cfe <_strtoul_l.constprop.0+0x5e>
   25cfa:	45a1      	cmp	r9, r4
   25cfc:	db2c      	blt.n	25d58 <_strtoul_l.constprop.0+0xb8>
   25cfe:	fb00 4003 	mla	r0, r0, r3, r4
   25d02:	2601      	movs	r6, #1
   25d04:	f815 4b01 	ldrb.w	r4, [r5], #1
   25d08:	e7e9      	b.n	25cde <_strtoul_l.constprop.0+0x3e>
   25d0a:	2c2b      	cmp	r4, #43	; 0x2b
   25d0c:	bf04      	itt	eq
   25d0e:	782c      	ldrbeq	r4, [r5, #0]
   25d10:	1c85      	addeq	r5, r0, #2
   25d12:	e7d6      	b.n	25cc2 <_strtoul_l.constprop.0+0x22>
   25d14:	2b10      	cmp	r3, #16
   25d16:	d1d8      	bne.n	25cca <_strtoul_l.constprop.0+0x2a>
   25d18:	2c30      	cmp	r4, #48	; 0x30
   25d1a:	d1d6      	bne.n	25cca <_strtoul_l.constprop.0+0x2a>
   25d1c:	7828      	ldrb	r0, [r5, #0]
   25d1e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   25d22:	2858      	cmp	r0, #88	; 0x58
   25d24:	d1d1      	bne.n	25cca <_strtoul_l.constprop.0+0x2a>
   25d26:	786c      	ldrb	r4, [r5, #1]
   25d28:	2310      	movs	r3, #16
   25d2a:	3502      	adds	r5, #2
   25d2c:	e7cd      	b.n	25cca <_strtoul_l.constprop.0+0x2a>
   25d2e:	782b      	ldrb	r3, [r5, #0]
   25d30:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   25d34:	2b58      	cmp	r3, #88	; 0x58
   25d36:	d0f6      	beq.n	25d26 <_strtoul_l.constprop.0+0x86>
   25d38:	2308      	movs	r3, #8
   25d3a:	e7c6      	b.n	25cca <_strtoul_l.constprop.0+0x2a>
   25d3c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   25d40:	f1bc 0f19 	cmp.w	ip, #25
   25d44:	d801      	bhi.n	25d4a <_strtoul_l.constprop.0+0xaa>
   25d46:	3c37      	subs	r4, #55	; 0x37
   25d48:	e7cf      	b.n	25cea <_strtoul_l.constprop.0+0x4a>
   25d4a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   25d4e:	f1bc 0f19 	cmp.w	ip, #25
   25d52:	d804      	bhi.n	25d5e <_strtoul_l.constprop.0+0xbe>
   25d54:	3c57      	subs	r4, #87	; 0x57
   25d56:	e7c8      	b.n	25cea <_strtoul_l.constprop.0+0x4a>
   25d58:	f04f 36ff 	mov.w	r6, #4294967295
   25d5c:	e7d2      	b.n	25d04 <_strtoul_l.constprop.0+0x64>
   25d5e:	1c73      	adds	r3, r6, #1
   25d60:	d106      	bne.n	25d70 <_strtoul_l.constprop.0+0xd0>
   25d62:	2322      	movs	r3, #34	; 0x22
   25d64:	4630      	mov	r0, r6
   25d66:	f8ce 3000 	str.w	r3, [lr]
   25d6a:	b932      	cbnz	r2, 25d7a <_strtoul_l.constprop.0+0xda>
   25d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25d70:	b107      	cbz	r7, 25d74 <_strtoul_l.constprop.0+0xd4>
   25d72:	4240      	negs	r0, r0
   25d74:	2a00      	cmp	r2, #0
   25d76:	d0f9      	beq.n	25d6c <_strtoul_l.constprop.0+0xcc>
   25d78:	b106      	cbz	r6, 25d7c <_strtoul_l.constprop.0+0xdc>
   25d7a:	1e69      	subs	r1, r5, #1
   25d7c:	6011      	str	r1, [r2, #0]
   25d7e:	e7f5      	b.n	25d6c <_strtoul_l.constprop.0+0xcc>
   25d80:	0002e947 	.word	0x0002e947

00025d84 <strtoul>:
   25d84:	4613      	mov	r3, r2
   25d86:	460a      	mov	r2, r1
   25d88:	4601      	mov	r1, r0
   25d8a:	4802      	ldr	r0, [pc, #8]	; (25d94 <strtoul+0x10>)
   25d8c:	6800      	ldr	r0, [r0, #0]
   25d8e:	f7ff bf87 	b.w	25ca0 <_strtoul_l.constprop.0>
   25d92:	bf00      	nop
   25d94:	2000c724 	.word	0x2000c724

00025d98 <vsniprintf>:
   25d98:	b507      	push	{r0, r1, r2, lr}
   25d9a:	9300      	str	r3, [sp, #0]
   25d9c:	4613      	mov	r3, r2
   25d9e:	460a      	mov	r2, r1
   25da0:	4601      	mov	r1, r0
   25da2:	4803      	ldr	r0, [pc, #12]	; (25db0 <vsniprintf+0x18>)
   25da4:	6800      	ldr	r0, [r0, #0]
   25da6:	f005 faee 	bl	2b386 <_vsniprintf_r>
   25daa:	b003      	add	sp, #12
   25dac:	f85d fb04 	ldr.w	pc, [sp], #4
   25db0:	2000c724 	.word	0x2000c724

00025db4 <_vsiscanf_r>:
   25db4:	b570      	push	{r4, r5, r6, lr}
   25db6:	461e      	mov	r6, r3
   25db8:	b09a      	sub	sp, #104	; 0x68
   25dba:	f44f 7301 	mov.w	r3, #516	; 0x204
   25dbe:	4604      	mov	r4, r0
   25dc0:	4608      	mov	r0, r1
   25dc2:	4615      	mov	r5, r2
   25dc4:	f8ad 300c 	strh.w	r3, [sp, #12]
   25dc8:	9100      	str	r1, [sp, #0]
   25dca:	9104      	str	r1, [sp, #16]
   25dcc:	f7f3 f95e 	bl	1908c <strlen>
   25dd0:	4b09      	ldr	r3, [pc, #36]	; (25df8 <_vsiscanf_r+0x44>)
   25dd2:	462a      	mov	r2, r5
   25dd4:	4669      	mov	r1, sp
   25dd6:	9001      	str	r0, [sp, #4]
   25dd8:	9309      	str	r3, [sp, #36]	; 0x24
   25dda:	2300      	movs	r3, #0
   25ddc:	9005      	str	r0, [sp, #20]
   25dde:	4620      	mov	r0, r4
   25de0:	930d      	str	r3, [sp, #52]	; 0x34
   25de2:	9312      	str	r3, [sp, #72]	; 0x48
   25de4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25de8:	f8ad 300e 	strh.w	r3, [sp, #14]
   25dec:	4633      	mov	r3, r6
   25dee:	f000 fa0b 	bl	26208 <__ssvfiscanf_r>
   25df2:	b01a      	add	sp, #104	; 0x68
   25df4:	bd70      	pop	{r4, r5, r6, pc}
   25df6:	bf00      	nop
   25df8:	0002b237 	.word	0x0002b237

00025dfc <vsiscanf>:
   25dfc:	4613      	mov	r3, r2
   25dfe:	460a      	mov	r2, r1
   25e00:	4601      	mov	r1, r0
   25e02:	4802      	ldr	r0, [pc, #8]	; (25e0c <vsiscanf+0x10>)
   25e04:	6800      	ldr	r0, [r0, #0]
   25e06:	f7ff bfd5 	b.w	25db4 <_vsiscanf_r>
   25e0a:	bf00      	nop
   25e0c:	2000c724 	.word	0x2000c724

00025e10 <_write_r>:
   25e10:	b538      	push	{r3, r4, r5, lr}
   25e12:	4604      	mov	r4, r0
   25e14:	4d06      	ldr	r5, [pc, #24]	; (25e30 <_write_r+0x20>)
   25e16:	4608      	mov	r0, r1
   25e18:	4611      	mov	r1, r2
   25e1a:	2200      	movs	r2, #0
   25e1c:	602a      	str	r2, [r5, #0]
   25e1e:	461a      	mov	r2, r3
   25e20:	f001 fee9 	bl	27bf6 <_write>
   25e24:	1c43      	adds	r3, r0, #1
   25e26:	d102      	bne.n	25e2e <_write_r+0x1e>
   25e28:	682b      	ldr	r3, [r5, #0]
   25e2a:	b103      	cbz	r3, 25e2e <_write_r+0x1e>
   25e2c:	6023      	str	r3, [r4, #0]
   25e2e:	bd38      	pop	{r3, r4, r5, pc}
   25e30:	2000dd88 	.word	0x2000dd88

00025e34 <_close_r>:
   25e34:	b538      	push	{r3, r4, r5, lr}
   25e36:	2300      	movs	r3, #0
   25e38:	4d05      	ldr	r5, [pc, #20]	; (25e50 <_close_r+0x1c>)
   25e3a:	4604      	mov	r4, r0
   25e3c:	4608      	mov	r0, r1
   25e3e:	602b      	str	r3, [r5, #0]
   25e40:	f001 fedd 	bl	27bfe <_close>
   25e44:	1c43      	adds	r3, r0, #1
   25e46:	d102      	bne.n	25e4e <_close_r+0x1a>
   25e48:	682b      	ldr	r3, [r5, #0]
   25e4a:	b103      	cbz	r3, 25e4e <_close_r+0x1a>
   25e4c:	6023      	str	r3, [r4, #0]
   25e4e:	bd38      	pop	{r3, r4, r5, pc}
   25e50:	2000dd88 	.word	0x2000dd88

00025e54 <std>:
   25e54:	2300      	movs	r3, #0
   25e56:	b510      	push	{r4, lr}
   25e58:	4604      	mov	r4, r0
   25e5a:	6083      	str	r3, [r0, #8]
   25e5c:	8181      	strh	r1, [r0, #12]
   25e5e:	4619      	mov	r1, r3
   25e60:	6643      	str	r3, [r0, #100]	; 0x64
   25e62:	81c2      	strh	r2, [r0, #14]
   25e64:	2208      	movs	r2, #8
   25e66:	6183      	str	r3, [r0, #24]
   25e68:	e9c0 3300 	strd	r3, r3, [r0]
   25e6c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   25e70:	305c      	adds	r0, #92	; 0x5c
   25e72:	f005 f9c7 	bl	2b204 <memset>
   25e76:	4b05      	ldr	r3, [pc, #20]	; (25e8c <std+0x38>)
   25e78:	6224      	str	r4, [r4, #32]
   25e7a:	6263      	str	r3, [r4, #36]	; 0x24
   25e7c:	4b04      	ldr	r3, [pc, #16]	; (25e90 <std+0x3c>)
   25e7e:	62a3      	str	r3, [r4, #40]	; 0x28
   25e80:	4b04      	ldr	r3, [pc, #16]	; (25e94 <std+0x40>)
   25e82:	62e3      	str	r3, [r4, #44]	; 0x2c
   25e84:	4b04      	ldr	r3, [pc, #16]	; (25e98 <std+0x44>)
   25e86:	6323      	str	r3, [r4, #48]	; 0x30
   25e88:	bd10      	pop	{r4, pc}
   25e8a:	bf00      	nop
   25e8c:	0002b215 	.word	0x0002b215
   25e90:	0002b23b 	.word	0x0002b23b
   25e94:	0002b273 	.word	0x0002b273
   25e98:	0002b297 	.word	0x0002b297

00025e9c <_cleanup_r>:
   25e9c:	4901      	ldr	r1, [pc, #4]	; (25ea4 <_cleanup_r+0x8>)
   25e9e:	f005 bab3 	b.w	2b408 <_fwalk_reent>
   25ea2:	bf00      	nop
   25ea4:	00026dfd 	.word	0x00026dfd

00025ea8 <__sfp_lock_acquire>:
   25ea8:	4801      	ldr	r0, [pc, #4]	; (25eb0 <__sfp_lock_acquire+0x8>)
   25eaa:	f001 bec1 	b.w	27c30 <__retarget_lock_acquire_recursive>
   25eae:	bf00      	nop
   25eb0:	2000c870 	.word	0x2000c870

00025eb4 <__sfp_lock_release>:
   25eb4:	4801      	ldr	r0, [pc, #4]	; (25ebc <__sfp_lock_release+0x8>)
   25eb6:	f001 bec1 	b.w	27c3c <__retarget_lock_release_recursive>
   25eba:	bf00      	nop
   25ebc:	2000c870 	.word	0x2000c870

00025ec0 <__sinit_lock_acquire>:
   25ec0:	4801      	ldr	r0, [pc, #4]	; (25ec8 <__sinit_lock_acquire+0x8>)
   25ec2:	f001 beb5 	b.w	27c30 <__retarget_lock_acquire_recursive>
   25ec6:	bf00      	nop
   25ec8:	2000c884 	.word	0x2000c884

00025ecc <__sinit_lock_release>:
   25ecc:	4801      	ldr	r0, [pc, #4]	; (25ed4 <__sinit_lock_release+0x8>)
   25ece:	f001 beb5 	b.w	27c3c <__retarget_lock_release_recursive>
   25ed2:	bf00      	nop
   25ed4:	2000c884 	.word	0x2000c884

00025ed8 <__sinit>:
   25ed8:	b510      	push	{r4, lr}
   25eda:	4604      	mov	r4, r0
   25edc:	f7ff fff0 	bl	25ec0 <__sinit_lock_acquire>
   25ee0:	69a3      	ldr	r3, [r4, #24]
   25ee2:	b11b      	cbz	r3, 25eec <__sinit+0x14>
   25ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25ee8:	f7ff bff0 	b.w	25ecc <__sinit_lock_release>
   25eec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   25ef0:	6523      	str	r3, [r4, #80]	; 0x50
   25ef2:	4620      	mov	r0, r4
   25ef4:	4b12      	ldr	r3, [pc, #72]	; (25f40 <__sinit+0x68>)
   25ef6:	4a13      	ldr	r2, [pc, #76]	; (25f44 <__sinit+0x6c>)
   25ef8:	681b      	ldr	r3, [r3, #0]
   25efa:	62a2      	str	r2, [r4, #40]	; 0x28
   25efc:	42a3      	cmp	r3, r4
   25efe:	bf04      	itt	eq
   25f00:	2301      	moveq	r3, #1
   25f02:	61a3      	streq	r3, [r4, #24]
   25f04:	f000 f820 	bl	25f48 <__sfp>
   25f08:	6060      	str	r0, [r4, #4]
   25f0a:	4620      	mov	r0, r4
   25f0c:	f000 f81c 	bl	25f48 <__sfp>
   25f10:	60a0      	str	r0, [r4, #8]
   25f12:	4620      	mov	r0, r4
   25f14:	f000 f818 	bl	25f48 <__sfp>
   25f18:	2200      	movs	r2, #0
   25f1a:	2104      	movs	r1, #4
   25f1c:	60e0      	str	r0, [r4, #12]
   25f1e:	6860      	ldr	r0, [r4, #4]
   25f20:	f7ff ff98 	bl	25e54 <std>
   25f24:	2201      	movs	r2, #1
   25f26:	2109      	movs	r1, #9
   25f28:	68a0      	ldr	r0, [r4, #8]
   25f2a:	f7ff ff93 	bl	25e54 <std>
   25f2e:	2202      	movs	r2, #2
   25f30:	2112      	movs	r1, #18
   25f32:	68e0      	ldr	r0, [r4, #12]
   25f34:	f7ff ff8e 	bl	25e54 <std>
   25f38:	2301      	movs	r3, #1
   25f3a:	61a3      	str	r3, [r4, #24]
   25f3c:	e7d2      	b.n	25ee4 <__sinit+0xc>
   25f3e:	bf00      	nop
   25f40:	0002cb88 	.word	0x0002cb88
   25f44:	00025e9d 	.word	0x00025e9d

00025f48 <__sfp>:
   25f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25f4a:	4607      	mov	r7, r0
   25f4c:	f7ff ffac 	bl	25ea8 <__sfp_lock_acquire>
   25f50:	4b1e      	ldr	r3, [pc, #120]	; (25fcc <__sfp+0x84>)
   25f52:	681e      	ldr	r6, [r3, #0]
   25f54:	69b3      	ldr	r3, [r6, #24]
   25f56:	b913      	cbnz	r3, 25f5e <__sfp+0x16>
   25f58:	4630      	mov	r0, r6
   25f5a:	f7ff ffbd 	bl	25ed8 <__sinit>
   25f5e:	3648      	adds	r6, #72	; 0x48
   25f60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   25f64:	3b01      	subs	r3, #1
   25f66:	d503      	bpl.n	25f70 <__sfp+0x28>
   25f68:	6833      	ldr	r3, [r6, #0]
   25f6a:	b30b      	cbz	r3, 25fb0 <__sfp+0x68>
   25f6c:	6836      	ldr	r6, [r6, #0]
   25f6e:	e7f7      	b.n	25f60 <__sfp+0x18>
   25f70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   25f74:	b9d5      	cbnz	r5, 25fac <__sfp+0x64>
   25f76:	4b16      	ldr	r3, [pc, #88]	; (25fd0 <__sfp+0x88>)
   25f78:	f104 0058 	add.w	r0, r4, #88	; 0x58
   25f7c:	6665      	str	r5, [r4, #100]	; 0x64
   25f7e:	60e3      	str	r3, [r4, #12]
   25f80:	f001 fe4c 	bl	27c1c <__retarget_lock_init_recursive>
   25f84:	f7ff ff96 	bl	25eb4 <__sfp_lock_release>
   25f88:	2208      	movs	r2, #8
   25f8a:	4629      	mov	r1, r5
   25f8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   25f90:	6025      	str	r5, [r4, #0]
   25f92:	61a5      	str	r5, [r4, #24]
   25f94:	e9c4 5501 	strd	r5, r5, [r4, #4]
   25f98:	e9c4 5504 	strd	r5, r5, [r4, #16]
   25f9c:	f005 f932 	bl	2b204 <memset>
   25fa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   25fa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   25fa8:	4620      	mov	r0, r4
   25faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25fac:	3468      	adds	r4, #104	; 0x68
   25fae:	e7d9      	b.n	25f64 <__sfp+0x1c>
   25fb0:	2104      	movs	r1, #4
   25fb2:	4638      	mov	r0, r7
   25fb4:	f005 fa12 	bl	2b3dc <__sfmoreglue>
   25fb8:	4604      	mov	r4, r0
   25fba:	6030      	str	r0, [r6, #0]
   25fbc:	2800      	cmp	r0, #0
   25fbe:	d1d5      	bne.n	25f6c <__sfp+0x24>
   25fc0:	f7ff ff78 	bl	25eb4 <__sfp_lock_release>
   25fc4:	230c      	movs	r3, #12
   25fc6:	603b      	str	r3, [r7, #0]
   25fc8:	e7ee      	b.n	25fa8 <__sfp+0x60>
   25fca:	bf00      	nop
   25fcc:	0002cb88 	.word	0x0002cb88
   25fd0:	ffff0001 	.word	0xffff0001

00025fd4 <_lseek_r>:
   25fd4:	b538      	push	{r3, r4, r5, lr}
   25fd6:	4604      	mov	r4, r0
   25fd8:	4d06      	ldr	r5, [pc, #24]	; (25ff4 <_lseek_r+0x20>)
   25fda:	4608      	mov	r0, r1
   25fdc:	4611      	mov	r1, r2
   25fde:	2200      	movs	r2, #0
   25fe0:	602a      	str	r2, [r5, #0]
   25fe2:	461a      	mov	r2, r3
   25fe4:	f001 fe0e 	bl	27c04 <_lseek>
   25fe8:	1c43      	adds	r3, r0, #1
   25fea:	d102      	bne.n	25ff2 <_lseek_r+0x1e>
   25fec:	682b      	ldr	r3, [r5, #0]
   25fee:	b103      	cbz	r3, 25ff2 <_lseek_r+0x1e>
   25ff0:	6023      	str	r3, [r4, #0]
   25ff2:	bd38      	pop	{r3, r4, r5, pc}
   25ff4:	2000dd88 	.word	0x2000dd88

00025ff8 <__malloc_lock>:
   25ff8:	4801      	ldr	r0, [pc, #4]	; (26000 <__malloc_lock+0x8>)
   25ffa:	f001 be19 	b.w	27c30 <__retarget_lock_acquire_recursive>
   25ffe:	bf00      	nop
   26000:	2000c85c 	.word	0x2000c85c

00026004 <__malloc_unlock>:
   26004:	4801      	ldr	r0, [pc, #4]	; (2600c <__malloc_unlock+0x8>)
   26006:	f001 be19 	b.w	27c3c <__retarget_lock_release_recursive>
   2600a:	bf00      	nop
   2600c:	2000c85c 	.word	0x2000c85c

00026010 <_svfiprintf_r>:
   26010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26014:	4698      	mov	r8, r3
   26016:	898b      	ldrh	r3, [r1, #12]
   26018:	b09d      	sub	sp, #116	; 0x74
   2601a:	4607      	mov	r7, r0
   2601c:	061b      	lsls	r3, r3, #24
   2601e:	460d      	mov	r5, r1
   26020:	4614      	mov	r4, r2
   26022:	d510      	bpl.n	26046 <_svfiprintf_r+0x36>
   26024:	690b      	ldr	r3, [r1, #16]
   26026:	b973      	cbnz	r3, 26046 <_svfiprintf_r+0x36>
   26028:	2140      	movs	r1, #64	; 0x40
   2602a:	f7ff fc11 	bl	25850 <_malloc_r>
   2602e:	6028      	str	r0, [r5, #0]
   26030:	6128      	str	r0, [r5, #16]
   26032:	b930      	cbnz	r0, 26042 <_svfiprintf_r+0x32>
   26034:	230c      	movs	r3, #12
   26036:	603b      	str	r3, [r7, #0]
   26038:	f04f 30ff 	mov.w	r0, #4294967295
   2603c:	b01d      	add	sp, #116	; 0x74
   2603e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26042:	2340      	movs	r3, #64	; 0x40
   26044:	616b      	str	r3, [r5, #20]
   26046:	2300      	movs	r3, #0
   26048:	f8cd 800c 	str.w	r8, [sp, #12]
   2604c:	f04f 0901 	mov.w	r9, #1
   26050:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 261f4 <_svfiprintf_r+0x1e4>
   26054:	9309      	str	r3, [sp, #36]	; 0x24
   26056:	2320      	movs	r3, #32
   26058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2605c:	2330      	movs	r3, #48	; 0x30
   2605e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   26062:	4623      	mov	r3, r4
   26064:	469a      	mov	sl, r3
   26066:	f813 2b01 	ldrb.w	r2, [r3], #1
   2606a:	b10a      	cbz	r2, 26070 <_svfiprintf_r+0x60>
   2606c:	2a25      	cmp	r2, #37	; 0x25
   2606e:	d1f9      	bne.n	26064 <_svfiprintf_r+0x54>
   26070:	ebba 0b04 	subs.w	fp, sl, r4
   26074:	d00b      	beq.n	2608e <_svfiprintf_r+0x7e>
   26076:	465b      	mov	r3, fp
   26078:	4622      	mov	r2, r4
   2607a:	4629      	mov	r1, r5
   2607c:	4638      	mov	r0, r7
   2607e:	f005 f9e2 	bl	2b446 <__ssputs_r>
   26082:	3001      	adds	r0, #1
   26084:	f000 80a7 	beq.w	261d6 <_svfiprintf_r+0x1c6>
   26088:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2608a:	445a      	add	r2, fp
   2608c:	9209      	str	r2, [sp, #36]	; 0x24
   2608e:	f89a 3000 	ldrb.w	r3, [sl]
   26092:	2b00      	cmp	r3, #0
   26094:	f000 809f 	beq.w	261d6 <_svfiprintf_r+0x1c6>
   26098:	2300      	movs	r3, #0
   2609a:	f04f 32ff 	mov.w	r2, #4294967295
   2609e:	f10a 0a01 	add.w	sl, sl, #1
   260a2:	9304      	str	r3, [sp, #16]
   260a4:	9307      	str	r3, [sp, #28]
   260a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   260aa:	931a      	str	r3, [sp, #104]	; 0x68
   260ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
   260b0:	4654      	mov	r4, sl
   260b2:	2205      	movs	r2, #5
   260b4:	484f      	ldr	r0, [pc, #316]	; (261f4 <_svfiprintf_r+0x1e4>)
   260b6:	f814 1b01 	ldrb.w	r1, [r4], #1
   260ba:	f005 f878 	bl	2b1ae <memchr>
   260be:	9a04      	ldr	r2, [sp, #16]
   260c0:	b9d8      	cbnz	r0, 260fa <_svfiprintf_r+0xea>
   260c2:	06d0      	lsls	r0, r2, #27
   260c4:	bf44      	itt	mi
   260c6:	2320      	movmi	r3, #32
   260c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   260cc:	0711      	lsls	r1, r2, #28
   260ce:	bf44      	itt	mi
   260d0:	232b      	movmi	r3, #43	; 0x2b
   260d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   260d6:	f89a 3000 	ldrb.w	r3, [sl]
   260da:	2b2a      	cmp	r3, #42	; 0x2a
   260dc:	d015      	beq.n	2610a <_svfiprintf_r+0xfa>
   260de:	9a07      	ldr	r2, [sp, #28]
   260e0:	4654      	mov	r4, sl
   260e2:	2000      	movs	r0, #0
   260e4:	f04f 0c0a 	mov.w	ip, #10
   260e8:	4621      	mov	r1, r4
   260ea:	f811 3b01 	ldrb.w	r3, [r1], #1
   260ee:	3b30      	subs	r3, #48	; 0x30
   260f0:	2b09      	cmp	r3, #9
   260f2:	d94b      	bls.n	2618c <_svfiprintf_r+0x17c>
   260f4:	b1b0      	cbz	r0, 26124 <_svfiprintf_r+0x114>
   260f6:	9207      	str	r2, [sp, #28]
   260f8:	e014      	b.n	26124 <_svfiprintf_r+0x114>
   260fa:	eba0 0308 	sub.w	r3, r0, r8
   260fe:	46a2      	mov	sl, r4
   26100:	fa09 f303 	lsl.w	r3, r9, r3
   26104:	4313      	orrs	r3, r2
   26106:	9304      	str	r3, [sp, #16]
   26108:	e7d2      	b.n	260b0 <_svfiprintf_r+0xa0>
   2610a:	9b03      	ldr	r3, [sp, #12]
   2610c:	1d19      	adds	r1, r3, #4
   2610e:	681b      	ldr	r3, [r3, #0]
   26110:	2b00      	cmp	r3, #0
   26112:	9103      	str	r1, [sp, #12]
   26114:	bfbb      	ittet	lt
   26116:	425b      	neglt	r3, r3
   26118:	f042 0202 	orrlt.w	r2, r2, #2
   2611c:	9307      	strge	r3, [sp, #28]
   2611e:	9307      	strlt	r3, [sp, #28]
   26120:	bfb8      	it	lt
   26122:	9204      	strlt	r2, [sp, #16]
   26124:	7823      	ldrb	r3, [r4, #0]
   26126:	2b2e      	cmp	r3, #46	; 0x2e
   26128:	d10a      	bne.n	26140 <_svfiprintf_r+0x130>
   2612a:	7863      	ldrb	r3, [r4, #1]
   2612c:	2b2a      	cmp	r3, #42	; 0x2a
   2612e:	d132      	bne.n	26196 <_svfiprintf_r+0x186>
   26130:	9b03      	ldr	r3, [sp, #12]
   26132:	3402      	adds	r4, #2
   26134:	1d1a      	adds	r2, r3, #4
   26136:	681b      	ldr	r3, [r3, #0]
   26138:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   2613c:	9203      	str	r2, [sp, #12]
   2613e:	9305      	str	r3, [sp, #20]
   26140:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 261f8 <_svfiprintf_r+0x1e8>
   26144:	2203      	movs	r2, #3
   26146:	7821      	ldrb	r1, [r4, #0]
   26148:	4650      	mov	r0, sl
   2614a:	f005 f830 	bl	2b1ae <memchr>
   2614e:	b138      	cbz	r0, 26160 <_svfiprintf_r+0x150>
   26150:	eba0 000a 	sub.w	r0, r0, sl
   26154:	2240      	movs	r2, #64	; 0x40
   26156:	9b04      	ldr	r3, [sp, #16]
   26158:	3401      	adds	r4, #1
   2615a:	4082      	lsls	r2, r0
   2615c:	4313      	orrs	r3, r2
   2615e:	9304      	str	r3, [sp, #16]
   26160:	f814 1b01 	ldrb.w	r1, [r4], #1
   26164:	2206      	movs	r2, #6
   26166:	4825      	ldr	r0, [pc, #148]	; (261fc <_svfiprintf_r+0x1ec>)
   26168:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2616c:	f005 f81f 	bl	2b1ae <memchr>
   26170:	2800      	cmp	r0, #0
   26172:	d036      	beq.n	261e2 <_svfiprintf_r+0x1d2>
   26174:	4b22      	ldr	r3, [pc, #136]	; (26200 <_svfiprintf_r+0x1f0>)
   26176:	bb1b      	cbnz	r3, 261c0 <_svfiprintf_r+0x1b0>
   26178:	9b03      	ldr	r3, [sp, #12]
   2617a:	3307      	adds	r3, #7
   2617c:	f023 0307 	bic.w	r3, r3, #7
   26180:	3308      	adds	r3, #8
   26182:	9303      	str	r3, [sp, #12]
   26184:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26186:	4433      	add	r3, r6
   26188:	9309      	str	r3, [sp, #36]	; 0x24
   2618a:	e76a      	b.n	26062 <_svfiprintf_r+0x52>
   2618c:	fb0c 3202 	mla	r2, ip, r2, r3
   26190:	460c      	mov	r4, r1
   26192:	2001      	movs	r0, #1
   26194:	e7a8      	b.n	260e8 <_svfiprintf_r+0xd8>
   26196:	2300      	movs	r3, #0
   26198:	3401      	adds	r4, #1
   2619a:	f04f 0c0a 	mov.w	ip, #10
   2619e:	4619      	mov	r1, r3
   261a0:	9305      	str	r3, [sp, #20]
   261a2:	4620      	mov	r0, r4
   261a4:	f810 2b01 	ldrb.w	r2, [r0], #1
   261a8:	3a30      	subs	r2, #48	; 0x30
   261aa:	2a09      	cmp	r2, #9
   261ac:	d903      	bls.n	261b6 <_svfiprintf_r+0x1a6>
   261ae:	2b00      	cmp	r3, #0
   261b0:	d0c6      	beq.n	26140 <_svfiprintf_r+0x130>
   261b2:	9105      	str	r1, [sp, #20]
   261b4:	e7c4      	b.n	26140 <_svfiprintf_r+0x130>
   261b6:	fb0c 2101 	mla	r1, ip, r1, r2
   261ba:	4604      	mov	r4, r0
   261bc:	2301      	movs	r3, #1
   261be:	e7f0      	b.n	261a2 <_svfiprintf_r+0x192>
   261c0:	ab03      	add	r3, sp, #12
   261c2:	462a      	mov	r2, r5
   261c4:	a904      	add	r1, sp, #16
   261c6:	4638      	mov	r0, r7
   261c8:	9300      	str	r3, [sp, #0]
   261ca:	4b0e      	ldr	r3, [pc, #56]	; (26204 <_svfiprintf_r+0x1f4>)
   261cc:	f3af 8000 	nop.w
   261d0:	1c42      	adds	r2, r0, #1
   261d2:	4606      	mov	r6, r0
   261d4:	d1d6      	bne.n	26184 <_svfiprintf_r+0x174>
   261d6:	89ab      	ldrh	r3, [r5, #12]
   261d8:	065b      	lsls	r3, r3, #25
   261da:	f53f af2d 	bmi.w	26038 <_svfiprintf_r+0x28>
   261de:	9809      	ldr	r0, [sp, #36]	; 0x24
   261e0:	e72c      	b.n	2603c <_svfiprintf_r+0x2c>
   261e2:	ab03      	add	r3, sp, #12
   261e4:	462a      	mov	r2, r5
   261e6:	a904      	add	r1, sp, #16
   261e8:	4638      	mov	r0, r7
   261ea:	9300      	str	r3, [sp, #0]
   261ec:	4b05      	ldr	r3, [pc, #20]	; (26204 <_svfiprintf_r+0x1f4>)
   261ee:	f000 faaf 	bl	26750 <_printf_i>
   261f2:	e7ed      	b.n	261d0 <_svfiprintf_r+0x1c0>
   261f4:	0002ea47 	.word	0x0002ea47
   261f8:	0002ea4d 	.word	0x0002ea4d
   261fc:	0002ea51 	.word	0x0002ea51
   26200:	00000000 	.word	0x00000000
   26204:	0002b447 	.word	0x0002b447

00026208 <__ssvfiscanf_r>:
   26208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2620c:	460c      	mov	r4, r1
   2620e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   26212:	2100      	movs	r1, #0
   26214:	4606      	mov	r6, r0
   26216:	f10d 0804 	add.w	r8, sp, #4
   2621a:	4fa7      	ldr	r7, [pc, #668]	; (264b8 <__ssvfiscanf_r+0x2b0>)
   2621c:	9300      	str	r3, [sp, #0]
   2621e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   26222:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   26226:	49a5      	ldr	r1, [pc, #660]	; (264bc <__ssvfiscanf_r+0x2b4>)
   26228:	91a0      	str	r1, [sp, #640]	; 0x280
   2622a:	49a5      	ldr	r1, [pc, #660]	; (264c0 <__ssvfiscanf_r+0x2b8>)
   2622c:	91a1      	str	r1, [sp, #644]	; 0x284
   2622e:	7813      	ldrb	r3, [r2, #0]
   26230:	2b00      	cmp	r3, #0
   26232:	f000 815c 	beq.w	264ee <__ssvfiscanf_r+0x2e6>
   26236:	5cf9      	ldrb	r1, [r7, r3]
   26238:	1c55      	adds	r5, r2, #1
   2623a:	f011 0108 	ands.w	r1, r1, #8
   2623e:	d019      	beq.n	26274 <__ssvfiscanf_r+0x6c>
   26240:	6863      	ldr	r3, [r4, #4]
   26242:	2b00      	cmp	r3, #0
   26244:	dd0f      	ble.n	26266 <__ssvfiscanf_r+0x5e>
   26246:	6823      	ldr	r3, [r4, #0]
   26248:	781a      	ldrb	r2, [r3, #0]
   2624a:	5cba      	ldrb	r2, [r7, r2]
   2624c:	0712      	lsls	r2, r2, #28
   2624e:	d401      	bmi.n	26254 <__ssvfiscanf_r+0x4c>
   26250:	462a      	mov	r2, r5
   26252:	e7ec      	b.n	2622e <__ssvfiscanf_r+0x26>
   26254:	9a45      	ldr	r2, [sp, #276]	; 0x114
   26256:	3301      	adds	r3, #1
   26258:	3201      	adds	r2, #1
   2625a:	6023      	str	r3, [r4, #0]
   2625c:	9245      	str	r2, [sp, #276]	; 0x114
   2625e:	6862      	ldr	r2, [r4, #4]
   26260:	3a01      	subs	r2, #1
   26262:	6062      	str	r2, [r4, #4]
   26264:	e7ec      	b.n	26240 <__ssvfiscanf_r+0x38>
   26266:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   26268:	4621      	mov	r1, r4
   2626a:	4630      	mov	r0, r6
   2626c:	4798      	blx	r3
   2626e:	2800      	cmp	r0, #0
   26270:	d0e9      	beq.n	26246 <__ssvfiscanf_r+0x3e>
   26272:	e7ed      	b.n	26250 <__ssvfiscanf_r+0x48>
   26274:	2b25      	cmp	r3, #37	; 0x25
   26276:	d012      	beq.n	2629e <__ssvfiscanf_r+0x96>
   26278:	4699      	mov	r9, r3
   2627a:	6863      	ldr	r3, [r4, #4]
   2627c:	2b00      	cmp	r3, #0
   2627e:	f340 8094 	ble.w	263aa <__ssvfiscanf_r+0x1a2>
   26282:	6822      	ldr	r2, [r4, #0]
   26284:	7813      	ldrb	r3, [r2, #0]
   26286:	454b      	cmp	r3, r9
   26288:	f040 8131 	bne.w	264ee <__ssvfiscanf_r+0x2e6>
   2628c:	6863      	ldr	r3, [r4, #4]
   2628e:	3201      	adds	r2, #1
   26290:	3b01      	subs	r3, #1
   26292:	6022      	str	r2, [r4, #0]
   26294:	6063      	str	r3, [r4, #4]
   26296:	9b45      	ldr	r3, [sp, #276]	; 0x114
   26298:	3301      	adds	r3, #1
   2629a:	9345      	str	r3, [sp, #276]	; 0x114
   2629c:	e7d8      	b.n	26250 <__ssvfiscanf_r+0x48>
   2629e:	9141      	str	r1, [sp, #260]	; 0x104
   262a0:	9143      	str	r1, [sp, #268]	; 0x10c
   262a2:	7853      	ldrb	r3, [r2, #1]
   262a4:	2b2a      	cmp	r3, #42	; 0x2a
   262a6:	bf04      	itt	eq
   262a8:	2310      	moveq	r3, #16
   262aa:	1c95      	addeq	r5, r2, #2
   262ac:	f04f 020a 	mov.w	r2, #10
   262b0:	bf08      	it	eq
   262b2:	9341      	streq	r3, [sp, #260]	; 0x104
   262b4:	46a9      	mov	r9, r5
   262b6:	f819 1b01 	ldrb.w	r1, [r9], #1
   262ba:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   262be:	2b09      	cmp	r3, #9
   262c0:	d91e      	bls.n	26300 <__ssvfiscanf_r+0xf8>
   262c2:	f8df a200 	ldr.w	sl, [pc, #512]	; 264c4 <__ssvfiscanf_r+0x2bc>
   262c6:	2203      	movs	r2, #3
   262c8:	4650      	mov	r0, sl
   262ca:	f004 ff70 	bl	2b1ae <memchr>
   262ce:	b138      	cbz	r0, 262e0 <__ssvfiscanf_r+0xd8>
   262d0:	eba0 000a 	sub.w	r0, r0, sl
   262d4:	2301      	movs	r3, #1
   262d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
   262d8:	464d      	mov	r5, r9
   262da:	4083      	lsls	r3, r0
   262dc:	4313      	orrs	r3, r2
   262de:	9341      	str	r3, [sp, #260]	; 0x104
   262e0:	f815 3b01 	ldrb.w	r3, [r5], #1
   262e4:	2b78      	cmp	r3, #120	; 0x78
   262e6:	d806      	bhi.n	262f6 <__ssvfiscanf_r+0xee>
   262e8:	2b57      	cmp	r3, #87	; 0x57
   262ea:	d810      	bhi.n	2630e <__ssvfiscanf_r+0x106>
   262ec:	2b25      	cmp	r3, #37	; 0x25
   262ee:	d0c3      	beq.n	26278 <__ssvfiscanf_r+0x70>
   262f0:	d856      	bhi.n	263a0 <__ssvfiscanf_r+0x198>
   262f2:	2b00      	cmp	r3, #0
   262f4:	d064      	beq.n	263c0 <__ssvfiscanf_r+0x1b8>
   262f6:	2303      	movs	r3, #3
   262f8:	9347      	str	r3, [sp, #284]	; 0x11c
   262fa:	230a      	movs	r3, #10
   262fc:	9342      	str	r3, [sp, #264]	; 0x108
   262fe:	e06a      	b.n	263d6 <__ssvfiscanf_r+0x1ce>
   26300:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   26302:	464d      	mov	r5, r9
   26304:	fb02 1103 	mla	r1, r2, r3, r1
   26308:	3930      	subs	r1, #48	; 0x30
   2630a:	9143      	str	r1, [sp, #268]	; 0x10c
   2630c:	e7d2      	b.n	262b4 <__ssvfiscanf_r+0xac>
   2630e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   26312:	2a20      	cmp	r2, #32
   26314:	d8ef      	bhi.n	262f6 <__ssvfiscanf_r+0xee>
   26316:	a101      	add	r1, pc, #4	; (adr r1, 2631c <__ssvfiscanf_r+0x114>)
   26318:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   2631c:	0002640b 	.word	0x0002640b
   26320:	000262f7 	.word	0x000262f7
   26324:	000262f7 	.word	0x000262f7
   26328:	0002642d 	.word	0x0002642d
   2632c:	000262f7 	.word	0x000262f7
   26330:	000262f7 	.word	0x000262f7
   26334:	000262f7 	.word	0x000262f7
   26338:	000262f7 	.word	0x000262f7
   2633c:	000262f7 	.word	0x000262f7
   26340:	000262f7 	.word	0x000262f7
   26344:	000262f7 	.word	0x000262f7
   26348:	00026443 	.word	0x00026443
   2634c:	00026429 	.word	0x00026429
   26350:	000263a7 	.word	0x000263a7
   26354:	000263a7 	.word	0x000263a7
   26358:	000263a7 	.word	0x000263a7
   2635c:	000262f7 	.word	0x000262f7
   26360:	0002641d 	.word	0x0002641d
   26364:	000262f7 	.word	0x000262f7
   26368:	000262f7 	.word	0x000262f7
   2636c:	000262f7 	.word	0x000262f7
   26370:	000262f7 	.word	0x000262f7
   26374:	00026453 	.word	0x00026453
   26378:	00026425 	.word	0x00026425
   2637c:	000263c7 	.word	0x000263c7
   26380:	000262f7 	.word	0x000262f7
   26384:	000262f7 	.word	0x000262f7
   26388:	0002644f 	.word	0x0002644f
   2638c:	000262f7 	.word	0x000262f7
   26390:	00026429 	.word	0x00026429
   26394:	000262f7 	.word	0x000262f7
   26398:	000262f7 	.word	0x000262f7
   2639c:	0002640b 	.word	0x0002640b
   263a0:	3b45      	subs	r3, #69	; 0x45
   263a2:	2b02      	cmp	r3, #2
   263a4:	d8a7      	bhi.n	262f6 <__ssvfiscanf_r+0xee>
   263a6:	2305      	movs	r3, #5
   263a8:	e014      	b.n	263d4 <__ssvfiscanf_r+0x1cc>
   263aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   263ac:	4621      	mov	r1, r4
   263ae:	4630      	mov	r0, r6
   263b0:	4798      	blx	r3
   263b2:	2800      	cmp	r0, #0
   263b4:	f43f af65 	beq.w	26282 <__ssvfiscanf_r+0x7a>
   263b8:	9844      	ldr	r0, [sp, #272]	; 0x110
   263ba:	2800      	cmp	r0, #0
   263bc:	f040 808f 	bne.w	264de <__ssvfiscanf_r+0x2d6>
   263c0:	f04f 30ff 	mov.w	r0, #4294967295
   263c4:	e08f      	b.n	264e6 <__ssvfiscanf_r+0x2de>
   263c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
   263c8:	f443 7308 	orr.w	r3, r3, #544	; 0x220
   263cc:	9341      	str	r3, [sp, #260]	; 0x104
   263ce:	2310      	movs	r3, #16
   263d0:	9342      	str	r3, [sp, #264]	; 0x108
   263d2:	2304      	movs	r3, #4
   263d4:	9347      	str	r3, [sp, #284]	; 0x11c
   263d6:	6863      	ldr	r3, [r4, #4]
   263d8:	2b00      	cmp	r3, #0
   263da:	dd4a      	ble.n	26472 <__ssvfiscanf_r+0x26a>
   263dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
   263de:	0659      	lsls	r1, r3, #25
   263e0:	d404      	bmi.n	263ec <__ssvfiscanf_r+0x1e4>
   263e2:	6823      	ldr	r3, [r4, #0]
   263e4:	781a      	ldrb	r2, [r3, #0]
   263e6:	5cba      	ldrb	r2, [r7, r2]
   263e8:	0712      	lsls	r2, r2, #28
   263ea:	d449      	bmi.n	26480 <__ssvfiscanf_r+0x278>
   263ec:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   263ee:	2b02      	cmp	r3, #2
   263f0:	dc58      	bgt.n	264a4 <__ssvfiscanf_r+0x29c>
   263f2:	466b      	mov	r3, sp
   263f4:	4622      	mov	r2, r4
   263f6:	a941      	add	r1, sp, #260	; 0x104
   263f8:	4630      	mov	r0, r6
   263fa:	f000 fad7 	bl	269ac <_scanf_chars>
   263fe:	2801      	cmp	r0, #1
   26400:	d075      	beq.n	264ee <__ssvfiscanf_r+0x2e6>
   26402:	2802      	cmp	r0, #2
   26404:	f47f af24 	bne.w	26250 <__ssvfiscanf_r+0x48>
   26408:	e7d6      	b.n	263b8 <__ssvfiscanf_r+0x1b0>
   2640a:	9a41      	ldr	r2, [sp, #260]	; 0x104
   2640c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   26410:	9241      	str	r2, [sp, #260]	; 0x104
   26412:	2210      	movs	r2, #16
   26414:	2b6e      	cmp	r3, #110	; 0x6e
   26416:	9242      	str	r2, [sp, #264]	; 0x108
   26418:	d902      	bls.n	26420 <__ssvfiscanf_r+0x218>
   2641a:	e7da      	b.n	263d2 <__ssvfiscanf_r+0x1ca>
   2641c:	2300      	movs	r3, #0
   2641e:	9342      	str	r3, [sp, #264]	; 0x108
   26420:	2303      	movs	r3, #3
   26422:	e7d7      	b.n	263d4 <__ssvfiscanf_r+0x1cc>
   26424:	2308      	movs	r3, #8
   26426:	e7d3      	b.n	263d0 <__ssvfiscanf_r+0x1c8>
   26428:	220a      	movs	r2, #10
   2642a:	e7f3      	b.n	26414 <__ssvfiscanf_r+0x20c>
   2642c:	4629      	mov	r1, r5
   2642e:	4640      	mov	r0, r8
   26430:	f005 f955 	bl	2b6de <__sccl>
   26434:	9b41      	ldr	r3, [sp, #260]	; 0x104
   26436:	4605      	mov	r5, r0
   26438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2643c:	9341      	str	r3, [sp, #260]	; 0x104
   2643e:	2301      	movs	r3, #1
   26440:	e7c8      	b.n	263d4 <__ssvfiscanf_r+0x1cc>
   26442:	9b41      	ldr	r3, [sp, #260]	; 0x104
   26444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26448:	9341      	str	r3, [sp, #260]	; 0x104
   2644a:	2300      	movs	r3, #0
   2644c:	e7c2      	b.n	263d4 <__ssvfiscanf_r+0x1cc>
   2644e:	2302      	movs	r3, #2
   26450:	e7c0      	b.n	263d4 <__ssvfiscanf_r+0x1cc>
   26452:	9841      	ldr	r0, [sp, #260]	; 0x104
   26454:	06c3      	lsls	r3, r0, #27
   26456:	f53f aefb 	bmi.w	26250 <__ssvfiscanf_r+0x48>
   2645a:	9b00      	ldr	r3, [sp, #0]
   2645c:	f010 0f01 	tst.w	r0, #1
   26460:	9a45      	ldr	r2, [sp, #276]	; 0x114
   26462:	f103 0104 	add.w	r1, r3, #4
   26466:	9100      	str	r1, [sp, #0]
   26468:	681b      	ldr	r3, [r3, #0]
   2646a:	bf14      	ite	ne
   2646c:	801a      	strhne	r2, [r3, #0]
   2646e:	601a      	streq	r2, [r3, #0]
   26470:	e6ee      	b.n	26250 <__ssvfiscanf_r+0x48>
   26472:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   26474:	4621      	mov	r1, r4
   26476:	4630      	mov	r0, r6
   26478:	4798      	blx	r3
   2647a:	2800      	cmp	r0, #0
   2647c:	d0ae      	beq.n	263dc <__ssvfiscanf_r+0x1d4>
   2647e:	e79b      	b.n	263b8 <__ssvfiscanf_r+0x1b0>
   26480:	9a45      	ldr	r2, [sp, #276]	; 0x114
   26482:	3201      	adds	r2, #1
   26484:	9245      	str	r2, [sp, #276]	; 0x114
   26486:	6862      	ldr	r2, [r4, #4]
   26488:	3a01      	subs	r2, #1
   2648a:	2a00      	cmp	r2, #0
   2648c:	6062      	str	r2, [r4, #4]
   2648e:	dd02      	ble.n	26496 <__ssvfiscanf_r+0x28e>
   26490:	3301      	adds	r3, #1
   26492:	6023      	str	r3, [r4, #0]
   26494:	e7a5      	b.n	263e2 <__ssvfiscanf_r+0x1da>
   26496:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   26498:	4621      	mov	r1, r4
   2649a:	4630      	mov	r0, r6
   2649c:	4798      	blx	r3
   2649e:	2800      	cmp	r0, #0
   264a0:	d09f      	beq.n	263e2 <__ssvfiscanf_r+0x1da>
   264a2:	e789      	b.n	263b8 <__ssvfiscanf_r+0x1b0>
   264a4:	2b04      	cmp	r3, #4
   264a6:	dc0f      	bgt.n	264c8 <__ssvfiscanf_r+0x2c0>
   264a8:	466b      	mov	r3, sp
   264aa:	4622      	mov	r2, r4
   264ac:	a941      	add	r1, sp, #260	; 0x104
   264ae:	4630      	mov	r0, r6
   264b0:	f000 fad6 	bl	26a60 <_scanf_i>
   264b4:	e7a3      	b.n	263fe <__ssvfiscanf_r+0x1f6>
   264b6:	bf00      	nop
   264b8:	0002e947 	.word	0x0002e947
   264bc:	0002b4fd 	.word	0x0002b4fd
   264c0:	0002b573 	.word	0x0002b573
   264c4:	0002ea4d 	.word	0x0002ea4d
   264c8:	4b0a      	ldr	r3, [pc, #40]	; (264f4 <__ssvfiscanf_r+0x2ec>)
   264ca:	2b00      	cmp	r3, #0
   264cc:	f43f aec0 	beq.w	26250 <__ssvfiscanf_r+0x48>
   264d0:	466b      	mov	r3, sp
   264d2:	4622      	mov	r2, r4
   264d4:	a941      	add	r1, sp, #260	; 0x104
   264d6:	4630      	mov	r0, r6
   264d8:	f3af 8000 	nop.w
   264dc:	e78f      	b.n	263fe <__ssvfiscanf_r+0x1f6>
   264de:	89a3      	ldrh	r3, [r4, #12]
   264e0:	065b      	lsls	r3, r3, #25
   264e2:	f53f af6d 	bmi.w	263c0 <__ssvfiscanf_r+0x1b8>
   264e6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   264ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   264ee:	9844      	ldr	r0, [sp, #272]	; 0x110
   264f0:	e7f9      	b.n	264e6 <__ssvfiscanf_r+0x2de>
   264f2:	bf00      	nop
   264f4:	00000000 	.word	0x00000000

000264f8 <_vfiprintf_r>:
   264f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   264fc:	460d      	mov	r5, r1
   264fe:	b09d      	sub	sp, #116	; 0x74
   26500:	4614      	mov	r4, r2
   26502:	4698      	mov	r8, r3
   26504:	4606      	mov	r6, r0
   26506:	b118      	cbz	r0, 26510 <_vfiprintf_r+0x18>
   26508:	6983      	ldr	r3, [r0, #24]
   2650a:	b90b      	cbnz	r3, 26510 <_vfiprintf_r+0x18>
   2650c:	f7ff fce4 	bl	25ed8 <__sinit>
   26510:	4b87      	ldr	r3, [pc, #540]	; (26730 <_vfiprintf_r+0x238>)
   26512:	429d      	cmp	r5, r3
   26514:	d11b      	bne.n	2654e <_vfiprintf_r+0x56>
   26516:	6875      	ldr	r5, [r6, #4]
   26518:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2651a:	07d9      	lsls	r1, r3, #31
   2651c:	d405      	bmi.n	2652a <_vfiprintf_r+0x32>
   2651e:	89ab      	ldrh	r3, [r5, #12]
   26520:	059a      	lsls	r2, r3, #22
   26522:	d402      	bmi.n	2652a <_vfiprintf_r+0x32>
   26524:	6da8      	ldr	r0, [r5, #88]	; 0x58
   26526:	f001 fb83 	bl	27c30 <__retarget_lock_acquire_recursive>
   2652a:	89ab      	ldrh	r3, [r5, #12]
   2652c:	071b      	lsls	r3, r3, #28
   2652e:	d501      	bpl.n	26534 <_vfiprintf_r+0x3c>
   26530:	692b      	ldr	r3, [r5, #16]
   26532:	b9eb      	cbnz	r3, 26570 <_vfiprintf_r+0x78>
   26534:	4629      	mov	r1, r5
   26536:	4630      	mov	r0, r6
   26538:	f000 fbf4 	bl	26d24 <__swsetup_r>
   2653c:	b1c0      	cbz	r0, 26570 <_vfiprintf_r+0x78>
   2653e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   26540:	07dc      	lsls	r4, r3, #31
   26542:	d50e      	bpl.n	26562 <_vfiprintf_r+0x6a>
   26544:	f04f 30ff 	mov.w	r0, #4294967295
   26548:	b01d      	add	sp, #116	; 0x74
   2654a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2654e:	4b79      	ldr	r3, [pc, #484]	; (26734 <_vfiprintf_r+0x23c>)
   26550:	429d      	cmp	r5, r3
   26552:	d101      	bne.n	26558 <_vfiprintf_r+0x60>
   26554:	68b5      	ldr	r5, [r6, #8]
   26556:	e7df      	b.n	26518 <_vfiprintf_r+0x20>
   26558:	4b77      	ldr	r3, [pc, #476]	; (26738 <_vfiprintf_r+0x240>)
   2655a:	429d      	cmp	r5, r3
   2655c:	bf08      	it	eq
   2655e:	68f5      	ldreq	r5, [r6, #12]
   26560:	e7da      	b.n	26518 <_vfiprintf_r+0x20>
   26562:	89ab      	ldrh	r3, [r5, #12]
   26564:	0598      	lsls	r0, r3, #22
   26566:	d4ed      	bmi.n	26544 <_vfiprintf_r+0x4c>
   26568:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2656a:	f001 fb67 	bl	27c3c <__retarget_lock_release_recursive>
   2656e:	e7e9      	b.n	26544 <_vfiprintf_r+0x4c>
   26570:	2300      	movs	r3, #0
   26572:	f8cd 800c 	str.w	r8, [sp, #12]
   26576:	f04f 0901 	mov.w	r9, #1
   2657a:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 2673c <_vfiprintf_r+0x244>
   2657e:	9309      	str	r3, [sp, #36]	; 0x24
   26580:	2320      	movs	r3, #32
   26582:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   26586:	2330      	movs	r3, #48	; 0x30
   26588:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2658c:	4623      	mov	r3, r4
   2658e:	469a      	mov	sl, r3
   26590:	f813 2b01 	ldrb.w	r2, [r3], #1
   26594:	b10a      	cbz	r2, 2659a <_vfiprintf_r+0xa2>
   26596:	2a25      	cmp	r2, #37	; 0x25
   26598:	d1f9      	bne.n	2658e <_vfiprintf_r+0x96>
   2659a:	ebba 0b04 	subs.w	fp, sl, r4
   2659e:	d00b      	beq.n	265b8 <_vfiprintf_r+0xc0>
   265a0:	465b      	mov	r3, fp
   265a2:	4622      	mov	r2, r4
   265a4:	4629      	mov	r1, r5
   265a6:	4630      	mov	r0, r6
   265a8:	f005 f815 	bl	2b5d6 <__sfputs_r>
   265ac:	3001      	adds	r0, #1
   265ae:	f000 80a6 	beq.w	266fe <_vfiprintf_r+0x206>
   265b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   265b4:	445a      	add	r2, fp
   265b6:	9209      	str	r2, [sp, #36]	; 0x24
   265b8:	f89a 3000 	ldrb.w	r3, [sl]
   265bc:	2b00      	cmp	r3, #0
   265be:	f000 809e 	beq.w	266fe <_vfiprintf_r+0x206>
   265c2:	2300      	movs	r3, #0
   265c4:	f04f 32ff 	mov.w	r2, #4294967295
   265c8:	f10a 0a01 	add.w	sl, sl, #1
   265cc:	9304      	str	r3, [sp, #16]
   265ce:	9307      	str	r3, [sp, #28]
   265d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   265d4:	931a      	str	r3, [sp, #104]	; 0x68
   265d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
   265da:	4654      	mov	r4, sl
   265dc:	2205      	movs	r2, #5
   265de:	4857      	ldr	r0, [pc, #348]	; (2673c <_vfiprintf_r+0x244>)
   265e0:	f814 1b01 	ldrb.w	r1, [r4], #1
   265e4:	f004 fde3 	bl	2b1ae <memchr>
   265e8:	9b04      	ldr	r3, [sp, #16]
   265ea:	b9d0      	cbnz	r0, 26622 <_vfiprintf_r+0x12a>
   265ec:	06d9      	lsls	r1, r3, #27
   265ee:	bf44      	itt	mi
   265f0:	2220      	movmi	r2, #32
   265f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   265f6:	071a      	lsls	r2, r3, #28
   265f8:	bf44      	itt	mi
   265fa:	222b      	movmi	r2, #43	; 0x2b
   265fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   26600:	f89a 2000 	ldrb.w	r2, [sl]
   26604:	2a2a      	cmp	r2, #42	; 0x2a
   26606:	d014      	beq.n	26632 <_vfiprintf_r+0x13a>
   26608:	9a07      	ldr	r2, [sp, #28]
   2660a:	4654      	mov	r4, sl
   2660c:	2000      	movs	r0, #0
   2660e:	f04f 0c0a 	mov.w	ip, #10
   26612:	4621      	mov	r1, r4
   26614:	f811 3b01 	ldrb.w	r3, [r1], #1
   26618:	3b30      	subs	r3, #48	; 0x30
   2661a:	2b09      	cmp	r3, #9
   2661c:	d94a      	bls.n	266b4 <_vfiprintf_r+0x1bc>
   2661e:	b970      	cbnz	r0, 2663e <_vfiprintf_r+0x146>
   26620:	e014      	b.n	2664c <_vfiprintf_r+0x154>
   26622:	eba0 0008 	sub.w	r0, r0, r8
   26626:	46a2      	mov	sl, r4
   26628:	fa09 f000 	lsl.w	r0, r9, r0
   2662c:	4318      	orrs	r0, r3
   2662e:	9004      	str	r0, [sp, #16]
   26630:	e7d3      	b.n	265da <_vfiprintf_r+0xe2>
   26632:	9a03      	ldr	r2, [sp, #12]
   26634:	1d11      	adds	r1, r2, #4
   26636:	6812      	ldr	r2, [r2, #0]
   26638:	2a00      	cmp	r2, #0
   2663a:	9103      	str	r1, [sp, #12]
   2663c:	db01      	blt.n	26642 <_vfiprintf_r+0x14a>
   2663e:	9207      	str	r2, [sp, #28]
   26640:	e004      	b.n	2664c <_vfiprintf_r+0x154>
   26642:	4252      	negs	r2, r2
   26644:	f043 0302 	orr.w	r3, r3, #2
   26648:	9207      	str	r2, [sp, #28]
   2664a:	9304      	str	r3, [sp, #16]
   2664c:	7823      	ldrb	r3, [r4, #0]
   2664e:	2b2e      	cmp	r3, #46	; 0x2e
   26650:	d10a      	bne.n	26668 <_vfiprintf_r+0x170>
   26652:	7863      	ldrb	r3, [r4, #1]
   26654:	2b2a      	cmp	r3, #42	; 0x2a
   26656:	d132      	bne.n	266be <_vfiprintf_r+0x1c6>
   26658:	9b03      	ldr	r3, [sp, #12]
   2665a:	3402      	adds	r4, #2
   2665c:	1d1a      	adds	r2, r3, #4
   2665e:	681b      	ldr	r3, [r3, #0]
   26660:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   26664:	9203      	str	r2, [sp, #12]
   26666:	9305      	str	r3, [sp, #20]
   26668:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 26740 <_vfiprintf_r+0x248>
   2666c:	2203      	movs	r2, #3
   2666e:	7821      	ldrb	r1, [r4, #0]
   26670:	4650      	mov	r0, sl
   26672:	f004 fd9c 	bl	2b1ae <memchr>
   26676:	b138      	cbz	r0, 26688 <_vfiprintf_r+0x190>
   26678:	eba0 000a 	sub.w	r0, r0, sl
   2667c:	2240      	movs	r2, #64	; 0x40
   2667e:	9b04      	ldr	r3, [sp, #16]
   26680:	3401      	adds	r4, #1
   26682:	4082      	lsls	r2, r0
   26684:	4313      	orrs	r3, r2
   26686:	9304      	str	r3, [sp, #16]
   26688:	f814 1b01 	ldrb.w	r1, [r4], #1
   2668c:	2206      	movs	r2, #6
   2668e:	482d      	ldr	r0, [pc, #180]	; (26744 <_vfiprintf_r+0x24c>)
   26690:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   26694:	f004 fd8b 	bl	2b1ae <memchr>
   26698:	2800      	cmp	r0, #0
   2669a:	d03f      	beq.n	2671c <_vfiprintf_r+0x224>
   2669c:	4b2a      	ldr	r3, [pc, #168]	; (26748 <_vfiprintf_r+0x250>)
   2669e:	bb1b      	cbnz	r3, 266e8 <_vfiprintf_r+0x1f0>
   266a0:	9b03      	ldr	r3, [sp, #12]
   266a2:	3307      	adds	r3, #7
   266a4:	f023 0307 	bic.w	r3, r3, #7
   266a8:	3308      	adds	r3, #8
   266aa:	9303      	str	r3, [sp, #12]
   266ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   266ae:	443b      	add	r3, r7
   266b0:	9309      	str	r3, [sp, #36]	; 0x24
   266b2:	e76b      	b.n	2658c <_vfiprintf_r+0x94>
   266b4:	fb0c 3202 	mla	r2, ip, r2, r3
   266b8:	460c      	mov	r4, r1
   266ba:	2001      	movs	r0, #1
   266bc:	e7a9      	b.n	26612 <_vfiprintf_r+0x11a>
   266be:	2300      	movs	r3, #0
   266c0:	3401      	adds	r4, #1
   266c2:	f04f 0c0a 	mov.w	ip, #10
   266c6:	4619      	mov	r1, r3
   266c8:	9305      	str	r3, [sp, #20]
   266ca:	4620      	mov	r0, r4
   266cc:	f810 2b01 	ldrb.w	r2, [r0], #1
   266d0:	3a30      	subs	r2, #48	; 0x30
   266d2:	2a09      	cmp	r2, #9
   266d4:	d903      	bls.n	266de <_vfiprintf_r+0x1e6>
   266d6:	2b00      	cmp	r3, #0
   266d8:	d0c6      	beq.n	26668 <_vfiprintf_r+0x170>
   266da:	9105      	str	r1, [sp, #20]
   266dc:	e7c4      	b.n	26668 <_vfiprintf_r+0x170>
   266de:	fb0c 2101 	mla	r1, ip, r1, r2
   266e2:	4604      	mov	r4, r0
   266e4:	2301      	movs	r3, #1
   266e6:	e7f0      	b.n	266ca <_vfiprintf_r+0x1d2>
   266e8:	ab03      	add	r3, sp, #12
   266ea:	462a      	mov	r2, r5
   266ec:	a904      	add	r1, sp, #16
   266ee:	4630      	mov	r0, r6
   266f0:	9300      	str	r3, [sp, #0]
   266f2:	4b16      	ldr	r3, [pc, #88]	; (2674c <_vfiprintf_r+0x254>)
   266f4:	f3af 8000 	nop.w
   266f8:	4607      	mov	r7, r0
   266fa:	1c78      	adds	r0, r7, #1
   266fc:	d1d6      	bne.n	266ac <_vfiprintf_r+0x1b4>
   266fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   26700:	07d9      	lsls	r1, r3, #31
   26702:	d405      	bmi.n	26710 <_vfiprintf_r+0x218>
   26704:	89ab      	ldrh	r3, [r5, #12]
   26706:	059a      	lsls	r2, r3, #22
   26708:	d402      	bmi.n	26710 <_vfiprintf_r+0x218>
   2670a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2670c:	f001 fa96 	bl	27c3c <__retarget_lock_release_recursive>
   26710:	89ab      	ldrh	r3, [r5, #12]
   26712:	065b      	lsls	r3, r3, #25
   26714:	f53f af16 	bmi.w	26544 <_vfiprintf_r+0x4c>
   26718:	9809      	ldr	r0, [sp, #36]	; 0x24
   2671a:	e715      	b.n	26548 <_vfiprintf_r+0x50>
   2671c:	ab03      	add	r3, sp, #12
   2671e:	462a      	mov	r2, r5
   26720:	a904      	add	r1, sp, #16
   26722:	4630      	mov	r0, r6
   26724:	9300      	str	r3, [sp, #0]
   26726:	4b09      	ldr	r3, [pc, #36]	; (2674c <_vfiprintf_r+0x254>)
   26728:	f000 f812 	bl	26750 <_printf_i>
   2672c:	e7e4      	b.n	266f8 <_vfiprintf_r+0x200>
   2672e:	bf00      	nop
   26730:	0002cb68 	.word	0x0002cb68
   26734:	0002cb48 	.word	0x0002cb48
   26738:	0002cb28 	.word	0x0002cb28
   2673c:	0002ea47 	.word	0x0002ea47
   26740:	0002ea4d 	.word	0x0002ea4d
   26744:	0002ea51 	.word	0x0002ea51
   26748:	00000000 	.word	0x00000000
   2674c:	0002b5d7 	.word	0x0002b5d7

00026750 <_printf_i>:
   26750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   26754:	7e0f      	ldrb	r7, [r1, #24]
   26756:	4691      	mov	r9, r2
   26758:	4680      	mov	r8, r0
   2675a:	460c      	mov	r4, r1
   2675c:	2f78      	cmp	r7, #120	; 0x78
   2675e:	469a      	mov	sl, r3
   26760:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   26762:	f101 0243 	add.w	r2, r1, #67	; 0x43
   26766:	d807      	bhi.n	26778 <_printf_i+0x28>
   26768:	2f62      	cmp	r7, #98	; 0x62
   2676a:	d80a      	bhi.n	26782 <_printf_i+0x32>
   2676c:	2f00      	cmp	r7, #0
   2676e:	f000 80e0 	beq.w	26932 <_printf_i+0x1e2>
   26772:	2f58      	cmp	r7, #88	; 0x58
   26774:	f000 80bb 	beq.w	268ee <_printf_i+0x19e>
   26778:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2677c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   26780:	e03a      	b.n	267f8 <_printf_i+0xa8>
   26782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   26786:	2b15      	cmp	r3, #21
   26788:	d8f6      	bhi.n	26778 <_printf_i+0x28>
   2678a:	a101      	add	r1, pc, #4	; (adr r1, 26790 <_printf_i+0x40>)
   2678c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   26790:	000267e9 	.word	0x000267e9
   26794:	000267fd 	.word	0x000267fd
   26798:	00026779 	.word	0x00026779
   2679c:	00026779 	.word	0x00026779
   267a0:	00026779 	.word	0x00026779
   267a4:	00026779 	.word	0x00026779
   267a8:	000267fd 	.word	0x000267fd
   267ac:	00026779 	.word	0x00026779
   267b0:	00026779 	.word	0x00026779
   267b4:	00026779 	.word	0x00026779
   267b8:	00026779 	.word	0x00026779
   267bc:	00026919 	.word	0x00026919
   267c0:	0002688d 	.word	0x0002688d
   267c4:	000268cf 	.word	0x000268cf
   267c8:	00026779 	.word	0x00026779
   267cc:	00026779 	.word	0x00026779
   267d0:	0002693b 	.word	0x0002693b
   267d4:	00026779 	.word	0x00026779
   267d8:	0002688d 	.word	0x0002688d
   267dc:	00026779 	.word	0x00026779
   267e0:	00026779 	.word	0x00026779
   267e4:	000268d7 	.word	0x000268d7
   267e8:	682b      	ldr	r3, [r5, #0]
   267ea:	f104 0642 	add.w	r6, r4, #66	; 0x42
   267ee:	1d1a      	adds	r2, r3, #4
   267f0:	681b      	ldr	r3, [r3, #0]
   267f2:	602a      	str	r2, [r5, #0]
   267f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   267f8:	2301      	movs	r3, #1
   267fa:	e0ab      	b.n	26954 <_printf_i+0x204>
   267fc:	6823      	ldr	r3, [r4, #0]
   267fe:	6829      	ldr	r1, [r5, #0]
   26800:	061f      	lsls	r7, r3, #24
   26802:	f101 0004 	add.w	r0, r1, #4
   26806:	6028      	str	r0, [r5, #0]
   26808:	d501      	bpl.n	2680e <_printf_i+0xbe>
   2680a:	680d      	ldr	r5, [r1, #0]
   2680c:	e003      	b.n	26816 <_printf_i+0xc6>
   2680e:	065e      	lsls	r6, r3, #25
   26810:	d5fb      	bpl.n	2680a <_printf_i+0xba>
   26812:	f9b1 5000 	ldrsh.w	r5, [r1]
   26816:	2d00      	cmp	r5, #0
   26818:	6861      	ldr	r1, [r4, #4]
   2681a:	da7a      	bge.n	26912 <_printf_i+0x1c2>
   2681c:	202d      	movs	r0, #45	; 0x2d
   2681e:	2900      	cmp	r1, #0
   26820:	60a1      	str	r1, [r4, #8]
   26822:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   26826:	da2d      	bge.n	26884 <_printf_i+0x134>
   26828:	426d      	negs	r5, r5
   2682a:	485e      	ldr	r0, [pc, #376]	; (269a4 <_printf_i+0x254>)
   2682c:	230a      	movs	r3, #10
   2682e:	4616      	mov	r6, r2
   26830:	fbb5 f1f3 	udiv	r1, r5, r3
   26834:	fb03 5711 	mls	r7, r3, r1, r5
   26838:	5dc7      	ldrb	r7, [r0, r7]
   2683a:	f806 7d01 	strb.w	r7, [r6, #-1]!
   2683e:	462f      	mov	r7, r5
   26840:	460d      	mov	r5, r1
   26842:	42bb      	cmp	r3, r7
   26844:	d9f4      	bls.n	26830 <_printf_i+0xe0>
   26846:	2b08      	cmp	r3, #8
   26848:	d10b      	bne.n	26862 <_printf_i+0x112>
   2684a:	6823      	ldr	r3, [r4, #0]
   2684c:	07df      	lsls	r7, r3, #31
   2684e:	d508      	bpl.n	26862 <_printf_i+0x112>
   26850:	6923      	ldr	r3, [r4, #16]
   26852:	6861      	ldr	r1, [r4, #4]
   26854:	4299      	cmp	r1, r3
   26856:	bfde      	ittt	le
   26858:	2330      	movle	r3, #48	; 0x30
   2685a:	f806 3c01 	strble.w	r3, [r6, #-1]
   2685e:	f106 36ff 	addle.w	r6, r6, #4294967295
   26862:	1b92      	subs	r2, r2, r6
   26864:	6122      	str	r2, [r4, #16]
   26866:	464b      	mov	r3, r9
   26868:	aa03      	add	r2, sp, #12
   2686a:	4621      	mov	r1, r4
   2686c:	4640      	mov	r0, r8
   2686e:	f8cd a000 	str.w	sl, [sp]
   26872:	f004 fec2 	bl	2b5fa <_printf_common>
   26876:	3001      	adds	r0, #1
   26878:	d171      	bne.n	2695e <_printf_i+0x20e>
   2687a:	f04f 30ff 	mov.w	r0, #4294967295
   2687e:	b004      	add	sp, #16
   26880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26884:	f023 0304 	bic.w	r3, r3, #4
   26888:	6023      	str	r3, [r4, #0]
   2688a:	e7cd      	b.n	26828 <_printf_i+0xd8>
   2688c:	682b      	ldr	r3, [r5, #0]
   2688e:	6820      	ldr	r0, [r4, #0]
   26890:	1d19      	adds	r1, r3, #4
   26892:	6029      	str	r1, [r5, #0]
   26894:	0605      	lsls	r5, r0, #24
   26896:	d501      	bpl.n	2689c <_printf_i+0x14c>
   26898:	681d      	ldr	r5, [r3, #0]
   2689a:	e002      	b.n	268a2 <_printf_i+0x152>
   2689c:	0641      	lsls	r1, r0, #25
   2689e:	d5fb      	bpl.n	26898 <_printf_i+0x148>
   268a0:	881d      	ldrh	r5, [r3, #0]
   268a2:	2f6f      	cmp	r7, #111	; 0x6f
   268a4:	483f      	ldr	r0, [pc, #252]	; (269a4 <_printf_i+0x254>)
   268a6:	bf14      	ite	ne
   268a8:	230a      	movne	r3, #10
   268aa:	2308      	moveq	r3, #8
   268ac:	2100      	movs	r1, #0
   268ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   268b2:	6866      	ldr	r6, [r4, #4]
   268b4:	2e00      	cmp	r6, #0
   268b6:	60a6      	str	r6, [r4, #8]
   268b8:	dbb9      	blt.n	2682e <_printf_i+0xde>
   268ba:	6821      	ldr	r1, [r4, #0]
   268bc:	f021 0104 	bic.w	r1, r1, #4
   268c0:	6021      	str	r1, [r4, #0]
   268c2:	2d00      	cmp	r5, #0
   268c4:	d1b3      	bne.n	2682e <_printf_i+0xde>
   268c6:	2e00      	cmp	r6, #0
   268c8:	d1b1      	bne.n	2682e <_printf_i+0xde>
   268ca:	4616      	mov	r6, r2
   268cc:	e7bb      	b.n	26846 <_printf_i+0xf6>
   268ce:	6823      	ldr	r3, [r4, #0]
   268d0:	f043 0320 	orr.w	r3, r3, #32
   268d4:	6023      	str	r3, [r4, #0]
   268d6:	2778      	movs	r7, #120	; 0x78
   268d8:	4833      	ldr	r0, [pc, #204]	; (269a8 <_printf_i+0x258>)
   268da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   268de:	6829      	ldr	r1, [r5, #0]
   268e0:	6823      	ldr	r3, [r4, #0]
   268e2:	1d0e      	adds	r6, r1, #4
   268e4:	602e      	str	r6, [r5, #0]
   268e6:	061e      	lsls	r6, r3, #24
   268e8:	d503      	bpl.n	268f2 <_printf_i+0x1a2>
   268ea:	680d      	ldr	r5, [r1, #0]
   268ec:	e004      	b.n	268f8 <_printf_i+0x1a8>
   268ee:	482d      	ldr	r0, [pc, #180]	; (269a4 <_printf_i+0x254>)
   268f0:	e7f3      	b.n	268da <_printf_i+0x18a>
   268f2:	065d      	lsls	r5, r3, #25
   268f4:	d5f9      	bpl.n	268ea <_printf_i+0x19a>
   268f6:	880d      	ldrh	r5, [r1, #0]
   268f8:	07d9      	lsls	r1, r3, #31
   268fa:	bf44      	itt	mi
   268fc:	f043 0320 	orrmi.w	r3, r3, #32
   26900:	6023      	strmi	r3, [r4, #0]
   26902:	b10d      	cbz	r5, 26908 <_printf_i+0x1b8>
   26904:	2310      	movs	r3, #16
   26906:	e7d1      	b.n	268ac <_printf_i+0x15c>
   26908:	6823      	ldr	r3, [r4, #0]
   2690a:	f023 0320 	bic.w	r3, r3, #32
   2690e:	6023      	str	r3, [r4, #0]
   26910:	e7f8      	b.n	26904 <_printf_i+0x1b4>
   26912:	4824      	ldr	r0, [pc, #144]	; (269a4 <_printf_i+0x254>)
   26914:	230a      	movs	r3, #10
   26916:	e7cc      	b.n	268b2 <_printf_i+0x162>
   26918:	682b      	ldr	r3, [r5, #0]
   2691a:	6826      	ldr	r6, [r4, #0]
   2691c:	1d18      	adds	r0, r3, #4
   2691e:	6961      	ldr	r1, [r4, #20]
   26920:	6028      	str	r0, [r5, #0]
   26922:	0635      	lsls	r5, r6, #24
   26924:	681b      	ldr	r3, [r3, #0]
   26926:	d501      	bpl.n	2692c <_printf_i+0x1dc>
   26928:	6019      	str	r1, [r3, #0]
   2692a:	e002      	b.n	26932 <_printf_i+0x1e2>
   2692c:	0670      	lsls	r0, r6, #25
   2692e:	d5fb      	bpl.n	26928 <_printf_i+0x1d8>
   26930:	8019      	strh	r1, [r3, #0]
   26932:	2300      	movs	r3, #0
   26934:	4616      	mov	r6, r2
   26936:	6123      	str	r3, [r4, #16]
   26938:	e795      	b.n	26866 <_printf_i+0x116>
   2693a:	682b      	ldr	r3, [r5, #0]
   2693c:	2100      	movs	r1, #0
   2693e:	1d1a      	adds	r2, r3, #4
   26940:	602a      	str	r2, [r5, #0]
   26942:	681e      	ldr	r6, [r3, #0]
   26944:	6862      	ldr	r2, [r4, #4]
   26946:	4630      	mov	r0, r6
   26948:	f004 fc31 	bl	2b1ae <memchr>
   2694c:	b108      	cbz	r0, 26952 <_printf_i+0x202>
   2694e:	1b80      	subs	r0, r0, r6
   26950:	6060      	str	r0, [r4, #4]
   26952:	6863      	ldr	r3, [r4, #4]
   26954:	6123      	str	r3, [r4, #16]
   26956:	2300      	movs	r3, #0
   26958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2695c:	e783      	b.n	26866 <_printf_i+0x116>
   2695e:	6923      	ldr	r3, [r4, #16]
   26960:	4632      	mov	r2, r6
   26962:	4649      	mov	r1, r9
   26964:	4640      	mov	r0, r8
   26966:	47d0      	blx	sl
   26968:	3001      	adds	r0, #1
   2696a:	d086      	beq.n	2687a <_printf_i+0x12a>
   2696c:	6823      	ldr	r3, [r4, #0]
   2696e:	079b      	lsls	r3, r3, #30
   26970:	d414      	bmi.n	2699c <_printf_i+0x24c>
   26972:	68e0      	ldr	r0, [r4, #12]
   26974:	9b03      	ldr	r3, [sp, #12]
   26976:	4298      	cmp	r0, r3
   26978:	bfb8      	it	lt
   2697a:	4618      	movlt	r0, r3
   2697c:	e77f      	b.n	2687e <_printf_i+0x12e>
   2697e:	2301      	movs	r3, #1
   26980:	4632      	mov	r2, r6
   26982:	4649      	mov	r1, r9
   26984:	4640      	mov	r0, r8
   26986:	47d0      	blx	sl
   26988:	3001      	adds	r0, #1
   2698a:	f43f af76 	beq.w	2687a <_printf_i+0x12a>
   2698e:	3501      	adds	r5, #1
   26990:	68e3      	ldr	r3, [r4, #12]
   26992:	9903      	ldr	r1, [sp, #12]
   26994:	1a5b      	subs	r3, r3, r1
   26996:	42ab      	cmp	r3, r5
   26998:	dcf1      	bgt.n	2697e <_printf_i+0x22e>
   2699a:	e7ea      	b.n	26972 <_printf_i+0x222>
   2699c:	2500      	movs	r5, #0
   2699e:	f104 0619 	add.w	r6, r4, #25
   269a2:	e7f5      	b.n	26990 <_printf_i+0x240>
   269a4:	0002ea58 	.word	0x0002ea58
   269a8:	0002ea69 	.word	0x0002ea69

000269ac <_scanf_chars>:
   269ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   269b0:	4615      	mov	r5, r2
   269b2:	688a      	ldr	r2, [r1, #8]
   269b4:	4680      	mov	r8, r0
   269b6:	460c      	mov	r4, r1
   269b8:	b932      	cbnz	r2, 269c8 <_scanf_chars+0x1c>
   269ba:	698a      	ldr	r2, [r1, #24]
   269bc:	2a00      	cmp	r2, #0
   269be:	bf14      	ite	ne
   269c0:	f04f 32ff 	movne.w	r2, #4294967295
   269c4:	2201      	moveq	r2, #1
   269c6:	608a      	str	r2, [r1, #8]
   269c8:	6822      	ldr	r2, [r4, #0]
   269ca:	2700      	movs	r7, #0
   269cc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 26a5c <_scanf_chars+0xb0>
   269d0:	06d1      	lsls	r1, r2, #27
   269d2:	bf5f      	itttt	pl
   269d4:	681a      	ldrpl	r2, [r3, #0]
   269d6:	1d11      	addpl	r1, r2, #4
   269d8:	6019      	strpl	r1, [r3, #0]
   269da:	6816      	ldrpl	r6, [r2, #0]
   269dc:	69a0      	ldr	r0, [r4, #24]
   269de:	b188      	cbz	r0, 26a04 <_scanf_chars+0x58>
   269e0:	2801      	cmp	r0, #1
   269e2:	d107      	bne.n	269f4 <_scanf_chars+0x48>
   269e4:	682b      	ldr	r3, [r5, #0]
   269e6:	781a      	ldrb	r2, [r3, #0]
   269e8:	6963      	ldr	r3, [r4, #20]
   269ea:	5c9b      	ldrb	r3, [r3, r2]
   269ec:	b953      	cbnz	r3, 26a04 <_scanf_chars+0x58>
   269ee:	2f00      	cmp	r7, #0
   269f0:	d031      	beq.n	26a56 <_scanf_chars+0xaa>
   269f2:	e022      	b.n	26a3a <_scanf_chars+0x8e>
   269f4:	2802      	cmp	r0, #2
   269f6:	d120      	bne.n	26a3a <_scanf_chars+0x8e>
   269f8:	682b      	ldr	r3, [r5, #0]
   269fa:	781b      	ldrb	r3, [r3, #0]
   269fc:	f819 3003 	ldrb.w	r3, [r9, r3]
   26a00:	071b      	lsls	r3, r3, #28
   26a02:	d41a      	bmi.n	26a3a <_scanf_chars+0x8e>
   26a04:	6823      	ldr	r3, [r4, #0]
   26a06:	3701      	adds	r7, #1
   26a08:	06da      	lsls	r2, r3, #27
   26a0a:	bf5e      	ittt	pl
   26a0c:	682b      	ldrpl	r3, [r5, #0]
   26a0e:	781b      	ldrbpl	r3, [r3, #0]
   26a10:	f806 3b01 	strbpl.w	r3, [r6], #1
   26a14:	682a      	ldr	r2, [r5, #0]
   26a16:	686b      	ldr	r3, [r5, #4]
   26a18:	3201      	adds	r2, #1
   26a1a:	3b01      	subs	r3, #1
   26a1c:	602a      	str	r2, [r5, #0]
   26a1e:	68a2      	ldr	r2, [r4, #8]
   26a20:	606b      	str	r3, [r5, #4]
   26a22:	3a01      	subs	r2, #1
   26a24:	60a2      	str	r2, [r4, #8]
   26a26:	b142      	cbz	r2, 26a3a <_scanf_chars+0x8e>
   26a28:	2b00      	cmp	r3, #0
   26a2a:	dcd7      	bgt.n	269dc <_scanf_chars+0x30>
   26a2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   26a30:	4629      	mov	r1, r5
   26a32:	4640      	mov	r0, r8
   26a34:	4798      	blx	r3
   26a36:	2800      	cmp	r0, #0
   26a38:	d0d0      	beq.n	269dc <_scanf_chars+0x30>
   26a3a:	6823      	ldr	r3, [r4, #0]
   26a3c:	f013 0310 	ands.w	r3, r3, #16
   26a40:	d105      	bne.n	26a4e <_scanf_chars+0xa2>
   26a42:	68e2      	ldr	r2, [r4, #12]
   26a44:	3201      	adds	r2, #1
   26a46:	60e2      	str	r2, [r4, #12]
   26a48:	69a2      	ldr	r2, [r4, #24]
   26a4a:	b102      	cbz	r2, 26a4e <_scanf_chars+0xa2>
   26a4c:	7033      	strb	r3, [r6, #0]
   26a4e:	6923      	ldr	r3, [r4, #16]
   26a50:	2000      	movs	r0, #0
   26a52:	443b      	add	r3, r7
   26a54:	6123      	str	r3, [r4, #16]
   26a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26a5a:	bf00      	nop
   26a5c:	0002e947 	.word	0x0002e947

00026a60 <_scanf_i>:
   26a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26a64:	4698      	mov	r8, r3
   26a66:	b087      	sub	sp, #28
   26a68:	4b78      	ldr	r3, [pc, #480]	; (26c4c <_scanf_i+0x1ec>)
   26a6a:	460c      	mov	r4, r1
   26a6c:	4682      	mov	sl, r0
   26a6e:	4616      	mov	r6, r2
   26a70:	4627      	mov	r7, r4
   26a72:	f04f 0b00 	mov.w	fp, #0
   26a76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   26a7a:	ab03      	add	r3, sp, #12
   26a7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   26a80:	4b73      	ldr	r3, [pc, #460]	; (26c50 <_scanf_i+0x1f0>)
   26a82:	69a1      	ldr	r1, [r4, #24]
   26a84:	4a73      	ldr	r2, [pc, #460]	; (26c54 <_scanf_i+0x1f4>)
   26a86:	2903      	cmp	r1, #3
   26a88:	bf08      	it	eq
   26a8a:	461a      	moveq	r2, r3
   26a8c:	68a3      	ldr	r3, [r4, #8]
   26a8e:	9201      	str	r2, [sp, #4]
   26a90:	1e5a      	subs	r2, r3, #1
   26a92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   26a96:	bf89      	itett	hi
   26a98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   26a9c:	f04f 0900 	movls.w	r9, #0
   26aa0:	eb03 0905 	addhi.w	r9, r3, r5
   26aa4:	f240 135d 	movwhi	r3, #349	; 0x15d
   26aa8:	bf88      	it	hi
   26aaa:	60a3      	strhi	r3, [r4, #8]
   26aac:	f857 3b1c 	ldr.w	r3, [r7], #28
   26ab0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   26ab4:	463d      	mov	r5, r7
   26ab6:	6023      	str	r3, [r4, #0]
   26ab8:	6831      	ldr	r1, [r6, #0]
   26aba:	ab03      	add	r3, sp, #12
   26abc:	2202      	movs	r2, #2
   26abe:	7809      	ldrb	r1, [r1, #0]
   26ac0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   26ac4:	f004 fb73 	bl	2b1ae <memchr>
   26ac8:	2800      	cmp	r0, #0
   26aca:	d040      	beq.n	26b4e <_scanf_i+0xee>
   26acc:	f1bb 0f01 	cmp.w	fp, #1
   26ad0:	d112      	bne.n	26af8 <_scanf_i+0x98>
   26ad2:	6862      	ldr	r2, [r4, #4]
   26ad4:	b92a      	cbnz	r2, 26ae2 <_scanf_i+0x82>
   26ad6:	6822      	ldr	r2, [r4, #0]
   26ad8:	2108      	movs	r1, #8
   26ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   26ade:	6061      	str	r1, [r4, #4]
   26ae0:	6022      	str	r2, [r4, #0]
   26ae2:	6822      	ldr	r2, [r4, #0]
   26ae4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   26ae8:	6022      	str	r2, [r4, #0]
   26aea:	68a2      	ldr	r2, [r4, #8]
   26aec:	1e51      	subs	r1, r2, #1
   26aee:	60a1      	str	r1, [r4, #8]
   26af0:	b9da      	cbnz	r2, 26b2a <_scanf_i+0xca>
   26af2:	f04f 0b02 	mov.w	fp, #2
   26af6:	e7df      	b.n	26ab8 <_scanf_i+0x58>
   26af8:	f1bb 0f02 	cmp.w	fp, #2
   26afc:	d006      	beq.n	26b0c <_scanf_i+0xac>
   26afe:	68a2      	ldr	r2, [r4, #8]
   26b00:	1e51      	subs	r1, r2, #1
   26b02:	60a1      	str	r1, [r4, #8]
   26b04:	b98a      	cbnz	r2, 26b2a <_scanf_i+0xca>
   26b06:	f04f 0b01 	mov.w	fp, #1
   26b0a:	e7d5      	b.n	26ab8 <_scanf_i+0x58>
   26b0c:	6822      	ldr	r2, [r4, #0]
   26b0e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   26b12:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   26b16:	d11f      	bne.n	26b58 <_scanf_i+0xf8>
   26b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   26b1c:	2110      	movs	r1, #16
   26b1e:	6022      	str	r2, [r4, #0]
   26b20:	68a2      	ldr	r2, [r4, #8]
   26b22:	6061      	str	r1, [r4, #4]
   26b24:	1e51      	subs	r1, r2, #1
   26b26:	60a1      	str	r1, [r4, #8]
   26b28:	b1b2      	cbz	r2, 26b58 <_scanf_i+0xf8>
   26b2a:	6832      	ldr	r2, [r6, #0]
   26b2c:	1c51      	adds	r1, r2, #1
   26b2e:	6031      	str	r1, [r6, #0]
   26b30:	7812      	ldrb	r2, [r2, #0]
   26b32:	f805 2b01 	strb.w	r2, [r5], #1
   26b36:	6872      	ldr	r2, [r6, #4]
   26b38:	3a01      	subs	r2, #1
   26b3a:	2a00      	cmp	r2, #0
   26b3c:	6072      	str	r2, [r6, #4]
   26b3e:	dc06      	bgt.n	26b4e <_scanf_i+0xee>
   26b40:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   26b44:	4631      	mov	r1, r6
   26b46:	4650      	mov	r0, sl
   26b48:	4790      	blx	r2
   26b4a:	2800      	cmp	r0, #0
   26b4c:	d174      	bne.n	26c38 <_scanf_i+0x1d8>
   26b4e:	f10b 0b01 	add.w	fp, fp, #1
   26b52:	f1bb 0f03 	cmp.w	fp, #3
   26b56:	d1af      	bne.n	26ab8 <_scanf_i+0x58>
   26b58:	6863      	ldr	r3, [r4, #4]
   26b5a:	b90b      	cbnz	r3, 26b60 <_scanf_i+0x100>
   26b5c:	230a      	movs	r3, #10
   26b5e:	6063      	str	r3, [r4, #4]
   26b60:	6863      	ldr	r3, [r4, #4]
   26b62:	f04f 0b00 	mov.w	fp, #0
   26b66:	493c      	ldr	r1, [pc, #240]	; (26c58 <_scanf_i+0x1f8>)
   26b68:	6960      	ldr	r0, [r4, #20]
   26b6a:	1ac9      	subs	r1, r1, r3
   26b6c:	f004 fdb7 	bl	2b6de <__sccl>
   26b70:	68a3      	ldr	r3, [r4, #8]
   26b72:	6822      	ldr	r2, [r4, #0]
   26b74:	b373      	cbz	r3, 26bd4 <_scanf_i+0x174>
   26b76:	6831      	ldr	r1, [r6, #0]
   26b78:	6960      	ldr	r0, [r4, #20]
   26b7a:	f891 c000 	ldrb.w	ip, [r1]
   26b7e:	f810 000c 	ldrb.w	r0, [r0, ip]
   26b82:	b338      	cbz	r0, 26bd4 <_scanf_i+0x174>
   26b84:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   26b88:	d116      	bne.n	26bb8 <_scanf_i+0x158>
   26b8a:	0510      	lsls	r0, r2, #20
   26b8c:	d514      	bpl.n	26bb8 <_scanf_i+0x158>
   26b8e:	f10b 0b01 	add.w	fp, fp, #1
   26b92:	f1b9 0f00 	cmp.w	r9, #0
   26b96:	d003      	beq.n	26ba0 <_scanf_i+0x140>
   26b98:	3301      	adds	r3, #1
   26b9a:	f109 39ff 	add.w	r9, r9, #4294967295
   26b9e:	60a3      	str	r3, [r4, #8]
   26ba0:	6873      	ldr	r3, [r6, #4]
   26ba2:	3b01      	subs	r3, #1
   26ba4:	2b00      	cmp	r3, #0
   26ba6:	6073      	str	r3, [r6, #4]
   26ba8:	dd0d      	ble.n	26bc6 <_scanf_i+0x166>
   26baa:	6833      	ldr	r3, [r6, #0]
   26bac:	3301      	adds	r3, #1
   26bae:	6033      	str	r3, [r6, #0]
   26bb0:	68a3      	ldr	r3, [r4, #8]
   26bb2:	3b01      	subs	r3, #1
   26bb4:	60a3      	str	r3, [r4, #8]
   26bb6:	e7db      	b.n	26b70 <_scanf_i+0x110>
   26bb8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   26bbc:	6022      	str	r2, [r4, #0]
   26bbe:	780b      	ldrb	r3, [r1, #0]
   26bc0:	f805 3b01 	strb.w	r3, [r5], #1
   26bc4:	e7ec      	b.n	26ba0 <_scanf_i+0x140>
   26bc6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   26bca:	4631      	mov	r1, r6
   26bcc:	4650      	mov	r0, sl
   26bce:	4798      	blx	r3
   26bd0:	2800      	cmp	r0, #0
   26bd2:	d0ed      	beq.n	26bb0 <_scanf_i+0x150>
   26bd4:	6823      	ldr	r3, [r4, #0]
   26bd6:	05d9      	lsls	r1, r3, #23
   26bd8:	d50d      	bpl.n	26bf6 <_scanf_i+0x196>
   26bda:	42bd      	cmp	r5, r7
   26bdc:	d909      	bls.n	26bf2 <_scanf_i+0x192>
   26bde:	f105 39ff 	add.w	r9, r5, #4294967295
   26be2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   26be6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   26bea:	4632      	mov	r2, r6
   26bec:	464d      	mov	r5, r9
   26bee:	4650      	mov	r0, sl
   26bf0:	4798      	blx	r3
   26bf2:	42bd      	cmp	r5, r7
   26bf4:	d028      	beq.n	26c48 <_scanf_i+0x1e8>
   26bf6:	6822      	ldr	r2, [r4, #0]
   26bf8:	f012 0210 	ands.w	r2, r2, #16
   26bfc:	d113      	bne.n	26c26 <_scanf_i+0x1c6>
   26bfe:	702a      	strb	r2, [r5, #0]
   26c00:	4639      	mov	r1, r7
   26c02:	6863      	ldr	r3, [r4, #4]
   26c04:	4650      	mov	r0, sl
   26c06:	9e01      	ldr	r6, [sp, #4]
   26c08:	47b0      	blx	r6
   26c0a:	f8d8 3000 	ldr.w	r3, [r8]
   26c0e:	6821      	ldr	r1, [r4, #0]
   26c10:	1d1a      	adds	r2, r3, #4
   26c12:	f011 0f20 	tst.w	r1, #32
   26c16:	f8c8 2000 	str.w	r2, [r8]
   26c1a:	681b      	ldr	r3, [r3, #0]
   26c1c:	d00f      	beq.n	26c3e <_scanf_i+0x1de>
   26c1e:	6018      	str	r0, [r3, #0]
   26c20:	68e3      	ldr	r3, [r4, #12]
   26c22:	3301      	adds	r3, #1
   26c24:	60e3      	str	r3, [r4, #12]
   26c26:	1bed      	subs	r5, r5, r7
   26c28:	6923      	ldr	r3, [r4, #16]
   26c2a:	2000      	movs	r0, #0
   26c2c:	445d      	add	r5, fp
   26c2e:	442b      	add	r3, r5
   26c30:	6123      	str	r3, [r4, #16]
   26c32:	b007      	add	sp, #28
   26c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c38:	f04f 0b00 	mov.w	fp, #0
   26c3c:	e7ca      	b.n	26bd4 <_scanf_i+0x174>
   26c3e:	07ca      	lsls	r2, r1, #31
   26c40:	bf4c      	ite	mi
   26c42:	8018      	strhmi	r0, [r3, #0]
   26c44:	6018      	strpl	r0, [r3, #0]
   26c46:	e7eb      	b.n	26c20 <_scanf_i+0x1c0>
   26c48:	2001      	movs	r0, #1
   26c4a:	e7f2      	b.n	26c32 <_scanf_i+0x1d2>
   26c4c:	0002bf34 	.word	0x0002bf34
   26c50:	0002b37f 	.word	0x0002b37f
   26c54:	0002b383 	.word	0x0002b383
   26c58:	0002ea8a 	.word	0x0002ea8a

00026c5c <_read_r>:
   26c5c:	b538      	push	{r3, r4, r5, lr}
   26c5e:	4604      	mov	r4, r0
   26c60:	4d06      	ldr	r5, [pc, #24]	; (26c7c <_read_r+0x20>)
   26c62:	4608      	mov	r0, r1
   26c64:	4611      	mov	r1, r2
   26c66:	2200      	movs	r2, #0
   26c68:	602a      	str	r2, [r5, #0]
   26c6a:	461a      	mov	r2, r3
   26c6c:	f000 ffbf 	bl	27bee <_read>
   26c70:	1c43      	adds	r3, r0, #1
   26c72:	d102      	bne.n	26c7a <_read_r+0x1e>
   26c74:	682b      	ldr	r3, [r5, #0]
   26c76:	b103      	cbz	r3, 26c7a <_read_r+0x1e>
   26c78:	6023      	str	r3, [r4, #0]
   26c7a:	bd38      	pop	{r3, r4, r5, pc}
   26c7c:	2000dd88 	.word	0x2000dd88

00026c80 <__swbuf_r>:
   26c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26c82:	460e      	mov	r6, r1
   26c84:	4614      	mov	r4, r2
   26c86:	4605      	mov	r5, r0
   26c88:	b118      	cbz	r0, 26c92 <__swbuf_r+0x12>
   26c8a:	6983      	ldr	r3, [r0, #24]
   26c8c:	b90b      	cbnz	r3, 26c92 <__swbuf_r+0x12>
   26c8e:	f7ff f923 	bl	25ed8 <__sinit>
   26c92:	4b21      	ldr	r3, [pc, #132]	; (26d18 <__swbuf_r+0x98>)
   26c94:	429c      	cmp	r4, r3
   26c96:	d110      	bne.n	26cba <__swbuf_r+0x3a>
   26c98:	686c      	ldr	r4, [r5, #4]
   26c9a:	69a3      	ldr	r3, [r4, #24]
   26c9c:	60a3      	str	r3, [r4, #8]
   26c9e:	89a3      	ldrh	r3, [r4, #12]
   26ca0:	071a      	lsls	r2, r3, #28
   26ca2:	d501      	bpl.n	26ca8 <__swbuf_r+0x28>
   26ca4:	6923      	ldr	r3, [r4, #16]
   26ca6:	b993      	cbnz	r3, 26cce <__swbuf_r+0x4e>
   26ca8:	4621      	mov	r1, r4
   26caa:	4628      	mov	r0, r5
   26cac:	f000 f83a 	bl	26d24 <__swsetup_r>
   26cb0:	b168      	cbz	r0, 26cce <__swbuf_r+0x4e>
   26cb2:	f04f 37ff 	mov.w	r7, #4294967295
   26cb6:	4638      	mov	r0, r7
   26cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26cba:	4b18      	ldr	r3, [pc, #96]	; (26d1c <__swbuf_r+0x9c>)
   26cbc:	429c      	cmp	r4, r3
   26cbe:	d101      	bne.n	26cc4 <__swbuf_r+0x44>
   26cc0:	68ac      	ldr	r4, [r5, #8]
   26cc2:	e7ea      	b.n	26c9a <__swbuf_r+0x1a>
   26cc4:	4b16      	ldr	r3, [pc, #88]	; (26d20 <__swbuf_r+0xa0>)
   26cc6:	429c      	cmp	r4, r3
   26cc8:	bf08      	it	eq
   26cca:	68ec      	ldreq	r4, [r5, #12]
   26ccc:	e7e5      	b.n	26c9a <__swbuf_r+0x1a>
   26cce:	6923      	ldr	r3, [r4, #16]
   26cd0:	b2f6      	uxtb	r6, r6
   26cd2:	6820      	ldr	r0, [r4, #0]
   26cd4:	4637      	mov	r7, r6
   26cd6:	1ac0      	subs	r0, r0, r3
   26cd8:	6963      	ldr	r3, [r4, #20]
   26cda:	4283      	cmp	r3, r0
   26cdc:	dc05      	bgt.n	26cea <__swbuf_r+0x6a>
   26cde:	4621      	mov	r1, r4
   26ce0:	4628      	mov	r0, r5
   26ce2:	f000 f88b 	bl	26dfc <_fflush_r>
   26ce6:	2800      	cmp	r0, #0
   26ce8:	d1e3      	bne.n	26cb2 <__swbuf_r+0x32>
   26cea:	68a3      	ldr	r3, [r4, #8]
   26cec:	3001      	adds	r0, #1
   26cee:	3b01      	subs	r3, #1
   26cf0:	60a3      	str	r3, [r4, #8]
   26cf2:	6823      	ldr	r3, [r4, #0]
   26cf4:	1c5a      	adds	r2, r3, #1
   26cf6:	6022      	str	r2, [r4, #0]
   26cf8:	701e      	strb	r6, [r3, #0]
   26cfa:	6963      	ldr	r3, [r4, #20]
   26cfc:	4283      	cmp	r3, r0
   26cfe:	d004      	beq.n	26d0a <__swbuf_r+0x8a>
   26d00:	89a3      	ldrh	r3, [r4, #12]
   26d02:	07db      	lsls	r3, r3, #31
   26d04:	d5d7      	bpl.n	26cb6 <__swbuf_r+0x36>
   26d06:	2e0a      	cmp	r6, #10
   26d08:	d1d5      	bne.n	26cb6 <__swbuf_r+0x36>
   26d0a:	4621      	mov	r1, r4
   26d0c:	4628      	mov	r0, r5
   26d0e:	f000 f875 	bl	26dfc <_fflush_r>
   26d12:	2800      	cmp	r0, #0
   26d14:	d0cf      	beq.n	26cb6 <__swbuf_r+0x36>
   26d16:	e7cc      	b.n	26cb2 <__swbuf_r+0x32>
   26d18:	0002cb68 	.word	0x0002cb68
   26d1c:	0002cb48 	.word	0x0002cb48
   26d20:	0002cb28 	.word	0x0002cb28

00026d24 <__swsetup_r>:
   26d24:	4b31      	ldr	r3, [pc, #196]	; (26dec <__swsetup_r+0xc8>)
   26d26:	b570      	push	{r4, r5, r6, lr}
   26d28:	681d      	ldr	r5, [r3, #0]
   26d2a:	4606      	mov	r6, r0
   26d2c:	460c      	mov	r4, r1
   26d2e:	b125      	cbz	r5, 26d3a <__swsetup_r+0x16>
   26d30:	69ab      	ldr	r3, [r5, #24]
   26d32:	b913      	cbnz	r3, 26d3a <__swsetup_r+0x16>
   26d34:	4628      	mov	r0, r5
   26d36:	f7ff f8cf 	bl	25ed8 <__sinit>
   26d3a:	4b2d      	ldr	r3, [pc, #180]	; (26df0 <__swsetup_r+0xcc>)
   26d3c:	429c      	cmp	r4, r3
   26d3e:	d10e      	bne.n	26d5e <__swsetup_r+0x3a>
   26d40:	686c      	ldr	r4, [r5, #4]
   26d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26d46:	071a      	lsls	r2, r3, #28
   26d48:	d42c      	bmi.n	26da4 <__swsetup_r+0x80>
   26d4a:	06dd      	lsls	r5, r3, #27
   26d4c:	d411      	bmi.n	26d72 <__swsetup_r+0x4e>
   26d4e:	2209      	movs	r2, #9
   26d50:	6032      	str	r2, [r6, #0]
   26d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26d56:	f04f 30ff 	mov.w	r0, #4294967295
   26d5a:	81a3      	strh	r3, [r4, #12]
   26d5c:	e03d      	b.n	26dda <__swsetup_r+0xb6>
   26d5e:	4b25      	ldr	r3, [pc, #148]	; (26df4 <__swsetup_r+0xd0>)
   26d60:	429c      	cmp	r4, r3
   26d62:	d101      	bne.n	26d68 <__swsetup_r+0x44>
   26d64:	68ac      	ldr	r4, [r5, #8]
   26d66:	e7ec      	b.n	26d42 <__swsetup_r+0x1e>
   26d68:	4b23      	ldr	r3, [pc, #140]	; (26df8 <__swsetup_r+0xd4>)
   26d6a:	429c      	cmp	r4, r3
   26d6c:	bf08      	it	eq
   26d6e:	68ec      	ldreq	r4, [r5, #12]
   26d70:	e7e7      	b.n	26d42 <__swsetup_r+0x1e>
   26d72:	0758      	lsls	r0, r3, #29
   26d74:	d512      	bpl.n	26d9c <__swsetup_r+0x78>
   26d76:	6b61      	ldr	r1, [r4, #52]	; 0x34
   26d78:	b141      	cbz	r1, 26d8c <__swsetup_r+0x68>
   26d7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   26d7e:	4299      	cmp	r1, r3
   26d80:	d002      	beq.n	26d88 <__swsetup_r+0x64>
   26d82:	4630      	mov	r0, r6
   26d84:	f7fe fd1a 	bl	257bc <_free_r>
   26d88:	2300      	movs	r3, #0
   26d8a:	6363      	str	r3, [r4, #52]	; 0x34
   26d8c:	89a3      	ldrh	r3, [r4, #12]
   26d8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   26d92:	81a3      	strh	r3, [r4, #12]
   26d94:	2300      	movs	r3, #0
   26d96:	6063      	str	r3, [r4, #4]
   26d98:	6923      	ldr	r3, [r4, #16]
   26d9a:	6023      	str	r3, [r4, #0]
   26d9c:	89a3      	ldrh	r3, [r4, #12]
   26d9e:	f043 0308 	orr.w	r3, r3, #8
   26da2:	81a3      	strh	r3, [r4, #12]
   26da4:	6923      	ldr	r3, [r4, #16]
   26da6:	b94b      	cbnz	r3, 26dbc <__swsetup_r+0x98>
   26da8:	89a3      	ldrh	r3, [r4, #12]
   26daa:	f403 7320 	and.w	r3, r3, #640	; 0x280
   26dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   26db2:	d003      	beq.n	26dbc <__swsetup_r+0x98>
   26db4:	4621      	mov	r1, r4
   26db6:	4630      	mov	r0, r6
   26db8:	f000 f85c 	bl	26e74 <__smakebuf_r>
   26dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26dc0:	f013 0201 	ands.w	r2, r3, #1
   26dc4:	d00a      	beq.n	26ddc <__swsetup_r+0xb8>
   26dc6:	2200      	movs	r2, #0
   26dc8:	60a2      	str	r2, [r4, #8]
   26dca:	6962      	ldr	r2, [r4, #20]
   26dcc:	4252      	negs	r2, r2
   26dce:	61a2      	str	r2, [r4, #24]
   26dd0:	6922      	ldr	r2, [r4, #16]
   26dd2:	b942      	cbnz	r2, 26de6 <__swsetup_r+0xc2>
   26dd4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   26dd8:	d1bb      	bne.n	26d52 <__swsetup_r+0x2e>
   26dda:	bd70      	pop	{r4, r5, r6, pc}
   26ddc:	0799      	lsls	r1, r3, #30
   26dde:	bf58      	it	pl
   26de0:	6962      	ldrpl	r2, [r4, #20]
   26de2:	60a2      	str	r2, [r4, #8]
   26de4:	e7f4      	b.n	26dd0 <__swsetup_r+0xac>
   26de6:	2000      	movs	r0, #0
   26de8:	e7f7      	b.n	26dda <__swsetup_r+0xb6>
   26dea:	bf00      	nop
   26dec:	2000c724 	.word	0x2000c724
   26df0:	0002cb68 	.word	0x0002cb68
   26df4:	0002cb48 	.word	0x0002cb48
   26df8:	0002cb28 	.word	0x0002cb28

00026dfc <_fflush_r>:
   26dfc:	b538      	push	{r3, r4, r5, lr}
   26dfe:	690b      	ldr	r3, [r1, #16]
   26e00:	4605      	mov	r5, r0
   26e02:	460c      	mov	r4, r1
   26e04:	b913      	cbnz	r3, 26e0c <_fflush_r+0x10>
   26e06:	2500      	movs	r5, #0
   26e08:	4628      	mov	r0, r5
   26e0a:	bd38      	pop	{r3, r4, r5, pc}
   26e0c:	b118      	cbz	r0, 26e16 <_fflush_r+0x1a>
   26e0e:	6983      	ldr	r3, [r0, #24]
   26e10:	b90b      	cbnz	r3, 26e16 <_fflush_r+0x1a>
   26e12:	f7ff f861 	bl	25ed8 <__sinit>
   26e16:	4b14      	ldr	r3, [pc, #80]	; (26e68 <_fflush_r+0x6c>)
   26e18:	429c      	cmp	r4, r3
   26e1a:	d11b      	bne.n	26e54 <_fflush_r+0x58>
   26e1c:	686c      	ldr	r4, [r5, #4]
   26e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26e22:	2b00      	cmp	r3, #0
   26e24:	d0ef      	beq.n	26e06 <_fflush_r+0xa>
   26e26:	6e62      	ldr	r2, [r4, #100]	; 0x64
   26e28:	07d0      	lsls	r0, r2, #31
   26e2a:	d404      	bmi.n	26e36 <_fflush_r+0x3a>
   26e2c:	0599      	lsls	r1, r3, #22
   26e2e:	d402      	bmi.n	26e36 <_fflush_r+0x3a>
   26e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
   26e32:	f000 fefd 	bl	27c30 <__retarget_lock_acquire_recursive>
   26e36:	4628      	mov	r0, r5
   26e38:	4621      	mov	r1, r4
   26e3a:	f004 fcc0 	bl	2b7be <__sflush_r>
   26e3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   26e40:	4605      	mov	r5, r0
   26e42:	07da      	lsls	r2, r3, #31
   26e44:	d4e0      	bmi.n	26e08 <_fflush_r+0xc>
   26e46:	89a3      	ldrh	r3, [r4, #12]
   26e48:	059b      	lsls	r3, r3, #22
   26e4a:	d4dd      	bmi.n	26e08 <_fflush_r+0xc>
   26e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   26e4e:	f000 fef5 	bl	27c3c <__retarget_lock_release_recursive>
   26e52:	e7d9      	b.n	26e08 <_fflush_r+0xc>
   26e54:	4b05      	ldr	r3, [pc, #20]	; (26e6c <_fflush_r+0x70>)
   26e56:	429c      	cmp	r4, r3
   26e58:	d101      	bne.n	26e5e <_fflush_r+0x62>
   26e5a:	68ac      	ldr	r4, [r5, #8]
   26e5c:	e7df      	b.n	26e1e <_fflush_r+0x22>
   26e5e:	4b04      	ldr	r3, [pc, #16]	; (26e70 <_fflush_r+0x74>)
   26e60:	429c      	cmp	r4, r3
   26e62:	bf08      	it	eq
   26e64:	68ec      	ldreq	r4, [r5, #12]
   26e66:	e7da      	b.n	26e1e <_fflush_r+0x22>
   26e68:	0002cb68 	.word	0x0002cb68
   26e6c:	0002cb48 	.word	0x0002cb48
   26e70:	0002cb28 	.word	0x0002cb28

00026e74 <__smakebuf_r>:
   26e74:	898b      	ldrh	r3, [r1, #12]
   26e76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26e78:	079d      	lsls	r5, r3, #30
   26e7a:	4606      	mov	r6, r0
   26e7c:	460c      	mov	r4, r1
   26e7e:	d507      	bpl.n	26e90 <__smakebuf_r+0x1c>
   26e80:	f104 0347 	add.w	r3, r4, #71	; 0x47
   26e84:	6023      	str	r3, [r4, #0]
   26e86:	6123      	str	r3, [r4, #16]
   26e88:	2301      	movs	r3, #1
   26e8a:	6163      	str	r3, [r4, #20]
   26e8c:	b003      	add	sp, #12
   26e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26e90:	ab01      	add	r3, sp, #4
   26e92:	466a      	mov	r2, sp
   26e94:	f004 fd12 	bl	2b8bc <__swhatbuf_r>
   26e98:	9f00      	ldr	r7, [sp, #0]
   26e9a:	4605      	mov	r5, r0
   26e9c:	4630      	mov	r0, r6
   26e9e:	4639      	mov	r1, r7
   26ea0:	f7fe fcd6 	bl	25850 <_malloc_r>
   26ea4:	b948      	cbnz	r0, 26eba <__smakebuf_r+0x46>
   26ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26eaa:	059a      	lsls	r2, r3, #22
   26eac:	d4ee      	bmi.n	26e8c <__smakebuf_r+0x18>
   26eae:	f023 0303 	bic.w	r3, r3, #3
   26eb2:	f043 0302 	orr.w	r3, r3, #2
   26eb6:	81a3      	strh	r3, [r4, #12]
   26eb8:	e7e2      	b.n	26e80 <__smakebuf_r+0xc>
   26eba:	4b0d      	ldr	r3, [pc, #52]	; (26ef0 <__smakebuf_r+0x7c>)
   26ebc:	62b3      	str	r3, [r6, #40]	; 0x28
   26ebe:	89a3      	ldrh	r3, [r4, #12]
   26ec0:	6020      	str	r0, [r4, #0]
   26ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   26ec6:	81a3      	strh	r3, [r4, #12]
   26ec8:	9b01      	ldr	r3, [sp, #4]
   26eca:	e9c4 0704 	strd	r0, r7, [r4, #16]
   26ece:	b15b      	cbz	r3, 26ee8 <__smakebuf_r+0x74>
   26ed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   26ed4:	4630      	mov	r0, r6
   26ed6:	f000 f81f 	bl	26f18 <_isatty_r>
   26eda:	b128      	cbz	r0, 26ee8 <__smakebuf_r+0x74>
   26edc:	89a3      	ldrh	r3, [r4, #12]
   26ede:	f023 0303 	bic.w	r3, r3, #3
   26ee2:	f043 0301 	orr.w	r3, r3, #1
   26ee6:	81a3      	strh	r3, [r4, #12]
   26ee8:	89a3      	ldrh	r3, [r4, #12]
   26eea:	431d      	orrs	r5, r3
   26eec:	81a5      	strh	r5, [r4, #12]
   26eee:	e7cd      	b.n	26e8c <__smakebuf_r+0x18>
   26ef0:	00025e9d 	.word	0x00025e9d

00026ef4 <_fstat_r>:
   26ef4:	b538      	push	{r3, r4, r5, lr}
   26ef6:	2300      	movs	r3, #0
   26ef8:	4d06      	ldr	r5, [pc, #24]	; (26f14 <_fstat_r+0x20>)
   26efa:	4604      	mov	r4, r0
   26efc:	4608      	mov	r0, r1
   26efe:	4611      	mov	r1, r2
   26f00:	602b      	str	r3, [r5, #0]
   26f02:	f000 fe86 	bl	27c12 <_fstat>
   26f06:	1c43      	adds	r3, r0, #1
   26f08:	d102      	bne.n	26f10 <_fstat_r+0x1c>
   26f0a:	682b      	ldr	r3, [r5, #0]
   26f0c:	b103      	cbz	r3, 26f10 <_fstat_r+0x1c>
   26f0e:	6023      	str	r3, [r4, #0]
   26f10:	bd38      	pop	{r3, r4, r5, pc}
   26f12:	bf00      	nop
   26f14:	2000dd88 	.word	0x2000dd88

00026f18 <_isatty_r>:
   26f18:	b538      	push	{r3, r4, r5, lr}
   26f1a:	2300      	movs	r3, #0
   26f1c:	4d05      	ldr	r5, [pc, #20]	; (26f34 <_isatty_r+0x1c>)
   26f1e:	4604      	mov	r4, r0
   26f20:	4608      	mov	r0, r1
   26f22:	602b      	str	r3, [r5, #0]
   26f24:	f000 fe70 	bl	27c08 <_isatty>
   26f28:	1c43      	adds	r3, r0, #1
   26f2a:	d102      	bne.n	26f32 <_isatty_r+0x1a>
   26f2c:	682b      	ldr	r3, [r5, #0]
   26f2e:	b103      	cbz	r3, 26f32 <_isatty_r+0x1a>
   26f30:	6023      	str	r3, [r4, #0]
   26f32:	bd38      	pop	{r3, r4, r5, pc}
   26f34:	2000dd88 	.word	0x2000dd88

00026f38 <http_response_cb>:
static void http_response_cb(struct http_response *rsp, enum http_final_call final_data, void *user_data) {
   26f38:	b570      	push	{r4, r5, r6, lr}
   26f3a:	4605      	mov	r5, r0
	struct shared_data *sd = shared_data_get();
   26f3c:	f7f2 fc02 	bl	19744 <shared_data_get>
   26f40:	4604      	mov	r4, r0
	k_mutex_lock(&sd->url_mutex, K_FOREVER);
   26f42:	f100 0630 	add.w	r6, r0, #48	; 0x30
	return z_impl_k_mutex_lock(mutex, timeout);
   26f46:	f04f 33ff 	mov.w	r3, #4294967295
   26f4a:	f04f 32ff 	mov.w	r2, #4294967295
   26f4e:	4630      	mov	r0, r6
   26f50:	f7fd fc26 	bl	247a0 <z_impl_k_mutex_lock>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26f54:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   26f58:	f104 0044 	add.w	r0, r4, #68	; 0x44
   26f5c:	f004 f945 	bl	2b1ea <memcpy>
	sd->response_len = rsp->body_frag_len;
   26f60:	68eb      	ldr	r3, [r5, #12]
   26f62:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
	return z_impl_k_mutex_unlock(mutex);
   26f66:	4630      	mov	r0, r6
   26f68:	f7fd fc94 	bl	24894 <z_impl_k_mutex_unlock>
	z_impl_k_sem_give(sem);
   26f6c:	f104 0018 	add.w	r0, r4, #24
}
   26f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26f74:	f7fd bcfe 	b.w	24974 <z_impl_k_sem_give>

00026f78 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   26f78:	b40c      	push	{r2, r3}
   26f7a:	4603      	mov	r3, r0
   26f7c:	b507      	push	{r0, r1, r2, lr}
   26f7e:	4608      	mov	r0, r1
				       unsigned long request, ...)
{
	va_list args;
	int res;

	va_start(args, request);
   26f80:	aa05      	add	r2, sp, #20
	res = vtable->ioctl(obj, request, args);
   26f82:	f240 1105 	movw	r1, #261	; 0x105
   26f86:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   26f88:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   26f8a:	4798      	blx	r3
	va_end(args);

	return res;
}
   26f8c:	b003      	add	sp, #12
   26f8e:	f85d eb04 	ldr.w	lr, [sp], #4
   26f92:	b002      	add	sp, #8
   26f94:	4770      	bx	lr

00026f96 <arch_printk_char_out>:
}
   26f96:	2000      	movs	r0, #0
   26f98:	4770      	bx	lr

00026f9a <str_out>:
{
   26f9a:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   26f9c:	688a      	ldr	r2, [r1, #8]
   26f9e:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   26fa0:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   26fa2:	b114      	cbz	r4, 26faa <str_out+0x10>
   26fa4:	684b      	ldr	r3, [r1, #4]
   26fa6:	4293      	cmp	r3, r2
   26fa8:	dc01      	bgt.n	26fae <str_out+0x14>
		ctx->count++;
   26faa:	608d      	str	r5, [r1, #8]
}
   26fac:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   26fae:	3b01      	subs	r3, #1
   26fb0:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   26fb2:	bf08      	it	eq
   26fb4:	2200      	moveq	r2, #0
   26fb6:	608d      	str	r5, [r1, #8]
   26fb8:	bf0c      	ite	eq
   26fba:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   26fbc:	54a0      	strbne	r0, [r4, r2]
   26fbe:	e7f5      	b.n	26fac <str_out+0x12>

00026fc0 <printk>:
{
   26fc0:	b40f      	push	{r0, r1, r2, r3}
   26fc2:	b507      	push	{r0, r1, r2, lr}
   26fc4:	a904      	add	r1, sp, #16
   26fc6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   26fca:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   26fcc:	f7f2 fd7a 	bl	19ac4 <vprintk>
}
   26fd0:	b003      	add	sp, #12
   26fd2:	f85d eb04 	ldr.w	lr, [sp], #4
   26fd6:	b004      	add	sp, #16
   26fd8:	4770      	bx	lr

00026fda <snprintk>:
{
   26fda:	b40c      	push	{r2, r3}
   26fdc:	b507      	push	{r0, r1, r2, lr}
   26fde:	ab04      	add	r3, sp, #16
   26fe0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   26fe4:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   26fe6:	f7f2 fd7b 	bl	19ae0 <vsnprintk>
}
   26fea:	b003      	add	sp, #12
   26fec:	f85d eb04 	ldr.w	lr, [sp], #4
   26ff0:	b002      	add	sp, #8
   26ff2:	4770      	bx	lr

00026ff4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   26ff4:	4604      	mov	r4, r0
   26ff6:	b508      	push	{r3, lr}
   26ff8:	4608      	mov	r0, r1
   26ffa:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   26ffc:	461a      	mov	r2, r3
   26ffe:	47a0      	blx	r4
	return z_impl_z_current_get();
   27000:	f7fe f938 	bl	25274 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   27004:	f7f4 fa9c 	bl	1b540 <z_impl_k_thread_abort>

00027008 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   27008:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2700c:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   2700e:	0840      	lsrs	r0, r0, #1
   27010:	4770      	bx	lr

00027012 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   27012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27014:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   27016:	f7ff fff7 	bl	27008 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2701a:	fab0 f080 	clz	r0, r0
   2701e:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   27022:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   27026:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   2702a:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   2702c:	1d17      	adds	r7, r2, #4
{
   2702e:	460c      	mov	r4, r1
   27030:	3206      	adds	r2, #6
   27032:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   27034:	b956      	cbnz	r6, 2704c <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   27036:	2101      	movs	r1, #1
   27038:	fa01 f000 	lsl.w	r0, r1, r0
   2703c:	68d9      	ldr	r1, [r3, #12]
   2703e:	4301      	orrs	r1, r0
   27040:	60d9      	str	r1, [r3, #12]
		b->next = c;
   27042:	f8cc 4010 	str.w	r4, [ip, #16]
   27046:	53dd      	strh	r5, [r3, r7]
   27048:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   2704a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2704c:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2704e:	3104      	adds	r1, #4
   27050:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   27052:	53d8      	strh	r0, [r3, r7]
   27054:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   27058:	529e      	strh	r6, [r3, r2]
   2705a:	80c5      	strh	r5, [r0, #6]
   2705c:	525d      	strh	r5, [r3, r1]
   2705e:	e7f4      	b.n	2704a <free_list_add+0x38>

00027060 <free_list_remove_bidx>:
{
   27060:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   27062:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   27066:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   27068:	4299      	cmp	r1, r3
   2706a:	f102 0104 	add.w	r1, r2, #4
   2706e:	d10a      	bne.n	27086 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   27070:	2301      	movs	r3, #1
   27072:	fa03 f202 	lsl.w	r2, r3, r2
   27076:	68c3      	ldr	r3, [r0, #12]
   27078:	ea23 0302 	bic.w	r3, r3, r2
   2707c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2707e:	2300      	movs	r3, #0
   27080:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   27084:	bd10      	pop	{r4, pc}
   27086:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   27088:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2708c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   27090:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   27094:	80cb      	strh	r3, [r1, #6]
   27096:	8082      	strh	r2, [r0, #4]
}
   27098:	e7f4      	b.n	27084 <free_list_remove_bidx+0x24>

0002709a <free_list_remove>:
{
   2709a:	b508      	push	{r3, lr}
   2709c:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2709e:	f7ff ffb3 	bl	27008 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   270a2:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   270a6:	4618      	mov	r0, r3
}
   270a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   270ac:	f1c2 021f 	rsb	r2, r2, #31
   270b0:	f7ff bfd6 	b.w	27060 <free_list_remove_bidx>

000270b4 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   270b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   270b8:	fab1 f581 	clz	r5, r1
   270bc:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   270c0:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   270c4:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   270c8:	4603      	mov	r3, r0
   270ca:	460e      	mov	r6, r1
	if (b->next) {
   270cc:	b1c2      	cbz	r2, 27100 <alloc_chunk+0x4c>
   270ce:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   270d0:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   270d4:	4618      	mov	r0, r3
   270d6:	4621      	mov	r1, r4
   270d8:	f7ff ff96 	bl	27008 <chunk_size>
   270dc:	42b0      	cmp	r0, r6
   270de:	d306      	bcc.n	270ee <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   270e0:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   270e2:	4618      	mov	r0, r3
   270e4:	f7ff ffbc 	bl	27060 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   270e8:	4620      	mov	r0, r4
   270ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   270ee:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   270f2:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   270f4:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   270f6:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   270fa:	d001      	beq.n	27100 <alloc_chunk+0x4c>
   270fc:	4282      	cmp	r2, r0
   270fe:	d1e7      	bne.n	270d0 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   27100:	f04f 34ff 	mov.w	r4, #4294967295
   27104:	f1c5 0220 	rsb	r2, r5, #32
   27108:	4094      	lsls	r4, r2
   2710a:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2710c:	4014      	ands	r4, r2
   2710e:	d0eb      	beq.n	270e8 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   27110:	fa94 f2a4 	rbit	r2, r4
   27114:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   27118:	1d11      	adds	r1, r2, #4
   2711a:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2711e:	4621      	mov	r1, r4
   27120:	e7df      	b.n	270e2 <alloc_chunk+0x2e>

00027122 <merge_chunks>:
{
   27122:	b538      	push	{r3, r4, r5, lr}
   27124:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   27126:	f7ff ff6f 	bl	27008 <chunk_size>
{
   2712a:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2712c:	4604      	mov	r4, r0
   2712e:	4611      	mov	r1, r2
   27130:	4618      	mov	r0, r3
   27132:	f7ff ff69 	bl	27008 <chunk_size>
   27136:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27138:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2713a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2713e:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   27140:	4618      	mov	r0, r3
   27142:	f7ff ff61 	bl	27008 <chunk_size>
	void *cmem = &buf[c];
   27146:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   27148:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2714c:	bd38      	pop	{r3, r4, r5, pc}

0002714e <split_chunks>:
{
   2714e:	b538      	push	{r3, r4, r5, lr}
   27150:	460c      	mov	r4, r1
   27152:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   27154:	f7ff ff58 	bl	27008 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   27158:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2715a:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2715c:	4405      	add	r5, r0
   2715e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27162:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   27164:	8060      	strh	r0, [r4, #2]
   27166:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2716a:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2716c:	8044      	strh	r4, [r0, #2]
   2716e:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   27172:	4618      	mov	r0, r3
   27174:	4611      	mov	r1, r2
   27176:	f7ff ff47 	bl	27008 <chunk_size>
	void *cmem = &buf[c];
   2717a:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2717c:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   27180:	bd38      	pop	{r3, r4, r5, pc}

00027182 <free_chunk>:
{
   27182:	b538      	push	{r3, r4, r5, lr}
   27184:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   27186:	f7ff ff3f 	bl	27008 <chunk_size>
   2718a:	460c      	mov	r4, r1
   2718c:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2718e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   27192:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   27194:	07da      	lsls	r2, r3, #31
   27196:	d40a      	bmi.n	271ae <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   27198:	4628      	mov	r0, r5
   2719a:	f7ff ff7e 	bl	2709a <free_list_remove>
	return c + chunk_size(h, c);
   2719e:	4621      	mov	r1, r4
   271a0:	4628      	mov	r0, r5
   271a2:	f7ff ff31 	bl	27008 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   271a6:	1822      	adds	r2, r4, r0
   271a8:	4628      	mov	r0, r5
   271aa:	f7ff ffba 	bl	27122 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   271ae:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   271b2:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   271b4:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   271b8:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   271ba:	07db      	lsls	r3, r3, #31
   271bc:	d40c      	bmi.n	271d8 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   271be:	4628      	mov	r0, r5
   271c0:	f7ff ff6b 	bl	2709a <free_list_remove>
		return ((uint16_t *)cmem)[f];
   271c4:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   271c8:	4622      	mov	r2, r4
   271ca:	1a61      	subs	r1, r4, r1
   271cc:	4628      	mov	r0, r5
   271ce:	f7ff ffa8 	bl	27122 <merge_chunks>
   271d2:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   271d6:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   271d8:	4621      	mov	r1, r4
   271da:	4628      	mov	r0, r5
}
   271dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   271e0:	f7ff bf17 	b.w	27012 <free_list_add>

000271e4 <sys_heap_free>:
	if (mem == NULL) {
   271e4:	b161      	cbz	r1, 27200 <sys_heap_free+0x1c>
   271e6:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   271e8:	3904      	subs	r1, #4
   271ea:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   271ec:	f021 0307 	bic.w	r3, r1, #7
   271f0:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   271f2:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   271f4:	08c9      	lsrs	r1, r1, #3
   271f6:	f022 0201 	bic.w	r2, r2, #1
   271fa:	805a      	strh	r2, [r3, #2]
   271fc:	f7ff bfc1 	b.w	27182 <free_chunk>
}
   27200:	4770      	bx	lr

00027202 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   27202:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   27204:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   27206:	b909      	cbnz	r1, 2720c <sys_heap_alloc+0xa>
		return NULL;
   27208:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2720a:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2720c:	68ab      	ldr	r3, [r5, #8]
   2720e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   27212:	d9f9      	bls.n	27208 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   27214:	310b      	adds	r1, #11
   27216:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   27218:	4621      	mov	r1, r4
   2721a:	4628      	mov	r0, r5
   2721c:	f7ff ff4a 	bl	270b4 <alloc_chunk>
	if (c == 0U) {
   27220:	4606      	mov	r6, r0
   27222:	2800      	cmp	r0, #0
   27224:	d0f0      	beq.n	27208 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   27226:	4601      	mov	r1, r0
   27228:	4628      	mov	r0, r5
   2722a:	f7ff feed 	bl	27008 <chunk_size>
   2722e:	42a0      	cmp	r0, r4
   27230:	d907      	bls.n	27242 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   27232:	4628      	mov	r0, r5
   27234:	1932      	adds	r2, r6, r4
   27236:	f7ff ff8a 	bl	2714e <split_chunks>
		free_list_add(h, c + chunk_sz);
   2723a:	4611      	mov	r1, r2
   2723c:	4628      	mov	r0, r5
   2723e:	f7ff fee8 	bl	27012 <free_list_add>
	void *cmem = &buf[c];
   27242:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   27246:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27248:	8853      	ldrh	r3, [r2, #2]
   2724a:	3004      	adds	r0, #4
   2724c:	f043 0301 	orr.w	r3, r3, #1
   27250:	8053      	strh	r3, [r2, #2]
	return mem;
   27252:	e7da      	b.n	2720a <sys_heap_alloc+0x8>

00027254 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   27254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27258:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   2725c:	ea19 0901 	ands.w	r9, r9, r1
{
   27260:	460f      	mov	r7, r1
   27262:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   27264:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   27266:	d00c      	beq.n	27282 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   27268:	424b      	negs	r3, r1
   2726a:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   2726c:	2b04      	cmp	r3, #4
   2726e:	461a      	mov	r2, r3
   27270:	464f      	mov	r7, r9
   27272:	bf28      	it	cs
   27274:	2204      	movcs	r2, #4
	rew = align & -align;
   27276:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   27278:	b964      	cbnz	r4, 27294 <sys_heap_aligned_alloc+0x40>
		return NULL;
   2727a:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2727c:	4628      	mov	r0, r5
   2727e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   27282:	2904      	cmp	r1, #4
   27284:	d804      	bhi.n	27290 <sys_heap_aligned_alloc+0x3c>
}
   27286:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   2728a:	4611      	mov	r1, r2
   2728c:	f7ff bfb9 	b.w	27202 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   27290:	2204      	movs	r2, #4
   27292:	e7f1      	b.n	27278 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   27294:	68b3      	ldr	r3, [r6, #8]
   27296:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   2729a:	d9ee      	bls.n	2727a <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2729c:	f104 010b 	add.w	r1, r4, #11
   272a0:	4439      	add	r1, r7
   272a2:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   272a4:	4630      	mov	r0, r6
   272a6:	08c9      	lsrs	r1, r1, #3
   272a8:	f7ff ff04 	bl	270b4 <alloc_chunk>
	if (c0 == 0) {
   272ac:	4680      	mov	r8, r0
   272ae:	2800      	cmp	r0, #0
   272b0:	d0e3      	beq.n	2727a <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   272b2:	f109 0504 	add.w	r5, r9, #4
   272b6:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   272ba:	1e7b      	subs	r3, r7, #1
   272bc:	4435      	add	r5, r6
   272be:	441d      	add	r5, r3
   272c0:	427f      	negs	r7, r7
   272c2:	403d      	ands	r5, r7
   272c4:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   272c8:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   272ca:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   272cc:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   272ce:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   272d0:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   272d4:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   272d6:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   272da:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   272de:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   272e2:	d208      	bcs.n	272f6 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   272e4:	4601      	mov	r1, r0
   272e6:	463a      	mov	r2, r7
   272e8:	4630      	mov	r0, r6
   272ea:	f7ff ff30 	bl	2714e <split_chunks>
		free_list_add(h, c0);
   272ee:	4641      	mov	r1, r8
   272f0:	4630      	mov	r0, r6
   272f2:	f7ff fe8e 	bl	27012 <free_list_add>
	return c + chunk_size(h, c);
   272f6:	4639      	mov	r1, r7
   272f8:	4630      	mov	r0, r6
   272fa:	f7ff fe85 	bl	27008 <chunk_size>
   272fe:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   27300:	4284      	cmp	r4, r0
   27302:	d207      	bcs.n	27314 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   27304:	4630      	mov	r0, r6
   27306:	4622      	mov	r2, r4
   27308:	f7ff ff21 	bl	2714e <split_chunks>
		free_list_add(h, c_end);
   2730c:	4621      	mov	r1, r4
   2730e:	4630      	mov	r0, r6
   27310:	f7ff fe7f 	bl	27012 <free_list_add>
	void *cmem = &buf[c];
   27314:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27318:	8873      	ldrh	r3, [r6, #2]
   2731a:	f043 0301 	orr.w	r3, r3, #1
   2731e:	8073      	strh	r3, [r6, #2]
   27320:	e7ac      	b.n	2727c <sys_heap_aligned_alloc+0x28>

00027322 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   27322:	3a04      	subs	r2, #4
{
   27324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   27328:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2732a:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2732c:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   27330:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   27334:	1b0e      	subs	r6, r1, r4
   27336:	08f7      	lsrs	r7, r6, #3
	return 31 - __builtin_clz(usable_sz);
   27338:	fab7 f287 	clz	r2, r7
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   2733c:	f04f 0800 	mov.w	r8, #0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   27340:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
   27344:	00ad      	lsls	r5, r5, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   27346:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   27348:	f1c2 0220 	rsb	r2, r2, #32
   2734c:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   2734e:	6004      	str	r4, [r0, #0]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   27350:	4641      	mov	r1, r8
	h->end_chunk = heap_sz;
   27352:	60a7      	str	r7, [r4, #8]
	h->avail_buckets = 0;
   27354:	f8c4 800c 	str.w	r8, [r4, #12]
		h->buckets[i].next = 0;
   27358:	0092      	lsls	r2, r2, #2
   2735a:	f104 0010 	add.w	r0, r4, #16
   2735e:	f003 ff51 	bl	2b204 <memset>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27362:	006b      	lsls	r3, r5, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27364:	f043 0301 	orr.w	r3, r3, #1
   27368:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2736a:	1b7b      	subs	r3, r7, r5
		((uint16_t *)cmem)[f] = val;
   2736c:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27370:	0059      	lsls	r1, r3, #1
		((uint16_t *)cmem)[f] = val;
   27372:	f8a4 8000 	strh.w	r8, [r4]
   27376:	8051      	strh	r1, [r2, #2]
   27378:	19a2      	adds	r2, r4, r6
   2737a:	f824 5035 	strh.w	r5, [r4, r5, lsl #3]
   2737e:	f8a2 8002 	strh.w	r8, [r2, #2]
   27382:	53a3      	strh	r3, [r4, r6]
	void *cmem = &buf[c];
   27384:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27388:	885a      	ldrh	r2, [r3, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   2738a:	4629      	mov	r1, r5
   2738c:	f042 0201 	orr.w	r2, r2, #1
   27390:	805a      	strh	r2, [r3, #2]
   27392:	4620      	mov	r0, r4
}
   27394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
   27398:	f7ff be3b 	b.w	27012 <free_list_add>

0002739c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2739c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2739e:	f013 0307 	ands.w	r3, r3, #7
   273a2:	d105      	bne.n	273b0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   273a4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   273a6:	2b00      	cmp	r3, #0
   273a8:	bf0c      	ite	eq
   273aa:	2000      	moveq	r0, #0
   273ac:	2003      	movne	r0, #3
   273ae:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   273b0:	2b02      	cmp	r3, #2
   273b2:	d105      	bne.n	273c0 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   273b4:	8b40      	ldrh	r0, [r0, #26]
   273b6:	fab0 f080 	clz	r0, r0
   273ba:	0940      	lsrs	r0, r0, #5
   273bc:	0080      	lsls	r0, r0, #2
   273be:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   273c0:	2b01      	cmp	r3, #1
   273c2:	d105      	bne.n	273d0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   273c4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   273c6:	2b00      	cmp	r3, #0
   273c8:	bf0c      	ite	eq
   273ca:	2000      	moveq	r0, #0
   273cc:	2005      	movne	r0, #5
   273ce:	4770      	bx	lr
	int evt = EVT_NOP;
   273d0:	2000      	movs	r0, #0
}
   273d2:	4770      	bx	lr

000273d4 <validate_args>:
{
   273d4:	b510      	push	{r4, lr}
   273d6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   273d8:	b100      	cbz	r0, 273dc <validate_args+0x8>
   273da:	b911      	cbnz	r1, 273e2 <validate_args+0xe>
		return -EINVAL;
   273dc:	f06f 0015 	mvn.w	r0, #21
}
   273e0:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   273e2:	1d08      	adds	r0, r1, #4
   273e4:	f000 f895 	bl	27512 <sys_notify_validate>
	if ((rv == 0)
   273e8:	2800      	cmp	r0, #0
   273ea:	d1f9      	bne.n	273e0 <validate_args+0xc>
	    && ((cli->notify.flags
   273ec:	68a3      	ldr	r3, [r4, #8]
   273ee:	2b03      	cmp	r3, #3
   273f0:	d9f6      	bls.n	273e0 <validate_args+0xc>
   273f2:	e7f3      	b.n	273dc <validate_args+0x8>

000273f4 <notify_one>:
{
   273f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   273f8:	460d      	mov	r5, r1
   273fa:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   273fc:	4619      	mov	r1, r3
   273fe:	1d28      	adds	r0, r5, #4
{
   27400:	4690      	mov	r8, r2
   27402:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   27404:	f000 f899 	bl	2753a <sys_notify_finalize>
	if (cb) {
   27408:	4604      	mov	r4, r0
   2740a:	b138      	cbz	r0, 2741c <notify_one+0x28>
		cb(mgr, cli, state, res);
   2740c:	4633      	mov	r3, r6
   2740e:	4642      	mov	r2, r8
   27410:	4629      	mov	r1, r5
   27412:	4638      	mov	r0, r7
   27414:	46a4      	mov	ip, r4
}
   27416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2741a:	4760      	bx	ip
}
   2741c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027420 <transition_complete>:
{
   27420:	b410      	push	{r4}
	__asm__ volatile(
   27422:	f04f 0420 	mov.w	r4, #32
   27426:	f3ef 8211 	mrs	r2, BASEPRI
   2742a:	f384 8812 	msr	BASEPRI_MAX, r4
   2742e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   27432:	6141      	str	r1, [r0, #20]
}
   27434:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   27436:	2101      	movs	r1, #1
   27438:	f7f2 bb68 	b.w	19b0c <process_event>

0002743c <onoff_manager_init>:
{
   2743c:	b538      	push	{r3, r4, r5, lr}
   2743e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   27440:	4605      	mov	r5, r0
   27442:	b158      	cbz	r0, 2745c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   27444:	b151      	cbz	r1, 2745c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   27446:	680b      	ldr	r3, [r1, #0]
   27448:	b143      	cbz	r3, 2745c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2744a:	684b      	ldr	r3, [r1, #4]
   2744c:	b133      	cbz	r3, 2745c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2744e:	221c      	movs	r2, #28
   27450:	2100      	movs	r1, #0
   27452:	f003 fed7 	bl	2b204 <memset>
	return 0;
   27456:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   27458:	612c      	str	r4, [r5, #16]
}
   2745a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2745c:	f06f 0015 	mvn.w	r0, #21
   27460:	e7fb      	b.n	2745a <onoff_manager_init+0x1e>

00027462 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   27462:	b570      	push	{r4, r5, r6, lr}
   27464:	4605      	mov	r5, r0
   27466:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   27468:	f7ff ffb4 	bl	273d4 <validate_args>

	if (rv < 0) {
   2746c:	1e04      	subs	r4, r0, #0
   2746e:	db15      	blt.n	2749c <onoff_request+0x3a>
   27470:	f04f 0320 	mov.w	r3, #32
   27474:	f3ef 8211 	mrs	r2, BASEPRI
   27478:	f383 8812 	msr	BASEPRI_MAX, r3
   2747c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   27480:	f64f 71ff 	movw	r1, #65535	; 0xffff
   27484:	8b6b      	ldrh	r3, [r5, #26]
   27486:	8b2c      	ldrh	r4, [r5, #24]
   27488:	428b      	cmp	r3, r1
   2748a:	f004 0407 	and.w	r4, r4, #7
   2748e:	d107      	bne.n	274a0 <onoff_request+0x3e>
	__asm__ volatile(
   27490:	f382 8811 	msr	BASEPRI, r2
   27494:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   27498:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   2749c:	4620      	mov	r0, r4
   2749e:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   274a0:	2c02      	cmp	r4, #2
   274a2:	d10c      	bne.n	274be <onoff_request+0x5c>
		mgr->refs += 1U;
   274a4:	3301      	adds	r3, #1
   274a6:	836b      	strh	r3, [r5, #26]
   274a8:	f382 8811 	msr	BASEPRI, r2
   274ac:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   274b0:	2300      	movs	r3, #0
   274b2:	4622      	mov	r2, r4
   274b4:	4631      	mov	r1, r6
   274b6:	4628      	mov	r0, r5
   274b8:	f7ff ff9c 	bl	273f4 <notify_one>
   274bc:	e7ee      	b.n	2749c <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   274be:	2c06      	cmp	r4, #6
   274c0:	d814      	bhi.n	274ec <onoff_request+0x8a>
   274c2:	e8df f004 	tbb	[pc, r4]
   274c6:	1304      	.short	0x1304
   274c8:	1a041313 	.word	0x1a041313
   274cc:	04          	.byte	0x04
   274cd:	00          	.byte	0x00
	parent->next = child;
   274ce:	2300      	movs	r3, #0
   274d0:	6033      	str	r3, [r6, #0]
	return list->tail;
   274d2:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   274d4:	b93b      	cbnz	r3, 274e6 <onoff_request+0x84>
	list->head = node;
   274d6:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   274da:	b9ac      	cbnz	r4, 27508 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   274dc:	2102      	movs	r1, #2
   274de:	4628      	mov	r0, r5
   274e0:	f7f2 fb14 	bl	19b0c <process_event>
   274e4:	e7da      	b.n	2749c <onoff_request+0x3a>
	parent->next = child;
   274e6:	601e      	str	r6, [r3, #0]
	list->tail = node;
   274e8:	606e      	str	r6, [r5, #4]
}
   274ea:	e7f6      	b.n	274da <onoff_request+0x78>
   274ec:	f382 8811 	msr	BASEPRI, r2
   274f0:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   274f4:	f06f 0404 	mvn.w	r4, #4
   274f8:	e7d0      	b.n	2749c <onoff_request+0x3a>
   274fa:	f382 8811 	msr	BASEPRI, r2
   274fe:	f3bf 8f6f 	isb	sy
   27502:	f06f 0485 	mvn.w	r4, #133	; 0x85
   27506:	e7c9      	b.n	2749c <onoff_request+0x3a>
   27508:	f382 8811 	msr	BASEPRI, r2
   2750c:	f3bf 8f6f 	isb	sy
		if (notify) {
   27510:	e7c4      	b.n	2749c <onoff_request+0x3a>

00027512 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   27512:	4603      	mov	r3, r0
   27514:	b140      	cbz	r0, 27528 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   27516:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   27518:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2751c:	2a02      	cmp	r2, #2
   2751e:	d006      	beq.n	2752e <sys_notify_validate+0x1c>
   27520:	2a03      	cmp	r2, #3
   27522:	d004      	beq.n	2752e <sys_notify_validate+0x1c>
   27524:	2a01      	cmp	r2, #1
   27526:	d005      	beq.n	27534 <sys_notify_validate+0x22>
   27528:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   2752c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2752e:	681a      	ldr	r2, [r3, #0]
   27530:	2a00      	cmp	r2, #0
   27532:	d0f9      	beq.n	27528 <sys_notify_validate+0x16>
		notify->result = 0;
   27534:	2000      	movs	r0, #0
   27536:	6098      	str	r0, [r3, #8]
   27538:	4770      	bx	lr

0002753a <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   2753a:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2753c:	6842      	ldr	r2, [r0, #4]
   2753e:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   27540:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   27544:	2a02      	cmp	r2, #2
   27546:	f04f 0400 	mov.w	r4, #0
	notify->result = res;
   2754a:	6081      	str	r1, [r0, #8]
	switch (method) {
   2754c:	d007      	beq.n	2755e <sys_notify_finalize+0x24>
   2754e:	2a03      	cmp	r2, #3
   27550:	d002      	beq.n	27558 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   27552:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   27554:	2000      	movs	r0, #0
   27556:	e001      	b.n	2755c <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   27558:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2755a:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2755c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   2755e:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   27560:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   27562:	2800      	cmp	r0, #0
   27564:	d0f6      	beq.n	27554 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   27566:	f7fe f8b3 	bl	256d0 <z_impl_k_poll_signal_raise>
   2756a:	e7f3      	b.n	27554 <sys_notify_finalize+0x1a>

0002756c <outs>:
{
   2756c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27570:	4607      	mov	r7, r0
   27572:	4688      	mov	r8, r1
   27574:	4615      	mov	r5, r2
   27576:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   27578:	4614      	mov	r4, r2
   2757a:	42b4      	cmp	r4, r6
   2757c:	d305      	bcc.n	2758a <outs+0x1e>
   2757e:	b10e      	cbz	r6, 27584 <outs+0x18>
	return (int)count;
   27580:	1b60      	subs	r0, r4, r5
   27582:	e008      	b.n	27596 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   27584:	7823      	ldrb	r3, [r4, #0]
   27586:	2b00      	cmp	r3, #0
   27588:	d0fa      	beq.n	27580 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   2758a:	4641      	mov	r1, r8
   2758c:	f814 0b01 	ldrb.w	r0, [r4], #1
   27590:	47b8      	blx	r7
		if (rc < 0) {
   27592:	2800      	cmp	r0, #0
   27594:	daf1      	bge.n	2757a <outs+0xe>
}
   27596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002759a <next>:
	if (lex->pos >= lex->end) {
   2759a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   2759e:	429a      	cmp	r2, r3
	return *lex->pos++;
   275a0:	bf35      	itete	cc
   275a2:	1c53      	addcc	r3, r2, #1
		lex->pos = lex->end + 1;
   275a4:	3301      	addcs	r3, #1
	return *lex->pos++;
   275a6:	6083      	strcc	r3, [r0, #8]
		lex->pos = lex->end + 1;
   275a8:	6083      	strcs	r3, [r0, #8]
		return '\0';
   275aa:	bf2c      	ite	cs
   275ac:	2000      	movcs	r0, #0
	return *lex->pos++;
   275ae:	7810      	ldrbcc	r0, [r2, #0]
}
   275b0:	4770      	bx	lr

000275b2 <accept_run>:
{
   275b2:	b510      	push	{r4, lr}
   275b4:	4604      	mov	r4, r0
   275b6:	3901      	subs	r1, #1
	for (; *run; run++) {
   275b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   275bc:	b900      	cbnz	r0, 275c0 <accept_run+0xe>
}
   275be:	bd10      	pop	{r4, pc}
		if (next(lex) != *run) {
   275c0:	4620      	mov	r0, r4
   275c2:	f7ff ffea 	bl	2759a <next>
   275c6:	780b      	ldrb	r3, [r1, #0]
   275c8:	4298      	cmp	r0, r3
   275ca:	d0f5      	beq.n	275b8 <accept_run+0x6>
			return -EINVAL;
   275cc:	f06f 0015 	mvn.w	r0, #21
   275d0:	e7f5      	b.n	275be <accept_run+0xc>

000275d2 <get_elem_size>:
{
   275d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   275d6:	4604      	mov	r4, r0
   275d8:	2601      	movs	r6, #1
	switch (descr->type) {
   275da:	7963      	ldrb	r3, [r4, #5]
   275dc:	085b      	lsrs	r3, r3, #1
   275de:	2b5b      	cmp	r3, #91	; 0x5b
   275e0:	d037      	beq.n	27652 <get_elem_size+0x80>
   275e2:	d815      	bhi.n	27610 <get_elem_size+0x3e>
   275e4:	2b30      	cmp	r3, #48	; 0x30
   275e6:	d038      	beq.n	2765a <get_elem_size+0x88>
   275e8:	d806      	bhi.n	275f8 <get_elem_size+0x26>
		return -EINVAL;
   275ea:	2b22      	cmp	r3, #34	; 0x22
   275ec:	bf08      	it	eq
   275ee:	2504      	moveq	r5, #4
   275f0:	bf18      	it	ne
   275f2:	f06f 0515 	mvnne.w	r5, #21
   275f6:	e007      	b.n	27608 <get_elem_size+0x36>
	switch (descr->type) {
   275f8:	334f      	adds	r3, #79	; 0x4f
   275fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   275fe:	2b02      	cmp	r3, #2
   27600:	bf8c      	ite	hi
   27602:	f06f 0515 	mvnhi.w	r5, #21
   27606:	2508      	movls	r5, #8
}
   27608:	fb05 f006 	mul.w	r0, r5, r6
   2760c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (descr->type) {
   27610:	2b74      	cmp	r3, #116	; 0x74
   27612:	d024      	beq.n	2765e <get_elem_size+0x8c>
   27614:	2b7b      	cmp	r3, #123	; 0x7b
   27616:	d003      	beq.n	27620 <get_elem_size+0x4e>
		return -EINVAL;
   27618:	2b66      	cmp	r3, #102	; 0x66
   2761a:	bf08      	it	eq
   2761c:	2501      	moveq	r5, #1
   2761e:	e7e7      	b.n	275f0 <get_elem_size+0x1e>
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   27620:	2700      	movs	r7, #0
			total += ROUND_UP(s, 1 << descr->align_shift);
   27622:	f04f 0901 	mov.w	r9, #1
		ptrdiff_t total = 0;
   27626:	463d      	mov	r5, r7
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   27628:	f8d4 800c 	ldr.w	r8, [r4, #12]
   2762c:	45b8      	cmp	r8, r7
   2762e:	d0eb      	beq.n	27608 <get_elem_size+0x36>
			ptrdiff_t s = get_elem_size(&descr->object.sub_descr[i]);
   27630:	68a0      	ldr	r0, [r4, #8]
   27632:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   27636:	f7ff ffcc 	bl	275d2 <get_elem_size>
			total += ROUND_UP(s, 1 << descr->align_shift);
   2763a:	7923      	ldrb	r3, [r4, #4]
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   2763c:	3701      	adds	r7, #1
			total += ROUND_UP(s, 1 << descr->align_shift);
   2763e:	f003 0303 	and.w	r3, r3, #3
   27642:	fa09 f303 	lsl.w	r3, r9, r3
   27646:	1e5a      	subs	r2, r3, #1
   27648:	4402      	add	r2, r0
   2764a:	425b      	negs	r3, r3
   2764c:	401a      	ands	r2, r3
   2764e:	4415      	add	r5, r2
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   27650:	e7ec      	b.n	2762c <get_elem_size+0x5a>
		return descr->array.n_elements * get_elem_size(descr->array.element_descr);
   27652:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
   27656:	435e      	muls	r6, r3
   27658:	e7bf      	b.n	275da <get_elem_size+0x8>
		return sizeof(int32_t);
   2765a:	2504      	movs	r5, #4
   2765c:	e7d4      	b.n	27608 <get_elem_size+0x36>
		return sizeof(bool);
   2765e:	2501      	movs	r5, #1
   27660:	e7d2      	b.n	27608 <get_elem_size+0x36>

00027662 <lexer_next>:
{
   27662:	b538      	push	{r3, r4, r5, lr}
   27664:	4604      	mov	r4, r0
   27666:	460d      	mov	r5, r1
	while (lex->state) {
   27668:	6823      	ldr	r3, [r4, #0]
	if (lex->tok.type == empty_token) {
   2766a:	7c20      	ldrb	r0, [r4, #16]
	while (lex->state) {
   2766c:	b90b      	cbnz	r3, 27672 <lexer_next+0x10>
	if (lex->tok.type == empty_token) {
   2766e:	b938      	cbnz	r0, 27680 <lexer_next+0x1e>
   27670:	e00d      	b.n	2768e <lexer_next+0x2c>
   27672:	285f      	cmp	r0, #95	; 0x5f
   27674:	d103      	bne.n	2767e <lexer_next+0x1c>
		lex->state = lex->state(lex);
   27676:	4620      	mov	r0, r4
   27678:	4798      	blx	r3
   2767a:	6020      	str	r0, [r4, #0]
   2767c:	e7f4      	b.n	27668 <lexer_next+0x6>
   2767e:	235f      	movs	r3, #95	; 0x5f
	*tok = lex->tok;
   27680:	f104 0210 	add.w	r2, r4, #16
   27684:	ca07      	ldmia	r2, {r0, r1, r2}
   27686:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			return true;
   2768a:	2001      	movs	r0, #1
	lex->tok.type = empty_token;
   2768c:	7423      	strb	r3, [r4, #16]
}
   2768e:	bd38      	pop	{r3, r4, r5, pc}

00027690 <arr_parse>:
{
   27690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27694:	4606      	mov	r6, r0
   27696:	b087      	sub	sp, #28
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   27698:	4608      	mov	r0, r1
{
   2769a:	4617      	mov	r7, r2
   2769c:	461c      	mov	r4, r3
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   2769e:	f7ff ff98 	bl	275d2 <get_elem_size>
{
   276a2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   276a4:	4688      	mov	r8, r1
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   276a6:	4681      	mov	r9, r0
	void *last_elem = (char *)field + elem_size * max_elements;
   276a8:	fb07 4700 	mla	r7, r7, r0, r4
	if (val) {
   276ac:	b11d      	cbz	r5, 276b6 <arr_parse+0x26>
		elements = (size_t *)((char *)val + elem_descr->offset);
   276ae:	88cb      	ldrh	r3, [r1, #6]
   276b0:	441d      	add	r5, r3
		*elements = 0;
   276b2:	2300      	movs	r3, #0
   276b4:	602b      	str	r3, [r5, #0]
	if (!lexer_next(&json->lex, value)) {
   276b6:	4630      	mov	r0, r6
   276b8:	a903      	add	r1, sp, #12
   276ba:	f7ff ffd2 	bl	27662 <lexer_next>
   276be:	b1e0      	cbz	r0, 276fa <arr_parse+0x6a>
	if (value->type == JSON_TOK_ARRAY_END) {
   276c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   276c4:	2b5d      	cmp	r3, #93	; 0x5d
   276c6:	d009      	beq.n	276dc <arr_parse+0x4c>
	if (value->type == JSON_TOK_COMMA) {
   276c8:	2b2c      	cmp	r3, #44	; 0x2c
   276ca:	d01f      	beq.n	2770c <arr_parse+0x7c>
	return element_token(value->type);
   276cc:	f89d 200c 	ldrb.w	r2, [sp, #12]
   276d0:	4610      	mov	r0, r2
   276d2:	f7f3 f833 	bl	1a73c <element_token>
	while (!arr_next(obj, &value)) {
   276d6:	b980      	cbnz	r0, 276fa <arr_parse+0x6a>
		if (value.type == JSON_TOK_ARRAY_END) {
   276d8:	2a5d      	cmp	r2, #93	; 0x5d
   276da:	d103      	bne.n	276e4 <arr_parse+0x54>
			return 0;
   276dc:	2000      	movs	r0, #0
}
   276de:	b007      	add	sp, #28
   276e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (field == last_elem) {
   276e4:	42bc      	cmp	r4, r7
   276e6:	d018      	beq.n	2771a <arr_parse+0x8a>
		if (decode_value(obj, elem_descr, &value, field, NULL) < 0) {
   276e8:	9000      	str	r0, [sp, #0]
   276ea:	4623      	mov	r3, r4
   276ec:	4641      	mov	r1, r8
   276ee:	4630      	mov	r0, r6
   276f0:	aa03      	add	r2, sp, #12
   276f2:	f7f3 f85f 	bl	1a7b4 <decode_value>
   276f6:	2900      	cmp	r1, #0
   276f8:	da02      	bge.n	27700 <arr_parse+0x70>
			return -EINVAL;
   276fa:	f06f 0015 	mvn.w	r0, #21
   276fe:	e7ee      	b.n	276de <arr_parse+0x4e>
		if (elements) {
   27700:	b115      	cbz	r5, 27708 <arr_parse+0x78>
			(*elements)++;
   27702:	682b      	ldr	r3, [r5, #0]
   27704:	3301      	adds	r3, #1
   27706:	602b      	str	r3, [r5, #0]
		field = (char *)field + elem_size;
   27708:	444c      	add	r4, r9
   2770a:	e7d4      	b.n	276b6 <arr_parse+0x26>
		if (!lexer_next(&json->lex, value)) {
   2770c:	4630      	mov	r0, r6
   2770e:	a903      	add	r1, sp, #12
   27710:	f7ff ffa7 	bl	27662 <lexer_next>
   27714:	2800      	cmp	r0, #0
   27716:	d1d9      	bne.n	276cc <arr_parse+0x3c>
   27718:	e7ef      	b.n	276fa <arr_parse+0x6a>
			return -ENOSPC;
   2771a:	f06f 001b 	mvn.w	r0, #27
   2771e:	e7de      	b.n	276de <arr_parse+0x4e>

00027720 <obj_parse>:
{
   27720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t decoded_fields = 0;
   27724:	2400      	movs	r4, #0
{
   27726:	4607      	mov	r7, r0
	int64_t decoded_fields = 0;
   27728:	4626      	mov	r6, r4
{
   2772a:	b091      	sub	sp, #68	; 0x44
   2772c:	e9cd 1205 	strd	r1, r2, [sp, #20]
   27730:	9303      	str	r3, [sp, #12]
	if (!lexer_next(&json->lex, &tok)) {
   27732:	f10d 0820 	add.w	r8, sp, #32
	if (!lexer_next(&json->lex, &kv->value)) {
   27736:	f10d 0b34 	add.w	fp, sp, #52	; 0x34
	if (!lexer_next(&json->lex, &tok)) {
   2773a:	4641      	mov	r1, r8
   2773c:	4638      	mov	r0, r7
   2773e:	f7ff ff90 	bl	27662 <lexer_next>
   27742:	b1f8      	cbz	r0, 27784 <obj_parse+0x64>
	switch (tok.type) {
   27744:	f89d 3020 	ldrb.w	r3, [sp, #32]
   27748:	2b2c      	cmp	r3, #44	; 0x2c
   2774a:	d07c      	beq.n	27846 <obj_parse+0x126>
   2774c:	2b7d      	cmp	r3, #125	; 0x7d
   2774e:	d030      	beq.n	277b2 <obj_parse+0x92>
		if (tok.type != JSON_TOK_STRING) {
   27750:	2b22      	cmp	r3, #34	; 0x22
   27752:	d117      	bne.n	27784 <obj_parse+0x64>
		kv->key = tok.start;
   27754:	9a09      	ldr	r2, [sp, #36]	; 0x24
		kv->key_len = (size_t)(tok.end - tok.start);
   27756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	if (!lexer_next(&json->lex, &tok)) {
   27758:	4641      	mov	r1, r8
		kv->key_len = (size_t)(tok.end - tok.start);
   2775a:	1a9b      	subs	r3, r3, r2
	if (!lexer_next(&json->lex, &tok)) {
   2775c:	4638      	mov	r0, r7
		kv->key = tok.start;
   2775e:	920b      	str	r2, [sp, #44]	; 0x2c
		kv->key_len = (size_t)(tok.end - tok.start);
   27760:	930c      	str	r3, [sp, #48]	; 0x30
	if (!lexer_next(&json->lex, &tok)) {
   27762:	f7ff ff7e 	bl	27662 <lexer_next>
   27766:	b168      	cbz	r0, 27784 <obj_parse+0x64>
	if (tok.type != JSON_TOK_COLON) {
   27768:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2776c:	2b3a      	cmp	r3, #58	; 0x3a
   2776e:	d109      	bne.n	27784 <obj_parse+0x64>
	if (!lexer_next(&json->lex, &kv->value)) {
   27770:	4659      	mov	r1, fp
   27772:	4638      	mov	r0, r7
   27774:	f7ff ff75 	bl	27662 <lexer_next>
   27778:	b120      	cbz	r0, 27784 <obj_parse+0x64>
	return element_token(kv->value.type);
   2777a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
   2777e:	f7f2 ffdd 	bl	1a73c <element_token>
	while (!obj_next(obj, &kv)) {
   27782:	b1e8      	cbz	r0, 277c0 <obj_parse+0xa0>
	return -EINVAL;
   27784:	f06f 0415 	mvn.w	r4, #21
   27788:	f04f 36ff 	mov.w	r6, #4294967295
   2778c:	e056      	b.n	2783c <obj_parse+0x11c>
			decoded_fields |= (int64_t)1<<i;
   2778e:	2301      	movs	r3, #1
   27790:	f1c5 0220 	rsb	r2, r5, #32
   27794:	fa03 fa0a 	lsl.w	sl, r3, sl
   27798:	fa23 f202 	lsr.w	r2, r3, r2
   2779c:	ea4a 0a02 	orr.w	sl, sl, r2
   277a0:	40ab      	lsls	r3, r5
   277a2:	431c      	orrs	r4, r3
   277a4:	ea4a 0606 	orr.w	r6, sl, r6
			break;
   277a8:	e7c7      	b.n	2773a <obj_parse+0x1a>
		for (i = 0; i < descr_len; i++) {
   277aa:	3501      	adds	r5, #1
   277ac:	f109 0910 	add.w	r9, r9, #16
   277b0:	e010      	b.n	277d4 <obj_parse+0xb4>
		kv->key = NULL;
   277b2:	2300      	movs	r3, #0
		kv->value = tok;
   277b4:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
   277b8:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
		kv->key_len = 0;
   277bc:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
		if (kv.value.type == JSON_TOK_OBJECT_END) {
   277c0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   277c4:	2b7d      	cmp	r3, #125	; 0x7d
   277c6:	d039      	beq.n	2783c <obj_parse+0x11c>
			if (memcmp(kv.key, descr[i].field_name,
   277c8:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
		for (i = 0; i < descr_len; i++) {
   277cc:	2500      	movs	r5, #0
   277ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
			if (memcmp(kv.key, descr[i].field_name,
   277d2:	9304      	str	r3, [sp, #16]
		for (i = 0; i < descr_len; i++) {
   277d4:	9b06      	ldr	r3, [sp, #24]
   277d6:	429d      	cmp	r5, r3
   277d8:	d0af      	beq.n	2773a <obj_parse+0x1a>
			if (decoded_fields & ((int64_t)1 << i)) {
   277da:	f1c5 0020 	rsb	r0, r5, #32
   277de:	f1b5 0120 	subs.w	r1, r5, #32
   277e2:	fa06 f000 	lsl.w	r0, r6, r0
   277e6:	fa24 f305 	lsr.w	r3, r4, r5
   277ea:	ea43 0300 	orr.w	r3, r3, r0
   277ee:	468a      	mov	sl, r1
   277f0:	bf5c      	itt	pl
   277f2:	fa46 f101 	asrpl.w	r1, r6, r1
   277f6:	430b      	orrpl	r3, r1
   277f8:	f1c5 0020 	rsb	r0, r5, #32
   277fc:	07db      	lsls	r3, r3, #31
   277fe:	9007      	str	r0, [sp, #28]
   27800:	d4d3      	bmi.n	277aa <obj_parse+0x8a>
			if (kv.key_len != descr[i].field_name_len) {
   27802:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   27806:	f3c3 0386 	ubfx	r3, r3, #2, #7
   2780a:	429a      	cmp	r2, r3
   2780c:	d1cd      	bne.n	277aa <obj_parse+0x8a>
			if (memcmp(kv.key, descr[i].field_name,
   2780e:	f8d9 1000 	ldr.w	r1, [r9]
   27812:	9804      	ldr	r0, [sp, #16]
   27814:	9207      	str	r2, [sp, #28]
   27816:	f003 fcd8 	bl	2b1ca <memcmp>
   2781a:	9a07      	ldr	r2, [sp, #28]
   2781c:	2800      	cmp	r0, #0
   2781e:	d1c4      	bne.n	277aa <obj_parse+0x8a>
			ret = decode_value(obj, &descr[i], &kv.value,
   27820:	9a03      	ldr	r2, [sp, #12]
			void *decode_field = (char *)val + descr[i].offset;
   27822:	f8b9 3006 	ldrh.w	r3, [r9, #6]
			ret = decode_value(obj, &descr[i], &kv.value,
   27826:	4649      	mov	r1, r9
   27828:	9200      	str	r2, [sp, #0]
   2782a:	4413      	add	r3, r2
   2782c:	4638      	mov	r0, r7
   2782e:	465a      	mov	r2, fp
   27830:	f7f2 ffc0 	bl	1a7b4 <decode_value>
			if (ret < 0) {
   27834:	2800      	cmp	r0, #0
   27836:	daaa      	bge.n	2778e <obj_parse+0x6e>
				return ret;
   27838:	4604      	mov	r4, r0
   2783a:	17c6      	asrs	r6, r0, #31
}
   2783c:	4620      	mov	r0, r4
   2783e:	4631      	mov	r1, r6
   27840:	b011      	add	sp, #68	; 0x44
   27842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!lexer_next(&json->lex, &tok)) {
   27846:	4641      	mov	r1, r8
   27848:	4638      	mov	r0, r7
   2784a:	f7ff ff0a 	bl	27662 <lexer_next>
   2784e:	2800      	cmp	r0, #0
   27850:	d098      	beq.n	27784 <obj_parse+0x64>
		if (tok.type != JSON_TOK_STRING) {
   27852:	f89d 3020 	ldrb.w	r3, [sp, #32]
   27856:	e77b      	b.n	27750 <obj_parse+0x30>

00027858 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_BOOTLOADER_MODE_SWAP_WITHOUT_SCRATCH, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   27858:	4770      	bx	lr

0002785a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2785a:	2806      	cmp	r0, #6
   2785c:	d108      	bne.n	27870 <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   2785e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   27862:	2201      	movs	r2, #1
   27864:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   27868:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   2786c:	bf20      	wfe
    while (true)
   2786e:	e7fd      	b.n	2786c <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   27870:	4770      	bx	lr

00027872 <pm_state_exit_post_ops>:
   27872:	2300      	movs	r3, #0
   27874:	f383 8811 	msr	BASEPRI, r3
   27878:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2787c:	4770      	bx	lr

0002787e <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   2787e:	f7f3 bae5 	b.w	1ae4c <socket_offload_getaddrinfo>

00027882 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   27882:	f7f3 baed 	b.w	1ae60 <socket_offload_freeaddrinfo>

00027886 <z_fdtable_call_ioctl>:
{
   27886:	b40c      	push	{r2, r3}
   27888:	4603      	mov	r3, r0
   2788a:	b507      	push	{r0, r1, r2, lr}
   2788c:	aa04      	add	r2, sp, #16
   2788e:	4608      	mov	r0, r1
   27890:	f852 1b04 	ldr.w	r1, [r2], #4
	res = vtable->ioctl(obj, request, args);
   27894:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   27896:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   27898:	4798      	blx	r3
}
   2789a:	b003      	add	sp, #12
   2789c:	f85d eb04 	ldr.w	lr, [sp], #4
   278a0:	b002      	add	sp, #8
   278a2:	4770      	bx	lr

000278a4 <timeout_recalc>:
{
   278a4:	b570      	push	{r4, r5, r6, lr}
   278a6:	4614      	mov	r4, r2
	if (!K_TIMEOUT_EQ(*timeout, K_NO_WAIT) &&
   278a8:	e9d2 3200 	ldrd	r3, r2, [r2]
   278ac:	3301      	adds	r3, #1
   278ae:	f142 0200 	adc.w	r2, r2, #0
   278b2:	2b02      	cmp	r3, #2
   278b4:	f172 0200 	sbcs.w	r2, r2, #0
{
   278b8:	4605      	mov	r5, r0
   278ba:	460e      	mov	r6, r1
	if (!K_TIMEOUT_EQ(*timeout, K_NO_WAIT) &&
   278bc:	d30c      	bcc.n	278d8 <timeout_recalc+0x34>
		int64_t remaining = end - sys_clock_tick_get();
   278be:	f7fd fe91 	bl	255e4 <sys_clock_tick_get>
   278c2:	1a2d      	subs	r5, r5, r0
   278c4:	eb66 0101 	sbc.w	r1, r6, r1
		if (remaining <= 0) {
   278c8:	2d01      	cmp	r5, #1
   278ca:	f171 0300 	sbcs.w	r3, r1, #0
   278ce:	da04      	bge.n	278da <timeout_recalc+0x36>
			*timeout = K_NO_WAIT;
   278d0:	2200      	movs	r2, #0
   278d2:	2300      	movs	r3, #0
   278d4:	e9c4 2300 	strd	r2, r3, [r4]
}
   278d8:	bd70      	pop	{r4, r5, r6, pc}
			*timeout = Z_TIMEOUT_TICKS(remaining);
   278da:	e9c4 5100 	strd	r5, r1, [r4]
}
   278de:	e7fb      	b.n	278d8 <timeout_recalc+0x34>

000278e0 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   278e0:	f7fc bf5e 	b.w	247a0 <z_impl_k_mutex_lock>

000278e4 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   278e4:	f7fc bfd6 	b.w	24894 <z_impl_k_mutex_unlock>

000278e8 <z_impl_zsock_close>:
{
   278e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   278ea:	4669      	mov	r1, sp
   278ec:	aa01      	add	r2, sp, #4
{
   278ee:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   278f0:	f7f2 f856 	bl	199a0 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   278f4:	4604      	mov	r4, r0
   278f6:	b940      	cbnz	r0, 2790a <z_impl_zsock_close+0x22>
		errno = EBADF;
   278f8:	f000 f9a2 	bl	27c40 <__errno>
   278fc:	2309      	movs	r3, #9
		return -1;
   278fe:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   27902:	6003      	str	r3, [r0, #0]
}
   27904:	4620      	mov	r0, r4
   27906:	b003      	add	sp, #12
   27908:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
   2790a:	f04f 32ff 	mov.w	r2, #4294967295
   2790e:	9801      	ldr	r0, [sp, #4]
   27910:	f04f 33ff 	mov.w	r3, #4294967295
   27914:	f7ff ffe4 	bl	278e0 <k_mutex_lock.constprop.0.isra.0>
	ret = vtable->fd_vtable.close(ctx);
   27918:	9b00      	ldr	r3, [sp, #0]
   2791a:	4620      	mov	r0, r4
   2791c:	689b      	ldr	r3, [r3, #8]
   2791e:	4798      	blx	r3
   27920:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   27922:	9801      	ldr	r0, [sp, #4]
   27924:	f7ff ffde 	bl	278e4 <k_mutex_unlock.isra.0>
	z_free_fd(sock);
   27928:	4628      	mov	r0, r5
   2792a:	f7f2 f8a1 	bl	19a70 <z_free_fd>
	return ret;
   2792e:	e7e9      	b.n	27904 <z_impl_zsock_close+0x1c>

00027930 <z_impl_zsock_connect>:
{
   27930:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27932:	460d      	mov	r5, r1
   27934:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   27936:	4669      	mov	r1, sp
   27938:	aa01      	add	r2, sp, #4
   2793a:	f7f2 f831 	bl	199a0 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   2793e:	4604      	mov	r4, r0
   27940:	b940      	cbnz	r0, 27954 <z_impl_zsock_connect+0x24>
   27942:	f000 f97d 	bl	27c40 <__errno>
   27946:	2309      	movs	r3, #9
   27948:	f04f 34ff 	mov.w	r4, #4294967295
   2794c:	6003      	str	r3, [r0, #0]
}
   2794e:	4620      	mov	r0, r4
   27950:	b002      	add	sp, #8
   27952:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   27954:	9b00      	ldr	r3, [sp, #0]
   27956:	699b      	ldr	r3, [r3, #24]
   27958:	b91b      	cbnz	r3, 27962 <z_impl_zsock_connect+0x32>
   2795a:	f000 f971 	bl	27c40 <__errno>
   2795e:	235f      	movs	r3, #95	; 0x5f
   27960:	e7f2      	b.n	27948 <z_impl_zsock_connect+0x18>
   27962:	9801      	ldr	r0, [sp, #4]
   27964:	f04f 32ff 	mov.w	r2, #4294967295
   27968:	f04f 33ff 	mov.w	r3, #4294967295
   2796c:	f7ff ffb8 	bl	278e0 <k_mutex_lock.constprop.0.isra.0>
   27970:	9b00      	ldr	r3, [sp, #0]
   27972:	4632      	mov	r2, r6
   27974:	4629      	mov	r1, r5
   27976:	4620      	mov	r0, r4
   27978:	699b      	ldr	r3, [r3, #24]
   2797a:	4798      	blx	r3
   2797c:	4604      	mov	r4, r0
   2797e:	9801      	ldr	r0, [sp, #4]
   27980:	f7ff ffb0 	bl	278e4 <k_mutex_unlock.isra.0>
   27984:	e7e3      	b.n	2794e <z_impl_zsock_connect+0x1e>

00027986 <z_impl_zsock_sendto>:
{
   27986:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2798a:	460d      	mov	r5, r1
   2798c:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2798e:	a902      	add	r1, sp, #8
   27990:	aa03      	add	r2, sp, #12
{
   27992:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   27994:	f7f2 f804 	bl	199a0 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   27998:	4604      	mov	r4, r0
   2799a:	b948      	cbnz	r0, 279b0 <z_impl_zsock_sendto+0x2a>
   2799c:	f000 f950 	bl	27c40 <__errno>
   279a0:	2309      	movs	r3, #9
   279a2:	f04f 34ff 	mov.w	r4, #4294967295
   279a6:	6003      	str	r3, [r0, #0]
}
   279a8:	4620      	mov	r0, r4
   279aa:	b004      	add	sp, #16
   279ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   279b0:	9b02      	ldr	r3, [sp, #8]
   279b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   279b4:	b91b      	cbnz	r3, 279be <z_impl_zsock_sendto+0x38>
   279b6:	f000 f943 	bl	27c40 <__errno>
   279ba:	235f      	movs	r3, #95	; 0x5f
   279bc:	e7f1      	b.n	279a2 <z_impl_zsock_sendto+0x1c>
   279be:	9803      	ldr	r0, [sp, #12]
   279c0:	f04f 32ff 	mov.w	r2, #4294967295
   279c4:	f04f 33ff 	mov.w	r3, #4294967295
   279c8:	f7ff ff8a 	bl	278e0 <k_mutex_lock.constprop.0.isra.0>
   279cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   279ce:	4632      	mov	r2, r6
   279d0:	9301      	str	r3, [sp, #4]
   279d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   279d4:	4629      	mov	r1, r5
   279d6:	9300      	str	r3, [sp, #0]
   279d8:	9b02      	ldr	r3, [sp, #8]
   279da:	4620      	mov	r0, r4
   279dc:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   279e0:	463b      	mov	r3, r7
   279e2:	47c0      	blx	r8
   279e4:	4604      	mov	r4, r0
   279e6:	9803      	ldr	r0, [sp, #12]
   279e8:	f7ff ff7c 	bl	278e4 <k_mutex_unlock.isra.0>
   279ec:	e7dc      	b.n	279a8 <z_impl_zsock_sendto+0x22>

000279ee <z_impl_zsock_recvfrom>:
{
   279ee:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   279f2:	460d      	mov	r5, r1
   279f4:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   279f6:	a902      	add	r1, sp, #8
   279f8:	aa03      	add	r2, sp, #12
{
   279fa:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   279fc:	f7f1 ffd0 	bl	199a0 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   27a00:	4604      	mov	r4, r0
   27a02:	b948      	cbnz	r0, 27a18 <z_impl_zsock_recvfrom+0x2a>
   27a04:	f000 f91c 	bl	27c40 <__errno>
   27a08:	2309      	movs	r3, #9
   27a0a:	f04f 34ff 	mov.w	r4, #4294967295
   27a0e:	6003      	str	r3, [r0, #0]
}
   27a10:	4620      	mov	r0, r4
   27a12:	b004      	add	sp, #16
   27a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   27a18:	9b02      	ldr	r3, [sp, #8]
   27a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27a1c:	b91b      	cbnz	r3, 27a26 <z_impl_zsock_recvfrom+0x38>
   27a1e:	f000 f90f 	bl	27c40 <__errno>
   27a22:	235f      	movs	r3, #95	; 0x5f
   27a24:	e7f1      	b.n	27a0a <z_impl_zsock_recvfrom+0x1c>
   27a26:	9803      	ldr	r0, [sp, #12]
   27a28:	f04f 32ff 	mov.w	r2, #4294967295
   27a2c:	f04f 33ff 	mov.w	r3, #4294967295
   27a30:	f7ff ff56 	bl	278e0 <k_mutex_lock.constprop.0.isra.0>
   27a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27a36:	4632      	mov	r2, r6
   27a38:	9301      	str	r3, [sp, #4]
   27a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27a3c:	4629      	mov	r1, r5
   27a3e:	9300      	str	r3, [sp, #0]
   27a40:	9b02      	ldr	r3, [sp, #8]
   27a42:	4620      	mov	r0, r4
   27a44:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
   27a48:	463b      	mov	r3, r7
   27a4a:	47c0      	blx	r8
   27a4c:	4604      	mov	r4, r0
   27a4e:	9803      	ldr	r0, [sp, #12]
   27a50:	f7ff ff48 	bl	278e4 <k_mutex_unlock.isra.0>
   27a54:	e7dc      	b.n	27a10 <z_impl_zsock_recvfrom+0x22>

00027a56 <z_impl_zsock_poll>:

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   27a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_timeout_t timeout;

	if (poll_timeout < 0) {
   27a5a:	1e14      	subs	r4, r2, #0
{
   27a5c:	4605      	mov	r5, r0
   27a5e:	460e      	mov	r6, r1
	if (poll_timeout < 0) {
   27a60:	db13      	blt.n	27a8a <z_impl_zsock_poll+0x34>
   27a62:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   27a66:	f240 30e7 	movw	r0, #999	; 0x3e7
   27a6a:	2100      	movs	r1, #0
   27a6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27a70:	2300      	movs	r3, #0
   27a72:	fbc4 0107 	smlal	r0, r1, r4, r7
   27a76:	f7f1 f997 	bl	18da8 <__aeabi_uldivmod>
   27a7a:	4602      	mov	r2, r0
   27a7c:	460b      	mov	r3, r1
		timeout = K_FOREVER;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	return zsock_poll_internal(fds, nfds, timeout);
   27a7e:	4631      	mov	r1, r6
   27a80:	4628      	mov	r0, r5
}
   27a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return zsock_poll_internal(fds, nfds, timeout);
   27a86:	f7f3 b8e3 	b.w	1ac50 <zsock_poll_internal>
		timeout = K_FOREVER;
   27a8a:	f04f 32ff 	mov.w	r2, #4294967295
   27a8e:	4613      	mov	r3, r2
   27a90:	e7f5      	b.n	27a7e <z_impl_zsock_poll+0x28>

00027a92 <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   27a92:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   27a96:	460d      	mov	r5, r1
   27a98:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   27a9a:	a902      	add	r1, sp, #8
   27a9c:	aa03      	add	r2, sp, #12
{
   27a9e:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   27aa0:	f7f1 ff7e 	bl	199a0 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   27aa4:	4604      	mov	r4, r0
   27aa6:	b948      	cbnz	r0, 27abc <z_impl_zsock_setsockopt+0x2a>
   27aa8:	f000 f8ca 	bl	27c40 <__errno>
   27aac:	2309      	movs	r3, #9
   27aae:	f04f 34ff 	mov.w	r4, #4294967295
   27ab2:	6003      	str	r3, [r0, #0]
}
   27ab4:	4620      	mov	r0, r4
   27ab6:	b004      	add	sp, #16
   27ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   27abc:	9b02      	ldr	r3, [sp, #8]
   27abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   27ac0:	b91b      	cbnz	r3, 27aca <z_impl_zsock_setsockopt+0x38>
   27ac2:	f000 f8bd 	bl	27c40 <__errno>
   27ac6:	235f      	movs	r3, #95	; 0x5f
   27ac8:	e7f1      	b.n	27aae <z_impl_zsock_setsockopt+0x1c>
   27aca:	9803      	ldr	r0, [sp, #12]
   27acc:	f04f 32ff 	mov.w	r2, #4294967295
   27ad0:	f04f 33ff 	mov.w	r3, #4294967295
   27ad4:	f7ff ff04 	bl	278e0 <k_mutex_lock.constprop.0.isra.0>
   27ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27ada:	4632      	mov	r2, r6
   27adc:	9300      	str	r3, [sp, #0]
   27ade:	9b02      	ldr	r3, [sp, #8]
   27ae0:	4629      	mov	r1, r5
   27ae2:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   27ae6:	4620      	mov	r0, r4
   27ae8:	463b      	mov	r3, r7
   27aea:	47c0      	blx	r8
   27aec:	4604      	mov	r4, r0
   27aee:	9803      	ldr	r0, [sp, #12]
   27af0:	f7ff fef8 	bl	278e4 <k_mutex_unlock.isra.0>
   27af4:	e7de      	b.n	27ab4 <z_impl_zsock_setsockopt+0x22>

00027af6 <adp536x_charger_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_CURRENT_SET,
   27af6:	f000 021f 	and.w	r2, r0, #31
   27afa:	211f      	movs	r1, #31
   27afc:	2004      	movs	r0, #4
   27afe:	f7f3 b9d3 	b.w	1aea8 <adp536x_reg_write_mask>

00027b02 <adp536x_vbus_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_VBUS_ILIM,
   27b02:	f000 0207 	and.w	r2, r0, #7
   27b06:	2107      	movs	r1, #7
   27b08:	2002      	movs	r0, #2
   27b0a:	f7f3 b9cd 	b.w	1aea8 <adp536x_reg_write_mask>

00027b0e <adp536x_charging_enable>:
{
   27b0e:	4602      	mov	r2, r0
	return adp536x_reg_write_mask(ADP536X_CHG_FUNC,
   27b10:	2101      	movs	r1, #1
   27b12:	2007      	movs	r0, #7
   27b14:	f7f3 b9c8 	b.w	1aea8 <adp536x_reg_write_mask>

00027b18 <adp536x_oc_chg_current_set>:
					ADP536X_BAT_OC_CHG_OC_CHG(value));
   27b18:	0142      	lsls	r2, r0, #5
	return adp536x_reg_write_mask(ADP536X_BAT_OC_CHG,
   27b1a:	21e0      	movs	r1, #224	; 0xe0
   27b1c:	2015      	movs	r0, #21
   27b1e:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   27b22:	f7f3 b9c1 	b.w	1aea8 <adp536x_reg_write_mask>

00027b26 <adp536x_buck_1v8_set>:
	return adp536x_reg_write_mask(ADP536X_BUCK_OUTPUT,
   27b26:	2218      	movs	r2, #24
   27b28:	213f      	movs	r1, #63	; 0x3f
   27b2a:	202a      	movs	r0, #42	; 0x2a
   27b2c:	f7f3 b9bc 	b.w	1aea8 <adp536x_reg_write_mask>

00027b30 <adp536x_buck_discharge_set>:
				ADP536X_BUCK_CFG_DISCHG_BUCK(enable));
   27b30:	0042      	lsls	r2, r0, #1
	return adp536x_reg_write_mask(ADP536X_BUCK_CFG,
   27b32:	2102      	movs	r1, #2
   27b34:	2029      	movs	r0, #41	; 0x29
   27b36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   27b3a:	f7f3 b9b5 	b.w	1aea8 <adp536x_reg_write_mask>

00027b3e <adp536x_buckbst_3v3_set>:
	return adp536x_reg_write_mask(ADP536X_BUCKBST_OUTPUT,
   27b3e:	2213      	movs	r2, #19
   27b40:	213f      	movs	r1, #63	; 0x3f
   27b42:	202c      	movs	r0, #44	; 0x2c
   27b44:	f7f3 b9b0 	b.w	1aea8 <adp536x_reg_write_mask>

00027b48 <adp536x_buckbst_enable>:
{
   27b48:	4602      	mov	r2, r0
	return adp536x_reg_write_mask(ADP536X_BUCKBST_CFG,
   27b4a:	2101      	movs	r1, #1
   27b4c:	202b      	movs	r0, #43	; 0x2b
   27b4e:	f7f3 b9ab 	b.w	1aea8 <adp536x_reg_write_mask>

00027b52 <adp536x_fg_set_mode>:
int adp536x_fg_set_mode(enum adp536x_fg_enabled en, enum adp536x_fg_mode mode)
{
	return adp536x_reg_write_mask(
		ADP536X_FUEL_GAUGE_MODE,
		ADP536X_FUEL_GAUGE_MODE_FG_MODE_MSK | ADP536X_FUEL_GAUGE_EN_FG_MSK,
		ADP536X_FUEL_GAUGE_MODE_FG_MODE(mode) | ADP536X_FUEL_GAUGE_EN_FG(en));
   27b52:	0049      	lsls	r1, r1, #1
   27b54:	f001 0102 	and.w	r1, r1, #2
	return adp536x_reg_write_mask(
   27b58:	f000 0201 	and.w	r2, r0, #1
   27b5c:	430a      	orrs	r2, r1
   27b5e:	2027      	movs	r0, #39	; 0x27
   27b60:	2103      	movs	r1, #3
   27b62:	f7f3 b9a1 	b.w	1aea8 <adp536x_reg_write_mask>

00027b66 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   27b66:	f002 bed2 	b.w	2a90e <z_fatal_error>

00027b6a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   27b6a:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   27b6c:	6800      	ldr	r0, [r0, #0]
   27b6e:	f002 bece 	b.w	2a90e <z_fatal_error>

00027b72 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   27b72:	2100      	movs	r1, #0
   27b74:	2001      	movs	r0, #1
   27b76:	f7ff bff6 	b.w	27b66 <z_arm_fatal_error>

00027b7a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   27b7a:	b508      	push	{r3, lr}
	handler();
   27b7c:	f7f3 fa30 	bl	1afe0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   27b80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   27b84:	f7f3 bafa 	b.w	1b17c <z_arm_exc_exit>

00027b88 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   27b88:	6e83      	ldr	r3, [r0, #104]	; 0x68
   27b8a:	f383 880b 	msr	PSPLIM, r3
}
   27b8e:	4770      	bx	lr

00027b90 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   27b90:	4770      	bx	lr

00027b92 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   27b92:	4770      	bx	lr

00027b94 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   27b94:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   27b98:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   27b9c:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   27b9e:	bf08      	it	eq
   27ba0:	f06f 0015 	mvneq.w	r0, #21
   27ba4:	4770      	bx	lr

00027ba6 <mpu_configure_region>:
{
   27ba6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
   27ba8:	890a      	ldrh	r2, [r1, #8]
   27baa:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
   27bac:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   27bae:	684d      	ldr	r5, [r1, #4]
   27bb0:	f002 021f 	and.w	r2, r2, #31
   27bb4:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
   27bb8:	9300      	str	r3, [sp, #0]
   27bba:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   27bbe:	f023 031f 	bic.w	r3, r3, #31
   27bc2:	1e6a      	subs	r2, r5, #1
   27bc4:	4413      	add	r3, r2
   27bc6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   27bca:	280f      	cmp	r0, #15
   27bcc:	9303      	str	r3, [sp, #12]
   27bce:	d804      	bhi.n	27bda <mpu_configure_region+0x34>
	region_init(index, region_conf);
   27bd0:	4669      	mov	r1, sp
   27bd2:	f7f3 fce7 	bl	1b5a4 <region_init>
}
   27bd6:	b004      	add	sp, #16
   27bd8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   27bda:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
   27bde:	e7fa      	b.n	27bd6 <mpu_configure_region+0x30>

00027be0 <malloc_prepare>:
}
   27be0:	2000      	movs	r0, #0
   27be2:	4770      	bx	lr

00027be4 <_stdout_hook_default>:
}
   27be4:	f04f 30ff 	mov.w	r0, #4294967295
   27be8:	4770      	bx	lr

00027bea <_stdin_hook_default>:
}
   27bea:	2000      	movs	r0, #0
   27bec:	4770      	bx	lr

00027bee <_read>:
{
   27bee:	4608      	mov	r0, r1
   27bf0:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
   27bf2:	f7f3 be3f 	b.w	1b874 <z_impl_zephyr_read_stdin>

00027bf6 <_write>:
{
   27bf6:	4608      	mov	r0, r1
   27bf8:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   27bfa:	f7f3 be4f 	b.w	1b89c <z_impl_zephyr_write_stdout>

00027bfe <_close>:
int _close(int file)
   27bfe:	f04f 30ff 	mov.w	r0, #4294967295
   27c02:	4770      	bx	lr

00027c04 <_lseek>:
}
   27c04:	2000      	movs	r0, #0
   27c06:	4770      	bx	lr

00027c08 <_isatty>:
}
   27c08:	2802      	cmp	r0, #2
   27c0a:	bfcc      	ite	gt
   27c0c:	2000      	movgt	r0, #0
   27c0e:	2001      	movle	r0, #1
   27c10:	4770      	bx	lr

00027c12 <_fstat>:
	st->st_mode = S_IFCHR;
   27c12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   27c16:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   27c18:	604b      	str	r3, [r1, #4]
}
   27c1a:	4770      	bx	lr

00027c1c <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   27c1c:	b510      	push	{r4, lr}
   27c1e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   27c20:	2014      	movs	r0, #20
   27c22:	f7fd fdc3 	bl	257ac <malloc>
   27c26:	6020      	str	r0, [r4, #0]
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
   27c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   27c2c:	f002 bf24 	b.w	2aa78 <z_impl_k_mutex_init>

00027c30 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   27c30:	f04f 32ff 	mov.w	r2, #4294967295
   27c34:	f04f 33ff 	mov.w	r3, #4294967295
   27c38:	f7fc bdb2 	b.w	247a0 <z_impl_k_mutex_lock>

00027c3c <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   27c3c:	f7fc be2a 	b.w	24894 <z_impl_k_mutex_unlock>

00027c40 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   27c40:	f7fc bbd4 	b.w	243ec <z_impl_z_errno>

00027c44 <offloaded_netdev_if_enable>:
   27c44:	6803      	ldr	r3, [r0, #0]
#include <zephyr/net/net_if.h>
#include <zephyr/net/offloaded_netdev.h>

static inline int offloaded_netdev_if_enable(struct net_if *iface, bool state)
{
	const struct offloaded_if_api *off_if = net_if_get_device(iface)->api;
   27c46:	681b      	ldr	r3, [r3, #0]
   27c48:	689b      	ldr	r3, [r3, #8]

	if (!off_if || !(off_if->enable)) {
   27c4a:	b113      	cbz	r3, 27c52 <offloaded_netdev_if_enable+0xe>
   27c4c:	685b      	ldr	r3, [r3, #4]
   27c4e:	b103      	cbz	r3, 27c52 <offloaded_netdev_if_enable+0xe>
		return 0;
	}

	return off_if->enable(iface, state);
   27c50:	4718      	bx	r3
}
   27c52:	2000      	movs	r0, #0
   27c54:	4770      	bx	lr

00027c56 <net_init>:

	return status;
}

static int net_init(void)
{
   27c56:	b508      	push	{r3, lr}
	net_if_init();
   27c58:	f7f3 fe86 	bl	1b968 <net_if_init>
	net_if_post_init();
   27c5c:	f7f3 fea8 	bl	1b9b0 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   27c60:	2000      	movs	r0, #0
   27c62:	bd08      	pop	{r3, pc}

00027c64 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   27c64:	b110      	cbz	r0, 27c6c <net_if_l2+0x8>
   27c66:	6800      	ldr	r0, [r0, #0]
   27c68:	b100      	cbz	r0, 27c6c <net_if_l2+0x8>
	return iface->if_dev->l2;
   27c6a:	6840      	ldr	r0, [r0, #4]
}
   27c6c:	4770      	bx	lr

00027c6e <atomic_set_bit>:
   27c6e:	2301      	movs	r3, #1
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   27c70:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   27c72:	f001 011f 	and.w	r1, r1, #31
   27c76:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27c78:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   27c7c:	e8d0 2fef 	ldaex	r2, [r0]
   27c80:	431a      	orrs	r2, r3
   27c82:	e8c0 2fe1 	stlex	r1, r2, [r0]
   27c86:	2900      	cmp	r1, #0
   27c88:	d1f8      	bne.n	27c7c <atomic_set_bit+0xe>
}
   27c8a:	4770      	bx	lr

00027c8c <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   27c8c:	2301      	movs	r3, #1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27c8e:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   27c90:	f001 011f 	and.w	r1, r1, #31
   27c94:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27c96:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27c98:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   27c9c:	e8d0 2fef 	ldaex	r2, [r0]
   27ca0:	401a      	ands	r2, r3
   27ca2:	e8c0 2fe1 	stlex	r1, r2, [r0]
   27ca6:	2900      	cmp	r1, #0
   27ca8:	d1f8      	bne.n	27c9c <atomic_clear_bit+0x10>
}
   27caa:	4770      	bx	lr

00027cac <net_if_flag_is_set>:
	if (iface == NULL) {
   27cac:	b130      	cbz	r0, 27cbc <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27cae:	6803      	ldr	r3, [r0, #0]
   27cb0:	330c      	adds	r3, #12
   27cb2:	e8d3 0faf 	lda	r0, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   27cb6:	4108      	asrs	r0, r1
   27cb8:	f000 0001 	and.w	r0, r0, #1
}
   27cbc:	4770      	bx	lr

00027cbe <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   27cbe:	b510      	push	{r4, lr}
   27cc0:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   27cc2:	f7ff ffcf 	bl	27c64 <net_if_l2>
   27cc6:	b128      	cbz	r0, 27cd4 <l2_flags_get.isra.0+0x16>
   27cc8:	68c2      	ldr	r2, [r0, #12]
   27cca:	b11a      	cbz	r2, 27cd4 <l2_flags_get.isra.0+0x16>
}
   27ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   27cd0:	4618      	mov	r0, r3
   27cd2:	4710      	bx	r2
}
   27cd4:	bd10      	pop	{r4, pc}

00027cd6 <update_operational_state>:
{
   27cd6:	b510      	push	{r4, lr}
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   27cd8:	6803      	ldr	r3, [r0, #0]
 */
static inline bool net_if_is_admin_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_UP);
   27cda:	2100      	movs	r1, #0
{
   27cdc:	4604      	mov	r4, r0
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   27cde:	f893 2020 	ldrb.w	r2, [r3, #32]
   27ce2:	f7ff ffe3 	bl	27cac <net_if_flag_is_set>
	if (!net_if_is_admin_up(iface)) {
   27ce6:	b978      	cbnz	r0, 27d08 <update_operational_state+0x32>
		iface->if_dev->oper_state = oper_state;
   27ce8:	2102      	movs	r1, #2
   27cea:	6823      	ldr	r3, [r4, #0]
   27cec:	f883 1020 	strb.w	r1, [r3, #32]
	return iface->if_dev->oper_state;
   27cf0:	6820      	ldr	r0, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   27cf2:	f890 3020 	ldrb.w	r3, [r0, #32]
   27cf6:	428b      	cmp	r3, r1
   27cf8:	d12b      	bne.n	27d52 <update_operational_state+0x7c>
		if (prev_state == NET_IF_OPER_UP) {
   27cfa:	2a06      	cmp	r2, #6
   27cfc:	d129      	bne.n	27d52 <update_operational_state+0x7c>
	atomic_clear_bit(iface->if_dev->flags, value);
   27cfe:	2108      	movs	r1, #8
   27d00:	300c      	adds	r0, #12
   27d02:	f7ff ffc3 	bl	27c8c <atomic_clear_bit>
	return (iface->if_dev->socket_offload != NULL);
   27d06:	e01c      	b.n	27d42 <update_operational_state+0x6c>
 */
static inline bool net_if_is_carrier_ok(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_LOWER_UP);
   27d08:	2109      	movs	r1, #9
   27d0a:	4620      	mov	r0, r4
   27d0c:	f7ff ffce 	bl	27cac <net_if_flag_is_set>
	if (!net_if_is_carrier_ok(iface)) {
   27d10:	2800      	cmp	r0, #0
   27d12:	d0e9      	beq.n	27ce8 <update_operational_state+0x12>
 */
static inline bool net_if_is_dormant(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_DORMANT);
   27d14:	210a      	movs	r1, #10
   27d16:	4620      	mov	r0, r4
   27d18:	f7ff ffc8 	bl	27cac <net_if_flag_is_set>
		iface->if_dev->oper_state = oper_state;
   27d1c:	6821      	ldr	r1, [r4, #0]
   27d1e:	f1c0 0306 	rsb	r3, r0, #6
   27d22:	b2db      	uxtb	r3, r3
   27d24:	f881 3020 	strb.w	r3, [r1, #32]
	return iface->if_dev->oper_state;
   27d28:	6820      	ldr	r0, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   27d2a:	f890 1020 	ldrb.w	r1, [r0, #32]
   27d2e:	4299      	cmp	r1, r3
   27d30:	d10f      	bne.n	27d52 <update_operational_state+0x7c>
	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
   27d32:	2906      	cmp	r1, #6
   27d34:	d1e1      	bne.n	27cfa <update_operational_state+0x24>
		if (prev_state != NET_IF_OPER_UP) {
   27d36:	2a06      	cmp	r2, #6
   27d38:	d00b      	beq.n	27d52 <update_operational_state+0x7c>
	atomic_set_bit(iface->if_dev->flags, value);
   27d3a:	2108      	movs	r1, #8
   27d3c:	300c      	adds	r0, #12
   27d3e:	f7ff ff96 	bl	27c6e <atomic_set_bit>
	return (iface->if_dev->socket_offload != NULL);
   27d42:	6823      	ldr	r3, [r4, #0]
	if (!is_iface_offloaded(iface) &&
   27d44:	69db      	ldr	r3, [r3, #28]
   27d46:	b923      	cbnz	r3, 27d52 <update_operational_state+0x7c>
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   27d48:	4620      	mov	r0, r4
}
   27d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   27d4e:	f7ff bfb6 	b.w	27cbe <l2_flags_get.isra.0>
}
   27d52:	bd10      	pop	{r4, pc}

00027d54 <net_if_flag_test_and_set.isra.0>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   27d54:	2301      	movs	r3, #1
static inline bool net_if_flag_test_and_set(struct net_if *iface,
   27d56:	b510      	push	{r4, lr}
   27d58:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27d5c:	300c      	adds	r0, #12
   27d5e:	e8d0 3fef 	ldaex	r3, [r0]
   27d62:	ea43 0201 	orr.w	r2, r3, r1
   27d66:	e8c0 2fe4 	stlex	r4, r2, [r0]
   27d6a:	2c00      	cmp	r4, #0
   27d6c:	d1f7      	bne.n	27d5e <net_if_flag_test_and_set.isra.0+0xa>
	return (old & mask) != 0;
   27d6e:	4219      	tst	r1, r3
}
   27d70:	bf14      	ite	ne
   27d72:	2001      	movne	r0, #1
   27d74:	2000      	moveq	r0, #0
   27d76:	bd10      	pop	{r4, pc}

00027d78 <net_if_up>:
{
   27d78:	b538      	push	{r3, r4, r5, lr}
   27d7a:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
   27d7c:	f04f 31ff 	mov.w	r1, #4294967295
   27d80:	f04f 30ff 	mov.w	r0, #4294967295
   27d84:	f7f3 fde2 	bl	1b94c <k_mutex_lock.constprop.0.isra.0>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   27d88:	2100      	movs	r1, #0
   27d8a:	4628      	mov	r0, r5
   27d8c:	f7ff ff8e 	bl	27cac <net_if_flag_is_set>
   27d90:	b9b8      	cbnz	r0, 27dc2 <net_if_up+0x4a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   27d92:	4628      	mov	r0, r5
   27d94:	f7ff ff66 	bl	27c64 <net_if_l2>
   27d98:	4604      	mov	r4, r0
   27d9a:	b130      	cbz	r0, 27daa <net_if_up+0x32>
   27d9c:	6884      	ldr	r4, [r0, #8]
   27d9e:	b124      	cbz	r4, 27daa <net_if_up+0x32>
	status = net_if_l2(iface)->enable(iface, true);
   27da0:	2101      	movs	r1, #1
   27da2:	4628      	mov	r0, r5
   27da4:	47a0      	blx	r4
	if (status < 0) {
   27da6:	1e04      	subs	r4, r0, #0
   27da8:	db07      	blt.n	27dba <net_if_up+0x42>
	atomic_set_bit(iface->if_dev->flags, value);
   27daa:	6828      	ldr	r0, [r5, #0]
   27dac:	2100      	movs	r1, #0
   27dae:	300c      	adds	r0, #12
   27db0:	f7ff ff5d 	bl	27c6e <atomic_set_bit>
	update_operational_state(iface);
   27db4:	4628      	mov	r0, r5
   27db6:	f7ff ff8e 	bl	27cd6 <update_operational_state>
	k_mutex_unlock(&lock);
   27dba:	f7f3 fdcf 	bl	1b95c <k_mutex_unlock.constprop.0.isra.0>
}
   27dbe:	4620      	mov	r0, r4
   27dc0:	bd38      	pop	{r3, r4, r5, pc}
		status = -EALREADY;
   27dc2:	f06f 0477 	mvn.w	r4, #119	; 0x77
   27dc6:	e7f8      	b.n	27dba <net_if_up+0x42>

00027dc8 <cb_notify>:
{
   27dc8:	b570      	push	{r4, r5, r6, lr}
   27dca:	4604      	mov	r4, r0
   27dcc:	460d      	mov	r5, r1
   27dce:	461e      	mov	r6, r3
	if (cb == NULL) {
   27dd0:	b90a      	cbnz	r2, 27dd6 <cb_notify+0xe>
		return 0;
   27dd2:	2000      	movs	r0, #0
}
   27dd4:	bd70      	pop	{r4, r5, r6, pc}
	parser->state = *current_state;
   27dd6:	6803      	ldr	r3, [r0, #0]
   27dd8:	7809      	ldrb	r1, [r1, #0]
   27dda:	f361 2390 	bfi	r3, r1, #10, #7
   27dde:	6003      	str	r3, [r0, #0]
	if (UNLIKELY(cb(parser) != 0)) {
   27de0:	4790      	blx	r2
   27de2:	b118      	cbz	r0, 27dec <cb_notify+0x24>
		SET_ERRNO(cb_error);
   27de4:	7de3      	ldrb	r3, [r4, #23]
   27de6:	f366 0306 	bfi	r3, r6, #0, #7
   27dea:	75e3      	strb	r3, [r4, #23]
	*current_state = parser->state;
   27dec:	6823      	ldr	r3, [r4, #0]
   27dee:	f3c3 2386 	ubfx	r3, r3, #10, #7
   27df2:	702b      	strb	r3, [r5, #0]
	if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {
   27df4:	7de3      	ldrb	r3, [r4, #23]
   27df6:	065b      	lsls	r3, r3, #25
   27df8:	d0eb      	beq.n	27dd2 <cb_notify+0xa>
		*parsed = already_parsed;
   27dfa:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   27dfe:	601a      	str	r2, [r3, #0]
		return -HTTP_PARSER_ERRNO(parser);
   27e00:	7de0      	ldrb	r0, [r4, #23]
   27e02:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   27e06:	4240      	negs	r0, r0
   27e08:	e7e4      	b.n	27dd4 <cb_notify+0xc>

00027e0a <cb_data>:
{
   27e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27e0e:	9f08      	ldr	r7, [sp, #32]
   27e10:	461d      	mov	r5, r3
	if (*mark == NULL) {
   27e12:	683b      	ldr	r3, [r7, #0]
{
   27e14:	4604      	mov	r4, r0
   27e16:	460e      	mov	r6, r1
   27e18:	4690      	mov	r8, r2
	if (*mark == NULL) {
   27e1a:	b1fb      	cbz	r3, 27e5c <cb_data+0x52>
	if (cb == NULL) {
   27e1c:	b1e1      	cbz	r1, 27e58 <cb_data+0x4e>
	parser->state = *current_state;
   27e1e:	782a      	ldrb	r2, [r5, #0]
   27e20:	6803      	ldr	r3, [r0, #0]
   27e22:	f362 2390 	bfi	r3, r2, #10, #7
   27e26:	6003      	str	r3, [r0, #0]
	rc = cb(parser, *mark, len);
   27e28:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27e2a:	6839      	ldr	r1, [r7, #0]
   27e2c:	47b0      	blx	r6
	if (UNLIKELY(rc != 0)) {
   27e2e:	b118      	cbz	r0, 27e38 <cb_data+0x2e>
		SET_ERRNO(cb_error);
   27e30:	7de3      	ldrb	r3, [r4, #23]
   27e32:	f368 0306 	bfi	r3, r8, #0, #7
   27e36:	75e3      	strb	r3, [r4, #23]
	*current_state = parser->state;
   27e38:	6823      	ldr	r3, [r4, #0]
   27e3a:	f3c3 2386 	ubfx	r3, r3, #10, #7
   27e3e:	702b      	strb	r3, [r5, #0]
	if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {
   27e40:	7de3      	ldrb	r3, [r4, #23]
   27e42:	065b      	lsls	r3, r3, #25
   27e44:	d008      	beq.n	27e58 <cb_data+0x4e>
		*parsed = already_parsed;
   27e46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   27e4a:	601a      	str	r2, [r3, #0]
		return -HTTP_PARSER_ERRNO(parser);
   27e4c:	7de0      	ldrb	r0, [r4, #23]
   27e4e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   27e52:	4240      	negs	r0, r0
}
   27e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*mark = NULL;
   27e58:	2300      	movs	r3, #0
   27e5a:	603b      	str	r3, [r7, #0]
		return 0;
   27e5c:	2000      	movs	r0, #0
   27e5e:	e7f9      	b.n	27e54 <cb_data+0x4a>

00027e60 <http_message_needs_eof>:
	if (parser->type == HTTP_REQUEST) {
   27e60:	7803      	ldrb	r3, [r0, #0]
{
   27e62:	4602      	mov	r2, r0
	if (parser->type == HTTP_REQUEST) {
   27e64:	f013 0003 	ands.w	r0, r3, #3
   27e68:	d017      	beq.n	27e9a <http_message_needs_eof+0x3a>
	if (parser->status_code / 100 == 1U || /* 1xx e.g. Continue */
   27e6a:	8a93      	ldrh	r3, [r2, #20]
   27e6c:	f1a3 0164 	sub.w	r1, r3, #100	; 0x64
   27e70:	2963      	cmp	r1, #99	; 0x63
   27e72:	d911      	bls.n	27e98 <http_message_needs_eof+0x38>
   27e74:	2bcc      	cmp	r3, #204	; 0xcc
   27e76:	d00f      	beq.n	27e98 <http_message_needs_eof+0x38>
			parser->status_code == 204U ||     /* No Content */
   27e78:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
   27e7c:	d00c      	beq.n	27e98 <http_message_needs_eof+0x38>
			parser->flags & F_SKIPBODY) {     /* response to a HEAD
   27e7e:	8813      	ldrh	r3, [r2, #0]
   27e80:	f3c3 0387 	ubfx	r3, r3, #2, #8
	if ((parser->flags & F_CHUNKED) ||
   27e84:	f003 0341 	and.w	r3, r3, #65	; 0x41
   27e88:	b933      	cbnz	r3, 27e98 <http_message_needs_eof+0x38>
   27e8a:	e9d2 3002 	ldrd	r3, r0, [r2, #8]
   27e8e:	4018      	ands	r0, r3
   27e90:	1c43      	adds	r3, r0, #1
   27e92:	4258      	negs	r0, r3
   27e94:	4158      	adcs	r0, r3
   27e96:	4770      	bx	lr
		return 0;
   27e98:	2000      	movs	r0, #0
}
   27e9a:	4770      	bx	lr

00027e9c <http_parser_init>:


void http_parser_init(struct http_parser *parser, enum http_parser_type t)
{
   27e9c:	b570      	push	{r4, r5, r6, lr}
__ssp_bos_icheck3(memset, void *, int)
   27e9e:	2220      	movs	r2, #32
   27ea0:	460d      	mov	r5, r1
   27ea2:	2100      	movs	r1, #0
   27ea4:	4604      	mov	r4, r0
	void *data = parser->data; /* preserve application data */
   27ea6:	6986      	ldr	r6, [r0, #24]
   27ea8:	f003 f9ac 	bl	2b204 <memset>

	(void)memset(parser, 0, sizeof(*parser));
	parser->data = data;
	parser->type = t;
   27eac:	f04f 0300 	mov.w	r3, #0
   27eb0:	f365 0301 	bfi	r3, r5, #0, #2
	parser->data = data;
   27eb4:	61a6      	str	r6, [r4, #24]
	parser->type = t;
   27eb6:	7023      	strb	r3, [r4, #0]
	parser->state =
		(t == HTTP_REQUEST ? s_start_req :
   27eb8:	b145      	cbz	r5, 27ecc <http_parser_init+0x30>
   27eba:	2d01      	cmp	r5, #1
   27ebc:	bf14      	ite	ne
   27ebe:	2202      	movne	r2, #2
   27ec0:	2204      	moveq	r2, #4
	parser->state =
   27ec2:	6823      	ldr	r3, [r4, #0]
   27ec4:	f362 2390 	bfi	r3, r2, #10, #7
   27ec8:	6023      	str	r3, [r4, #0]
		 (t == HTTP_RESPONSE ? s_start_res : s_start_req_or_res));
	parser->http_errno = HPE_OK;
}
   27eca:	bd70      	pop	{r4, r5, r6, pc}
		(t == HTTP_REQUEST ? s_start_req :
   27ecc:	2212      	movs	r2, #18
   27ece:	e7f8      	b.n	27ec2 <http_parser_init+0x26>

00027ed0 <on_url>:
{
   27ed0:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   27ed2:	6c83      	ldr	r3, [r0, #72]	; 0x48
   27ed4:	b113      	cbz	r3, 27edc <on_url+0xc>
	    req->internal.response.http_cb->on_url) {
   27ed6:	685b      	ldr	r3, [r3, #4]
	if (req->internal.response.http_cb &&
   27ed8:	b103      	cbz	r3, 27edc <on_url+0xc>
		req->internal.response.http_cb->on_url(parser, at, length);
   27eda:	4798      	blx	r3
}
   27edc:	2000      	movs	r0, #0
   27ede:	bd08      	pop	{r3, pc}

00027ee0 <on_body>:
{
   27ee0:	b538      	push	{r3, r4, r5, lr}
	req->internal.response.body_found = 1;
   27ee2:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
{
   27ee6:	4604      	mov	r4, r0
	req->internal.response.body_found = 1;
   27ee8:	f043 0302 	orr.w	r3, r3, #2
   27eec:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
	req->internal.response.processed += length;
   27ef0:	6e83      	ldr	r3, [r0, #104]	; 0x68
{
   27ef2:	460d      	mov	r5, r1
	req->internal.response.processed += length;
   27ef4:	4413      	add	r3, r2
   27ef6:	6683      	str	r3, [r0, #104]	; 0x68
	if (req->internal.response.http_cb &&
   27ef8:	6c83      	ldr	r3, [r0, #72]	; 0x48
   27efa:	b113      	cbz	r3, 27f02 <on_body+0x22>
	    req->internal.response.http_cb->on_body) {
   27efc:	699b      	ldr	r3, [r3, #24]
	if (req->internal.response.http_cb &&
   27efe:	b103      	cbz	r3, 27f02 <on_body+0x22>
		req->internal.response.http_cb->on_body(parser, at, length);
   27f00:	4798      	blx	r3
	if (!req->internal.response.body_frag_start) {
   27f02:	6d23      	ldr	r3, [r4, #80]	; 0x50
   27f04:	b903      	cbnz	r3, 27f08 <on_body+0x28>
		req->internal.response.body_frag_start = (uint8_t *)at;
   27f06:	6525      	str	r5, [r4, #80]	; 0x50
		(req->internal.response.body_frag_start - req->internal.response.recv_buf);
   27f08:	6d23      	ldr	r3, [r4, #80]	; 0x50
   27f0a:	6da2      	ldr	r2, [r4, #88]	; 0x58
}
   27f0c:	2000      	movs	r0, #0
		(req->internal.response.body_frag_start - req->internal.response.recv_buf);
   27f0e:	1a9a      	subs	r2, r3, r2
	req->internal.response.body_frag_len = req->internal.response.data_len -
   27f10:	6e23      	ldr	r3, [r4, #96]	; 0x60
   27f12:	1a9b      	subs	r3, r3, r2
   27f14:	6563      	str	r3, [r4, #84]	; 0x54
}
   27f16:	bd38      	pop	{r3, r4, r5, pc}

00027f18 <on_message_begin>:
{
   27f18:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   27f1a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   27f1c:	b113      	cbz	r3, 27f24 <on_message_begin+0xc>
	    req->internal.response.http_cb->on_message_begin) {
   27f1e:	681b      	ldr	r3, [r3, #0]
	if (req->internal.response.http_cb &&
   27f20:	b103      	cbz	r3, 27f24 <on_message_begin+0xc>
		req->internal.response.http_cb->on_message_begin(parser);
   27f22:	4798      	blx	r3
}
   27f24:	2000      	movs	r0, #0
   27f26:	bd08      	pop	{r3, pc}

00027f28 <on_message_complete>:
{
   27f28:	b510      	push	{r4, lr}
	if (req->internal.response.http_cb &&
   27f2a:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   27f2c:	4604      	mov	r4, r0
	if (req->internal.response.http_cb &&
   27f2e:	b113      	cbz	r3, 27f36 <on_message_complete+0xe>
	    req->internal.response.http_cb->on_message_complete) {
   27f30:	69db      	ldr	r3, [r3, #28]
	if (req->internal.response.http_cb &&
   27f32:	b103      	cbz	r3, 27f36 <on_message_complete+0xe>
		req->internal.response.http_cb->on_message_complete(parser);
   27f34:	4798      	blx	r3
	req->internal.response.message_complete = 1;
   27f36:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
}
   27f3a:	2000      	movs	r0, #0
	req->internal.response.message_complete = 1;
   27f3c:	f043 0304 	orr.w	r3, r3, #4
   27f40:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
}
   27f44:	bd10      	pop	{r4, pc}

00027f46 <on_chunk_header>:
{
   27f46:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   27f48:	6c83      	ldr	r3, [r0, #72]	; 0x48
   27f4a:	b113      	cbz	r3, 27f52 <on_chunk_header+0xc>
	    req->internal.response.http_cb->on_chunk_header) {
   27f4c:	6a1b      	ldr	r3, [r3, #32]
	if (req->internal.response.http_cb &&
   27f4e:	b103      	cbz	r3, 27f52 <on_chunk_header+0xc>
		req->internal.response.http_cb->on_chunk_header(parser);
   27f50:	4798      	blx	r3
}
   27f52:	2000      	movs	r0, #0
   27f54:	bd08      	pop	{r3, pc}

00027f56 <on_chunk_complete>:
{
   27f56:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   27f58:	6c83      	ldr	r3, [r0, #72]	; 0x48
   27f5a:	b113      	cbz	r3, 27f62 <on_chunk_complete+0xc>
	    req->internal.response.http_cb->on_chunk_complete) {
   27f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	if (req->internal.response.http_cb &&
   27f5e:	b103      	cbz	r3, 27f62 <on_chunk_complete+0xc>
		req->internal.response.http_cb->on_chunk_complete(parser);
   27f60:	4798      	blx	r3
}
   27f62:	2000      	movs	r0, #0
   27f64:	bd08      	pop	{r3, pc}

00027f66 <on_headers_complete>:
{
   27f66:	b510      	push	{r4, lr}
	if (req->internal.response.http_cb &&
   27f68:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   27f6a:	4604      	mov	r4, r0
	if (req->internal.response.http_cb &&
   27f6c:	b113      	cbz	r3, 27f74 <on_headers_complete+0xe>
	    req->internal.response.http_cb->on_headers_complete) {
   27f6e:	695b      	ldr	r3, [r3, #20]
	if (req->internal.response.http_cb &&
   27f70:	b103      	cbz	r3, 27f74 <on_headers_complete+0xe>
		req->internal.response.http_cb->on_headers_complete(parser);
   27f72:	4798      	blx	r3
	if (parser->status_code >= 500 && parser->status_code < 600) {
   27f74:	8aa3      	ldrh	r3, [r4, #20]
   27f76:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
   27f7a:	b29b      	uxth	r3, r3
   27f7c:	2b63      	cmp	r3, #99	; 0x63
   27f7e:	d90a      	bls.n	27f96 <on_headers_complete+0x30>
	if ((req->method == HTTP_HEAD || req->method == HTTP_OPTIONS) &&
   27f80:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
   27f84:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   27f88:	2b02      	cmp	r3, #2
   27f8a:	d106      	bne.n	27f9a <on_headers_complete+0x34>
   27f8c:	6e60      	ldr	r0, [r4, #100]	; 0x64
   27f8e:	3800      	subs	r0, #0
   27f90:	bf18      	it	ne
   27f92:	2001      	movne	r0, #1
}
   27f94:	bd10      	pop	{r4, pc}
		return 1;
   27f96:	2001      	movs	r0, #1
   27f98:	e7fc      	b.n	27f94 <on_headers_complete+0x2e>
	return 0;
   27f9a:	2000      	movs	r0, #0
   27f9c:	e7fa      	b.n	27f94 <on_headers_complete+0x2e>

00027f9e <on_status>:
	len = MIN(length, sizeof(req->internal.response.http_status) - 1);
   27f9e:	2a1f      	cmp	r2, #31
{
   27fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	len = MIN(length, sizeof(req->internal.response.http_status) - 1);
   27fa2:	4616      	mov	r6, r2
   27fa4:	bf28      	it	cs
   27fa6:	261f      	movcs	r6, #31
{
   27fa8:	4604      	mov	r4, r0
   27faa:	4615      	mov	r5, r2
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27fac:	306c      	adds	r0, #108	; 0x6c
   27fae:	4632      	mov	r2, r6
   27fb0:	460f      	mov	r7, r1
   27fb2:	f003 f91a 	bl	2b1ea <memcpy>
	req->internal.response.http_status[len] = 0;
   27fb6:	2300      	movs	r3, #0
   27fb8:	4426      	add	r6, r4
   27fba:	f886 306c 	strb.w	r3, [r6, #108]	; 0x6c
	req->internal.response.http_status_code =
   27fbe:	8aa3      	ldrh	r3, [r4, #20]
   27fc0:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
	if (req->internal.response.http_cb &&
   27fc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   27fc6:	b12b      	cbz	r3, 27fd4 <on_status+0x36>
	    req->internal.response.http_cb->on_status) {
   27fc8:	689b      	ldr	r3, [r3, #8]
	if (req->internal.response.http_cb &&
   27fca:	b11b      	cbz	r3, 27fd4 <on_status+0x36>
		req->internal.response.http_cb->on_status(parser, at, length);
   27fcc:	462a      	mov	r2, r5
   27fce:	4639      	mov	r1, r7
   27fd0:	4620      	mov	r0, r4
   27fd2:	4798      	blx	r3
}
   27fd4:	2000      	movs	r0, #0
   27fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027fd8 <on_header_value>:
{
   27fd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (req->internal.response.cl_present) {
   27fda:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
{
   27fde:	4604      	mov	r4, r0
	if (req->internal.response.cl_present) {
   27fe0:	07db      	lsls	r3, r3, #31
{
   27fe2:	460e      	mov	r6, r1
   27fe4:	4615      	mov	r5, r2
	if (req->internal.response.cl_present) {
   27fe6:	d51a      	bpl.n	2801e <on_header_value+0x46>
		if (length <= MAX_NUM_DIGITS - 1) {
   27fe8:	2a0f      	cmp	r2, #15
   27fea:	d812      	bhi.n	28012 <on_header_value+0x3a>
			memcpy(str, at, length);
   27fec:	4668      	mov	r0, sp
   27fee:	f003 f8fc 	bl	2b1ea <memcpy>
			str[length] = 0;
   27ff2:	2100      	movs	r1, #0
   27ff4:	f105 0310 	add.w	r3, r5, #16
   27ff8:	446b      	add	r3, sp
			num = strtol(str, NULL, 10);
   27ffa:	220a      	movs	r2, #10
   27ffc:	4668      	mov	r0, sp
			str[length] = 0;
   27ffe:	f803 1c10 	strb.w	r1, [r3, #-16]
			num = strtol(str, NULL, 10);
   28002:	f7fd fda5 	bl	25b50 <strtol>
			if (num == LONG_MIN || num == LONG_MAX) {
   28006:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   2800a:	3b01      	subs	r3, #1
   2800c:	3303      	adds	r3, #3
   2800e:	d812      	bhi.n	28036 <on_header_value+0x5e>
			req->internal.response.content_length = num;
   28010:	6660      	str	r0, [r4, #100]	; 0x64
		req->internal.response.cl_present = false;
   28012:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   28016:	f36f 0300 	bfc	r3, #0, #1
   2801a:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	if (req->internal.response.http_cb &&
   2801e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   28020:	b10b      	cbz	r3, 28026 <on_header_value+0x4e>
	    req->internal.response.http_cb->on_header_value) {
   28022:	691b      	ldr	r3, [r3, #16]
	if (req->internal.response.http_cb &&
   28024:	b913      	cbnz	r3, 2802c <on_header_value+0x54>
	return 0;
   28026:	2000      	movs	r0, #0
}
   28028:	b004      	add	sp, #16
   2802a:	bd70      	pop	{r4, r5, r6, pc}
		req->internal.response.http_cb->on_header_value(parser, at,
   2802c:	462a      	mov	r2, r5
   2802e:	4631      	mov	r1, r6
   28030:	4620      	mov	r0, r4
   28032:	4798      	blx	r3
   28034:	e7f7      	b.n	28026 <on_header_value+0x4e>
				return -EINVAL;
   28036:	f06f 0015 	mvn.w	r0, #21
   2803a:	e7f5      	b.n	28028 <on_header_value+0x50>

0002803c <sendall>:
{
   2803c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2803e:	4606      	mov	r6, r0
   28040:	460d      	mov	r5, r1
   28042:	4614      	mov	r4, r2
   28044:	2700      	movs	r7, #0
	while (len) {
   28046:	b90c      	cbnz	r4, 2804c <sendall+0x10>
	return 0;
   28048:	4620      	mov	r0, r4
   2804a:	e00d      	b.n	28068 <sendall+0x2c>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2804c:	2300      	movs	r3, #0
   2804e:	4622      	mov	r2, r4
   28050:	4629      	mov	r1, r5
   28052:	4630      	mov	r0, r6
   28054:	e9cd 7700 	strd	r7, r7, [sp]
   28058:	f7ff fc95 	bl	27986 <z_impl_zsock_sendto>
		if (out_len < 0) {
   2805c:	1e03      	subs	r3, r0, #0
   2805e:	da05      	bge.n	2806c <sendall+0x30>
			return -errno;
   28060:	f7ff fdee 	bl	27c40 <__errno>
   28064:	6800      	ldr	r0, [r0, #0]
   28066:	4240      	negs	r0, r0
}
   28068:	b003      	add	sp, #12
   2806a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = (const char *)buf + out_len;
   2806c:	441d      	add	r5, r3
		len -= out_len;
   2806e:	1ae4      	subs	r4, r4, r3
   28070:	e7e9      	b.n	28046 <sendall+0xa>

00028072 <http_send_data.constprop.0>:
static int http_send_data(int sock, char *send_buf,
   28072:	b408      	push	{r3}
   28074:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28078:	4680      	mov	r8, r0
   2807a:	460d      	mov	r5, r1
	int sent = 0;
   2807c:	2600      	movs	r6, #0
static int http_send_data(int sock, char *send_buf,
   2807e:	ab0d      	add	r3, sp, #52	; 0x34
   28080:	f853 ab04 	ldr.w	sl, [r3], #4
	data = va_arg(va, const char *);
   28084:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   28086:	3304      	adds	r3, #4
	int ret, end_of_send = *send_buf_pos;
   28088:	f8da 4000 	ldr.w	r4, [sl]
	data = va_arg(va, const char *);
   2808c:	9303      	str	r3, [sp, #12]
	while (data) {
   2808e:	b95f      	cbnz	r7, 280a8 <http_send_data.constprop.0+0x36>
	if (end_of_send > (int)send_buf_max_len) {
   28090:	2cc0      	cmp	r4, #192	; 0xc0
	return sent;
   28092:	bfd6      	itet	le
   28094:	4630      	movle	r0, r6
		return -EMSGSIZE;
   28096:	f06f 0079 	mvngt.w	r0, #121	; 0x79
	*send_buf_pos = end_of_send;
   2809a:	f8ca 4000 	strle.w	r4, [sl]
}
   2809e:	b004      	add	sp, #16
   280a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   280a4:	b001      	add	sp, #4
   280a6:	4770      	bx	lr
		end_of_data = 0;
   280a8:	f04f 0900 	mov.w	r9, #0
			remaining_len = strlen(data + end_of_data);
   280ac:	eb07 0109 	add.w	r1, r7, r9
   280b0:	4608      	mov	r0, r1
   280b2:	9101      	str	r1, [sp, #4]
   280b4:	f7f0 ffea 	bl	1908c <strlen>
   280b8:	4602      	mov	r2, r0
			to_be_copied = send_buf_max_len - end_of_send;
   280ba:	f1c4 0bc0 	rsb	fp, r4, #192	; 0xc0
			if (remaining_len > to_be_copied) {
   280be:	455a      	cmp	r2, fp
   280c0:	9901      	ldr	r1, [sp, #4]
				strncpy(send_buf + end_of_send,
   280c2:	eb05 0004 	add.w	r0, r5, r4
			if (remaining_len > to_be_copied) {
   280c6:	dd0d      	ble.n	280e4 <http_send_data.constprop.0+0x72>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   280c8:	465a      	mov	r2, fp
   280ca:	f003 f90f 	bl	2b2ec <strncpy>
				ret = sendall(sock, send_buf, end_of_send);
   280ce:	22c0      	movs	r2, #192	; 0xc0
   280d0:	4629      	mov	r1, r5
   280d2:	4640      	mov	r0, r8
   280d4:	f7ff ffb2 	bl	2803c <sendall>
				if (ret < 0) {
   280d8:	2800      	cmp	r0, #0
   280da:	dbe0      	blt.n	2809e <http_send_data.constprop.0+0x2c>
				end_of_send = 0;
   280dc:	2400      	movs	r4, #0
				end_of_data += to_be_copied;
   280de:	44d9      	add	r9, fp
				sent += end_of_send;
   280e0:	36c0      	adds	r6, #192	; 0xc0
		} while (remaining_len > 0);
   280e2:	e7e3      	b.n	280ac <http_send_data.constprop.0+0x3a>
   280e4:	9201      	str	r2, [sp, #4]
   280e6:	f003 f901 	bl	2b2ec <strncpy>
		data = va_arg(va, const char *);
   280ea:	9b03      	ldr	r3, [sp, #12]
				end_of_send += remaining_len;
   280ec:	9a01      	ldr	r2, [sp, #4]
		data = va_arg(va, const char *);
   280ee:	681f      	ldr	r7, [r3, #0]
				end_of_send += remaining_len;
   280f0:	4414      	add	r4, r2
		data = va_arg(va, const char *);
   280f2:	1d1a      	adds	r2, r3, #4
   280f4:	9203      	str	r2, [sp, #12]
   280f6:	e7ca      	b.n	2808e <http_send_data.constprop.0+0x1c>

000280f8 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   280f8:	220c      	movs	r2, #12
   280fa:	6903      	ldr	r3, [r0, #16]
   280fc:	b2c9      	uxtb	r1, r1
   280fe:	fb01 3302 	mla	r3, r1, r2, r3
   28102:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   28104:	f000 0007 	and.w	r0, r0, #7
   28108:	4770      	bx	lr

0002810a <set_on_state>:
	__asm__ volatile(
   2810a:	f04f 0320 	mov.w	r3, #32
   2810e:	f3ef 8211 	mrs	r2, BASEPRI
   28112:	f383 8812 	msr	BASEPRI_MAX, r3
   28116:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2811a:	6803      	ldr	r3, [r0, #0]
   2811c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   28120:	f043 0302 	orr.w	r3, r3, #2
   28124:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   28126:	f382 8811 	msr	BASEPRI, r2
   2812a:	f3bf 8f6f 	isb	sy
}
   2812e:	4770      	bx	lr

00028130 <stop>:
{
   28130:	b570      	push	{r4, r5, r6, lr}
   28132:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   28134:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   28136:	f04f 0420 	mov.w	r4, #32
   2813a:	f3ef 8511 	mrs	r5, BASEPRI
   2813e:	f384 8812 	msr	BASEPRI_MAX, r4
   28142:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   28146:	260c      	movs	r6, #12
   28148:	fb06 3401 	mla	r4, r6, r1, r3
   2814c:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2814e:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   28152:	d008      	beq.n	28166 <stop+0x36>
   28154:	42a2      	cmp	r2, r4
   28156:	d006      	beq.n	28166 <stop+0x36>
	__asm__ volatile(
   28158:	f385 8811 	msr	BASEPRI, r5
   2815c:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   28160:	f04f 30ff 	mov.w	r0, #4294967295
}
   28164:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   28166:	2201      	movs	r2, #1
   28168:	fb06 3301 	mla	r3, r6, r1, r3
   2816c:	641a      	str	r2, [r3, #64]	; 0x40
   2816e:	f385 8811 	msr	BASEPRI, r5
   28172:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   28176:	6843      	ldr	r3, [r0, #4]
   28178:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   2817c:	685b      	ldr	r3, [r3, #4]
   2817e:	4798      	blx	r3
	return 0;
   28180:	2000      	movs	r0, #0
   28182:	e7ef      	b.n	28164 <stop+0x34>

00028184 <api_stop>:
	return stop(dev, subsys, CTX_API);
   28184:	2280      	movs	r2, #128	; 0x80
   28186:	f7ff bfd3 	b.w	28130 <stop>

0002818a <async_start>:
{
   2818a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2818c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2818e:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   28190:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   28192:	f04f 0520 	mov.w	r5, #32
   28196:	f3ef 8611 	mrs	r6, BASEPRI
   2819a:	f385 8812 	msr	BASEPRI_MAX, r5
   2819e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   281a2:	250c      	movs	r5, #12
   281a4:	fb05 4401 	mla	r4, r5, r1, r4
   281a8:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   281aa:	f005 0c07 	and.w	ip, r5, #7
   281ae:	f1bc 0f01 	cmp.w	ip, #1
   281b2:	d10c      	bne.n	281ce <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   281b4:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   281b6:	f386 8811 	msr	BASEPRI, r6
   281ba:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   281be:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   281c2:	6843      	ldr	r3, [r0, #4]
   281c4:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   281c8:	4798      	blx	r3
	return 0;
   281ca:	2000      	movs	r0, #0
}
   281cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   281ce:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   281d2:	42af      	cmp	r7, r5
   281d4:	f386 8811 	msr	BASEPRI, r6
   281d8:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   281dc:	bf0c      	ite	eq
   281de:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   281e2:	f04f 30ff 	movne.w	r0, #4294967295
   281e6:	e7f1      	b.n	281cc <async_start+0x42>

000281e8 <api_start>:
{
   281e8:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   281ea:	2480      	movs	r4, #128	; 0x80
   281ec:	9400      	str	r4, [sp, #0]
   281ee:	f7ff ffcc 	bl	2818a <async_start>
}
   281f2:	b002      	add	sp, #8
   281f4:	bd10      	pop	{r4, pc}

000281f6 <onoff_started_callback>:
{
   281f6:	b410      	push	{r4}
	notify(mgr, 0);
   281f8:	241c      	movs	r4, #28
	return &data->mgr[type];
   281fa:	6900      	ldr	r0, [r0, #16]
   281fc:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   281fe:	fb03 0004 	mla	r0, r3, r4, r0
   28202:	2100      	movs	r1, #0
}
   28204:	bc10      	pop	{r4}
	notify(mgr, 0);
   28206:	4710      	bx	r2

00028208 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   28208:	2000      	movs	r0, #0
   2820a:	f7f9 b92d 	b.w	21468 <nrfx_clock_start>

0002820e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2820e:	2000      	movs	r0, #0
   28210:	f001 bc8c 	b.w	29b2c <nrfx_clock_stop>

00028214 <blocking_start_callback>:
{
   28214:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   28216:	f7fc bbad 	b.w	24974 <z_impl_k_sem_give>

0002821a <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   2821a:	4608      	mov	r0, r1
   2821c:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   2821e:	4611      	mov	r1, r2
   28220:	f7f9 f834 	bl	2128c <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   28224:	2800      	cmp	r0, #0
	}

	return 0;
}
   28226:	bf18      	it	ne
   28228:	f06f 0004 	mvnne.w	r0, #4
   2822c:	bd08      	pop	{r3, pc}

0002822e <entropy_psa_crypto_rng_init>:
{
   2822e:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   28230:	f001 fc76 	bl	29b20 <psa_crypto_init>
		return -EIO;
   28234:	2800      	cmp	r0, #0
}
   28236:	bf18      	it	ne
   28238:	f06f 0004 	mvnne.w	r0, #4
   2823c:	bd08      	pop	{r3, pc}

0002823e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2823e:	6843      	ldr	r3, [r0, #4]
}
   28240:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28242:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   28244:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   28246:	600b      	str	r3, [r1, #0]
}
   28248:	4770      	bx	lr

0002824a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2824a:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   2824c:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28250:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   28252:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   28256:	6098      	str	r0, [r3, #8]
}
   28258:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2825a:	60d9      	str	r1, [r3, #12]
   2825c:	4770      	bx	lr

0002825e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2825e:	6843      	ldr	r3, [r0, #4]
}
   28260:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28262:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   28264:	6099      	str	r1, [r3, #8]
}
   28266:	4770      	bx	lr

00028268 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28268:	6843      	ldr	r3, [r0, #4]
}
   2826a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2826c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2826e:	60d9      	str	r1, [r3, #12]
}
   28270:	4770      	bx	lr

00028272 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28272:	6843      	ldr	r3, [r0, #4]
   28274:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   28276:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   28278:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2827c:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2827e:	6090      	str	r0, [r2, #8]
}
   28280:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   28282:	60d3      	str	r3, [r2, #12]
   28284:	4770      	bx	lr

00028286 <gpio_nrfx_manage_callback>:
{
   28286:	b510      	push	{r4, lr}
	return port->data;
   28288:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2828a:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   2828c:	b1f8      	cbz	r0, 282ce <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2828e:	4288      	cmp	r0, r1
   28290:	d119      	bne.n	282c6 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   28292:	689c      	ldr	r4, [r3, #8]
	return node->next;
   28294:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   28296:	42a1      	cmp	r1, r4
	list->head = node;
   28298:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2829a:	d100      	bne.n	2829e <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2829c:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2829e:	2000      	movs	r0, #0
   282a0:	6008      	str	r0, [r1, #0]
	if (set) {
   282a2:	b12a      	cbz	r2, 282b0 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   282a4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   282a6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   282a8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   282aa:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   282ac:	b902      	cbnz	r2, 282b0 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   282ae:	6099      	str	r1, [r3, #8]
	return 0;
   282b0:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   282b2:	e010      	b.n	282d6 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   282b4:	4281      	cmp	r1, r0
   282b6:	d106      	bne.n	282c6 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   282b8:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   282ba:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   282bc:	6898      	ldr	r0, [r3, #8]
   282be:	4281      	cmp	r1, r0
   282c0:	d1ed      	bne.n	2829e <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   282c2:	609c      	str	r4, [r3, #8]
}
   282c4:	e7eb      	b.n	2829e <gpio_nrfx_manage_callback+0x18>
	return node->next;
   282c6:	4604      	mov	r4, r0
   282c8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   282ca:	2800      	cmp	r0, #0
   282cc:	d1f2      	bne.n	282b4 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   282ce:	2a00      	cmp	r2, #0
   282d0:	d1e8      	bne.n	282a4 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   282d2:	f06f 0015 	mvn.w	r0, #21
}
   282d6:	bd10      	pop	{r4, pc}

000282d8 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & i2c_config) {
   282d8:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   282da:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
   282dc:	d405      	bmi.n	282ea <i2c_nrfx_twim_configure+0x12>
	switch (I2C_SPEED_GET(i2c_config)) {
   282de:	f3c1 0142 	ubfx	r1, r1, #1, #3
   282e2:	2901      	cmp	r1, #1
   282e4:	d004      	beq.n	282f0 <i2c_nrfx_twim_configure+0x18>
   282e6:	2902      	cmp	r1, #2
   282e8:	d009      	beq.n	282fe <i2c_nrfx_twim_configure+0x26>
   282ea:	f06f 0015 	mvn.w	r0, #21
}
   282ee:	4770      	bx	lr
    p_reg->FREQUENCY = frequency;
   282f0:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   282f4:	681b      	ldr	r3, [r3, #0]
	return 0;
   282f6:	2000      	movs	r0, #0
   282f8:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   282fc:	4770      	bx	lr
   282fe:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   28302:	681b      	ldr	r3, [r3, #0]
   28304:	e7f7      	b.n	282f6 <i2c_nrfx_twim_configure+0x1e>

00028306 <irq_connect2>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
   28306:	2200      	movs	r2, #0
   28308:	2101      	movs	r1, #1
   2830a:	200a      	movs	r0, #10
   2830c:	f7f2 be52 	b.w	1afb4 <z_arm_irq_priority_set>

00028310 <pinctrl_apply_state.constprop.0>:
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   28310:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
   28312:	2100      	movs	r1, #0
   28314:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   28316:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   28318:	f000 f80a 	bl	28330 <pinctrl_lookup_state>
	if (ret < 0) {
   2831c:	2800      	cmp	r0, #0
   2831e:	db05      	blt.n	2832c <pinctrl_apply_state.constprop.0+0x1c>
	return pinctrl_apply_state_direct(config, state);
   28320:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   28322:	6822      	ldr	r2, [r4, #0]
   28324:	7919      	ldrb	r1, [r3, #4]
   28326:	6818      	ldr	r0, [r3, #0]
   28328:	f7f5 fc5c 	bl	1dbe4 <pinctrl_configure_pins>
}
   2832c:	b002      	add	sp, #8
   2832e:	bd10      	pop	{r4, pc}

00028330 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   28330:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   28332:	6843      	ldr	r3, [r0, #4]
   28334:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   28336:	7a05      	ldrb	r5, [r0, #8]
   28338:	6844      	ldr	r4, [r0, #4]
   2833a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2833e:	42a3      	cmp	r3, r4
   28340:	d302      	bcc.n	28348 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   28342:	f06f 0001 	mvn.w	r0, #1
}
   28346:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   28348:	795c      	ldrb	r4, [r3, #5]
   2834a:	428c      	cmp	r4, r1
   2834c:	d001      	beq.n	28352 <pinctrl_lookup_state+0x22>
		(*state)++;
   2834e:	3308      	adds	r3, #8
   28350:	e7f0      	b.n	28334 <pinctrl_lookup_state+0x4>
			return 0;
   28352:	2000      	movs	r0, #0
   28354:	e7f7      	b.n	28346 <pinctrl_lookup_state+0x16>

00028356 <adxl362_channel_get>:
}

static int adxl362_channel_get(const struct device *dev,
			       enum sensor_channel chan,
			       struct sensor_value *val)
{
   28356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28358:	4603      	mov	r3, r0
   2835a:	4610      	mov	r0, r2
	struct adxl362_data *data = dev->data;
   2835c:	691c      	ldr	r4, [r3, #16]

	switch (chan) {
   2835e:	290c      	cmp	r1, #12
   28360:	d835      	bhi.n	283ce <adxl362_channel_get+0x78>
   28362:	e8df f001 	tbb	[pc, r1]
   28366:	0e07      	.short	0x0e07
   28368:	34341612 	.word	0x34341612
   2836c:	34343434 	.word	0x34343434
   28370:	3434      	.short	0x3434
   28372:	24          	.byte	0x24
   28373:	00          	.byte	0x00
	case SENSOR_CHAN_ACCEL_X: /* Acceleration on the X axis, in m/s^2. */
		adxl362_accel_convert(val, data->acc_x, data->selected_range);
   28374:	7a22      	ldrb	r2, [r4, #8]
   28376:	f9b4 1000 	ldrsh.w	r1, [r4]
   2837a:	f7f5 fcb7 	bl	1dcec <adxl362_accel_convert>
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   2837e:	2000      	movs	r0, #0
}
   28380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		adxl362_accel_convert(val, data->acc_y, data->selected_range);
   28382:	7a22      	ldrb	r2, [r4, #8]
   28384:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
   28388:	e7f7      	b.n	2837a <adxl362_channel_get+0x24>
		adxl362_accel_convert(val, data->acc_z,  data->selected_range);
   2838a:	7a22      	ldrb	r2, [r4, #8]
   2838c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
   28390:	e7f3      	b.n	2837a <adxl362_channel_get+0x24>
   28392:	4616      	mov	r6, r2
   28394:	1ea5      	subs	r5, r4, #2
   28396:	1d27      	adds	r7, r4, #4
			adxl362_accel_convert(&val[i], data->acc_xyz[i], data->selected_range);
   28398:	f935 1f02 	ldrsh.w	r1, [r5, #2]!
   2839c:	4630      	mov	r0, r6
   2839e:	7a22      	ldrb	r2, [r4, #8]
   283a0:	f7f5 fca4 	bl	1dcec <adxl362_accel_convert>
		for (size_t i = 0; i < 3; i++) {
   283a4:	42bd      	cmp	r5, r7
   283a6:	f106 0608 	add.w	r6, r6, #8
   283aa:	d1f5      	bne.n	28398 <adxl362_channel_get+0x42>
   283ac:	e7e7      	b.n	2837e <adxl362_channel_get+0x28>
	val->val1 = milli_c / 1000;
   283ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		adxl362_temp_convert(val, data->temp);
   283b2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
	int milli_c = (temp - ADXL362_TEMP_BIAS_LSB) * ADXL362_TEMP_MC_PER_LSB;
   283b6:	f5a3 73af 	sub.w	r3, r3, #350	; 0x15e
   283ba:	eb03 1383 	add.w	r3, r3, r3, lsl #6
	val->val1 = milli_c / 1000;
   283be:	fb93 f1f2 	sdiv	r1, r3, r2
	val->val2 = (milli_c % 1000) * 1000;
   283c2:	fb02 3311 	mls	r3, r2, r1, r3
   283c6:	4353      	muls	r3, r2
	val->val1 = milli_c / 1000;
   283c8:	6001      	str	r1, [r0, #0]
	val->val2 = (milli_c % 1000) * 1000;
   283ca:	6043      	str	r3, [r0, #4]
}
   283cc:	e7d7      	b.n	2837e <adxl362_channel_get+0x28>
	switch (chan) {
   283ce:	f06f 0085 	mvn.w	r0, #133	; 0x85
   283d2:	e7d5      	b.n	28380 <adxl362_channel_get+0x2a>

000283d4 <adxl362_reg_access.isra.0>:
static int adxl362_reg_access(const struct device *dev, uint8_t cmd,
   283d4:	b510      	push	{r4, lr}
   283d6:	b08a      	sub	sp, #40	; 0x28
	uint8_t access[2] = { cmd, reg_addr };
   283d8:	f88d 2005 	strb.w	r2, [sp, #5]
	const struct spi_buf buf[2] = {
   283dc:	aa01      	add	r2, sp, #4
   283de:	9206      	str	r2, [sp, #24]
   283e0:	2202      	movs	r2, #2
static int adxl362_reg_access(const struct device *dev, uint8_t cmd,
   283e2:	460c      	mov	r4, r1
	uint8_t access[2] = { cmd, reg_addr };
   283e4:	f88d 1004 	strb.w	r1, [sp, #4]
 */
static inline int spi_transceive_dt(const struct spi_dt_spec *spec,
				    const struct spi_buf_set *tx_bufs,
				    const struct spi_buf_set *rx_bufs)
{
	return spi_transceive(spec->bus, &spec->config, tx_bufs, rx_bufs);
   283e8:	4601      	mov	r1, r0
	const struct spi_buf buf[2] = {
   283ea:	e9cd 2307 	strd	r2, r3, [sp, #28]
   283ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (cmd == ADXL362_READ_REG) {
   283f0:	2c0b      	cmp	r4, #11
	const struct spi_buf buf[2] = {
   283f2:	9309      	str	r3, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
   283f4:	ab06      	add	r3, sp, #24
   283f6:	f851 0b04 	ldr.w	r0, [r1], #4
   283fa:	9302      	str	r3, [sp, #8]
	if (cmd == ADXL362_READ_REG) {
   283fc:	d10a      	bne.n	28414 <adxl362_reg_access.isra.0+0x40>
		const struct spi_buf_set rx = {
   283fe:	e9cd 3204 	strd	r3, r2, [sp, #16]
		tx.count = 1;
   28402:	2301      	movs	r3, #1
   28404:	9303      	str	r3, [sp, #12]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   28406:	6883      	ldr	r3, [r0, #8]
   28408:	681c      	ldr	r4, [r3, #0]
   2840a:	ab04      	add	r3, sp, #16
   2840c:	aa02      	add	r2, sp, #8
   2840e:	47a0      	blx	r4
}
   28410:	b00a      	add	sp, #40	; 0x28
   28412:	bd10      	pop	{r4, pc}
	tx.count = 2;
   28414:	9203      	str	r2, [sp, #12]
   28416:	6883      	ldr	r3, [r0, #8]
   28418:	681c      	ldr	r4, [r3, #0]
   2841a:	2300      	movs	r3, #0
   2841c:	e7f6      	b.n	2840c <adxl362_reg_access.isra.0+0x38>

0002841e <adxl362_set_reg.isra.0>:
static inline int adxl362_set_reg(const struct device *dev,
   2841e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   28420:	f8ad 100e 	strh.w	r1, [sp, #14]
	return adxl362_reg_access(dev, ADXL362_WRITE_REG,
   28424:	9300      	str	r3, [sp, #0]
   28426:	210a      	movs	r1, #10
   28428:	f10d 030e 	add.w	r3, sp, #14
   2842c:	f7ff ffd2 	bl	283d4 <adxl362_reg_access.isra.0>
}
   28430:	b005      	add	sp, #20
   28432:	f85d fb04 	ldr.w	pc, [sp], #4

00028436 <adxl362_set_range>:
{
   28436:	b5f0      	push	{r4, r5, r6, r7, lr}
	return adxl362_reg_access(dev, ADXL362_READ_REG,
   28438:	2701      	movs	r7, #1
{
   2843a:	b085      	sub	sp, #20
	struct adxl362_data *adxl362_data = dev->data;
   2843c:	6906      	ldr	r6, [r0, #16]
	return adxl362_reg_access(dev, ADXL362_READ_REG,
   2843e:	9700      	str	r7, [sp, #0]
{
   28440:	4604      	mov	r4, r0
   28442:	460d      	mov	r5, r1
	return adxl362_reg_access(dev, ADXL362_READ_REG,
   28444:	222c      	movs	r2, #44	; 0x2c
   28446:	210b      	movs	r1, #11
   28448:	6840      	ldr	r0, [r0, #4]
   2844a:	f10d 030f 	add.w	r3, sp, #15
   2844e:	f7ff ffc1 	bl	283d4 <adxl362_reg_access.isra.0>
	if (ret) {
   28452:	b968      	cbnz	r0, 28470 <adxl362_set_range+0x3a>
	new_filter_ctl = old_filter_ctl & ~ADXL362_FILTER_CTL_RANGE(0x3);
   28454:	f89d 000f 	ldrb.w	r0, [sp, #15]
	ret = adxl362_set_reg(dev, new_filter_ctl, ADXL362_REG_FILTER_CTL, 1);
   28458:	463b      	mov	r3, r7
	new_filter_ctl = old_filter_ctl & ~ADXL362_FILTER_CTL_RANGE(0x3);
   2845a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	new_filter_ctl = new_filter_ctl | ADXL362_FILTER_CTL_RANGE(range);
   2845e:	ea40 1085 	orr.w	r0, r0, r5, lsl #6
	ret = adxl362_set_reg(dev, new_filter_ctl, ADXL362_REG_FILTER_CTL, 1);
   28462:	b2c1      	uxtb	r1, r0
   28464:	222c      	movs	r2, #44	; 0x2c
   28466:	6860      	ldr	r0, [r4, #4]
   28468:	f7ff ffd9 	bl	2841e <adxl362_set_reg.isra.0>
	if (ret) {
   2846c:	b900      	cbnz	r0, 28470 <adxl362_set_range+0x3a>
	adxl362_data->selected_range = range;
   2846e:	7235      	strb	r5, [r6, #8]
}
   28470:	b005      	add	sp, #20
   28472:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028474 <adxl362_set_output_rate>:
{
   28474:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return adxl362_reg_access(dev, ADXL362_READ_REG,
   28476:	2601      	movs	r6, #1
{
   28478:	460c      	mov	r4, r1
   2847a:	4605      	mov	r5, r0
	return adxl362_reg_access(dev, ADXL362_READ_REG,
   2847c:	9600      	str	r6, [sp, #0]
   2847e:	f10d 030f 	add.w	r3, sp, #15
   28482:	222c      	movs	r2, #44	; 0x2c
   28484:	210b      	movs	r1, #11
   28486:	6840      	ldr	r0, [r0, #4]
   28488:	f7ff ffa4 	bl	283d4 <adxl362_reg_access.isra.0>
	new_filter_ctl = old_filter_ctl & ~ADXL362_FILTER_CTL_ODR(0x7);
   2848c:	f89d 100f 	ldrb.w	r1, [sp, #15]
	adxl362_set_reg(dev, new_filter_ctl, ADXL362_REG_FILTER_CTL, 1);
   28490:	f004 0407 	and.w	r4, r4, #7
	new_filter_ctl = old_filter_ctl & ~ADXL362_FILTER_CTL_ODR(0x7);
   28494:	f021 0107 	bic.w	r1, r1, #7
	adxl362_set_reg(dev, new_filter_ctl, ADXL362_REG_FILTER_CTL, 1);
   28498:	4633      	mov	r3, r6
   2849a:	222c      	movs	r2, #44	; 0x2c
   2849c:	6868      	ldr	r0, [r5, #4]
   2849e:	4321      	orrs	r1, r4
   284a0:	f7ff ffbd 	bl	2841e <adxl362_set_reg.isra.0>
}
   284a4:	2000      	movs	r0, #0
   284a6:	b004      	add	sp, #16
   284a8:	bd70      	pop	{r4, r5, r6, pc}

000284aa <adxl362_sample_fetch>:
{
   284aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return adxl362_reg_access(dev, ADXL362_READ_REG,
   284ac:	2308      	movs	r3, #8
	struct adxl362_data *data = dev->data;
   284ae:	6904      	ldr	r4, [r0, #16]
	return adxl362_reg_access(dev, ADXL362_READ_REG,
   284b0:	9300      	str	r3, [sp, #0]
   284b2:	220e      	movs	r2, #14
   284b4:	210b      	movs	r1, #11
   284b6:	6840      	ldr	r0, [r0, #4]
   284b8:	446b      	add	r3, sp
   284ba:	f7ff ff8b 	bl	283d4 <adxl362_reg_access.isra.0>
	if (ret) {
   284be:	b958      	cbnz	r0, 284d8 <adxl362_sample_fetch+0x2e>
	data->acc_x = sys_le16_to_cpu(buf[0]);
   284c0:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
   284c4:	8023      	strh	r3, [r4, #0]
	data->acc_y = sys_le16_to_cpu(buf[1]);
   284c6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
   284ca:	8063      	strh	r3, [r4, #2]
	data->acc_z = sys_le16_to_cpu(buf[2]);
   284cc:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   284d0:	80a3      	strh	r3, [r4, #4]
	data->temp = sys_le16_to_cpu(buf[3]);
   284d2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
   284d6:	80e3      	strh	r3, [r4, #6]
}
   284d8:	b004      	add	sp, #16
   284da:	bd10      	pop	{r4, pc}

000284dc <adxl362_init>:
 * @return  0 - the initialization was successful and the device is present;
 *         -1 - an error occurred.
 *
 */
static int adxl362_init(const struct device *dev)
{
   284dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct adxl362_config *config = dev->config;
   284de:	6845      	ldr	r5, [r0, #4]
{
   284e0:	4604      	mov	r4, r0
   284e2:	b085      	sub	sp, #20
	if (!device_is_ready(spec->bus)) {
   284e4:	6828      	ldr	r0, [r5, #0]
   284e6:	f002 fa07 	bl	2a8f8 <z_device_is_ready>
   284ea:	b920      	cbnz	r0, 284f6 <adxl362_init+0x1a>
	uint8_t value;
	int err;

	if (!spi_is_ready_dt(&config->bus)) {
		LOG_DBG("spi device not ready: %s", config->bus.bus->name);
		return -EINVAL;
   284ec:	f06f 0515 	mvn.w	r5, #21
		}
	}
#endif

	return 0;
}
   284f0:	4628      	mov	r0, r5
   284f2:	b005      	add	sp, #20
   284f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spec->config.cs &&
   284f6:	68eb      	ldr	r3, [r5, #12]
   284f8:	b953      	cbnz	r3, 28510 <adxl362_init+0x34>
	return adxl362_set_reg(dev, ADXL362_RESET_KEY,
   284fa:	2301      	movs	r3, #1
   284fc:	221f      	movs	r2, #31
   284fe:	2152      	movs	r1, #82	; 0x52
   28500:	6860      	ldr	r0, [r4, #4]
   28502:	f7ff ff8c 	bl	2841e <adxl362_set_reg.isra.0>
	if (err) {
   28506:	4605      	mov	r5, r0
   28508:	b140      	cbz	r0, 2851c <adxl362_init+0x40>
		return -ENODEV;
   2850a:	f06f 0512 	mvn.w	r5, #18
   2850e:	e7ef      	b.n	284f0 <adxl362_init+0x14>
	    !device_is_ready(spec->config.cs->gpio.port)) {
   28510:	6818      	ldr	r0, [r3, #0]
   28512:	f002 f9f1 	bl	2a8f8 <z_device_is_ready>
	if (spec->config.cs &&
   28516:	2800      	cmp	r0, #0
   28518:	d1ef      	bne.n	284fa <adxl362_init+0x1e>
   2851a:	e7e7      	b.n	284ec <adxl362_init+0x10>
	return adxl362_reg_access(dev, ADXL362_READ_REG,
   2851c:	2701      	movs	r7, #1
	return z_impl_k_sleep(timeout);
   2851e:	2100      	movs	r1, #0
   28520:	20a4      	movs	r0, #164	; 0xa4
   28522:	f7fc fe8d 	bl	25240 <z_impl_k_sleep>
   28526:	9700      	str	r7, [sp, #0]
   28528:	f10d 030e 	add.w	r3, sp, #14
   2852c:	2202      	movs	r2, #2
   2852e:	210b      	movs	r1, #11
   28530:	6860      	ldr	r0, [r4, #4]
   28532:	f7ff ff4f 	bl	283d4 <adxl362_reg_access.isra.0>
	if (value != ADXL362_PART_ID) {
   28536:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2853a:	2bf2      	cmp	r3, #242	; 0xf2
   2853c:	d1e5      	bne.n	2850a <adxl362_init+0x2e>
	const struct adxl362_config *config = dev->config;
   2853e:	6866      	ldr	r6, [r4, #4]
	ret = adxl362_set_reg(dev, (threshold & 0x7FF),
   28540:	2302      	movs	r3, #2
   28542:	2220      	movs	r2, #32
   28544:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   28548:	4630      	mov	r0, r6
   2854a:	f7ff ff68 	bl	2841e <adxl362_set_reg.isra.0>
	if (ret) {
   2854e:	2800      	cmp	r0, #0
   28550:	d15f      	bne.n	28612 <adxl362_init+0x136>
	ret = adxl362_set_reg(dev, time, ADXL362_REG_TIME_ACT, 1);
   28552:	463b      	mov	r3, r7
   28554:	2222      	movs	r2, #34	; 0x22
   28556:	4639      	mov	r1, r7
   28558:	6860      	ldr	r0, [r4, #4]
   2855a:	f7ff ff60 	bl	2841e <adxl362_set_reg.isra.0>
	if (ret) {
   2855e:	2800      	cmp	r0, #0
   28560:	d157      	bne.n	28612 <adxl362_init+0x136>
	return adxl362_reg_access(dev, ADXL362_READ_REG,
   28562:	9700      	str	r7, [sp, #0]
   28564:	2227      	movs	r2, #39	; 0x27
   28566:	210b      	movs	r1, #11
   28568:	6860      	ldr	r0, [r4, #4]
   2856a:	f10d 030f 	add.w	r3, sp, #15
   2856e:	f7ff ff31 	bl	283d4 <adxl362_reg_access.isra.0>
	if (ret) {
   28572:	2800      	cmp	r0, #0
   28574:	d14d      	bne.n	28612 <adxl362_init+0x136>
	new_act_inact_reg = old_act_inact_reg & ~ADXL362_ACT_INACT_CTL_ACT_REF;
   28576:	f89d 100f 	ldrb.w	r1, [sp, #15]
	ret = adxl362_set_reg(dev, new_act_inact_reg,
   2857a:	463b      	mov	r3, r7
	new_act_inact_reg = old_act_inact_reg & ~ADXL362_ACT_INACT_CTL_ACT_REF;
   2857c:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
	ret = adxl362_set_reg(dev, new_act_inact_reg,
   28580:	2227      	movs	r2, #39	; 0x27
   28582:	6860      	ldr	r0, [r4, #4]
   28584:	4339      	orrs	r1, r7
   28586:	f7ff ff4a 	bl	2841e <adxl362_set_reg.isra.0>
	if (ret) {
   2858a:	2800      	cmp	r0, #0
   2858c:	d141      	bne.n	28612 <adxl362_init+0x136>
	ret = adxl362_set_reg(dev, (threshold & 0x7FF),
   2858e:	2302      	movs	r3, #2
   28590:	2223      	movs	r2, #35	; 0x23
   28592:	2164      	movs	r1, #100	; 0x64
   28594:	6860      	ldr	r0, [r4, #4]
   28596:	f7ff ff42 	bl	2841e <adxl362_set_reg.isra.0>
	if (ret) {
   2859a:	2800      	cmp	r0, #0
   2859c:	d139      	bne.n	28612 <adxl362_init+0x136>
	ret = adxl362_set_reg(dev, time, ADXL362_REG_TIME_INACT_L, 2);
   2859e:	2302      	movs	r3, #2
   285a0:	2225      	movs	r2, #37	; 0x25
   285a2:	4639      	mov	r1, r7
   285a4:	6860      	ldr	r0, [r4, #4]
   285a6:	f7ff ff3a 	bl	2841e <adxl362_set_reg.isra.0>
	if (ret) {
   285aa:	bb90      	cbnz	r0, 28612 <adxl362_init+0x136>
	return adxl362_reg_access(dev, ADXL362_READ_REG,
   285ac:	9700      	str	r7, [sp, #0]
   285ae:	2227      	movs	r2, #39	; 0x27
   285b0:	210b      	movs	r1, #11
   285b2:	6860      	ldr	r0, [r4, #4]
   285b4:	f10d 030f 	add.w	r3, sp, #15
   285b8:	f7ff ff0c 	bl	283d4 <adxl362_reg_access.isra.0>
	if (ret) {
   285bc:	bb48      	cbnz	r0, 28612 <adxl362_init+0x136>
	new_act_inact_reg = old_act_inact_reg &
   285be:	f89d 100f 	ldrb.w	r1, [sp, #15]
	ret = adxl362_set_reg(dev, new_act_inact_reg,
   285c2:	463b      	mov	r3, r7
	new_act_inact_reg = old_act_inact_reg &
   285c4:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
	ret = adxl362_set_reg(dev, new_act_inact_reg,
   285c8:	2227      	movs	r2, #39	; 0x27
   285ca:	6860      	ldr	r0, [r4, #4]
   285cc:	f041 0104 	orr.w	r1, r1, #4
   285d0:	f7ff ff25 	bl	2841e <adxl362_set_reg.isra.0>
	if (ret) {
   285d4:	b9e8      	cbnz	r0, 28612 <adxl362_init+0x136>
	ret = adxl362_set_reg(dev, write_val, ADXL362_REG_FIFO_CTL, 1);
   285d6:	463b      	mov	r3, r7
   285d8:	2228      	movs	r2, #40	; 0x28
   285da:	2108      	movs	r1, #8
   285dc:	6860      	ldr	r0, [r4, #4]
   285de:	f7ff ff1e 	bl	2841e <adxl362_set_reg.isra.0>
	if (ret) {
   285e2:	b9b0      	cbnz	r0, 28612 <adxl362_init+0x136>
	ret = adxl362_set_reg(dev, water_mark_lvl, ADXL362_REG_FIFO_SAMPLES, 1);
   285e4:	4601      	mov	r1, r0
   285e6:	463b      	mov	r3, r7
   285e8:	2229      	movs	r2, #41	; 0x29
   285ea:	6860      	ldr	r0, [r4, #4]
   285ec:	f7ff ff17 	bl	2841e <adxl362_set_reg.isra.0>
	if (ret) {
   285f0:	b978      	cbnz	r0, 28612 <adxl362_init+0x136>
	ret = adxl362_set_range(dev, ADXL362_DEFAULT_RANGE_ACC);
   285f2:	4601      	mov	r1, r0
   285f4:	4620      	mov	r0, r4
   285f6:	f7ff ff1e 	bl	28436 <adxl362_set_range>
	if (ret) {
   285fa:	b950      	cbnz	r0, 28612 <adxl362_init+0x136>
	ret = adxl362_set_output_rate(dev, ADXL362_DEFAULT_ODR_ACC);
   285fc:	4601      	mov	r1, r0
   285fe:	4620      	mov	r0, r4
   28600:	f7ff ff38 	bl	28474 <adxl362_set_output_rate>
	if (ret) {
   28604:	b928      	cbnz	r0, 28612 <adxl362_init+0x136>
	ret = adxl362_set_reg(dev, config->power_ctl, ADXL362_REG_POWER_CTL, 1);
   28606:	463b      	mov	r3, r7
   28608:	222d      	movs	r2, #45	; 0x2d
   2860a:	7c31      	ldrb	r1, [r6, #16]
   2860c:	6860      	ldr	r0, [r4, #4]
   2860e:	f7ff ff06 	bl	2841e <adxl362_set_reg.isra.0>
	if (adxl362_chip_init(dev) < 0) {
   28612:	2800      	cmp	r0, #0
   28614:	f6bf af6c 	bge.w	284f0 <adxl362_init+0x14>
   28618:	e777      	b.n	2850a <adxl362_init+0x2e>

0002861a <adxl372_set_activity_threshold>:
{
   2861a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct adxl372_data *data = dev->data;
   2861e:	6907      	ldr	r7, [r0, #16]
{
   28620:	4690      	mov	r8, r2
	ret = data->hw_tf->write_reg(dev, axis_reg_h++, act->thresh >> 3);
   28622:	68bb      	ldr	r3, [r7, #8]
   28624:	8812      	ldrh	r2, [r2, #0]
   28626:	685b      	ldr	r3, [r3, #4]
   28628:	f3c2 02c7 	ubfx	r2, r2, #3, #8
{
   2862c:	4606      	mov	r6, r0
   2862e:	460c      	mov	r4, r1
	ret = data->hw_tf->write_reg(dev, axis_reg_h++, act->thresh >> 3);
   28630:	4798      	blx	r3
	if (ret) {
   28632:	b9e8      	cbnz	r0, 28670 <adxl372_set_activity_threshold+0x56>
	ret = data->hw_tf->write_reg(dev, axis_reg_h++, act->thresh >> 3);
   28634:	1c61      	adds	r1, r4, #1
		val = (act->thresh << 5) | (act->referenced << 1) | act->enable;
   28636:	f8b8 5000 	ldrh.w	r5, [r8]
	switch (axis_reg_h) {
   2863a:	3c23      	subs	r4, #35	; 0x23
   2863c:	b2e4      	uxtb	r4, r4
		val = (act->thresh << 5) | (act->referenced << 1) | act->enable;
   2863e:	016d      	lsls	r5, r5, #5
	switch (axis_reg_h) {
   28640:	2c0f      	cmp	r4, #15
		val = (act->thresh << 5) | (act->referenced << 1) | act->enable;
   28642:	f998 3003 	ldrsb.w	r3, [r8, #3]
	ret = data->hw_tf->write_reg(dev, axis_reg_h++, act->thresh >> 3);
   28646:	b2c9      	uxtb	r1, r1
		val = (act->thresh << 5) | (act->referenced << 1) | act->enable;
   28648:	b26d      	sxtb	r5, r5
	switch (axis_reg_h) {
   2864a:	d808      	bhi.n	2865e <adxl372_set_activity_threshold+0x44>
   2864c:	f248 0281 	movw	r2, #32897	; 0x8081
   28650:	40e2      	lsrs	r2, r4
   28652:	07d2      	lsls	r2, r2, #31
		val = (act->thresh << 5) | (act->referenced << 1) | act->enable;
   28654:	bf44      	itt	mi
   28656:	f898 2002 	ldrbmi.w	r2, [r8, #2]
   2865a:	ea45 0542 	orrmi.w	r5, r5, r2, lsl #1
		val = (act->thresh << 5) | act->enable;
   2865e:	ea43 0205 	orr.w	r2, r3, r5
	return data->hw_tf->write_reg(dev, axis_reg_h, val);
   28662:	68bb      	ldr	r3, [r7, #8]
   28664:	4630      	mov	r0, r6
}
   28666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return data->hw_tf->write_reg(dev, axis_reg_h, val);
   2866a:	685b      	ldr	r3, [r3, #4]
		val = (act->thresh << 5) | act->enable;
   2866c:	b2d2      	uxtb	r2, r2
	return data->hw_tf->write_reg(dev, axis_reg_h, val);
   2866e:	4718      	bx	r3
}
   28670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028674 <adxl372_set_activity_threshold_xyz>:
{
   28674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28676:	4606      	mov	r6, r0
   28678:	460c      	mov	r4, r1
   2867a:	4617      	mov	r7, r2
   2867c:	1d8d      	adds	r5, r1, #6
   2867e:	b2ed      	uxtb	r5, r5
		ret = adxl372_set_activity_threshold(dev, axis_reg_h, act);
   28680:	463a      	mov	r2, r7
   28682:	4621      	mov	r1, r4
   28684:	4630      	mov	r0, r6
   28686:	f7ff ffc8 	bl	2861a <adxl372_set_activity_threshold>
		if (ret) {
   2868a:	b918      	cbnz	r0, 28694 <adxl372_set_activity_threshold_xyz+0x20>
		axis_reg_h += 2U;
   2868c:	3402      	adds	r4, #2
   2868e:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 3; i++) {
   28690:	42a5      	cmp	r5, r4
   28692:	d1f5      	bne.n	28680 <adxl372_set_activity_threshold_xyz+0xc>
}
   28694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028696 <adxl372_set_op_mode>:
{
   28696:	b410      	push	{r4}
	return data->hw_tf->write_reg_mask(dev, ADXL372_POWER_CTL,
   28698:	6903      	ldr	r3, [r0, #16]
   2869a:	2203      	movs	r2, #3
   2869c:	689b      	ldr	r3, [r3, #8]
   2869e:	68dc      	ldr	r4, [r3, #12]
   286a0:	f001 0303 	and.w	r3, r1, #3
   286a4:	46a4      	mov	ip, r4
   286a6:	213f      	movs	r1, #63	; 0x3f
}
   286a8:	bc10      	pop	{r4}
	return data->hw_tf->write_reg_mask(dev, ADXL372_POWER_CTL,
   286aa:	4760      	bx	ip

000286ac <adxl372_set_odr>:
{
   286ac:	b410      	push	{r4}
	return data->hw_tf->write_reg_mask(dev, ADXL372_TIMING,
   286ae:	6902      	ldr	r2, [r0, #16]
					   ADXL372_TIMING_ODR_MODE(odr));
   286b0:	014b      	lsls	r3, r1, #5
	return data->hw_tf->write_reg_mask(dev, ADXL372_TIMING,
   286b2:	6892      	ldr	r2, [r2, #8]
   286b4:	213d      	movs	r1, #61	; 0x3d
   286b6:	68d4      	ldr	r4, [r2, #12]
   286b8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   286bc:	46a4      	mov	ip, r4
   286be:	22e0      	movs	r2, #224	; 0xe0
}
   286c0:	bc10      	pop	{r4}
	return data->hw_tf->write_reg_mask(dev, ADXL372_TIMING,
   286c2:	4760      	bx	ip

000286c4 <adxl372_init>:

	return adxl372_set_act_proc_mode(dev, data->act_proc_mode);
}

static int adxl372_init(const struct device *dev)
{
   286c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	const struct adxl372_dev_config *cfg = dev->config;

	ret = cfg->bus_init(dev);
   286c8:	6843      	ldr	r3, [r0, #4]
{
   286ca:	4605      	mov	r5, r0
	ret = cfg->bus_init(dev);
   286cc:	691b      	ldr	r3, [r3, #16]
   286ce:	4798      	blx	r3
	if (ret < 0) {
   286d0:	2800      	cmp	r0, #0
   286d2:	db20      	blt.n	28716 <adxl372_init+0x52>
	struct adxl372_data *data = dev->data;
   286d4:	f8d5 8010 	ldr.w	r8, [r5, #16]
	ret = data->hw_tf->read_reg(dev, ADXL372_DEVID, &dev_id);
   286d8:	2100      	movs	r1, #0
   286da:	f8d8 3008 	ldr.w	r3, [r8, #8]
   286de:	4628      	mov	r0, r5
   286e0:	689b      	ldr	r3, [r3, #8]
   286e2:	f10d 0206 	add.w	r2, sp, #6
	const struct adxl372_dev_config *cfg = dev->config;
   286e6:	686e      	ldr	r6, [r5, #4]
	ret = data->hw_tf->read_reg(dev, ADXL372_DEVID, &dev_id);
   286e8:	4798      	blx	r3
	if (ret) {
   286ea:	4604      	mov	r4, r0
   286ec:	2800      	cmp	r0, #0
   286ee:	f040 8156 	bne.w	2899e <adxl372_init+0x2da>
	ret = data->hw_tf->read_reg(dev, ADXL372_PARTID, &part_id);
   286f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   286f6:	2102      	movs	r1, #2
   286f8:	4628      	mov	r0, r5
   286fa:	689b      	ldr	r3, [r3, #8]
   286fc:	f10d 0207 	add.w	r2, sp, #7
   28700:	4798      	blx	r3
	if (ret) {
   28702:	4604      	mov	r4, r0
   28704:	2800      	cmp	r0, #0
   28706:	f040 814a 	bne.w	2899e <adxl372_init+0x2da>
	if (dev_id != ADXL372_DEVID_VAL || part_id != ADXL372_PARTID_VAL) {
   2870a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2870e:	2bad      	cmp	r3, #173	; 0xad
   28710:	d004      	beq.n	2871c <adxl372_init+0x58>
		LOG_ERR("Failed to initialize sensor bus");
		return ret;
	}

	if (adxl372_probe(dev) < 0) {
		return -ENODEV;
   28712:	f06f 0012 	mvn.w	r0, #18
	}

	return 0;
}
   28716:	b003      	add	sp, #12
   28718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dev_id != ADXL372_DEVID_VAL || part_id != ADXL372_PARTID_VAL) {
   2871c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   28720:	2bfa      	cmp	r3, #250	; 0xfa
   28722:	d1f6      	bne.n	28712 <adxl372_init+0x4e>
	data->act_proc_mode = ADXL372_LOOPED,
   28724:	2302      	movs	r3, #2
	ret = adxl372_set_op_mode(dev, ADXL372_STANDBY);
   28726:	4601      	mov	r1, r0
	data->act_proc_mode = ADXL372_LOOPED,
   28728:	f888 3010 	strb.w	r3, [r8, #16]
	ret = adxl372_set_op_mode(dev, ADXL372_STANDBY);
   2872c:	4628      	mov	r0, r5
   2872e:	f7ff ffb2 	bl	28696 <adxl372_set_op_mode>
	if (ret) {
   28732:	4604      	mov	r4, r0
   28734:	2800      	cmp	r0, #0
   28736:	f040 8132 	bne.w	2899e <adxl372_init+0x2da>
	ret = adxl372_set_op_mode(dev, ADXL372_STANDBY);
   2873a:	4601      	mov	r1, r0
   2873c:	4628      	mov	r0, r5
	struct adxl372_data *data = dev->data;
   2873e:	692f      	ldr	r7, [r5, #16]
	ret = adxl372_set_op_mode(dev, ADXL372_STANDBY);
   28740:	f7ff ffa9 	bl	28696 <adxl372_set_op_mode>
	if (ret) {
   28744:	4604      	mov	r4, r0
   28746:	2800      	cmp	r0, #0
   28748:	f040 8129 	bne.w	2899e <adxl372_init+0x2da>
	ret = data->hw_tf->write_reg(dev, ADXL372_RESET, ADXL372_RESET_CODE);
   2874c:	68bb      	ldr	r3, [r7, #8]
   2874e:	2252      	movs	r2, #82	; 0x52
   28750:	2141      	movs	r1, #65	; 0x41
   28752:	4628      	mov	r0, r5
   28754:	685b      	ldr	r3, [r3, #4]
   28756:	4798      	blx	r3
   28758:	4604      	mov	r4, r0
   2875a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2875e:	2100      	movs	r1, #0
   28760:	f7fc fd6e 	bl	25240 <z_impl_k_sleep>
	if (ret) {
   28764:	2c00      	cmp	r4, #0
   28766:	f040 811a 	bne.w	2899e <adxl372_init+0x2da>
	ret = adxl372_set_hpf_corner(dev, cfg->hpf);
   2876a:	7d77      	ldrb	r7, [r6, #21]
	struct adxl372_data *data = dev->data;
   2876c:	f8d5 9010 	ldr.w	r9, [r5, #16]
	if (c == ADXL372_HPF_DISABLED) {
   28770:	1f39      	subs	r1, r7, #4
	ret = data->hw_tf->write_reg_mask(dev, ADXL372_POWER_CTL,
   28772:	f8d9 2008 	ldr.w	r2, [r9, #8]
	if (c == ADXL372_HPF_DISABLED) {
   28776:	424b      	negs	r3, r1
   28778:	414b      	adcs	r3, r1
	ret = data->hw_tf->write_reg_mask(dev, ADXL372_POWER_CTL,
   2877a:	68d4      	ldr	r4, [r2, #12]
   2877c:	213f      	movs	r1, #63	; 0x3f
   2877e:	2204      	movs	r2, #4
   28780:	4628      	mov	r0, r5
   28782:	009b      	lsls	r3, r3, #2
   28784:	47a0      	blx	r4
	if (ret) {
   28786:	4604      	mov	r4, r0
   28788:	2800      	cmp	r0, #0
   2878a:	f040 8108 	bne.w	2899e <adxl372_init+0x2da>
	return data->hw_tf->write_reg(dev, ADXL372_HPF, ADXL372_HPF_CORNER(c));
   2878e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   28792:	2138      	movs	r1, #56	; 0x38
   28794:	4628      	mov	r0, r5
   28796:	685b      	ldr	r3, [r3, #4]
   28798:	f007 0203 	and.w	r2, r7, #3
   2879c:	4798      	blx	r3
	if (ret) {
   2879e:	4604      	mov	r4, r0
   287a0:	2800      	cmp	r0, #0
   287a2:	f040 80fc 	bne.w	2899e <adxl372_init+0x2da>
	ret = adxl372_set_bandwidth(dev, cfg->bw);
   287a6:	7d37      	ldrb	r7, [r6, #20]
	struct adxl372_data *data = dev->data;
   287a8:	f8d5 9010 	ldr.w	r9, [r5, #16]
	if (bw == ADXL372_BW_LPF_DISABLED) {
   287ac:	f1a7 020c 	sub.w	r2, r7, #12
   287b0:	4253      	negs	r3, r2
   287b2:	4153      	adcs	r3, r2
	ret = data->hw_tf->write_reg_mask(dev, ADXL372_POWER_CTL,
   287b4:	f8d9 2008 	ldr.w	r2, [r9, #8]
   287b8:	213f      	movs	r1, #63	; 0x3f
   287ba:	68d4      	ldr	r4, [r2, #12]
   287bc:	4628      	mov	r0, r5
   287be:	2208      	movs	r2, #8
   287c0:	00db      	lsls	r3, r3, #3
   287c2:	47a0      	blx	r4
	if (ret) {
   287c4:	4604      	mov	r4, r0
   287c6:	2800      	cmp	r0, #0
   287c8:	f040 80e9 	bne.w	2899e <adxl372_init+0x2da>
	return data->hw_tf->write_reg_mask(dev, ADXL372_MEASURE,
   287cc:	f8d9 3008 	ldr.w	r3, [r9, #8]
   287d0:	2207      	movs	r2, #7
   287d2:	68dc      	ldr	r4, [r3, #12]
   287d4:	213e      	movs	r1, #62	; 0x3e
   287d6:	4628      	mov	r0, r5
   287d8:	f007 0307 	and.w	r3, r7, #7
   287dc:	47a0      	blx	r4
	if (ret) {
   287de:	4604      	mov	r4, r0
   287e0:	2800      	cmp	r0, #0
   287e2:	f040 80dc 	bne.w	2899e <adxl372_init+0x2da>
	ret = adxl372_set_odr(dev, cfg->odr);
   287e6:	4628      	mov	r0, r5
   287e8:	7db1      	ldrb	r1, [r6, #22]
   287ea:	f7ff ff5f 	bl	286ac <adxl372_set_odr>
	if (ret) {
   287ee:	4604      	mov	r4, r0
   287f0:	2800      	cmp	r0, #0
   287f2:	f040 80d4 	bne.w	2899e <adxl372_init+0x2da>
	return data->hw_tf->write_reg_mask(dev, ADXL372_TIMING,
   287f6:	692a      	ldr	r2, [r5, #16]
					   ADXL372_TIMING_WAKE_UP_RATE_MODE(wur));
   287f8:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
	return data->hw_tf->write_reg_mask(dev, ADXL372_TIMING,
   287fc:	6892      	ldr	r2, [r2, #8]
					   ADXL372_TIMING_WAKE_UP_RATE_MODE(wur));
   287fe:	009b      	lsls	r3, r3, #2
	return data->hw_tf->write_reg_mask(dev, ADXL372_TIMING,
   28800:	68d4      	ldr	r4, [r2, #12]
   28802:	213d      	movs	r1, #61	; 0x3d
   28804:	221c      	movs	r2, #28
   28806:	4628      	mov	r0, r5
   28808:	f003 031c 	and.w	r3, r3, #28
   2880c:	47a0      	blx	r4
	if (ret) {
   2880e:	4604      	mov	r4, r0
   28810:	2800      	cmp	r0, #0
   28812:	f040 80c4 	bne.w	2899e <adxl372_init+0x2da>
	return data->hw_tf->write_reg_mask(dev, ADXL372_MEASURE,
   28816:	692a      	ldr	r2, [r5, #16]
					   ADXL372_MEASURE_AUTOSLEEP_MODE(enable));
   28818:	7e33      	ldrb	r3, [r6, #24]
	return data->hw_tf->write_reg_mask(dev, ADXL372_MEASURE,
   2881a:	6892      	ldr	r2, [r2, #8]
					   ADXL372_MEASURE_AUTOSLEEP_MODE(enable));
   2881c:	019b      	lsls	r3, r3, #6
	return data->hw_tf->write_reg_mask(dev, ADXL372_MEASURE,
   2881e:	68d4      	ldr	r4, [r2, #12]
   28820:	213e      	movs	r1, #62	; 0x3e
   28822:	2240      	movs	r2, #64	; 0x40
   28824:	4628      	mov	r0, r5
   28826:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2882a:	47a0      	blx	r4
	if (ret) {
   2882c:	4604      	mov	r4, r0
   2882e:	2800      	cmp	r0, #0
   28830:	f040 80b5 	bne.w	2899e <adxl372_init+0x2da>
	return data->hw_tf->write_reg_mask(dev, ADXL372_POWER_CTL,
   28834:	692a      	ldr	r2, [r5, #16]
					   ADXL372_POWER_CTL_INSTANT_ON_TH_MODE(mode));
   28836:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
	return data->hw_tf->write_reg_mask(dev, ADXL372_POWER_CTL,
   2883a:	6892      	ldr	r2, [r2, #8]
					   ADXL372_POWER_CTL_INSTANT_ON_TH_MODE(mode));
   2883c:	015b      	lsls	r3, r3, #5
	return data->hw_tf->write_reg_mask(dev, ADXL372_POWER_CTL,
   2883e:	68d4      	ldr	r4, [r2, #12]
   28840:	213f      	movs	r1, #63	; 0x3f
   28842:	2220      	movs	r2, #32
   28844:	4628      	mov	r0, r5
   28846:	f003 0320 	and.w	r3, r3, #32
   2884a:	47a0      	blx	r4
	if (ret) {
   2884c:	4604      	mov	r4, r0
   2884e:	2800      	cmp	r0, #0
   28850:	f040 80a5 	bne.w	2899e <adxl372_init+0x2da>
	ret = adxl372_set_activity_threshold_xyz(dev, ADXL372_X_THRESH_ACT_H,
   28854:	2123      	movs	r1, #35	; 0x23
   28856:	4628      	mov	r0, r5
   28858:	f106 021a 	add.w	r2, r6, #26
   2885c:	f7ff ff0a 	bl	28674 <adxl372_set_activity_threshold_xyz>
	if (ret) {
   28860:	4604      	mov	r4, r0
   28862:	2800      	cmp	r0, #0
   28864:	f040 809b 	bne.w	2899e <adxl372_init+0x2da>
	ret = adxl372_set_activity_threshold_xyz(dev, ADXL372_X_THRESH_INACT_H,
   28868:	212a      	movs	r1, #42	; 0x2a
   2886a:	4628      	mov	r0, r5
   2886c:	f106 0222 	add.w	r2, r6, #34	; 0x22
   28870:	f7ff ff00 	bl	28674 <adxl372_set_activity_threshold_xyz>
	if (ret) {
   28874:	4604      	mov	r4, r0
   28876:	2800      	cmp	r0, #0
   28878:	f040 8091 	bne.w	2899e <adxl372_init+0x2da>
	return data->hw_tf->write_reg(dev, ADXL372_TIME_ACT, time);
   2887c:	692b      	ldr	r3, [r5, #16]
   2887e:	2129      	movs	r1, #41	; 0x29
   28880:	689b      	ldr	r3, [r3, #8]
   28882:	4628      	mov	r0, r5
   28884:	685b      	ldr	r3, [r3, #4]
   28886:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
   2888a:	4798      	blx	r3
	if (ret) {
   2888c:	4604      	mov	r4, r0
   2888e:	2800      	cmp	r0, #0
   28890:	f040 8085 	bne.w	2899e <adxl372_init+0x2da>
	struct adxl372_data *data = dev->data;
   28894:	692f      	ldr	r7, [r5, #16]
	ret = adxl372_set_inactivity_time(dev, cfg->inactivity_time);
   28896:	f8b6 902e 	ldrh.w	r9, [r6, #46]	; 0x2e
	ret = data->hw_tf->write_reg(dev, ADXL372_TIME_INACT_H, time >> 8);
   2889a:	68bb      	ldr	r3, [r7, #8]
   2889c:	2130      	movs	r1, #48	; 0x30
   2889e:	4628      	mov	r0, r5
   288a0:	685b      	ldr	r3, [r3, #4]
   288a2:	ea4f 2219 	mov.w	r2, r9, lsr #8
   288a6:	4798      	blx	r3
	if (ret) {
   288a8:	4604      	mov	r4, r0
   288aa:	2800      	cmp	r0, #0
   288ac:	d177      	bne.n	2899e <adxl372_init+0x2da>
	return data->hw_tf->write_reg(dev, ADXL372_TIME_INACT_L, time & 0xFF);
   288ae:	68bb      	ldr	r3, [r7, #8]
   288b0:	2131      	movs	r1, #49	; 0x31
   288b2:	4628      	mov	r0, r5
   288b4:	685b      	ldr	r3, [r3, #4]
   288b6:	fa5f f289 	uxtb.w	r2, r9
   288ba:	4798      	blx	r3
	if (ret) {
   288bc:	4604      	mov	r4, r0
   288be:	2800      	cmp	r0, #0
   288c0:	d16d      	bne.n	2899e <adxl372_init+0x2da>
	return data->hw_tf->write_reg_mask(dev, ADXL372_POWER_CTL,
   288c2:	692a      	ldr	r2, [r5, #16]
					   ADXL372_POWER_CTL_FIL_SETTLE_MODE(mode));
   288c4:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
	return data->hw_tf->write_reg_mask(dev, ADXL372_POWER_CTL,
   288c8:	6892      	ldr	r2, [r2, #8]
					   ADXL372_POWER_CTL_FIL_SETTLE_MODE(mode));
   288ca:	011b      	lsls	r3, r3, #4
	return data->hw_tf->write_reg_mask(dev, ADXL372_POWER_CTL,
   288cc:	68d4      	ldr	r4, [r2, #12]
   288ce:	213f      	movs	r1, #63	; 0x3f
   288d0:	2210      	movs	r2, #16
   288d2:	4628      	mov	r0, r5
   288d4:	f003 0310 	and.w	r3, r3, #16
   288d8:	47a0      	blx	r4
	if (ret) {
   288da:	4604      	mov	r4, r0
   288dc:	2800      	cmp	r0, #0
   288de:	d15e      	bne.n	2899e <adxl372_init+0x2da>
				     cfg->fifo_config.fifo_samples);
   288e0:	f8b6 9028 	ldrh.w	r9, [r6, #40]	; 0x28
	ret = adxl372_configure_fifo(dev, cfg->fifo_config.fifo_mode,
   288e4:	f896 a026 	ldrb.w	sl, [r6, #38]	; 0x26
	if (fifo_samples > 512) {
   288e8:	f5b9 7f00 	cmp.w	r9, #512	; 0x200
				     cfg->fifo_config.fifo_format,
   288ec:	f896 b027 	ldrb.w	fp, [r6, #39]	; 0x27
	struct adxl372_data *data = dev->data;
   288f0:	692f      	ldr	r7, [r5, #16]
	if (fifo_samples > 512) {
   288f2:	f63f af0e 	bhi.w	28712 <adxl372_init+0x4e>
	ret = adxl372_set_op_mode(dev, ADXL372_STANDBY);
   288f6:	4601      	mov	r1, r0
   288f8:	4628      	mov	r0, r5
   288fa:	f7ff fecc 	bl	28696 <adxl372_set_op_mode>
	if (ret) {
   288fe:	4604      	mov	r4, r0
   28900:	2800      	cmp	r0, #0
   28902:	d14c      	bne.n	2899e <adxl372_init+0x2da>
	fifo_config = (ADXL372_FIFO_CTL_FORMAT_MODE(format) |
   28904:	ea4f 02cb 	mov.w	r2, fp, lsl #3
		       ADXL372_FIFO_CTL_MODE_MODE(mode) |
   28908:	ea4f 034a 	mov.w	r3, sl, lsl #1
   2890c:	f003 0306 	and.w	r3, r3, #6
	fifo_config = (ADXL372_FIFO_CTL_FORMAT_MODE(format) |
   28910:	f002 0238 	and.w	r2, r2, #56	; 0x38
   28914:	431a      	orrs	r2, r3
	ret = data->hw_tf->write_reg(dev, ADXL372_FIFO_CTL, fifo_config);
   28916:	68bb      	ldr	r3, [r7, #8]
   28918:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   2891c:	bf88      	it	hi
   2891e:	f042 0201 	orrhi.w	r2, r2, #1
   28922:	213a      	movs	r1, #58	; 0x3a
   28924:	4628      	mov	r0, r5
   28926:	685b      	ldr	r3, [r3, #4]
   28928:	4798      	blx	r3
	if (ret) {
   2892a:	4604      	mov	r4, r0
   2892c:	2800      	cmp	r0, #0
   2892e:	d136      	bne.n	2899e <adxl372_init+0x2da>
	ret = data->hw_tf->write_reg(dev, ADXL372_FIFO_SAMPLES, fifo_samples & 0xFF);
   28930:	68bb      	ldr	r3, [r7, #8]
   28932:	2139      	movs	r1, #57	; 0x39
   28934:	4628      	mov	r0, r5
   28936:	685b      	ldr	r3, [r3, #4]
   28938:	fa5f f289 	uxtb.w	r2, r9
   2893c:	4798      	blx	r3
	if (ret) {
   2893e:	4604      	mov	r4, r0
   28940:	bb68      	cbnz	r0, 2899e <adxl372_init+0x2da>
	data->fifo_config.fifo_format = format;
   28942:	f887 b00d 	strb.w	fp, [r7, #13]
	data->fifo_config.fifo_mode = mode;
   28946:	f887 a00c 	strb.w	sl, [r7, #12]
	data->fifo_config.fifo_samples = fifo_samples;
   2894a:	f8a7 900e 	strh.w	r9, [r7, #14]
	struct adxl372_data *data = dev->data;
   2894e:	692f      	ldr	r7, [r5, #16]
	ret = data->hw_tf->write_reg(dev, ADXL372_INT1_MAP, int1);
   28950:	213b      	movs	r1, #59	; 0x3b
   28952:	68bb      	ldr	r3, [r7, #8]
   28954:	4628      	mov	r0, r5
   28956:	685b      	ldr	r3, [r3, #4]
   28958:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
	ret = adxl372_interrupt_config(dev, cfg->int1_config, cfg->int2_config);
   2895c:	f896 9032 	ldrb.w	r9, [r6, #50]	; 0x32
	ret = data->hw_tf->write_reg(dev, ADXL372_INT1_MAP, int1);
   28960:	4798      	blx	r3
	if (ret) {
   28962:	4604      	mov	r4, r0
   28964:	b9d8      	cbnz	r0, 2899e <adxl372_init+0x2da>
	return  data->hw_tf->write_reg(dev, ADXL372_INT2_MAP, int2);
   28966:	68bb      	ldr	r3, [r7, #8]
   28968:	464a      	mov	r2, r9
   2896a:	213c      	movs	r1, #60	; 0x3c
   2896c:	4628      	mov	r0, r5
   2896e:	685b      	ldr	r3, [r3, #4]
   28970:	4798      	blx	r3
	if (ret) {
   28972:	4604      	mov	r4, r0
   28974:	b998      	cbnz	r0, 2899e <adxl372_init+0x2da>
	ret = adxl372_set_op_mode(dev, cfg->op_mode);
   28976:	4628      	mov	r0, r5
   28978:	f896 102d 	ldrb.w	r1, [r6, #45]	; 0x2d
   2897c:	f7ff fe8b 	bl	28696 <adxl372_set_op_mode>
	if (ret) {
   28980:	4604      	mov	r4, r0
   28982:	b960      	cbnz	r0, 2899e <adxl372_init+0x2da>
	return data->hw_tf->write_reg_mask(dev, ADXL372_MEASURE,
   28984:	692a      	ldr	r2, [r5, #16]
					   ADXL372_MEASURE_LINKLOOP_MODE(mode));
   28986:	f898 3010 	ldrb.w	r3, [r8, #16]
	return data->hw_tf->write_reg_mask(dev, ADXL372_MEASURE,
   2898a:	6892      	ldr	r2, [r2, #8]
					   ADXL372_MEASURE_LINKLOOP_MODE(mode));
   2898c:	011b      	lsls	r3, r3, #4
	return data->hw_tf->write_reg_mask(dev, ADXL372_MEASURE,
   2898e:	68d4      	ldr	r4, [r2, #12]
   28990:	213e      	movs	r1, #62	; 0x3e
   28992:	2230      	movs	r2, #48	; 0x30
   28994:	4628      	mov	r0, r5
   28996:	f003 0330 	and.w	r3, r3, #48	; 0x30
   2899a:	47a0      	blx	r4
   2899c:	4604      	mov	r4, r0
	if (adxl372_probe(dev) < 0) {
   2899e:	2c00      	cmp	r4, #0
   289a0:	f6ff aeb7 	blt.w	28712 <adxl372_init+0x4e>
	return 0;
   289a4:	2000      	movs	r0, #0
   289a6:	e6b6      	b.n	28716 <adxl372_init+0x52>

000289a8 <adxl372_get_status>:
{
   289a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   289aa:	461c      	mov	r4, r3
		length++;
   289ac:	1e15      	subs	r5, r2, #0
{
   289ae:	460e      	mov	r6, r1
		length++;
   289b0:	bf0c      	ite	eq
   289b2:	2301      	moveq	r3, #1
   289b4:	2302      	movne	r3, #2
	struct adxl372_data *data = dev->data;
   289b6:	6901      	ldr	r1, [r0, #16]
	if (fifo_entries) {
   289b8:	b104      	cbz	r4, 289bc <adxl372_get_status+0x14>
		length += 2U;
   289ba:	3302      	adds	r3, #2
	ret = data->hw_tf->read_reg_multiple(dev, ADXL372_STATUS_1, buf, length);
   289bc:	688a      	ldr	r2, [r1, #8]
   289be:	2104      	movs	r1, #4
   289c0:	6817      	ldr	r7, [r2, #0]
   289c2:	aa01      	add	r2, sp, #4
   289c4:	47b8      	blx	r7
	*status1 = buf[0];
   289c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   289ca:	7033      	strb	r3, [r6, #0]
	if (status2) {
   289cc:	b115      	cbz	r5, 289d4 <adxl372_get_status+0x2c>
		*status2 = buf[1];
   289ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
   289d2:	702b      	strb	r3, [r5, #0]
	if (fifo_entries) {
   289d4:	b144      	cbz	r4, 289e8 <adxl372_get_status+0x40>
		*fifo_entries = ((buf[2] & 0x3) << 8) | buf[3];
   289d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   289da:	f89d 2007 	ldrb.w	r2, [sp, #7]
   289de:	021b      	lsls	r3, r3, #8
   289e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
   289e4:	4313      	orrs	r3, r2
   289e6:	8023      	strh	r3, [r4, #0]
}
   289e8:	b003      	add	sp, #12
   289ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000289ec <adxl372_sample_fetch>:
{
   289ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   289ee:	4604      	mov	r4, r0
	return adxl372_get_accel_data(dev, cfg->max_peak_detect_mode,
   289f0:	6843      	ldr	r3, [r0, #4]
	struct adxl372_data *data = dev->data;
   289f2:	6905      	ldr	r5, [r0, #16]
	return adxl372_get_accel_data(dev, cfg->max_peak_detect_mode,
   289f4:	7ddf      	ldrb	r7, [r3, #23]
{
   289f6:	b085      	sub	sp, #20
			adxl372_get_status(dev, &status1, NULL, NULL);
   289f8:	2300      	movs	r3, #0
   289fa:	4620      	mov	r0, r4
   289fc:	461a      	mov	r2, r3
   289fe:	f10d 0107 	add.w	r1, sp, #7
   28a02:	f7ff ffd1 	bl	289a8 <adxl372_get_status>
		} while (!(ADXL372_STATUS_1_DATA_RDY(status1)));
   28a06:	f89d 3007 	ldrb.w	r3, [sp, #7]
   28a0a:	07db      	lsls	r3, r3, #31
   28a0c:	d5f4      	bpl.n	289f8 <adxl372_sample_fetch+0xc>
	ret = data->hw_tf->read_reg_multiple(dev, maxpeak ? ADXL372_X_MAXPEAK_H :
   28a0e:	68ab      	ldr	r3, [r5, #8]
   28a10:	2f00      	cmp	r7, #0
   28a12:	681e      	ldr	r6, [r3, #0]
   28a14:	aa02      	add	r2, sp, #8
   28a16:	f04f 0306 	mov.w	r3, #6
   28a1a:	bf0c      	ite	eq
   28a1c:	2108      	moveq	r1, #8
   28a1e:	2115      	movne	r1, #21
   28a20:	4620      	mov	r0, r4
   28a22:	47b0      	blx	r6
	accel_data->x = (buf[0] << 8) | (buf[1] & 0xF0);
   28a24:	f89d 3009 	ldrb.w	r3, [sp, #9]
   28a28:	f89d 2008 	ldrb.w	r2, [sp, #8]
   28a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   28a30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   28a34:	802b      	strh	r3, [r5, #0]
	accel_data->y = (buf[2] << 8) | (buf[3] & 0xF0);
   28a36:	f89d 300b 	ldrb.w	r3, [sp, #11]
   28a3a:	f89d 200a 	ldrb.w	r2, [sp, #10]
   28a3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   28a42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   28a46:	806b      	strh	r3, [r5, #2]
	accel_data->z = (buf[4] << 8) | (buf[5] & 0xF0);
   28a48:	f89d 300d 	ldrb.w	r3, [sp, #13]
   28a4c:	f89d 200c 	ldrb.w	r2, [sp, #12]
   28a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   28a54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   28a58:	80ab      	strh	r3, [r5, #4]
}
   28a5a:	b005      	add	sp, #20
   28a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028a5e <adxl372_bus_access.isra.0>:
static int adxl372_bus_access(const struct device *dev, uint8_t reg,
   28a5e:	b570      	push	{r4, r5, r6, lr}
   28a60:	b08a      	sub	sp, #40	; 0x28
   28a62:	460c      	mov	r4, r1
	const struct spi_buf buf[2] = {
   28a64:	2501      	movs	r5, #1
static int adxl372_bus_access(const struct device *dev, uint8_t reg,
   28a66:	f88d 1007 	strb.w	r1, [sp, #7]
	const struct spi_buf buf[2] = {
   28a6a:	f10d 0107 	add.w	r1, sp, #7
   28a6e:	9106      	str	r1, [sp, #24]
	return spi_transceive(spec->bus, &spec->config, tx_bufs, rx_bufs);
   28a70:	4601      	mov	r1, r0
   28a72:	9309      	str	r3, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
   28a74:	ae06      	add	r6, sp, #24
	if (reg & ADXL372_READ) {
   28a76:	ea14 0305 	ands.w	r3, r4, r5
	const struct spi_buf buf[2] = {
   28a7a:	e9cd 5207 	strd	r5, r2, [sp, #28]
   28a7e:	f851 0b04 	ldr.w	r0, [r1], #4
   28a82:	f04f 0202 	mov.w	r2, #2
	struct spi_buf_set tx = {
   28a86:	9602      	str	r6, [sp, #8]
	if (reg & ADXL372_READ) {
   28a88:	d009      	beq.n	28a9e <adxl372_bus_access.isra.0+0x40>
		const struct spi_buf_set rx = {
   28a8a:	e9cd 6204 	strd	r6, r2, [sp, #16]
		tx.count = 1;
   28a8e:	9503      	str	r5, [sp, #12]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   28a90:	6883      	ldr	r3, [r0, #8]
   28a92:	681c      	ldr	r4, [r3, #0]
   28a94:	ab04      	add	r3, sp, #16
   28a96:	aa02      	add	r2, sp, #8
   28a98:	47a0      	blx	r4
}
   28a9a:	b00a      	add	sp, #40	; 0x28
   28a9c:	bd70      	pop	{r4, r5, r6, pc}
	tx.count = 2;
   28a9e:	9203      	str	r2, [sp, #12]
   28aa0:	6882      	ldr	r2, [r0, #8]
   28aa2:	6814      	ldr	r4, [r2, #0]
   28aa4:	e7f7      	b.n	28a96 <adxl372_bus_access.isra.0+0x38>

00028aa6 <adxl372_spi_reg_write>:
{
   28aa6:	b507      	push	{r0, r1, r2, lr}
	return adxl372_bus_access(dev, ADXL372_REG_WRITE(reg_addr),
   28aa8:	0049      	lsls	r1, r1, #1
{
   28aaa:	f88d 2007 	strb.w	r2, [sp, #7]
	return adxl372_bus_access(dev, ADXL372_REG_WRITE(reg_addr),
   28aae:	2301      	movs	r3, #1
   28ab0:	f10d 0207 	add.w	r2, sp, #7
   28ab4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   28ab8:	6840      	ldr	r0, [r0, #4]
   28aba:	f7ff ffd0 	bl	28a5e <adxl372_bus_access.isra.0>
}
   28abe:	b003      	add	sp, #12
   28ac0:	f85d fb04 	ldr.w	pc, [sp], #4

00028ac4 <adxl372_spi_reg_read_multiple>:
	return adxl372_bus_access(dev, ADXL372_REG_READ(reg_addr),
   28ac4:	0049      	lsls	r1, r1, #1
   28ac6:	f041 0101 	orr.w	r1, r1, #1
   28aca:	6840      	ldr	r0, [r0, #4]
   28acc:	b2c9      	uxtb	r1, r1
   28ace:	f7ff bfc6 	b.w	28a5e <adxl372_bus_access.isra.0>

00028ad2 <adxl372_spi_reg_read>:
	return adxl372_bus_access(dev, ADXL372_REG_READ(reg_addr), reg_data, 1);
   28ad2:	0049      	lsls	r1, r1, #1
   28ad4:	f041 0101 	orr.w	r1, r1, #1
   28ad8:	2301      	movs	r3, #1
   28ada:	6840      	ldr	r0, [r0, #4]
   28adc:	b2c9      	uxtb	r1, r1
   28ade:	f7ff bfbe 	b.w	28a5e <adxl372_bus_access.isra.0>

00028ae2 <adxl372_spi_reg_write_mask>:
{
   28ae2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28ae4:	4617      	mov	r7, r2
	ret = adxl372_spi_reg_read(dev, reg_addr, &tmp);
   28ae6:	f10d 0207 	add.w	r2, sp, #7
{
   28aea:	4605      	mov	r5, r0
   28aec:	460e      	mov	r6, r1
   28aee:	461c      	mov	r4, r3
	ret = adxl372_spi_reg_read(dev, reg_addr, &tmp);
   28af0:	f7ff ffef 	bl	28ad2 <adxl372_spi_reg_read>
	if (ret) {
   28af4:	b950      	cbnz	r0, 28b0c <adxl372_spi_reg_write_mask+0x2a>
	tmp &= ~mask;
   28af6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	return adxl372_spi_reg_write(dev, reg_addr, tmp);
   28afa:	4631      	mov	r1, r6
	tmp &= ~mask;
   28afc:	ea23 0207 	bic.w	r2, r3, r7
	tmp |= data;
   28b00:	4322      	orrs	r2, r4
	return adxl372_spi_reg_write(dev, reg_addr, tmp);
   28b02:	4628      	mov	r0, r5
	tmp |= data;
   28b04:	f88d 2007 	strb.w	r2, [sp, #7]
	return adxl372_spi_reg_write(dev, reg_addr, tmp);
   28b08:	f7ff ffcd 	bl	28aa6 <adxl372_spi_reg_write>
}
   28b0c:	b003      	add	sp, #12
   28b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028b10 <bme680_reg_read>:
{
   28b10:	b410      	push	{r4}
	return config->bus_io->read(dev, start, buf, size);
   28b12:	6844      	ldr	r4, [r0, #4]
   28b14:	68a4      	ldr	r4, [r4, #8]
   28b16:	6864      	ldr	r4, [r4, #4]
   28b18:	46a4      	mov	ip, r4
}
   28b1a:	bc10      	pop	{r4}
	return config->bus_io->read(dev, start, buf, size);
   28b1c:	4760      	bx	ip

00028b1e <bme680_reg_write>:
	return config->bus_io->write(dev, reg, val);
   28b1e:	6843      	ldr	r3, [r0, #4]
   28b20:	689b      	ldr	r3, [r3, #8]
   28b22:	689b      	ldr	r3, [r3, #8]
   28b24:	4718      	bx	r3

00028b26 <bme680_channel_get>:
			      enum sensor_channel chan,
			      struct sensor_value *val)
{
	struct bme680_data *data = dev->data;

	switch (chan) {
   28b26:	2910      	cmp	r1, #16
	struct bme680_data *data = dev->data;
   28b28:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
   28b2a:	d029      	beq.n	28b80 <bme680_channel_get+0x5a>
   28b2c:	d806      	bhi.n	28b3c <bme680_channel_get+0x16>
   28b2e:	290d      	cmp	r1, #13
   28b30:	d00a      	beq.n	28b48 <bme680_channel_get+0x22>
   28b32:	290e      	cmp	r1, #14
   28b34:	d018      	beq.n	28b68 <bme680_channel_get+0x42>
   28b36:	f06f 0015 	mvn.w	r0, #21
   28b3a:	4770      	bx	lr
   28b3c:	291d      	cmp	r1, #29
   28b3e:	d1fa      	bne.n	28b36 <bme680_channel_get+0x10>
	case SENSOR_CHAN_GAS_RES:
		/*
		 * data->calc_gas_resistance has a resolution of 1 ohm.
		 * So 100000 equals 100000 ohms.
		 */
		val->val1 = data->calc_gas_resistance;
   28b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   28b42:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
		break;
   28b44:	2300      	movs	r3, #0
   28b46:	e00c      	b.n	28b62 <bme680_channel_get+0x3c>
		val->val1 = data->calc_temp / 100;
   28b48:	2164      	movs	r1, #100	; 0x64
   28b4a:	6a98      	ldr	r0, [r3, #40]	; 0x28
   28b4c:	fb90 f0f1 	sdiv	r0, r0, r1
   28b50:	6010      	str	r0, [r2, #0]
		val->val2 = data->calc_temp % 100 * 10000;
   28b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28b54:	fb93 f0f1 	sdiv	r0, r3, r1
   28b58:	fb01 3310 	mls	r3, r1, r0, r3
   28b5c:	f242 7110 	movw	r1, #10000	; 0x2710
   28b60:	434b      	muls	r3, r1
	default:
		return -EINVAL;
	}

	return 0;
   28b62:	2000      	movs	r0, #0
		val->val2 = data->calc_temp % 100 * 10000;
   28b64:	6053      	str	r3, [r2, #4]
}
   28b66:	4770      	bx	lr
		val->val1 = data->calc_press / 1000;
   28b68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   28b6c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   28b6e:	fbb0 f0f1 	udiv	r0, r0, r1
   28b72:	6010      	str	r0, [r2, #0]
		val->val2 = (data->calc_press % 1000) * 1000;
   28b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		val->val2 = (data->calc_humidity % 1000) * 1000;
   28b76:	fbb3 f0f1 	udiv	r0, r3, r1
   28b7a:	fb01 3310 	mls	r3, r1, r0, r3
   28b7e:	e7ef      	b.n	28b60 <bme680_channel_get+0x3a>
		val->val1 = data->calc_humidity / 1000;
   28b80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   28b84:	6b18      	ldr	r0, [r3, #48]	; 0x30
   28b86:	fbb0 f0f1 	udiv	r0, r0, r1
   28b8a:	6010      	str	r0, [r2, #0]
		val->val2 = (data->calc_humidity % 1000) * 1000;
   28b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   28b8e:	e7f2      	b.n	28b76 <bme680_channel_get+0x50>

00028b90 <bme680_init>:

	return 0;
}

static int bme680_init(const struct device *dev)
{
   28b90:	b570      	push	{r4, r5, r6, lr}
   28b92:	4604      	mov	r4, r0
	struct bme680_data *data = dev->data;
   28b94:	6905      	ldr	r5, [r0, #16]
	int err;

	err = bme680_bus_check(dev);
   28b96:	6840      	ldr	r0, [r0, #4]
{
   28b98:	b08c      	sub	sp, #48	; 0x30
	return config->bus_io->check(&config->bus);
   28b9a:	6883      	ldr	r3, [r0, #8]
   28b9c:	681b      	ldr	r3, [r3, #0]
   28b9e:	4798      	blx	r3
	if (err < 0) {
   28ba0:	2800      	cmp	r0, #0
   28ba2:	f2c0 80ec 	blt.w	28d7e <bme680_init+0x1ee>

		data->mem_page = (mem_page & BME680_SPI_MEM_PAGE_MSK) >> BME680_SPI_MEM_PAGE_POS;
	}
#endif

	err = bme680_reg_read(dev, BME680_REG_CHIP_ID, &data->chip_id, 1);
   28ba6:	2301      	movs	r3, #1
   28ba8:	21d0      	movs	r1, #208	; 0xd0
   28baa:	4620      	mov	r0, r4
   28bac:	f105 0240 	add.w	r2, r5, #64	; 0x40
   28bb0:	f7ff ffae 	bl	28b10 <bme680_reg_read>
	if (err < 0) {
   28bb4:	2800      	cmp	r0, #0
   28bb6:	f2c0 80e2 	blt.w	28d7e <bme680_init+0x1ee>
		return err;
	}

	if (data->chip_id == BME680_CHIP_ID) {
   28bba:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   28bbe:	2b61      	cmp	r3, #97	; 0x61
   28bc0:	f040 80db 	bne.w	28d7a <bme680_init+0x1ea>
	err = bme680_reg_read(dev, BME680_REG_COEFF1, buff, BME680_LEN_COEFF1);
   28bc4:	2317      	movs	r3, #23
   28bc6:	218a      	movs	r1, #138	; 0x8a
   28bc8:	4620      	mov	r0, r4
   28bca:	aa01      	add	r2, sp, #4
	struct bme680_data *data = dev->data;
   28bcc:	6926      	ldr	r6, [r4, #16]
	err = bme680_reg_read(dev, BME680_REG_COEFF1, buff, BME680_LEN_COEFF1);
   28bce:	f7ff ff9f 	bl	28b10 <bme680_reg_read>
	if (err < 0) {
   28bd2:	2800      	cmp	r0, #0
   28bd4:	f2c0 80d3 	blt.w	28d7e <bme680_init+0x1ee>
	err = bme680_reg_read(dev, BME680_REG_COEFF2, &buff[BME680_LEN_COEFF1],
   28bd8:	230e      	movs	r3, #14
   28bda:	21e1      	movs	r1, #225	; 0xe1
   28bdc:	4620      	mov	r0, r4
   28bde:	f10d 021b 	add.w	r2, sp, #27
   28be2:	f7ff ff95 	bl	28b10 <bme680_reg_read>
	if (err < 0) {
   28be6:	2800      	cmp	r0, #0
   28be8:	f2c0 80c9 	blt.w	28d7e <bme680_init+0x1ee>
	err = bme680_reg_read(dev, BME680_REG_COEFF3,
   28bec:	2305      	movs	r3, #5
   28bee:	2100      	movs	r1, #0
   28bf0:	4620      	mov	r0, r4
   28bf2:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   28bf6:	f7ff ff8b 	bl	28b10 <bme680_reg_read>
	if (err < 0) {
   28bfa:	2800      	cmp	r0, #0
   28bfc:	f2c0 80bf 	blt.w	28d7e <bme680_init+0x1ee>
	data->par_t1 = (uint16_t)(BME680_CONCAT_BYTES(buff[32], buff[31]));
   28c00:	f8bd 3023 	ldrh.w	r3, [sp, #35]	; 0x23
	err = bme680_read_compensation(dev);
	if (err < 0) {
		return err;
	}

	err = bme680_reg_write(dev, BME680_REG_CTRL_HUM, BME680_HUMIDITY_OVER);
   28c04:	2172      	movs	r1, #114	; 0x72
	data->par_t1 = (uint16_t)(BME680_CONCAT_BYTES(buff[32], buff[31]));
   28c06:	81f3      	strh	r3, [r6, #14]
	data->par_t2 = (int16_t)(BME680_CONCAT_BYTES(buff[1], buff[0]));
   28c08:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	err = bme680_reg_write(dev, BME680_REG_CTRL_HUM, BME680_HUMIDITY_OVER);
   28c0c:	4620      	mov	r0, r4
	data->par_t2 = (int16_t)(BME680_CONCAT_BYTES(buff[1], buff[0]));
   28c0e:	8233      	strh	r3, [r6, #16]
	data->par_t3 = (uint8_t)(buff[2]);
   28c10:	f89d 3006 	ldrb.w	r3, [sp, #6]
   28c14:	74b3      	strb	r3, [r6, #18]
	data->par_p1 = (uint16_t)(BME680_CONCAT_BYTES(buff[5], buff[4]));
   28c16:	9b02      	ldr	r3, [sp, #8]
   28c18:	6173      	str	r3, [r6, #20]
	data->par_p3 = (int8_t)buff[8];
   28c1a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   28c1e:	7633      	strb	r3, [r6, #24]
	data->par_p4 = (int16_t)(BME680_CONCAT_BYTES(buff[11], buff[10]));
   28c20:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	data->par_h1 = (uint16_t)(((uint16_t)buff[25] << 4) | (buff[24] & 0x0f));
   28c24:	f89d 201d 	ldrb.w	r2, [sp, #29]
	data->par_p4 = (int16_t)(BME680_CONCAT_BYTES(buff[11], buff[10]));
   28c28:	8373      	strh	r3, [r6, #26]
	data->par_p5 = (int16_t)(BME680_CONCAT_BYTES(buff[13], buff[12]));
   28c2a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   28c2e:	83b3      	strh	r3, [r6, #28]
	data->par_p6 = (int8_t)(buff[15]);
   28c30:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   28c34:	ba5b      	rev16	r3, r3
   28c36:	83f3      	strh	r3, [r6, #30]
	data->par_p8 = (int16_t)(BME680_CONCAT_BYTES(buff[19], buff[18]));
   28c38:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   28c3c:	8433      	strh	r3, [r6, #32]
	data->par_p9 = (int16_t)(BME680_CONCAT_BYTES(buff[21], buff[20]));
   28c3e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   28c42:	8473      	strh	r3, [r6, #34]	; 0x22
	data->par_p10 = (uint8_t)(buff[22]);
   28c44:	f89d 301a 	ldrb.w	r3, [sp, #26]
   28c48:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
	data->par_h1 = (uint16_t)(((uint16_t)buff[25] << 4) | (buff[24] & 0x0f));
   28c4c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   28c50:	f003 030f 	and.w	r3, r3, #15
   28c54:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   28c58:	8033      	strh	r3, [r6, #0]
	data->par_h2 = (uint16_t)(((uint16_t)buff[23] << 4) | ((buff[24]) >> 4));
   28c5a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   28c5e:	f89d 201b 	ldrb.w	r2, [sp, #27]
   28c62:	091b      	lsrs	r3, r3, #4
   28c64:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   28c68:	8073      	strh	r3, [r6, #2]
	data->par_h3 = (int8_t)buff[26];
   28c6a:	f89d 301e 	ldrb.w	r3, [sp, #30]
	err = bme680_reg_write(dev, BME680_REG_CTRL_HUM, BME680_HUMIDITY_OVER);
   28c6e:	2201      	movs	r2, #1
	data->par_h3 = (int8_t)buff[26];
   28c70:	7133      	strb	r3, [r6, #4]
	data->par_h4 = (int8_t)buff[27];
   28c72:	f89d 301f 	ldrb.w	r3, [sp, #31]
   28c76:	7173      	strb	r3, [r6, #5]
	data->par_h5 = (int8_t)buff[28];
   28c78:	f89d 3020 	ldrb.w	r3, [sp, #32]
   28c7c:	71b3      	strb	r3, [r6, #6]
	data->par_h6 = (uint8_t)buff[29];
   28c7e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   28c82:	71f3      	strb	r3, [r6, #7]
	data->par_h7 = (int8_t)buff[30];
   28c84:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   28c88:	7233      	strb	r3, [r6, #8]
	data->par_gh1 = (int8_t)buff[35];
   28c8a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   28c8e:	7273      	strb	r3, [r6, #9]
	data->par_gh2 = (int16_t)(BME680_CONCAT_BYTES(buff[34], buff[33]));
   28c90:	f8bd 3025 	ldrh.w	r3, [sp, #37]	; 0x25
   28c94:	8173      	strh	r3, [r6, #10]
	data->par_gh3 = (int8_t)buff[36];
   28c96:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   28c9a:	7333      	strb	r3, [r6, #12]
	data->res_heat_val = (int8_t)buff[37];
   28c9c:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   28ca0:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26
	data->res_heat_range = ((buff[39] & BME680_MSK_RH_RANGE) >> 4);
   28ca4:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   28ca8:	f3c3 1301 	ubfx	r3, r3, #4, #2
   28cac:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
	data->range_sw_err = ((int8_t)(buff[41] & BME680_MSK_RANGE_SW_ERR)) / 16;
   28cb0:	f99d 302d 	ldrsb.w	r3, [sp, #45]	; 0x2d
   28cb4:	111b      	asrs	r3, r3, #4
   28cb6:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
	err = bme680_reg_write(dev, BME680_REG_CTRL_HUM, BME680_HUMIDITY_OVER);
   28cba:	f7ff ff30 	bl	28b1e <bme680_reg_write>
	if (err < 0) {
   28cbe:	2800      	cmp	r0, #0
   28cc0:	db5d      	blt.n	28d7e <bme680_init+0x1ee>
		return err;
	}

	err = bme680_reg_write(dev, BME680_REG_CONFIG, BME680_CONFIG_VAL);
   28cc2:	2200      	movs	r2, #0
   28cc4:	2175      	movs	r1, #117	; 0x75
   28cc6:	4620      	mov	r0, r4
   28cc8:	f7ff ff29 	bl	28b1e <bme680_reg_write>
	if (err < 0) {
   28ccc:	2800      	cmp	r0, #0
   28cce:	db56      	blt.n	28d7e <bme680_init+0x1ee>
		return err;
	}

	err = bme680_reg_write(dev, BME680_REG_CTRL_GAS_1,
   28cd0:	2210      	movs	r2, #16
   28cd2:	2171      	movs	r1, #113	; 0x71
   28cd4:	4620      	mov	r0, r4
   28cd6:	f7ff ff22 	bl	28b1e <bme680_reg_write>
			       BME680_CTRL_GAS_1_VAL);
	if (err < 0) {
   28cda:	2800      	cmp	r0, #0
   28cdc:	db4f      	blt.n	28d7e <bme680_init+0x1ee>
					   * heatr_temp * 5) / 100)
   28cde:	f44f 72a0 	mov.w	r2, #320	; 0x140
	var2 = (data->par_gh1 + 784) * (((((data->par_gh2 + 154009)
   28ce2:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
		return err;
	}

	err = bme680_reg_write(dev, BME680_REG_RES_HEAT0,
   28ce6:	4620      	mov	r0, r4
	var2 = (data->par_gh1 + 784) * (((((data->par_gh2 + 154009)
   28ce8:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
   28cec:	f203 1399 	addw	r3, r3, #409	; 0x199
					   * heatr_temp * 5) / 100)
   28cf0:	fb02 f103 	mul.w	r1, r2, r3
   28cf4:	2314      	movs	r3, #20
   28cf6:	fbb1 f1f3 	udiv	r1, r1, r3
					 + 3276800) / 10);
   28cfa:	230a      	movs	r3, #10
   28cfc:	f501 1148 	add.w	r1, r1, #3276800	; 0x320000
   28d00:	fbb1 f1f3 	udiv	r1, r1, r3
	var2 = (data->par_gh1 + 784) * (((((data->par_gh2 + 154009)
   28d04:	f995 3009 	ldrsb.w	r3, [r5, #9]
   28d08:	f503 7344 	add.w	r3, r3, #784	; 0x310
   28d0c:	4359      	muls	r1, r3
	var1 = ((amb_temp * data->par_gh3) / 1000) * 256;
   28d0e:	f995 300c 	ldrsb.w	r3, [r5, #12]
   28d12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   28d16:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   28d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   28d1e:	fb92 f2f3 	sdiv	r2, r2, r3
   28d22:	0212      	lsls	r2, r2, #8
	var3 = var1 + (var2 / 2);
   28d24:	eb02 0261 	add.w	r2, r2, r1, asr #1
	var5 = (131 * data->res_heat_val) + 65536;
   28d28:	2183      	movs	r1, #131	; 0x83
	var4 = (var3 / (data->res_heat_range + 4));
   28d2a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   28d2e:	3304      	adds	r3, #4
   28d30:	fbb2 f2f3 	udiv	r2, r2, r3
	var5 = (131 * data->res_heat_val) + 65536;
   28d34:	f995 3026 	ldrsb.w	r3, [r5, #38]	; 0x26
   28d38:	434b      	muls	r3, r1
   28d3a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	heatr_res_x100 = ((var4 / var5) - 250) * 34;
   28d3e:	fbb2 f2f3 	udiv	r2, r2, r3
   28d42:	2322      	movs	r3, #34	; 0x22
   28d44:	3afa      	subs	r2, #250	; 0xfa
   28d46:	435a      	muls	r2, r3
	heatr_res = (heatr_res_x100 + 50) / 100;
   28d48:	2364      	movs	r3, #100	; 0x64
   28d4a:	3232      	adds	r2, #50	; 0x32
   28d4c:	fb92 f2f3 	sdiv	r2, r2, r3
	err = bme680_reg_write(dev, BME680_REG_RES_HEAT0,
   28d50:	215a      	movs	r1, #90	; 0x5a
   28d52:	b2d2      	uxtb	r2, r2
   28d54:	f7ff fee3 	bl	28b1e <bme680_reg_write>
			       bme680_calc_res_heat(data, BME680_HEATR_TEMP));
	if (err < 0) {
   28d58:	2800      	cmp	r0, #0
   28d5a:	db10      	blt.n	28d7e <bme680_init+0x1ee>
		return err;
	}

	err = bme680_reg_write(dev, BME680_REG_GAS_WAIT0,
   28d5c:	2271      	movs	r2, #113	; 0x71
   28d5e:	2164      	movs	r1, #100	; 0x64
   28d60:	4620      	mov	r0, r4
   28d62:	f7ff fedc 	bl	28b1e <bme680_reg_write>
			       bme680_calc_gas_wait(BME680_HEATR_DUR_MS));
	if (err < 0) {
   28d66:	2800      	cmp	r0, #0
   28d68:	db09      	blt.n	28d7e <bme680_init+0x1ee>
		return err;
	}

	err = bme680_reg_write(dev, BME680_REG_CTRL_MEAS,
   28d6a:	2255      	movs	r2, #85	; 0x55
   28d6c:	2174      	movs	r1, #116	; 0x74
   28d6e:	4620      	mov	r0, r4
			       BME680_CTRL_MEAS_VAL);

	return err;
}
   28d70:	b00c      	add	sp, #48	; 0x30
   28d72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = bme680_reg_write(dev, BME680_REG_CTRL_MEAS,
   28d76:	f7ff bed2 	b.w	28b1e <bme680_reg_write>
		return -ENOTSUP;
   28d7a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   28d7e:	b00c      	add	sp, #48	; 0x30
   28d80:	bd70      	pop	{r4, r5, r6, pc}

00028d82 <bme680_bus_check_i2c>:

#include "bme680.h"

#if BME680_BUS_I2C
static int bme680_bus_check_i2c(const union bme680_bus *bus)
{
   28d82:	b508      	push	{r3, lr}
	return device_is_ready(bus->i2c.bus) ? 0 : -ENODEV;
   28d84:	6800      	ldr	r0, [r0, #0]
   28d86:	f001 fdb7 	bl	2a8f8 <z_device_is_ready>
   28d8a:	2800      	cmp	r0, #0
}
   28d8c:	bf0c      	ite	eq
   28d8e:	f06f 0012 	mvneq.w	r0, #18
   28d92:	2000      	movne	r0, #0
   28d94:	bd08      	pop	{r3, pc}

00028d96 <bme680_reg_read_i2c>:

static int bme680_reg_read_i2c(const struct device *dev,
			       uint8_t start, uint8_t *buf, int size)
{
   28d96:	b530      	push	{r4, r5, lr}
   28d98:	b089      	sub	sp, #36	; 0x24
	const struct bme680_config *config = dev->config;
   28d9a:	6844      	ldr	r4, [r0, #4]

	return i2c_burst_read_dt(&config->bus.i2c, start, buf, size);
   28d9c:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   28da0:	f10d 0107 	add.w	r1, sp, #7
	return i2c_burst_read(spec->bus, spec->addr,
   28da4:	6820      	ldr	r0, [r4, #0]
{
   28da6:	461d      	mov	r5, r3
	msg[0].buf = (uint8_t *)write_buf;
   28da8:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   28daa:	2101      	movs	r1, #1
	return i2c_burst_read(spec->bus, spec->addr,
   28dac:	88a3      	ldrh	r3, [r4, #4]
	msg[1].len = num_read;
   28dae:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].len = num_write;
   28db2:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   28db4:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   28db6:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   28db8:	f88d 201c 	strb.w	r2, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
   28dbc:	f88d 1010 	strb.w	r1, [sp, #16]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   28dc0:	6882      	ldr	r2, [r0, #8]
   28dc2:	a902      	add	r1, sp, #8
   28dc4:	6894      	ldr	r4, [r2, #8]
   28dc6:	2202      	movs	r2, #2
   28dc8:	47a0      	blx	r4
}
   28dca:	b009      	add	sp, #36	; 0x24
   28dcc:	bd30      	pop	{r4, r5, pc}

00028dce <bme680_reg_write_i2c>:

static int bme680_reg_write_i2c(const struct device *dev,
				uint8_t reg, uint8_t val)
{
   28dce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t tx_buf[2] = {reg_addr, value};
   28dd0:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
   28dd4:	2202      	movs	r2, #2
	const struct bme680_config *config = dev->config;
   28dd6:	6843      	ldr	r3, [r0, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
   28dd8:	f88d 1000 	strb.w	r1, [sp]
 * @return a value from i2c_reg_write_byte()
 */
static inline int i2c_reg_write_byte_dt(const struct i2c_dt_spec *spec,
					uint8_t reg_addr, uint8_t value)
{
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   28ddc:	6818      	ldr	r0, [r3, #0]
   28dde:	889b      	ldrh	r3, [r3, #4]
	msg.buf = (uint8_t *)buf;
   28de0:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
   28de4:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   28de6:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   28dea:	6882      	ldr	r2, [r0, #8]
   28dec:	a901      	add	r1, sp, #4
   28dee:	6894      	ldr	r4, [r2, #8]
   28df0:	2201      	movs	r2, #1
   28df2:	47a0      	blx	r4

	return i2c_reg_write_byte_dt(&config->bus.i2c, reg, val);
}
   28df4:	b004      	add	sp, #16
   28df6:	bd10      	pop	{r4, pc}

00028df8 <uarte_nrfx_config_get>:
{
   28df8:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   28dfa:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   28dfc:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   28e00:	e883 0003 	stmia.w	r3, {r0, r1}
}
   28e04:	2000      	movs	r0, #0
   28e06:	4770      	bx	lr

00028e08 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   28e08:	6843      	ldr	r3, [r0, #4]
   28e0a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   28e0c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   28e10:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   28e14:	4770      	bx	lr

00028e16 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   28e16:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   28e18:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   28e1a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28e1c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   28e20:	b150      	cbz	r0, 28e38 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28e22:	2000      	movs	r0, #0
	*c = *data->rx_data;
   28e24:	6952      	ldr	r2, [r2, #20]
   28e26:	7812      	ldrb	r2, [r2, #0]
   28e28:	700a      	strb	r2, [r1, #0]
   28e2a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   28e2e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28e32:	2201      	movs	r2, #1
   28e34:	601a      	str	r2, [r3, #0]
	return 0;
   28e36:	4770      	bx	lr
		return -1;
   28e38:	f04f 30ff 	mov.w	r0, #4294967295
}
   28e3c:	4770      	bx	lr

00028e3e <is_tx_ready.isra.0>:
	return config->uarte_regs;
   28e3e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   28e40:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28e42:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   28e46:	b940      	cbnz	r0, 28e5a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   28e48:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   28e4a:	079b      	lsls	r3, r3, #30
   28e4c:	d406      	bmi.n	28e5c <is_tx_ready.isra.0+0x1e>
   28e4e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   28e52:	3800      	subs	r0, #0
   28e54:	bf18      	it	ne
   28e56:	2001      	movne	r0, #1
   28e58:	4770      	bx	lr
   28e5a:	2001      	movs	r0, #1
}
   28e5c:	4770      	bx	lr

00028e5e <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   28e5e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   28e60:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   28e62:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   28e66:	05c9      	lsls	r1, r1, #23
   28e68:	d518      	bpl.n	28e9c <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28e6a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   28e6e:	b1a9      	cbz	r1, 28e9c <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   28e70:	f04f 0020 	mov.w	r0, #32
   28e74:	f3ef 8111 	mrs	r1, BASEPRI
   28e78:	f380 8812 	msr	BASEPRI_MAX, r0
   28e7c:	f3bf 8f6f 	isb	sy
   28e80:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   28e84:	b130      	cbz	r0, 28e94 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28e86:	2000      	movs	r0, #0
   28e88:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   28e8c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28e90:	2001      	movs	r0, #1
   28e92:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   28e94:	f381 8811 	msr	BASEPRI, r1
   28e98:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   28e9c:	6852      	ldr	r2, [r2, #4]
   28e9e:	06d2      	lsls	r2, r2, #27
   28ea0:	d515      	bpl.n	28ece <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   28ea2:	f04f 0120 	mov.w	r1, #32
   28ea6:	f3ef 8211 	mrs	r2, BASEPRI
   28eaa:	f381 8812 	msr	BASEPRI_MAX, r1
   28eae:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28eb2:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   28eb6:	b111      	cbz	r1, 28ebe <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   28eb8:	2100      	movs	r1, #0
   28eba:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   28ebe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   28ec2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   28ec6:	f382 8811 	msr	BASEPRI, r2
   28eca:	f3bf 8f6f 	isb	sy
}
   28ece:	4770      	bx	lr

00028ed0 <irq_connect3>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
   28ed0:	2200      	movs	r2, #0
   28ed2:	2101      	movs	r1, #1
   28ed4:	200b      	movs	r0, #11
   28ed6:	f7f2 b86d 	b.w	1afb4 <z_arm_irq_priority_set>

00028eda <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   28eda:	b510      	push	{r4, lr}
	while (*count) {
   28edc:	680b      	ldr	r3, [r1, #0]
   28ede:	b913      	cbnz	r3, 28ee6 <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   28ee0:	4618      	mov	r0, r3
	*buf_len = 0;
   28ee2:	6013      	str	r3, [r2, #0]
	return NULL;
   28ee4:	e005      	b.n	28ef2 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   28ee6:	6803      	ldr	r3, [r0, #0]
   28ee8:	685c      	ldr	r4, [r3, #4]
   28eea:	b11c      	cbz	r4, 28ef4 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   28eec:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   28eee:	6803      	ldr	r3, [r0, #0]
   28ef0:	6818      	ldr	r0, [r3, #0]
}
   28ef2:	bd10      	pop	{r4, pc}
		++(*current);
   28ef4:	3308      	adds	r3, #8
   28ef6:	6003      	str	r3, [r0, #0]
		--(*count);
   28ef8:	680b      	ldr	r3, [r1, #0]
   28efa:	3b01      	subs	r3, #1
   28efc:	600b      	str	r3, [r1, #0]
   28efe:	e7ed      	b.n	28edc <spi_context_get_next_buf.constprop.0+0x2>

00028f00 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   28f00:	4603      	mov	r3, r0
   28f02:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   28f04:	7919      	ldrb	r1, [r3, #4]
   28f06:	2301      	movs	r3, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
   28f08:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   28f0a:	fa03 f101 	lsl.w	r1, r3, r1
   28f0e:	6903      	ldr	r3, [r0, #16]
   28f10:	681b      	ldr	r3, [r3, #0]
   28f12:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   28f14:	bf18      	it	ne
   28f16:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   28f1a:	b112      	cbz	r2, 28f22 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   28f1c:	6883      	ldr	r3, [r0, #8]
   28f1e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   28f20:	4718      	bx	r3
   28f22:	6883      	ldr	r3, [r0, #8]
   28f24:	691b      	ldr	r3, [r3, #16]
   28f26:	e7fb      	b.n	28f20 <gpio_pin_set_dt.isra.0+0x20>

00028f28 <_spi_context_cs_control>:
{
   28f28:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   28f2a:	6803      	ldr	r3, [r0, #0]
{
   28f2c:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   28f2e:	b1e3      	cbz	r3, 28f6a <_spi_context_cs_control+0x42>
   28f30:	6898      	ldr	r0, [r3, #8]
   28f32:	b1d0      	cbz	r0, 28f6a <_spi_context_cs_control+0x42>
   28f34:	6805      	ldr	r5, [r0, #0]
   28f36:	b1c5      	cbz	r5, 28f6a <_spi_context_cs_control+0x42>
		if (on) {
   28f38:	b149      	cbz	r1, 28f4e <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   28f3a:	2101      	movs	r1, #1
   28f3c:	f7ff ffe0 	bl	28f00 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   28f40:	6823      	ldr	r3, [r4, #0]
   28f42:	689b      	ldr	r3, [r3, #8]
   28f44:	6898      	ldr	r0, [r3, #8]
}
   28f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   28f4a:	f001 bf82 	b.w	2ae52 <z_impl_k_busy_wait>
			if (!force_off &&
   28f4e:	b912      	cbnz	r2, 28f56 <_spi_context_cs_control+0x2e>
   28f50:	889b      	ldrh	r3, [r3, #4]
   28f52:	04db      	lsls	r3, r3, #19
   28f54:	d409      	bmi.n	28f6a <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   28f56:	6880      	ldr	r0, [r0, #8]
   28f58:	f001 ff7b 	bl	2ae52 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   28f5c:	6823      	ldr	r3, [r4, #0]
   28f5e:	2100      	movs	r1, #0
   28f60:	6898      	ldr	r0, [r3, #8]
}
   28f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   28f66:	f7ff bfcb 	b.w	28f00 <gpio_pin_set_dt.isra.0>
}
   28f6a:	bd38      	pop	{r3, r4, r5, pc}

00028f6c <spi_context_unlock_unconditionally>:
{
   28f6c:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   28f6e:	2201      	movs	r2, #1
   28f70:	2100      	movs	r1, #0
{
   28f72:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   28f74:	f7ff ffd8 	bl	28f28 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   28f78:	69a3      	ldr	r3, [r4, #24]
   28f7a:	b933      	cbnz	r3, 28f8a <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   28f7c:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   28f7e:	f104 0010 	add.w	r0, r4, #16
}
   28f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28f86:	f7fb bcf5 	b.w	24974 <z_impl_k_sem_give>
   28f8a:	bd10      	pop	{r4, pc}

00028f8c <spi_nrfx_release>:
{
   28f8c:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   28f8e:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   28f90:	6803      	ldr	r3, [r0, #0]
   28f92:	428b      	cmp	r3, r1
   28f94:	d106      	bne.n	28fa4 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   28f96:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   28f9a:	b934      	cbnz	r4, 28faa <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   28f9c:	f7ff ffe6 	bl	28f6c <spi_context_unlock_unconditionally>
	return 0;
   28fa0:	4620      	mov	r0, r4
}
   28fa2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   28fa4:	f06f 0015 	mvn.w	r0, #21
   28fa8:	e7fb      	b.n	28fa2 <spi_nrfx_release+0x16>
		return -EBUSY;
   28faa:	f06f 000f 	mvn.w	r0, #15
   28fae:	e7f8      	b.n	28fa2 <spi_nrfx_release+0x16>

00028fb0 <spi_nrfx_init>:
{
   28fb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   28fb4:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   28fb6:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   28fb8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	ret = pinctrl_lookup_state(config, id, &state);
   28fba:	2100      	movs	r1, #0
   28fbc:	4630      	mov	r0, r6
   28fbe:	aa01      	add	r2, sp, #4
   28fc0:	f7ff f9b6 	bl	28330 <pinctrl_lookup_state>
	if (ret < 0) {
   28fc4:	2800      	cmp	r0, #0
   28fc6:	db43      	blt.n	29050 <spi_nrfx_init+0xa0>
	return pinctrl_apply_state_direct(config, state);
   28fc8:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   28fca:	6832      	ldr	r2, [r6, #0]
   28fcc:	7919      	ldrb	r1, [r3, #4]
   28fce:	6818      	ldr	r0, [r3, #0]
   28fd0:	f7f4 fe08 	bl	1dbe4 <pinctrl_configure_pins>
	if (err < 0) {
   28fd4:	2800      	cmp	r0, #0
   28fd6:	db3b      	blt.n	29050 <spi_nrfx_init+0xa0>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   28fd8:	2601      	movs	r6, #1
	dev_config->irq_connect();
   28fda:	6a23      	ldr	r3, [r4, #32]
   28fdc:	4798      	blx	r3
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   28fde:	68ac      	ldr	r4, [r5, #8]
   28fe0:	3408      	adds	r4, #8
   28fe2:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   28fe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   28fea:	f1a4 0208 	sub.w	r2, r4, #8
   28fee:	4293      	cmp	r3, r2
   28ff0:	d804      	bhi.n	28ffc <spi_nrfx_init+0x4c>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   28ff2:	4628      	mov	r0, r5
   28ff4:	f7ff ffba 	bl	28f6c <spi_context_unlock_unconditionally>
	return 0;
   28ff8:	2000      	movs	r0, #0
	return 0;
   28ffa:	e029      	b.n	29050 <spi_nrfx_init+0xa0>
		if (!device_is_ready(cs_gpio->port)) {
   28ffc:	f854 0c08 	ldr.w	r0, [r4, #-8]
   29000:	f001 fc7a 	bl	2a8f8 <z_device_is_ready>
   29004:	b338      	cbz	r0, 29056 <spi_nrfx_init+0xa6>
	return gpio_pin_configure(spec->port,
   29006:	f854 0c08 	ldr.w	r0, [r4, #-8]
				  spec->pin,
   2900a:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
   2900e:	f834 3c02 	ldrh.w	r3, [r4, #-2]
	struct gpio_driver_data *data =
   29012:	f8d0 c010 	ldr.w	ip, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   29016:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   29018:	f8dc 7000 	ldr.w	r7, [ip]
	return gpio_pin_configure(spec->port,
   2901c:	bf54      	ite	pl
   2901e:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   29022:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   29026:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2902a:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2902e:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
   29030:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   29034:	bf4c      	ite	mi
   29036:	ea4e 0707 	orrmi.w	r7, lr, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2903a:	ea27 070e 	bicpl.w	r7, r7, lr
   2903e:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
   29042:	f8d8 3000 	ldr.w	r3, [r8]
   29046:	4798      	blx	r3
		if (ret < 0) {
   29048:	2800      	cmp	r0, #0
   2904a:	f104 0408 	add.w	r4, r4, #8
   2904e:	dac8      	bge.n	28fe2 <spi_nrfx_init+0x32>
}
   29050:	b002      	add	sp, #8
   29052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENODEV;
   29056:	f06f 0012 	mvn.w	r0, #18
	if (err < 0) {
   2905a:	e7f9      	b.n	29050 <spi_nrfx_init+0xa0>

0002905c <finish_transaction.isra.0>:
	_spi_context_cs_control(ctx, on, false);
   2905c:	2200      	movs	r2, #0
static void finish_transaction(const struct device *dev, int error)
   2905e:	b538      	push	{r3, r4, r5, lr}
   29060:	4604      	mov	r4, r0
   29062:	460d      	mov	r5, r1
   29064:	4611      	mov	r1, r2
   29066:	f7ff ff5f 	bl	28f28 <_spi_context_cs_control>
	ctx->sync_status = status;
   2906a:	6425      	str	r5, [r4, #64]	; 0x40
   2906c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   29070:	f7fb fc80 	bl	24974 <z_impl_k_sem_give>
	dev_data->busy = false;
   29074:	2300      	movs	r3, #0
   29076:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   2907a:	bd38      	pop	{r3, r4, r5, pc}

0002907c <event_handler>:
{
   2907c:	b538      	push	{r3, r4, r5, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   2907e:	7803      	ldrb	r3, [r0, #0]
{
   29080:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   29082:	2b00      	cmp	r3, #0
   29084:	d145      	bne.n	29112 <event_handler+0x96>
		if (dev_data->chunk_len == 0) {
   29086:	6e8d      	ldr	r5, [r1, #104]	; 0x68
   29088:	b93d      	cbnz	r5, 2909a <event_handler+0x1e>
			finish_transaction(dev_data->dev, -ETIMEDOUT);
   2908a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   2908c:	f06f 0173 	mvn.w	r1, #115	; 0x73
   29090:	6918      	ldr	r0, [r3, #16]
}
   29092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			finish_transaction(dev_data->dev, -ETIMEDOUT);
   29096:	f7ff bfe1 	b.w	2905c <finish_transaction.isra.0>
	if (!ctx->tx_len) {
   2909a:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   2909c:	b193      	cbz	r3, 290c4 <event_handler+0x48>
	if (len > ctx->tx_len) {
   2909e:	429d      	cmp	r5, r3
   290a0:	d810      	bhi.n	290c4 <event_handler+0x48>
	ctx->tx_len -= len;
   290a2:	1b5b      	subs	r3, r3, r5
   290a4:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   290a6:	bb43      	cbnz	r3, 290fa <event_handler+0x7e>
		++ctx->current_tx;
   290a8:	6c4b      	ldr	r3, [r1, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   290aa:	f101 0258 	add.w	r2, r1, #88	; 0x58
		++ctx->current_tx;
   290ae:	3308      	adds	r3, #8
   290b0:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   290b2:	6c8b      	ldr	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   290b4:	f104 0044 	add.w	r0, r4, #68	; 0x44
		--ctx->tx_count;
   290b8:	3b01      	subs	r3, #1
   290ba:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   290bc:	3148      	adds	r1, #72	; 0x48
   290be:	f7ff ff0c 	bl	28eda <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   290c2:	6560      	str	r0, [r4, #84]	; 0x54
	if (!ctx->rx_len) {
   290c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   290c6:	b19b      	cbz	r3, 290f0 <event_handler+0x74>
	if (len > ctx->rx_len) {
   290c8:	429d      	cmp	r5, r3
   290ca:	d811      	bhi.n	290f0 <event_handler+0x74>
	ctx->rx_len -= len;
   290cc:	1b5b      	subs	r3, r3, r5
   290ce:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   290d0:	b9cb      	cbnz	r3, 29106 <event_handler+0x8a>
		++ctx->current_rx;
   290d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   290d4:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   290d8:	3308      	adds	r3, #8
   290da:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   290dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   290de:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   290e2:	3b01      	subs	r3, #1
   290e4:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   290e6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   290ea:	f7ff fef6 	bl	28eda <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   290ee:	65e0      	str	r0, [r4, #92]	; 0x5c
		transfer_next_chunk(dev_data->dev);
   290f0:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   290f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		transfer_next_chunk(dev_data->dev);
   290f6:	f7f5 b9c7 	b.w	1e488 <transfer_next_chunk>
	} else if (ctx->tx_buf) {
   290fa:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   290fc:	2b00      	cmp	r3, #0
   290fe:	d0e1      	beq.n	290c4 <event_handler+0x48>
		ctx->tx_buf += dfs * len;
   29100:	442b      	add	r3, r5
   29102:	654b      	str	r3, [r1, #84]	; 0x54
   29104:	e7de      	b.n	290c4 <event_handler+0x48>
	} else if (ctx->rx_buf) {
   29106:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   29108:	2b00      	cmp	r3, #0
   2910a:	d0f1      	beq.n	290f0 <event_handler+0x74>
		ctx->rx_buf += dfs * len;
   2910c:	442b      	add	r3, r5
   2910e:	65e3      	str	r3, [r4, #92]	; 0x5c
   29110:	e7ee      	b.n	290f0 <event_handler+0x74>
}
   29112:	bd38      	pop	{r3, r4, r5, pc}

00029114 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   29114:	4770      	bx	lr

00029116 <event_clear>:
   29116:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   29118:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2911c:	009b      	lsls	r3, r3, #2
   2911e:	b29b      	uxth	r3, r3
   29120:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   29124:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   29128:	601a      	str	r2, [r3, #0]
   2912a:	681b      	ldr	r3, [r3, #0]
}
   2912c:	4770      	bx	lr

0002912e <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   2912e:	f001 be90 	b.w	2ae52 <z_impl_k_busy_wait>

00029132 <nrf_modem_os_errno_set>:
{
   29132:	b510      	push	{r4, lr}
   29134:	4604      	mov	r4, r0
	errno = err_code;
   29136:	f7fe fd83 	bl	27c40 <__errno>
   2913a:	6004      	str	r4, [r0, #0]
}
   2913c:	bd10      	pop	{r4, pc}

0002913e <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   2913e:	f001 bc81 	b.w	2aa44 <k_is_in_isr>

00029142 <nrf_modem_os_sem_give>:
	z_impl_k_sem_give(sem);
   29142:	f7fb bc17 	b.w	24974 <z_impl_k_sem_give>

00029146 <nrf_modem_os_sem_take>:
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   29146:	1c4b      	adds	r3, r1, #1
{
   29148:	b570      	push	{r4, r5, r6, lr}
   2914a:	4605      	mov	r5, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   2914c:	d017      	beq.n	2917e <nrf_modem_os_sem_take+0x38>
   2914e:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   29152:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   29156:	f240 30e7 	movw	r0, #999	; 0x3e7
   2915a:	2100      	movs	r1, #0
   2915c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29160:	2300      	movs	r3, #0
   29162:	fbc4 0106 	smlal	r0, r1, r4, r6
   29166:	f7ef fe1f 	bl	18da8 <__aeabi_uldivmod>
   2916a:	4602      	mov	r2, r0
   2916c:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   2916e:	4628      	mov	r0, r5
   29170:	f7fb fc26 	bl	249c0 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
   29174:	2800      	cmp	r0, #0
}
   29176:	bf18      	it	ne
   29178:	f06f 000a 	mvnne.w	r0, #10
   2917c:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   2917e:	f04f 32ff 	mov.w	r2, #4294967295
   29182:	4613      	mov	r3, r2
   29184:	e7f3      	b.n	2916e <nrf_modem_os_sem_take+0x28>

00029186 <nrf91_iface_enable>:
#else
	ARG_UNUSED(iface);
	ARG_UNUSED(enabled);
	return 0;
#endif /* CONFIG_NRF9160_CONNECTIVITY */
}
   29186:	2000      	movs	r0, #0
   29188:	4770      	bx	lr

0002918a <nrf91_socket_offload_setsockopt>:
{
   2918a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2918e:	460e      	mov	r6, r1
   29190:	4615      	mov	r5, r2
   29192:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = { 0 };
   29194:	2300      	movs	r3, #0
{
   29196:	b086      	sub	sp, #24
	int sd = OBJ_TO_SD(obj);
   29198:	f8d0 8000 	ldr.w	r8, [r0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   2919c:	4629      	mov	r1, r5
   2919e:	4630      	mov	r0, r6
   291a0:	aa03      	add	r2, sp, #12
	struct nrf_timeval nrf_timeo = { 0 };
   291a2:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
   291a6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   291a8:	f7f5 fea8 	bl	1eefc <z_to_nrf_optname>
   291ac:	2800      	cmp	r0, #0
   291ae:	da08      	bge.n	291c2 <nrf91_socket_offload_setsockopt+0x38>
		errno = ENOPROTOOPT;
   291b0:	f7fe fd46 	bl	27c40 <__errno>
   291b4:	236d      	movs	r3, #109	; 0x6d
   291b6:	6003      	str	r3, [r0, #0]
		return -1;
   291b8:	f04f 30ff 	mov.w	r0, #4294967295
}
   291bc:	b006      	add	sp, #24
   291be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   291c2:	2e01      	cmp	r6, #1
   291c4:	d111      	bne.n	291ea <nrf91_socket_offload_setsockopt+0x60>
   291c6:	3d14      	subs	r5, #20
   291c8:	2d01      	cmp	r5, #1
   291ca:	d806      	bhi.n	291da <nrf91_socket_offload_setsockopt+0x50>
		if (optval != NULL) {
   291cc:	b12c      	cbz	r4, 291da <nrf91_socket_offload_setsockopt+0x50>
			nrf_optlen = sizeof(struct nrf_timeval);
   291ce:	2708      	movs	r7, #8
			nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   291d0:	6823      	ldr	r3, [r4, #0]
   291d2:	9304      	str	r3, [sp, #16]
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   291d4:	68a3      	ldr	r3, [r4, #8]
			nrf_optval = &nrf_timeo;
   291d6:	ac04      	add	r4, sp, #16
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   291d8:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   291da:	4623      	mov	r3, r4
   291dc:	4631      	mov	r1, r6
   291de:	4640      	mov	r0, r8
   291e0:	9a03      	ldr	r2, [sp, #12]
   291e2:	9700      	str	r7, [sp, #0]
   291e4:	f7fa fc2c 	bl	23a40 <nrf_setsockopt>
	return retval;
   291e8:	e7e8      	b.n	291bc <nrf91_socket_offload_setsockopt+0x32>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   291ea:	f5b6 7f8d 	cmp.w	r6, #282	; 0x11a
   291ee:	d1f4      	bne.n	291da <nrf91_socket_offload_setsockopt+0x50>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   291f0:	2d0c      	cmp	r5, #12
   291f2:	bf08      	it	eq
   291f4:	2704      	moveq	r7, #4
   291f6:	e7f0      	b.n	291da <nrf91_socket_offload_setsockopt+0x50>

000291f8 <nrf91_socket_offload_getsockopt>:
{
   291f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   291fc:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   291fe:	2300      	movs	r3, #0
{
   29200:	b086      	sub	sp, #24
   29202:	460f      	mov	r7, r1
   29204:	4615      	mov	r5, r2
	struct nrf_timeval nrf_timeo = {0, 0};
   29206:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   2920a:	2308      	movs	r3, #8
	int sd = OBJ_TO_SD(obj);
   2920c:	6806      	ldr	r6, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   2920e:	4629      	mov	r1, r5
   29210:	4638      	mov	r0, r7
   29212:	eb0d 0203 	add.w	r2, sp, r3
{
   29216:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   2921a:	9303      	str	r3, [sp, #12]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   2921c:	f7f5 fe6e 	bl	1eefc <z_to_nrf_optname>
   29220:	2800      	cmp	r0, #0
   29222:	da09      	bge.n	29238 <nrf91_socket_offload_getsockopt+0x40>
		errno = ENOPROTOOPT;
   29224:	f7fe fd0c 	bl	27c40 <__errno>
   29228:	236d      	movs	r3, #109	; 0x6d
		return -1;
   2922a:	f04f 36ff 	mov.w	r6, #4294967295
		errno = ENOPROTOOPT;
   2922e:	6003      	str	r3, [r0, #0]
}
   29230:	4630      	mov	r0, r6
   29232:	b006      	add	sp, #24
   29234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   29238:	2f01      	cmp	r7, #1
   2923a:	d11c      	bne.n	29276 <nrf91_socket_offload_getsockopt+0x7e>
   2923c:	f1a5 0314 	sub.w	r3, r5, #20
   29240:	2b01      	cmp	r3, #1
   29242:	d818      	bhi.n	29276 <nrf91_socket_offload_getsockopt+0x7e>
		nrf_optlen = &nrf_timeo_size;
   29244:	aa03      	add	r2, sp, #12
		nrf_optval = &nrf_timeo;
   29246:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   29248:	4630      	mov	r0, r6
   2924a:	9200      	str	r2, [sp, #0]
   2924c:	4639      	mov	r1, r7
   2924e:	9a02      	ldr	r2, [sp, #8]
   29250:	f7fa fd34 	bl	23cbc <nrf_getsockopt>
	if (retval == 0) {
   29254:	4606      	mov	r6, r0
   29256:	2800      	cmp	r0, #0
   29258:	d1ea      	bne.n	29230 <nrf91_socket_offload_getsockopt+0x38>
		if (level == SOL_SOCKET) {
   2925a:	2f01      	cmp	r7, #1
   2925c:	d1e8      	bne.n	29230 <nrf91_socket_offload_getsockopt+0x38>
			if (optname == SO_ERROR) {
   2925e:	2d04      	cmp	r5, #4
   29260:	d10c      	bne.n	2927c <nrf91_socket_offload_getsockopt+0x84>
				if (*(int *)optval != 0) {
   29262:	6820      	ldr	r0, [r4, #0]
   29264:	2800      	cmp	r0, #0
   29266:	d0e3      	beq.n	29230 <nrf91_socket_offload_getsockopt+0x38>
					nrf_modem_os_errno_set(*(int *)optval);
   29268:	f7ff ff63 	bl	29132 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   2926c:	f7fe fce8 	bl	27c40 <__errno>
   29270:	6803      	ldr	r3, [r0, #0]
   29272:	6023      	str	r3, [r4, #0]
   29274:	e7dc      	b.n	29230 <nrf91_socket_offload_getsockopt+0x38>
	nrf_socklen_t *nrf_optlen = (nrf_socklen_t *)optlen;
   29276:	4642      	mov	r2, r8
   29278:	4623      	mov	r3, r4
   2927a:	e7e5      	b.n	29248 <nrf91_socket_offload_getsockopt+0x50>
			} else if ((optname == SO_RCVTIMEO) ||
   2927c:	3d14      	subs	r5, #20
   2927e:	2d01      	cmp	r5, #1
   29280:	d8d6      	bhi.n	29230 <nrf91_socket_offload_getsockopt+0x38>
					nrf_timeo.tv_sec;
   29282:	9b04      	ldr	r3, [sp, #16]
   29284:	e9c4 3000 	strd	r3, r0, [r4]
				((struct timeval *)optval)->tv_usec =
   29288:	9b05      	ldr	r3, [sp, #20]
   2928a:	60a3      	str	r3, [r4, #8]
				*optlen = sizeof(struct timeval);
   2928c:	2310      	movs	r3, #16
   2928e:	f8c8 3000 	str.w	r3, [r8]
   29292:	e7cd      	b.n	29230 <nrf91_socket_offload_getsockopt+0x38>

00029294 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   29294:	6800      	ldr	r0, [r0, #0]
   29296:	f000 bffb 	b.w	2a290 <nrf_listen>

0002929a <nrf91_socket_offload_freeaddrinfo>:
{
   2929a:	b538      	push	{r3, r4, r5, lr}
   2929c:	4604      	mov	r4, r0
	while (next != NULL) {
   2929e:	b904      	cbnz	r4, 292a2 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   292a0:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   292a2:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   292a4:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   292a6:	f001 ff65 	bl	2b174 <k_free>
		k_free(this);
   292aa:	4620      	mov	r0, r4
   292ac:	f001 ff62 	bl	2b174 <k_free>
		next = next->ai_next;
   292b0:	462c      	mov	r4, r5
   292b2:	e7f4      	b.n	2929e <nrf91_socket_offload_freeaddrinfo+0x4>

000292b4 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   292b4:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   292b6:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   292b8:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   292ba:	4603      	mov	r3, r0
{
   292bc:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   292be:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   292c2:	f101 0420 	add.w	r4, r1, #32
   292c6:	f101 0210 	add.w	r2, r1, #16
   292ca:	f852 5b04 	ldr.w	r5, [r2], #4
   292ce:	42a2      	cmp	r2, r4
   292d0:	f843 5b04 	str.w	r5, [r3], #4
   292d4:	d1f9      	bne.n	292ca <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   292d6:	6a0b      	ldr	r3, [r1, #32]
   292d8:	7503      	strb	r3, [r0, #20]
}
   292da:	bd30      	pop	{r4, r5, pc}

000292dc <z_to_nrf_ipv6>:
{
   292dc:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   292de:	2124      	movs	r1, #36	; 0x24
{
   292e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   292e2:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   292e4:	8841      	ldrh	r1, [r0, #2]
{
   292e6:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   292e8:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   292ea:	2102      	movs	r1, #2
   292ec:	1d04      	adds	r4, r0, #4
   292ee:	6059      	str	r1, [r3, #4]
   292f0:	f103 0610 	add.w	r6, r3, #16
   292f4:	f100 0714 	add.w	r7, r0, #20
   292f8:	4635      	mov	r5, r6
   292fa:	6820      	ldr	r0, [r4, #0]
   292fc:	6861      	ldr	r1, [r4, #4]
   292fe:	3408      	adds	r4, #8
   29300:	c503      	stmia	r5!, {r0, r1}
   29302:	42bc      	cmp	r4, r7
   29304:	462e      	mov	r6, r5
   29306:	d1f7      	bne.n	292f8 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   29308:	7d12      	ldrb	r2, [r2, #20]
   2930a:	621a      	str	r2, [r3, #32]
}
   2930c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002930e <nrf91_socket_offload_sendto>:
{
   2930e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29312:	4604      	mov	r4, r0
   29314:	b08c      	sub	sp, #48	; 0x30
   29316:	9812      	ldr	r0, [sp, #72]	; 0x48
   29318:	460d      	mov	r5, r1
   2931a:	4616      	mov	r6, r2
   2931c:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   2931e:	6824      	ldr	r4, [r4, #0]
	if (to == NULL) {
   29320:	b930      	cbnz	r0, 29330 <nrf91_socket_offload_sendto+0x22>
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   29322:	9013      	str	r0, [sp, #76]	; 0x4c
   29324:	4620      	mov	r0, r4
}
   29326:	b00c      	add	sp, #48	; 0x30
   29328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   2932c:	f7fa ba7c 	b.w	23828 <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   29330:	f8b0 c000 	ldrh.w	ip, [r0]
   29334:	f1bc 0f01 	cmp.w	ip, #1
   29338:	d112      	bne.n	29360 <nrf91_socket_offload_sendto+0x52>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2933a:	2510      	movs	r5, #16
	nrf_out->sin_port = ptr->sin_port;
   2933c:	8846      	ldrh	r6, [r0, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2933e:	6840      	ldr	r0, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   29340:	f88d 500c 	strb.w	r5, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   29344:	9006      	str	r0, [sp, #24]
		retval = nrf_sendto(sd, buf, len, flags,
   29346:	a803      	add	r0, sp, #12
	nrf_out->sin_port = ptr->sin_port;
   29348:	f8ad 6014 	strh.w	r6, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   2934c:	f8cd c010 	str.w	ip, [sp, #16]
		retval = nrf_sendto(sd, buf, len, flags,
   29350:	9501      	str	r5, [sp, #4]
   29352:	9000      	str	r0, [sp, #0]
		retval = nrf_sendto(sd, buf, len, flags,
   29354:	4620      	mov	r0, r4
   29356:	f7fa fa67 	bl	23828 <nrf_sendto>
}
   2935a:	b00c      	add	sp, #48	; 0x30
   2935c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET6) {
   29360:	f1bc 0f02 	cmp.w	ip, #2
   29364:	d10b      	bne.n	2937e <nrf91_socket_offload_sendto+0x70>
		z_to_nrf_ipv6(to, &ipv6);
   29366:	f10d 080c 	add.w	r8, sp, #12
   2936a:	4641      	mov	r1, r8
   2936c:	f7ff ffb6 	bl	292dc <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, flags,
   29370:	2324      	movs	r3, #36	; 0x24
   29372:	4632      	mov	r2, r6
   29374:	e9cd 8300 	strd	r8, r3, [sp]
   29378:	4629      	mov	r1, r5
   2937a:	463b      	mov	r3, r7
   2937c:	e7ea      	b.n	29354 <nrf91_socket_offload_sendto+0x46>
		errno = EAFNOSUPPORT;
   2937e:	f7fe fc5f 	bl	27c40 <__errno>
   29382:	236a      	movs	r3, #106	; 0x6a
   29384:	6003      	str	r3, [r0, #0]
		retval = -1;
   29386:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   2938a:	e7e6      	b.n	2935a <nrf91_socket_offload_sendto+0x4c>

0002938c <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2938c:	2300      	movs	r3, #0
{
   2938e:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   29390:	e9cd 3300 	strd	r3, r3, [sp]
   29394:	f7ff ffbb 	bl	2930e <nrf91_socket_offload_sendto>
}
   29398:	b003      	add	sp, #12
   2939a:	f85d fb04 	ldr.w	pc, [sp], #4

0002939e <nrf91_socket_offload_connect>:
{
   2939e:	4603      	mov	r3, r0
   293a0:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   293a2:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   293a4:	880b      	ldrh	r3, [r1, #0]
{
   293a6:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   293a8:	2b01      	cmp	r3, #1
{
   293aa:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   293ac:	d10e      	bne.n	293cc <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   293ae:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   293b0:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   293b2:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   293b4:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   293b6:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   293ba:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   293be:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   293c0:	4620      	mov	r0, r4
   293c2:	a901      	add	r1, sp, #4
   293c4:	f000 fe81 	bl	2a0ca <nrf_connect>
}
   293c8:	b00a      	add	sp, #40	; 0x28
   293ca:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   293cc:	2b02      	cmp	r3, #2
   293ce:	d104      	bne.n	293da <nrf91_socket_offload_connect+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   293d0:	a901      	add	r1, sp, #4
   293d2:	f7ff ff83 	bl	292dc <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   293d6:	2224      	movs	r2, #36	; 0x24
   293d8:	e7f2      	b.n	293c0 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   293da:	4620      	mov	r0, r4
}
   293dc:	b00a      	add	sp, #40	; 0x28
   293de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		retval = nrf_connect(sd, (void *)addr, addrlen);
   293e2:	f000 be72 	b.w	2a0ca <nrf_connect>

000293e6 <nrf91_socket_offload_bind>:
{
   293e6:	4603      	mov	r3, r0
   293e8:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   293ea:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   293ec:	880b      	ldrh	r3, [r1, #0]
{
   293ee:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   293f0:	2b01      	cmp	r3, #1
{
   293f2:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   293f4:	d10e      	bne.n	29414 <nrf91_socket_offload_bind+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   293f6:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   293f8:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   293fa:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   293fc:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   293fe:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   29402:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   29406:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   29408:	4620      	mov	r0, r4
   2940a:	a901      	add	r1, sp, #4
   2940c:	f000 fef7 	bl	2a1fe <nrf_bind>
}
   29410:	b00a      	add	sp, #40	; 0x28
   29412:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   29414:	2b02      	cmp	r3, #2
   29416:	d104      	bne.n	29422 <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   29418:	a901      	add	r1, sp, #4
   2941a:	f7ff ff5f 	bl	292dc <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2941e:	2224      	movs	r2, #36	; 0x24
   29420:	e7f2      	b.n	29408 <nrf91_socket_offload_bind+0x22>
		errno = EAFNOSUPPORT;
   29422:	f7fe fc0d 	bl	27c40 <__errno>
   29426:	236a      	movs	r3, #106	; 0x6a
   29428:	6003      	str	r3, [r0, #0]
		retval = -1;
   2942a:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   2942e:	e7ef      	b.n	29410 <nrf91_socket_offload_bind+0x2a>

00029430 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   29430:	f7fb b9b6 	b.w	247a0 <z_impl_k_mutex_lock>

00029434 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   29434:	f7fb ba2e 	b.w	24894 <z_impl_k_mutex_unlock>

00029438 <nrf91_socket_offload_recvfrom>:
{
   29438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2943c:	4605      	mov	r5, r0
	if (ctx->lock) {
   2943e:	6840      	ldr	r0, [r0, #4]
{
   29440:	b08d      	sub	sp, #52	; 0x34
   29442:	460c      	mov	r4, r1
   29444:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   29448:	4691      	mov	r9, r2
   2944a:	469a      	mov	sl, r3
	if (ctx->lock) {
   2944c:	b108      	cbz	r0, 29452 <nrf91_socket_offload_recvfrom+0x1a>
		k_mutex_unlock(ctx->lock);
   2944e:	f7ff fff1 	bl	29434 <k_mutex_unlock.isra.0>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   29452:	f8d5 b000 	ldr.w	fp, [r5]
	if (from == NULL || fromlen == NULL) {
   29456:	b106      	cbz	r6, 2945a <nrf91_socket_offload_recvfrom+0x22>
   29458:	b9af      	cbnz	r7, 29486 <nrf91_socket_offload_recvfrom+0x4e>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   2945a:	2300      	movs	r3, #0
   2945c:	4621      	mov	r1, r4
   2945e:	e9cd 3300 	strd	r3, r3, [sp]
   29462:	464a      	mov	r2, r9
   29464:	4653      	mov	r3, sl
   29466:	4658      	mov	r0, fp
   29468:	f000 ffd7 	bl	2a41a <nrf_recvfrom>
   2946c:	4604      	mov	r4, r0
	if (ctx->lock) {
   2946e:	6868      	ldr	r0, [r5, #4]
   29470:	b128      	cbz	r0, 2947e <nrf91_socket_offload_recvfrom+0x46>
		k_mutex_lock(ctx->lock, K_FOREVER);
   29472:	f04f 32ff 	mov.w	r2, #4294967295
   29476:	f04f 33ff 	mov.w	r3, #4294967295
   2947a:	f7ff ffd9 	bl	29430 <k_mutex_lock.constprop.0.isra.0>
}
   2947e:	4620      	mov	r0, r4
   29480:	b00d      	add	sp, #52	; 0x34
   29482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   29486:	f10d 080c 	add.w	r8, sp, #12
   2948a:	2224      	movs	r2, #36	; 0x24
   2948c:	2100      	movs	r1, #0
   2948e:	4640      	mov	r0, r8
   29490:	f001 feb8 	bl	2b204 <memset>
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   29494:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   29496:	ab02      	add	r3, sp, #8
   29498:	4621      	mov	r1, r4
   2949a:	e9cd 8300 	strd	r8, r3, [sp]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2949e:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   294a0:	4653      	mov	r3, sl
   294a2:	464a      	mov	r2, r9
   294a4:	4658      	mov	r0, fp
   294a6:	f000 ffb8 	bl	2a41a <nrf_recvfrom>
		if (retval < 0) {
   294aa:	1e04      	subs	r4, r0, #0
   294ac:	dbdf      	blt.n	2946e <nrf91_socket_offload_recvfrom+0x36>
		if (cliaddr->sa_family == NRF_AF_INET &&
   294ae:	9b04      	ldr	r3, [sp, #16]
   294b0:	2b01      	cmp	r3, #1
   294b2:	d10b      	bne.n	294cc <nrf91_socket_offload_recvfrom+0x94>
   294b4:	9a02      	ldr	r2, [sp, #8]
   294b6:	2a10      	cmp	r2, #16
   294b8:	d1d9      	bne.n	2946e <nrf91_socket_offload_recvfrom+0x36>
	ptr->sin_family = AF_INET;
   294ba:	8033      	strh	r3, [r6, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   294bc:	9b06      	ldr	r3, [sp, #24]
	ptr->sin_port = nrf_in->sin_port;
   294be:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   294c2:	6073      	str	r3, [r6, #4]
			*fromlen = sizeof(struct sockaddr_in);
   294c4:	2308      	movs	r3, #8
	ptr->sin_port = nrf_in->sin_port;
   294c6:	8072      	strh	r2, [r6, #2]
			*fromlen = sizeof(struct sockaddr_in6);
   294c8:	603b      	str	r3, [r7, #0]
   294ca:	e7d0      	b.n	2946e <nrf91_socket_offload_recvfrom+0x36>
		} else if (cliaddr->sa_family == NRF_AF_INET6 &&
   294cc:	2b02      	cmp	r3, #2
   294ce:	d1ce      	bne.n	2946e <nrf91_socket_offload_recvfrom+0x36>
   294d0:	9b02      	ldr	r3, [sp, #8]
   294d2:	2b24      	cmp	r3, #36	; 0x24
   294d4:	d1cb      	bne.n	2946e <nrf91_socket_offload_recvfrom+0x36>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   294d6:	4641      	mov	r1, r8
   294d8:	4630      	mov	r0, r6
   294da:	f7ff feeb 	bl	292b4 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   294de:	2318      	movs	r3, #24
   294e0:	e7f2      	b.n	294c8 <nrf91_socket_offload_recvfrom+0x90>

000294e2 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   294e2:	2300      	movs	r3, #0
{
   294e4:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   294e6:	e9cd 3300 	strd	r3, r3, [sp]
   294ea:	f7ff ffa5 	bl	29438 <nrf91_socket_offload_recvfrom>
}
   294ee:	b003      	add	sp, #12
   294f0:	f85d fb04 	ldr.w	pc, [sp], #4

000294f4 <nrf91_socket_offload_close>:
{
   294f4:	b538      	push	{r3, r4, r5, lr}
   294f6:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   294f8:	6800      	ldr	r0, [r0, #0]
   294fa:	f7fa f961 	bl	237c0 <nrf_close>
	if (retval == 0) {
   294fe:	4604      	mov	r4, r0
   29500:	b910      	cbnz	r0, 29508 <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   29502:	4628      	mov	r0, r5
   29504:	f7f5 fef0 	bl	1f2e8 <release_ctx>
}
   29508:	4620      	mov	r0, r4
   2950a:	bd38      	pop	{r3, r4, r5, pc}

0002950c <nrf_modem_fault_handler>:
		fault->reason, fault->program_counter);
#endif
#if CONFIG_NRF_MODEM_LIB_ON_FAULT_RESET_MODEM
	k_sem_give(&fault_sem);
#endif
}
   2950c:	4770      	bx	lr

0002950e <is_notification>:
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2950e:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
   29512:	b2db      	uxtb	r3, r3
   29514:	2b08      	cmp	r3, #8
   29516:	bf9d      	ittte	ls
   29518:	f240 1005 	movwls	r0, #261	; 0x105
   2951c:	40d8      	lsrls	r0, r3
   2951e:	f000 0001 	andls.w	r0, r0, #1
{
   29522:	2000      	movhi	r0, #0
}
   29524:	4770      	bx	lr

00029526 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   29526:	280d      	cmp	r0, #13
   29528:	d004      	beq.n	29534 <is_lfcr+0xe>
   2952a:	f1a0 030a 	sub.w	r3, r0, #10
   2952e:	4258      	negs	r0, r3
   29530:	4158      	adcs	r0, r3
   29532:	4770      	bx	lr
		return true;
   29534:	2001      	movs	r0, #1
}
   29536:	4770      	bx	lr

00029538 <skip_command_prefix>:
{
   29538:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   2953a:	6801      	ldr	r1, [r0, #0]
{
   2953c:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   2953e:	1c8b      	adds	r3, r1, #2
   29540:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   29542:	788c      	ldrb	r4, [r1, #2]
   29544:	4620      	mov	r0, r4
   29546:	f7ff ffee 	bl	29526 <is_lfcr>
   2954a:	b910      	cbnz	r0, 29552 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2954c:	b10c      	cbz	r4, 29552 <skip_command_prefix+0x1a>
	(*cmd)++;
   2954e:	3103      	adds	r1, #3
   29550:	6011      	str	r1, [r2, #0]
}
   29552:	bd10      	pop	{r4, pc}

00029554 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   29554:	6813      	ldr	r3, [r2, #0]
   29556:	f7f6 bacf 	b.w	1faf8 <at_parser_max_params_from_str>

0002955a <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   2955a:	6803      	ldr	r3, [r0, #0]
   2955c:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   2955e:	bf86      	itte	hi
   29560:	6840      	ldrhi	r0, [r0, #4]
   29562:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
		return NULL;
   29566:	2000      	movls	r0, #0
}
   29568:	4770      	bx	lr

0002956a <at_param_clear>:
{
   2956a:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   2956c:	7803      	ldrb	r3, [r0, #0]
{
   2956e:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   29570:	3b02      	subs	r3, #2
   29572:	2b01      	cmp	r3, #1
   29574:	d802      	bhi.n	2957c <at_param_clear+0x12>
		k_free(param->value.str_val);
   29576:	6880      	ldr	r0, [r0, #8]
   29578:	f001 fdfc 	bl	2b174 <k_free>
	param->value.int_val = 0;
   2957c:	2200      	movs	r2, #0
   2957e:	2300      	movs	r3, #0
   29580:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   29584:	bd10      	pop	{r4, pc}

00029586 <at_params_list_init>:

	return 0;
}

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   29586:	b538      	push	{r3, r4, r5, lr}
   29588:	460d      	mov	r5, r1
	if (list == NULL) {
   2958a:	4604      	mov	r4, r0
   2958c:	b140      	cbz	r0, 295a0 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   2958e:	2110      	movs	r1, #16
   29590:	4628      	mov	r0, r5
   29592:	f001 fdfa 	bl	2b18a <k_calloc>
   29596:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   29598:	b128      	cbz	r0, 295a6 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   2959a:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   2959c:	6025      	str	r5, [r4, #0]
}
   2959e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   295a0:	f06f 0015 	mvn.w	r0, #21
   295a4:	e7fb      	b.n	2959e <at_params_list_init+0x18>
		return -ENOMEM;
   295a6:	f06f 000b 	mvn.w	r0, #11
   295aa:	e7f8      	b.n	2959e <at_params_list_init+0x18>

000295ac <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   295ac:	b570      	push	{r4, r5, r6, lr}
	if (list == NULL || list->params == NULL) {
   295ae:	4604      	mov	r4, r0
   295b0:	b128      	cbz	r0, 295be <at_params_list_clear+0x12>
   295b2:	6843      	ldr	r3, [r0, #4]
   295b4:	b11b      	cbz	r3, 295be <at_params_list_clear+0x12>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   295b6:	2500      	movs	r5, #0
   295b8:	6823      	ldr	r3, [r4, #0]
   295ba:	429d      	cmp	r5, r3
   295bc:	d300      	bcc.n	295c0 <at_params_list_clear+0x14>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   295be:	bd70      	pop	{r4, r5, r6, pc}
		at_param_clear(&params[i]);
   295c0:	6866      	ldr	r6, [r4, #4]
   295c2:	eb06 1605 	add.w	r6, r6, r5, lsl #4
   295c6:	4630      	mov	r0, r6
   295c8:	f7ff ffcf 	bl	2956a <at_param_clear>
__ssp_bos_icheck3(memset, void *, int)
   295cc:	2210      	movs	r2, #16
   295ce:	2100      	movs	r1, #0
   295d0:	4630      	mov	r0, r6
   295d2:	f001 fe17 	bl	2b204 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   295d6:	3501      	adds	r5, #1
   295d8:	e7ee      	b.n	295b8 <at_params_list_clear+0xc>

000295da <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   295da:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   295dc:	4604      	mov	r4, r0
   295de:	b148      	cbz	r0, 295f4 <at_params_list_free+0x1a>
   295e0:	6843      	ldr	r3, [r0, #4]
   295e2:	b13b      	cbz	r3, 295f4 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   295e4:	2500      	movs	r5, #0
	at_params_list_clear(list);
   295e6:	f7ff ffe1 	bl	295ac <at_params_list_clear>
	k_free(list->params);
   295ea:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   295ec:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   295ee:	f001 fdc1 	bl	2b174 <k_free>
	list->params = NULL;
   295f2:	6065      	str	r5, [r4, #4]
}
   295f4:	bd38      	pop	{r3, r4, r5, pc}

000295f6 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   295f6:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   295f8:	b178      	cbz	r0, 2961a <at_params_empty_put+0x24>
   295fa:	6843      	ldr	r3, [r0, #4]
   295fc:	b16b      	cbz	r3, 2961a <at_params_empty_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   295fe:	f7ff ffac 	bl	2955a <at_params_get>

	if (param == NULL) {
   29602:	4604      	mov	r4, r0
   29604:	b148      	cbz	r0, 2961a <at_params_empty_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   29606:	f7ff ffb0 	bl	2956a <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   2960a:	2304      	movs	r3, #4
	param->value.int_val = 0;
   2960c:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   2960e:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   29610:	2300      	movs	r3, #0

	return 0;
   29612:	2000      	movs	r0, #0
	param->value.int_val = 0;
   29614:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   29618:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2961a:	f06f 0015 	mvn.w	r0, #21
   2961e:	e7fb      	b.n	29618 <at_params_empty_put+0x22>

00029620 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   29620:	b570      	push	{r4, r5, r6, lr}
   29622:	4616      	mov	r6, r2
   29624:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   29626:	b168      	cbz	r0, 29644 <at_params_int_put+0x24>
   29628:	6843      	ldr	r3, [r0, #4]
   2962a:	b15b      	cbz	r3, 29644 <at_params_int_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2962c:	f7ff ff95 	bl	2955a <at_params_get>

	if (param == NULL) {
   29630:	4604      	mov	r4, r0
   29632:	b138      	cbz	r0, 29644 <at_params_int_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   29634:	f7ff ff99 	bl	2956a <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   29638:	2301      	movs	r3, #1
	param->value.int_val = value;
	return 0;
   2963a:	2000      	movs	r0, #0
	param->value.int_val = value;
   2963c:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   29640:	7023      	strb	r3, [r4, #0]
}
   29642:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   29644:	f06f 0015 	mvn.w	r0, #21
   29648:	e7fb      	b.n	29642 <at_params_int_put+0x22>

0002964a <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   2964a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2964c:	4617      	mov	r7, r2
   2964e:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   29650:	b1c0      	cbz	r0, 29684 <at_params_string_put+0x3a>
   29652:	6843      	ldr	r3, [r0, #4]
   29654:	b1b3      	cbz	r3, 29684 <at_params_string_put+0x3a>
   29656:	b1aa      	cbz	r2, 29684 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   29658:	f7ff ff7f 	bl	2955a <at_params_get>

	if (param == NULL) {
   2965c:	4604      	mov	r4, r0
   2965e:	b188      	cbz	r0, 29684 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   29660:	1c68      	adds	r0, r5, #1
   29662:	f001 fd8e 	bl	2b182 <k_malloc>

	if (param_value == NULL) {
   29666:	4606      	mov	r6, r0
   29668:	b178      	cbz	r0, 2968a <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2966a:	462a      	mov	r2, r5
   2966c:	4639      	mov	r1, r7
   2966e:	f001 fdbc 	bl	2b1ea <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   29672:	4620      	mov	r0, r4
   29674:	f7ff ff79 	bl	2956a <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   29678:	2302      	movs	r3, #2
	param->value.str_val = param_value;

	return 0;
   2967a:	2000      	movs	r0, #0
	param->size = str_len;
   2967c:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   2967e:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   29680:	60a6      	str	r6, [r4, #8]
}
   29682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   29684:	f06f 0015 	mvn.w	r0, #21
   29688:	e7fb      	b.n	29682 <at_params_string_put+0x38>
		return -ENOMEM;
   2968a:	f06f 000b 	mvn.w	r0, #11
   2968e:	e7f8      	b.n	29682 <at_params_string_put+0x38>

00029690 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   29690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29692:	4617      	mov	r7, r2
   29694:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   29696:	b1c0      	cbz	r0, 296ca <at_params_array_put+0x3a>
   29698:	6843      	ldr	r3, [r0, #4]
   2969a:	b1b3      	cbz	r3, 296ca <at_params_array_put+0x3a>
   2969c:	b1aa      	cbz	r2, 296ca <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2969e:	f7ff ff5c 	bl	2955a <at_params_get>

	if (param == NULL) {
   296a2:	4604      	mov	r4, r0
   296a4:	b188      	cbz	r0, 296ca <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   296a6:	4628      	mov	r0, r5
   296a8:	f001 fd6b 	bl	2b182 <k_malloc>

	if (param_value == NULL) {
   296ac:	4606      	mov	r6, r0
   296ae:	b178      	cbz	r0, 296d0 <at_params_array_put+0x40>
   296b0:	462a      	mov	r2, r5
   296b2:	4639      	mov	r1, r7
   296b4:	f001 fd99 	bl	2b1ea <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   296b8:	4620      	mov	r0, r4
   296ba:	f7ff ff56 	bl	2956a <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   296be:	2303      	movs	r3, #3
	param->value.array_val = param_value;

	return 0;
   296c0:	2000      	movs	r0, #0
	param->size = array_len;
   296c2:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   296c4:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   296c6:	60a6      	str	r6, [r4, #8]
}
   296c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   296ca:	f06f 0015 	mvn.w	r0, #21
   296ce:	e7fb      	b.n	296c8 <at_params_array_put+0x38>
		return -ENOMEM;
   296d0:	f06f 000b 	mvn.w	r0, #11
   296d4:	e7f8      	b.n	296c8 <at_params_array_put+0x38>

000296d6 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   296d6:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   296d8:	b1b0      	cbz	r0, 29708 <at_params_short_get+0x32>
   296da:	6843      	ldr	r3, [r0, #4]
   296dc:	b1a3      	cbz	r3, 29708 <at_params_short_get+0x32>
   296de:	b19a      	cbz	r2, 29708 <at_params_short_get+0x32>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   296e0:	f7ff ff3b 	bl	2955a <at_params_get>

	if (param == NULL) {
   296e4:	b180      	cbz	r0, 29708 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   296e6:	7803      	ldrb	r3, [r0, #0]
   296e8:	2b01      	cmp	r3, #1
   296ea:	d10d      	bne.n	29708 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   296ec:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   296f0:	f513 4000 	adds.w	r0, r3, #32768	; 0x8000
   296f4:	f141 0100 	adc.w	r1, r1, #0
   296f8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   296fc:	f171 0100 	sbcs.w	r1, r1, #0
   29700:	d202      	bcs.n	29708 <at_params_short_get+0x32>
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
   29702:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   29704:	8013      	strh	r3, [r2, #0]
}
   29706:	bd08      	pop	{r3, pc}
		return -EINVAL;
   29708:	f06f 0015 	mvn.w	r0, #21
   2970c:	e7fb      	b.n	29706 <at_params_short_get+0x30>

0002970e <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   2970e:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   29710:	b190      	cbz	r0, 29738 <at_params_unsigned_short_get+0x2a>
   29712:	6843      	ldr	r3, [r0, #4]
   29714:	b183      	cbz	r3, 29738 <at_params_unsigned_short_get+0x2a>
   29716:	b17a      	cbz	r2, 29738 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   29718:	f7ff ff1f 	bl	2955a <at_params_get>

	if (param == NULL) {
   2971c:	b160      	cbz	r0, 29738 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   2971e:	7803      	ldrb	r3, [r0, #0]
   29720:	2b01      	cmp	r3, #1
   29722:	d109      	bne.n	29738 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   29724:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   29728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   2972c:	f171 0100 	sbcs.w	r1, r1, #0
   29730:	d202      	bcs.n	29738 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
   29732:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   29734:	8013      	strh	r3, [r2, #0]
}
   29736:	bd08      	pop	{r3, pc}
		return -EINVAL;
   29738:	f06f 0015 	mvn.w	r0, #21
   2973c:	e7fb      	b.n	29736 <at_params_unsigned_short_get+0x28>

0002973e <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   2973e:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   29740:	b190      	cbz	r0, 29768 <at_params_int_get+0x2a>
   29742:	6843      	ldr	r3, [r0, #4]
   29744:	b183      	cbz	r3, 29768 <at_params_int_get+0x2a>
   29746:	b17a      	cbz	r2, 29768 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   29748:	f7ff ff07 	bl	2955a <at_params_get>

	if (param == NULL) {
   2974c:	b160      	cbz	r0, 29768 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   2974e:	7803      	ldrb	r3, [r0, #0]
   29750:	2b01      	cmp	r3, #1
   29752:	d109      	bne.n	29768 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   29754:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   29758:	f113 4000 	adds.w	r0, r3, #2147483648	; 0x80000000
   2975c:	f141 0100 	adc.w	r1, r1, #0
   29760:	b911      	cbnz	r1, 29768 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
   29762:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   29764:	6013      	str	r3, [r2, #0]
}
   29766:	bd08      	pop	{r3, pc}
		return -EINVAL;
   29768:	f06f 0015 	mvn.w	r0, #21
   2976c:	e7fb      	b.n	29766 <at_params_int_get+0x28>

0002976e <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   2976e:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   29770:	b170      	cbz	r0, 29790 <at_params_int64_get+0x22>
   29772:	6843      	ldr	r3, [r0, #4]
   29774:	b163      	cbz	r3, 29790 <at_params_int64_get+0x22>
   29776:	b15a      	cbz	r2, 29790 <at_params_int64_get+0x22>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   29778:	f7ff feef 	bl	2955a <at_params_get>

	if (param == NULL) {
   2977c:	b140      	cbz	r0, 29790 <at_params_int64_get+0x22>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   2977e:	7803      	ldrb	r3, [r0, #0]
   29780:	2b01      	cmp	r3, #1
   29782:	d105      	bne.n	29790 <at_params_int64_get+0x22>

	if ((param->value.int_val > INT64_MAX) || (param->value.int_val < INT64_MIN)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   29784:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   29788:	e9c2 0100 	strd	r0, r1, [r2]
	return 0;
   2978c:	2000      	movs	r0, #0
}
   2978e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   29790:	f06f 0015 	mvn.w	r0, #21
   29794:	e7fb      	b.n	2978e <at_params_int64_get+0x20>

00029796 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   29796:	b570      	push	{r4, r5, r6, lr}
   29798:	4615      	mov	r5, r2
   2979a:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL || len == NULL) {
   2979c:	b1a8      	cbz	r0, 297ca <at_params_string_get+0x34>
   2979e:	6843      	ldr	r3, [r0, #4]
   297a0:	b19b      	cbz	r3, 297ca <at_params_string_get+0x34>
   297a2:	b192      	cbz	r2, 297ca <at_params_string_get+0x34>
   297a4:	b18c      	cbz	r4, 297ca <at_params_string_get+0x34>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   297a6:	f7ff fed8 	bl	2955a <at_params_get>

	if (param == NULL) {
   297aa:	b170      	cbz	r0, 297ca <at_params_string_get+0x34>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   297ac:	7803      	ldrb	r3, [r0, #0]
   297ae:	2b02      	cmp	r3, #2
   297b0:	d10b      	bne.n	297ca <at_params_string_get+0x34>
		return param->size;
   297b2:	6846      	ldr	r6, [r0, #4]
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);

	if (*len < param_len) {
   297b4:	6823      	ldr	r3, [r4, #0]
   297b6:	42b3      	cmp	r3, r6
   297b8:	d30a      	bcc.n	297d0 <at_params_string_get+0x3a>
   297ba:	6881      	ldr	r1, [r0, #8]
   297bc:	4632      	mov	r2, r6
   297be:	4628      	mov	r0, r5
   297c0:	f001 fd13 	bl	2b1ea <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   297c4:	2000      	movs	r0, #0
	*len = param_len;
   297c6:	6026      	str	r6, [r4, #0]
}
   297c8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   297ca:	f06f 0015 	mvn.w	r0, #21
   297ce:	e7fb      	b.n	297c8 <at_params_string_get+0x32>
		return -ENOMEM;
   297d0:	f06f 000b 	mvn.w	r0, #11
   297d4:	e7f8      	b.n	297c8 <at_params_string_get+0x32>

000297d6 <at_params_valid_count_get>:
	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   297d6:	4602      	mov	r2, r0
{
   297d8:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   297da:	b170      	cbz	r0, 297fa <at_params_valid_count_get+0x24>
   297dc:	6840      	ldr	r0, [r0, #4]
   297de:	b160      	cbz	r0, 297fa <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   297e0:	6811      	ldr	r1, [r2, #0]
   297e2:	b119      	cbz	r1, 297ec <at_params_valid_count_get+0x16>
   297e4:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   297e6:	b108      	cbz	r0, 297ec <at_params_valid_count_get+0x16>
   297e8:	7803      	ldrb	r3, [r0, #0]
   297ea:	b90b      	cbnz	r3, 297f0 <at_params_valid_count_get+0x1a>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   297ec:	4608      	mov	r0, r1
   297ee:	bd08      	pop	{r3, pc}
		param = at_params_get(list, valid_i);
   297f0:	4610      	mov	r0, r2
		valid_i += 1;
   297f2:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   297f4:	f7ff feb1 	bl	2955a <at_params_get>
   297f8:	e7f5      	b.n	297e6 <at_params_valid_count_get+0x10>
		return -EINVAL;
   297fa:	f06f 0115 	mvn.w	r1, #21
   297fe:	e7f5      	b.n	297ec <at_params_valid_count_get+0x16>

00029800 <at_handler_cscon>:
{
   29800:	b510      	push	{r4, lr}
   29802:	4604      	mov	r4, r0
   29804:	b092      	sub	sp, #72	; 0x48
	struct lte_lc_evt evt = {0};
   29806:	2248      	movs	r2, #72	; 0x48
   29808:	2100      	movs	r1, #0
   2980a:	4668      	mov	r0, sp
   2980c:	f001 fcfa 	bl	2b204 <memset>
	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   29810:	2201      	movs	r2, #1
   29812:	4620      	mov	r0, r4
   29814:	a902      	add	r1, sp, #8
   29816:	f000 f8e4 	bl	299e2 <parse_rrc_mode>
	if (err) {
   2981a:	b928      	cbnz	r0, 29828 <at_handler_cscon+0x28>
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   2981c:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   2981e:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   29820:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   29824:	f7f6 fe0c 	bl	20440 <event_handler_list_dispatch>
}
   29828:	b012      	add	sp, #72	; 0x48
   2982a:	bd10      	pop	{r4, pc}

0002982c <at_handler_cedrxp>:
{
   2982c:	b510      	push	{r4, lr}
   2982e:	4604      	mov	r4, r0
   29830:	b092      	sub	sp, #72	; 0x48
	struct lte_lc_evt evt = {0};
   29832:	2100      	movs	r1, #0
   29834:	2248      	movs	r2, #72	; 0x48
   29836:	4668      	mov	r0, sp
   29838:	f001 fce4 	bl	2b204 <memset>
	err = parse_edrx(response, &evt.edrx_cfg);
   2983c:	4620      	mov	r0, r4
   2983e:	a902      	add	r1, sp, #8
   29840:	f7ef fcb6 	bl	191b0 <parse_edrx>
	if (err) {
   29844:	b928      	cbnz	r0, 29852 <at_handler_cedrxp+0x26>
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   29846:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   29848:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   2984a:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   2984e:	f7f6 fdf7 	bl	20440 <event_handler_list_dispatch>
}
   29852:	b012      	add	sp, #72	; 0x48
   29854:	bd10      	pop	{r4, pc}

00029856 <at_handler_xt3412>:
{
   29856:	b510      	push	{r4, lr}
   29858:	4604      	mov	r4, r0
   2985a:	b092      	sub	sp, #72	; 0x48
	struct lte_lc_evt evt = {0};
   2985c:	2100      	movs	r1, #0
   2985e:	2248      	movs	r2, #72	; 0x48
   29860:	4668      	mov	r0, sp
   29862:	f001 fccf 	bl	2b204 <memset>
	err = parse_xt3412(response, &evt.time);
   29866:	4620      	mov	r0, r4
   29868:	a902      	add	r1, sp, #8
   2986a:	f7f6 ff2f 	bl	206cc <parse_xt3412>
	if (err) {
   2986e:	b960      	cbnz	r0, 2988a <at_handler_xt3412+0x34>
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   29870:	9b02      	ldr	r3, [sp, #8]
   29872:	9a03      	ldr	r2, [sp, #12]
   29874:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   29878:	3b08      	subs	r3, #8
   2987a:	4313      	orrs	r3, r2
   2987c:	d105      	bne.n	2988a <at_handler_xt3412+0x34>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   2987e:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   29880:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   29882:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   29886:	f7f6 fddb 	bl	20440 <event_handler_list_dispatch>
}
   2988a:	b012      	add	sp, #72	; 0x48
   2988c:	bd10      	pop	{r4, pc}

0002988e <at_handler_xmodemsleep>:
{
   2988e:	b510      	push	{r4, lr}
   29890:	4604      	mov	r4, r0
   29892:	b092      	sub	sp, #72	; 0x48
	struct lte_lc_evt evt = {0};
   29894:	2100      	movs	r1, #0
   29896:	2248      	movs	r2, #72	; 0x48
   29898:	4668      	mov	r0, sp
   2989a:	f001 fcb3 	bl	2b204 <memset>
	err = parse_xmodemsleep(response, &evt.modem_sleep);
   2989e:	4620      	mov	r0, r4
   298a0:	a902      	add	r1, sp, #8
   298a2:	f000 f8dc 	bl	29a5e <parse_xmodemsleep>
	if (err) {
   298a6:	b9a8      	cbnz	r0, 298d4 <at_handler_xmodemsleep+0x46>
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   298a8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   298ac:	1e5a      	subs	r2, r3, #1
   298ae:	2a03      	cmp	r2, #3
   298b0:	d901      	bls.n	298b6 <at_handler_xmodemsleep+0x28>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_FLIGHT_MODE) &&
   298b2:	2b07      	cmp	r3, #7
   298b4:	d10e      	bne.n	298d4 <at_handler_xmodemsleep+0x46>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   298b6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   298ba:	f5a2 539c 	sub.w	r3, r2, #4992	; 0x1380
   298be:	3b08      	subs	r3, #8
   298c0:	430b      	orrs	r3, r1
   298c2:	d009      	beq.n	298d8 <at_handler_xmodemsleep+0x4a>
	} else if (evt.modem_sleep.time == 0) {
   298c4:	430a      	orrs	r2, r1
   298c6:	d009      	beq.n	298dc <at_handler_xmodemsleep+0x4e>
   298c8:	230a      	movs	r3, #10
	event_handler_list_dispatch(&evt);
   298ca:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   298cc:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   298d0:	f7f6 fdb6 	bl	20440 <event_handler_list_dispatch>
}
   298d4:	b012      	add	sp, #72	; 0x48
   298d6:	bd10      	pop	{r4, pc}
   298d8:	2308      	movs	r3, #8
   298da:	e7f6      	b.n	298ca <at_handler_xmodemsleep+0x3c>
   298dc:	2309      	movs	r3, #9
   298de:	e7f4      	b.n	298ca <at_handler_xmodemsleep+0x3c>

000298e0 <at_handler_mdmev>:
{
   298e0:	b510      	push	{r4, lr}
   298e2:	4604      	mov	r4, r0
   298e4:	b092      	sub	sp, #72	; 0x48
	struct lte_lc_evt evt = {0};
   298e6:	2100      	movs	r1, #0
   298e8:	2248      	movs	r2, #72	; 0x48
   298ea:	4668      	mov	r0, sp
   298ec:	f001 fc8a 	bl	2b204 <memset>
	err = parse_mdmev(response, &evt.modem_evt);
   298f0:	4620      	mov	r0, r4
   298f2:	a902      	add	r1, sp, #8
   298f4:	f7f7 f9ee 	bl	20cd4 <parse_mdmev>
	if (err) {
   298f8:	b928      	cbnz	r0, 29906 <at_handler_mdmev+0x26>
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   298fa:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   298fc:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   298fe:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   29902:	f7f6 fd9d 	bl	20440 <event_handler_list_dispatch>
}
   29906:	b012      	add	sp, #72	; 0x48
   29908:	bd10      	pop	{r4, pc}

0002990a <lte_lc_init>:
{
   2990a:	b508      	push	{r3, lr}
	int err = init_and_config();
   2990c:	f7f6 fc78 	bl	20200 <init_and_config>
	return err ? -EFAULT : 0;
   29910:	2800      	cmp	r0, #0
}
   29912:	bf18      	it	ne
   29914:	f06f 000d 	mvnne.w	r0, #13
   29918:	bd08      	pop	{r3, pc}

0002991a <lte_lc_init_and_connect>:
{
   2991a:	b508      	push	{r3, lr}
	err = lte_lc_init();
   2991c:	f7ff fff5 	bl	2990a <lte_lc_init>
	if (err) {
   29920:	b920      	cbnz	r0, 2992c <lte_lc_init_and_connect+0x12>
}
   29922:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return connect_lte(true);
   29926:	2001      	movs	r0, #1
   29928:	f7f6 bcf2 	b.w	20310 <connect_lte>
}
   2992c:	bd08      	pop	{r3, pc}

0002992e <response_is_valid.part.0>:
bool response_is_valid(const char *response, size_t response_len,
   2992e:	b570      	push	{r4, r5, r6, lr}
   29930:	4606      	mov	r6, r0
	if ((response_len < strlen(check)) ||
   29932:	4610      	mov	r0, r2
bool response_is_valid(const char *response, size_t response_len,
   29934:	460d      	mov	r5, r1
   29936:	4614      	mov	r4, r2
	if ((response_len < strlen(check)) ||
   29938:	f7ef fba8 	bl	1908c <strlen>
   2993c:	42a8      	cmp	r0, r5
   2993e:	d808      	bhi.n	29952 <response_is_valid.part.0+0x24>
	    (memcmp(response, check, response_len) != 0)) {
   29940:	462a      	mov	r2, r5
   29942:	4621      	mov	r1, r4
   29944:	4630      	mov	r0, r6
   29946:	f001 fc40 	bl	2b1ca <memcmp>
	if ((response_len < strlen(check)) ||
   2994a:	fab0 f080 	clz	r0, r0
   2994e:	0940      	lsrs	r0, r0, #5
}
   29950:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   29952:	2000      	movs	r0, #0
   29954:	e7fc      	b.n	29950 <response_is_valid.part.0+0x22>

00029956 <response_is_valid>:
	if ((response == NULL) || (check == NULL)) {
   29956:	b110      	cbz	r0, 2995e <response_is_valid+0x8>
   29958:	b10a      	cbz	r2, 2995e <response_is_valid+0x8>
   2995a:	f7ff bfe8 	b.w	2992e <response_is_valid.part.0>
}
   2995e:	2000      	movs	r0, #0
   29960:	4770      	bx	lr

00029962 <string_to_int>:
{
   29962:	b573      	push	{r0, r1, r4, r5, r6, lr}
   29964:	460c      	mov	r4, r1
   29966:	4605      	mov	r5, r0
   29968:	4616      	mov	r6, r2
	errno = 0;
   2996a:	f7fe f969 	bl	27c40 <__errno>
   2996e:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   29970:	4622      	mov	r2, r4
	errno = 0;
   29972:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   29974:	a901      	add	r1, sp, #4
   29976:	4628      	mov	r0, r5
   29978:	f7fc f8ea 	bl	25b50 <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   2997c:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   2997e:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   29980:	42ab      	cmp	r3, r5
   29982:	d103      	bne.n	2998c <string_to_int+0x2a>
		return -ENODATA;
   29984:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   29988:	b002      	add	sp, #8
   2998a:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   2998c:	781b      	ldrb	r3, [r3, #0]
   2998e:	2b00      	cmp	r3, #0
   29990:	d1f8      	bne.n	29984 <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   29992:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   29996:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   29998:	3303      	adds	r3, #3
   2999a:	d802      	bhi.n	299a2 <string_to_int+0x40>
	return 0;
   2999c:	2000      	movs	r0, #0
	*output = temp;
   2999e:	6034      	str	r4, [r6, #0]
	return 0;
   299a0:	e7f2      	b.n	29988 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   299a2:	f7fe f94d 	bl	27c40 <__errno>
   299a6:	6803      	ldr	r3, [r0, #0]
   299a8:	2b22      	cmp	r3, #34	; 0x22
   299aa:	d1f7      	bne.n	2999c <string_to_int+0x3a>
   299ac:	e7ea      	b.n	29984 <string_to_int+0x22>

000299ae <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   299ae:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   299b0:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   299b2:	b087      	sub	sp, #28
   299b4:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   299b6:	ab01      	add	r3, sp, #4
   299b8:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   299ba:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   299bc:	f7ff feeb 	bl	29796 <at_params_string_get>
	if (err) {
   299c0:	b968      	cbnz	r0, 299de <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   299c2:	9b01      	ldr	r3, [sp, #4]
	if (string_to_int(str_buf, base, output)) {
   299c4:	4622      	mov	r2, r4
	str_buf[len] = '\0';
   299c6:	3318      	adds	r3, #24
   299c8:	446b      	add	r3, sp
   299ca:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   299ce:	4629      	mov	r1, r5
   299d0:	a802      	add	r0, sp, #8
   299d2:	f7ff ffc6 	bl	29962 <string_to_int>
		return -ENODATA;
   299d6:	2800      	cmp	r0, #0
   299d8:	bf18      	it	ne
   299da:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   299de:	b007      	add	sp, #28
   299e0:	bd30      	pop	{r4, r5, pc}

000299e2 <parse_rrc_mode>:
	struct at_param_list resp_list = {0};
   299e2:	2300      	movs	r3, #0
{
   299e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   299e6:	b085      	sub	sp, #20
   299e8:	4607      	mov	r7, r0
   299ea:	460d      	mov	r5, r1
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   299ec:	a802      	add	r0, sp, #8
   299ee:	2104      	movs	r1, #4
{
   299f0:	4616      	mov	r6, r2
	struct at_param_list resp_list = {0};
   299f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   299f6:	f7ff fdc6 	bl	29586 <at_params_list_init>
	if (err) {
   299fa:	4604      	mov	r4, r0
   299fc:	b9a8      	cbnz	r0, 29a2a <parse_rrc_mode+0x48>
	err = at_parser_params_from_str(at_response,
   299fe:	4601      	mov	r1, r0
   29a00:	aa02      	add	r2, sp, #8
   29a02:	4638      	mov	r0, r7
   29a04:	f7ff fda6 	bl	29554 <at_parser_params_from_str>
	if (err) {
   29a08:	4604      	mov	r4, r0
   29a0a:	b958      	cbnz	r0, 29a24 <parse_rrc_mode+0x42>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   29a0c:	4631      	mov	r1, r6
   29a0e:	aa01      	add	r2, sp, #4
   29a10:	a802      	add	r0, sp, #8
   29a12:	f7ff fe94 	bl	2973e <at_params_int_get>
	if (err) {
   29a16:	4604      	mov	r4, r0
   29a18:	b920      	cbnz	r0, 29a24 <parse_rrc_mode+0x42>
	if (temp_mode == 0) {
   29a1a:	9b01      	ldr	r3, [sp, #4]
   29a1c:	b143      	cbz	r3, 29a30 <parse_rrc_mode+0x4e>
	} else if (temp_mode == 1) {
   29a1e:	2b01      	cmp	r3, #1
   29a20:	d108      	bne.n	29a34 <parse_rrc_mode+0x52>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   29a22:	702b      	strb	r3, [r5, #0]
	at_params_list_free(&resp_list);
   29a24:	a802      	add	r0, sp, #8
   29a26:	f7ff fdd8 	bl	295da <at_params_list_free>
}
   29a2a:	4620      	mov	r0, r4
   29a2c:	b005      	add	sp, #20
   29a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29a30:	4603      	mov	r3, r0
   29a32:	e7f6      	b.n	29a22 <parse_rrc_mode+0x40>
		err = -EINVAL;
   29a34:	f06f 0415 	mvn.w	r4, #21
   29a38:	e7f4      	b.n	29a24 <parse_rrc_mode+0x42>

00029a3a <neighborcell_count_get>:
	if (at_response == NULL) {
   29a3a:	b178      	cbz	r0, 29a5c <neighborcell_count_get+0x22>
	uint32_t count = 0;
   29a3c:	2300      	movs	r3, #0
   29a3e:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   29a40:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   29a44:	282c      	cmp	r0, #44	; 0x2c
   29a46:	d101      	bne.n	29a4c <neighborcell_count_get+0x12>
			count++;
   29a48:	3301      	adds	r3, #1
	} while (*(str++) != '\0');
   29a4a:	e7f9      	b.n	29a40 <neighborcell_count_get+0x6>
   29a4c:	2800      	cmp	r0, #0
   29a4e:	d1f7      	bne.n	29a40 <neighborcell_count_get+0x6>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   29a50:	2b0a      	cmp	r3, #10
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   29a52:	bf82      	ittt	hi
   29a54:	2005      	movhi	r0, #5
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   29a56:	3b09      	subhi	r3, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   29a58:	fbb3 f0f0 	udivhi	r0, r3, r0
}
   29a5c:	4770      	bx	lr

00029a5e <parse_xmodemsleep>:
{
   29a5e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct at_param_list resp_list = {0};
   29a60:	2300      	movs	r3, #0
{
   29a62:	4606      	mov	r6, r0
	if (modem_sleep == NULL || at_response == NULL) {
   29a64:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   29a66:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (modem_sleep == NULL || at_response == NULL) {
   29a6a:	b389      	cbz	r1, 29ad0 <parse_xmodemsleep+0x72>
   29a6c:	b380      	cbz	r0, 29ad0 <parse_xmodemsleep+0x72>
	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   29a6e:	2104      	movs	r1, #4
   29a70:	a802      	add	r0, sp, #8
   29a72:	f7ff fd88 	bl	29586 <at_params_list_init>
	if (err) {
   29a76:	4604      	mov	r4, r0
   29a78:	b9f8      	cbnz	r0, 29aba <parse_xmodemsleep+0x5c>
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   29a7a:	4601      	mov	r1, r0
   29a7c:	aa02      	add	r2, sp, #8
   29a7e:	4630      	mov	r0, r6
   29a80:	f7ff fd68 	bl	29554 <at_parser_params_from_str>
	if (err) {
   29a84:	4604      	mov	r4, r0
   29a86:	b9a8      	cbnz	r0, 29ab4 <parse_xmodemsleep+0x56>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   29a88:	2101      	movs	r1, #1
   29a8a:	f10d 0206 	add.w	r2, sp, #6
   29a8e:	a802      	add	r0, sp, #8
   29a90:	f7ff fe3d 	bl	2970e <at_params_unsigned_short_get>
	if (err) {
   29a94:	4604      	mov	r4, r0
   29a96:	b968      	cbnz	r0, 29ab4 <parse_xmodemsleep+0x56>
	modem_sleep->type = type;
   29a98:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   29a9c:	a802      	add	r0, sp, #8
	modem_sleep->type = type;
   29a9e:	702b      	strb	r3, [r5, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   29aa0:	f7ff fe99 	bl	297d6 <at_params_valid_count_get>
   29aa4:	2802      	cmp	r0, #2
   29aa6:	d80b      	bhi.n	29ac0 <parse_xmodemsleep+0x62>
		modem_sleep->time = -1;
   29aa8:	f04f 32ff 	mov.w	r2, #4294967295
   29aac:	f04f 33ff 	mov.w	r3, #4294967295
   29ab0:	e9c5 2302 	strd	r2, r3, [r5, #8]
	at_params_list_free(&resp_list);
   29ab4:	a802      	add	r0, sp, #8
   29ab6:	f7ff fd90 	bl	295da <at_params_list_free>
}
   29aba:	4620      	mov	r0, r4
   29abc:	b004      	add	sp, #16
   29abe:	bd70      	pop	{r4, r5, r6, pc}
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   29ac0:	2102      	movs	r1, #2
   29ac2:	f105 0208 	add.w	r2, r5, #8
   29ac6:	a802      	add	r0, sp, #8
   29ac8:	f7ff fe51 	bl	2976e <at_params_int64_get>
   29acc:	4604      	mov	r4, r0
clean_exit:
   29ace:	e7f1      	b.n	29ab4 <parse_xmodemsleep+0x56>
		return -EINVAL;
   29ad0:	f06f 0415 	mvn.w	r4, #21
   29ad4:	e7f1      	b.n	29aba <parse_xmodemsleep+0x5c>

00029ad6 <on_modem_shutdown>:
#endif
}

static void on_modem_shutdown(void *ctx)
{
	(void)lte_lc_deinit();
   29ad6:	f7f6 bc95 	b.w	20404 <lte_lc_deinit>

00029ada <on_modem_init>:
{
   29ada:	b508      	push	{r3, lr}
	if (err) {
   29adc:	b930      	cbnz	r0, 29aec <on_modem_init+0x12>
	err = lte_lc_psm_req(IS_ENABLED(CONFIG_LTE_PSM_REQ));
   29ade:	f7f6 f931 	bl	1fd44 <lte_lc_psm_req>
	if (err) {
   29ae2:	b918      	cbnz	r0, 29aec <on_modem_init+0x12>
}
   29ae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = lte_lc_edrx_req(IS_ENABLED(CONFIG_LTE_EDRX_REQ));
   29ae8:	f7f6 ba6c 	b.w	1ffc4 <lte_lc_edrx_req>
}
   29aec:	bd08      	pop	{r3, pc}

00029aee <k_mutex_unlock.isra.0>:
   29aee:	f7fa bed1 	b.w	24894 <z_impl_k_mutex_unlock>

00029af2 <pdn_default_ctx_cb_reg>:
{
   29af2:	b510      	push	{r4, lr}
	if (!cb) {
   29af4:	4604      	mov	r4, r0
   29af6:	b138      	cbz	r0, 29b08 <pdn_default_ctx_cb_reg+0x16>
	pdn = pdn_ctx_new();
   29af8:	f7f7 fae0 	bl	210bc <pdn_ctx_new>
	if (!pdn) {
   29afc:	4603      	mov	r3, r0
   29afe:	b130      	cbz	r0, 29b0e <pdn_default_ctx_cb_reg+0x1c>
	pdn->callback = cb;
   29b00:	6044      	str	r4, [r0, #4]
	pdn->context_id = 0;
   29b02:	2000      	movs	r0, #0
   29b04:	7218      	strb	r0, [r3, #8]
}
   29b06:	bd10      	pop	{r4, pc}
		return -EFAULT;
   29b08:	f06f 000d 	mvn.w	r0, #13
   29b0c:	e7fb      	b.n	29b06 <pdn_default_ctx_cb_reg+0x14>
		return -ENOMEM;
   29b0e:	f06f 000b 	mvn.w	r0, #11
   29b12:	e7f8      	b.n	29b06 <pdn_default_ctx_cb_reg+0x14>

00029b14 <k_sys_fatal_error_handler>:

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   29b14:	2000      	movs	r0, #0
{
   29b16:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
   29b18:	f7f1 fcc8 	bl	1b4ac <sys_arch_reboot>

00029b1c <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   29b1c:	2000      	movs	r0, #0
   29b1e:	4770      	bx	lr

00029b20 <psa_crypto_init>:
}
   29b20:	2000      	movs	r0, #0
   29b22:	4770      	bx	lr

00029b24 <SystemInit>:
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
   29b24:	4770      	bx	lr

00029b26 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   29b26:	4700      	bx	r0

00029b28 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   29b28:	f001 b993 	b.w	2ae52 <z_impl_k_busy_wait>

00029b2c <nrfx_clock_stop>:
    clock_stop(domain);
   29b2c:	f7f7 bc22 	b.w	21374 <clock_stop>

00029b30 <set_ss_pin_state>:
{
   29b30:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   29b32:	7fc0      	ldrb	r0, [r0, #31]
   29b34:	28ff      	cmp	r0, #255	; 0xff
   29b36:	d006      	beq.n	29b46 <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
   29b38:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
   29b3a:	079b      	lsls	r3, r3, #30
   29b3c:	bf58      	it	pl
   29b3e:	f081 0101 	eorpl.w	r1, r1, #1
   29b42:	f7f8 b8eb 	b.w	21d1c <nrf_gpio_pin_write>
}
   29b46:	4770      	bx	lr

00029b48 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   29b48:	7b0a      	ldrb	r2, [r1, #12]
{
   29b4a:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   29b4c:	2a03      	cmp	r2, #3
   29b4e:	d829      	bhi.n	29ba4 <xfer_completeness_check+0x5c>
   29b50:	e8df f002 	tbb	[pc, r2]
   29b54:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   29b58:	688a      	ldr	r2, [r1, #8]
   29b5a:	0350      	lsls	r0, r2, #13
   29b5c:	d504      	bpl.n	29b68 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   29b5e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   29b62:	6908      	ldr	r0, [r1, #16]
   29b64:	4290      	cmp	r0, r2
   29b66:	d107      	bne.n	29b78 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   29b68:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   29b6a:	0352      	lsls	r2, r2, #13
   29b6c:	d41a      	bmi.n	29ba4 <xfer_completeness_check+0x5c>
   29b6e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   29b72:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   29b74:	4291      	cmp	r1, r2
   29b76:	d015      	beq.n	29ba4 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   29b78:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   29b7a:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   29b7c:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   29b80:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   29b84:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   29b86:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   29b8a:	6908      	ldr	r0, [r1, #16]
   29b8c:	4290      	cmp	r0, r2
   29b8e:	d1f3      	bne.n	29b78 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   29b90:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   29b94:	e7ed      	b.n	29b72 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   29b96:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   29b9a:	6909      	ldr	r1, [r1, #16]
   29b9c:	e7ea      	b.n	29b74 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   29b9e:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   29ba2:	e7fa      	b.n	29b9a <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   29ba4:	2001      	movs	r0, #1
}
   29ba6:	4770      	bx	lr

00029ba8 <rpc_handle_ctrl_message>:
   29ba8:	2902      	cmp	r1, #2
   29baa:	b510      	push	{r4, lr}
   29bac:	4604      	mov	r4, r0
   29bae:	d005      	beq.n	29bbc <rpc_handle_ctrl_message+0x14>
   29bb0:	2904      	cmp	r1, #4
   29bb2:	d001      	beq.n	29bb8 <rpc_handle_ctrl_message+0x10>
   29bb4:	2901      	cmp	r1, #1
   29bb6:	d107      	bne.n	29bc8 <rpc_handle_ctrl_message+0x20>
   29bb8:	2000      	movs	r0, #0
   29bba:	bd10      	pop	{r4, pc}
   29bbc:	6880      	ldr	r0, [r0, #8]
   29bbe:	2800      	cmp	r0, #0
   29bc0:	d0fa      	beq.n	29bb8 <rpc_handle_ctrl_message+0x10>
   29bc2:	f7f5 f971 	bl	1eea8 <nrf_modem_os_shm_tx_free>
   29bc6:	e7f7      	b.n	29bb8 <rpc_handle_ctrl_message+0x10>
   29bc8:	6880      	ldr	r0, [r0, #8]
   29bca:	b108      	cbz	r0, 29bd0 <rpc_handle_ctrl_message+0x28>
   29bcc:	f7f5 f96c 	bl	1eea8 <nrf_modem_os_shm_tx_free>
   29bd0:	4620      	mov	r0, r4
   29bd2:	f7f8 fd73 	bl	226bc <rpc_transport_msg_rx_free>
   29bd6:	e7ef      	b.n	29bb8 <rpc_handle_ctrl_message+0x10>

00029bd8 <rpc_init>:
   29bd8:	f7f8 bd5e 	b.w	22698 <rpc_transport_init>

00029bdc <rpc_list_preambles_init>:
   29bdc:	2200      	movs	r2, #0
   29bde:	b510      	push	{r4, lr}
   29be0:	6804      	ldr	r4, [r0, #0]
   29be2:	4294      	cmp	r4, r2
   29be4:	d100      	bne.n	29be8 <rpc_list_preambles_init+0xc>
   29be6:	bd10      	pop	{r4, pc}
   29be8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   29bec:	684b      	ldr	r3, [r1, #4]
   29bee:	3201      	adds	r2, #1
   29bf0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   29bf4:	f043 0303 	orr.w	r3, r3, #3
   29bf8:	604b      	str	r3, [r1, #4]
   29bfa:	e7f2      	b.n	29be2 <rpc_list_preambles_init+0x6>

00029bfc <rpc_transport_ipc_data_rx_resume>:
   29bfc:	2004      	movs	r0, #4
   29bfe:	f7f8 b851 	b.w	21ca4 <nrfx_ipc_receive_event_enable>

00029c02 <rpc_transport_ipc_data_rx_suspend>:
   29c02:	2004      	movs	r0, #4
   29c04:	f7f8 b856 	b.w	21cb4 <nrfx_ipc_receive_event_disable>

00029c08 <rpc_transport_ipc_shutdown>:
   29c08:	f7f8 b81e 	b.w	21c48 <nrfx_ipc_uninit>

00029c0c <rpc_transport_ipc_msg_alloc>:
   29c0c:	b538      	push	{r3, r4, r5, lr}
   29c0e:	4604      	mov	r4, r0
   29c10:	2500      	movs	r5, #0
   29c12:	1d03      	adds	r3, r0, #4
   29c14:	6822      	ldr	r2, [r4, #0]
   29c16:	42aa      	cmp	r2, r5
   29c18:	d801      	bhi.n	29c1e <rpc_transport_ipc_msg_alloc+0x12>
   29c1a:	2300      	movs	r3, #0
   29c1c:	e019      	b.n	29c52 <rpc_transport_ipc_msg_alloc+0x46>
   29c1e:	f04f 0200 	mov.w	r2, #0
   29c22:	e8d3 0fcf 	ldaexb	r0, [r3]
   29c26:	2803      	cmp	r0, #3
   29c28:	d104      	bne.n	29c34 <rpc_transport_ipc_msg_alloc+0x28>
   29c2a:	e8c3 2fcc 	stlexb	ip, r2, [r3]
   29c2e:	f1bc 0f00 	cmp.w	ip, #0
   29c32:	d1f6      	bne.n	29c22 <rpc_transport_ipc_msg_alloc+0x16>
   29c34:	d002      	beq.n	29c3c <rpc_transport_ipc_msg_alloc+0x30>
   29c36:	3308      	adds	r3, #8
   29c38:	3501      	adds	r5, #1
   29c3a:	e7eb      	b.n	29c14 <rpc_transport_ipc_msg_alloc+0x8>
   29c3c:	eb01 1385 	add.w	r3, r1, r5, lsl #6
   29c40:	4618      	mov	r0, r3
   29c42:	2240      	movs	r2, #64	; 0x40
   29c44:	2100      	movs	r1, #0
   29c46:	f001 fadd 	bl	2b204 <memset>
   29c4a:	4603      	mov	r3, r0
   29c4c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   29c50:	60a0      	str	r0, [r4, #8]
   29c52:	4618      	mov	r0, r3
   29c54:	bd38      	pop	{r3, r4, r5, pc}

00029c56 <rpc_client_msg_from_rpc_msg_get>:
   29c56:	3008      	adds	r0, #8
   29c58:	4770      	bx	lr

00029c5a <rpc_client_msg_alloc>:
   29c5a:	b538      	push	{r3, r4, r5, lr}
   29c5c:	4605      	mov	r5, r0
   29c5e:	b920      	cbnz	r0, 29c6a <rpc_client_msg_alloc+0x10>
   29c60:	f7f8 fd20 	bl	226a4 <rpc_transport_msg_alloc>
   29c64:	b980      	cbnz	r0, 29c88 <rpc_client_msg_alloc+0x2e>
   29c66:	2000      	movs	r0, #0
   29c68:	bd38      	pop	{r3, r4, r5, pc}
   29c6a:	f7f5 f915 	bl	1ee98 <nrf_modem_os_shm_tx_alloc>
   29c6e:	4604      	mov	r4, r0
   29c70:	2800      	cmp	r0, #0
   29c72:	d0f8      	beq.n	29c66 <rpc_client_msg_alloc+0xc>
   29c74:	f7f8 fd16 	bl	226a4 <rpc_transport_msg_alloc>
   29c78:	b938      	cbnz	r0, 29c8a <rpc_client_msg_alloc+0x30>
   29c7a:	4620      	mov	r0, r4
   29c7c:	f7f5 f914 	bl	1eea8 <nrf_modem_os_shm_tx_free>
   29c80:	2001      	movs	r0, #1
   29c82:	f7f5 f8df 	bl	1ee44 <nrf_modem_os_event_notify>
   29c86:	e7ee      	b.n	29c66 <rpc_client_msg_alloc+0xc>
   29c88:	462c      	mov	r4, r5
   29c8a:	60c5      	str	r5, [r0, #12]
   29c8c:	f840 4f08 	str.w	r4, [r0, #8]!
   29c90:	e7ea      	b.n	29c68 <rpc_client_msg_alloc+0xe>

00029c92 <rpc_client_msg_send>:
   29c92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   29c96:	4610      	mov	r0, r2
   29c98:	f840 1d08 	str.w	r1, [r0, #-8]!
   29c9c:	f7f8 bd1a 	b.w	226d4 <rpc_transport_msg_send>

00029ca0 <rpc_client_msg_rx_free>:
   29ca0:	3808      	subs	r0, #8
   29ca2:	f7f8 bd0b 	b.w	226bc <rpc_transport_msg_rx_free>

00029ca6 <rpc_client_msg_data_rx_free>:
   29ca6:	f7f8 bd0f 	b.w	226c8 <rpc_transport_msg_data_rx_free>

00029caa <rpc_client_msg_data_tx_size>:
   29caa:	f7f8 bd01 	b.w	226b0 <rpc_transport_msg_data_tx_size>

00029cae <rpc_client_msg_data_tx_alloc>:
   29cae:	f7f5 b8f3 	b.w	1ee98 <nrf_modem_os_shm_tx_alloc>

00029cb2 <rpc_client_msg_data_tx_free>:
   29cb2:	b508      	push	{r3, lr}
   29cb4:	f7f5 f8f8 	bl	1eea8 <nrf_modem_os_shm_tx_free>
   29cb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   29cbc:	2001      	movs	r0, #1
   29cbe:	f7f5 b8c1 	b.w	1ee44 <nrf_modem_os_event_notify>

00029cc2 <sockaddr_init>:
   29cc2:	2904      	cmp	r1, #4
   29cc4:	b570      	push	{r4, r5, r6, lr}
   29cc6:	4605      	mov	r5, r0
   29cc8:	4616      	mov	r6, r2
   29cca:	d003      	beq.n	29cd4 <sockaddr_init+0x12>
   29ccc:	2910      	cmp	r1, #16
   29cce:	d015      	beq.n	29cfc <sockaddr_init+0x3a>
   29cd0:	2400      	movs	r4, #0
   29cd2:	e011      	b.n	29cf8 <sockaddr_init+0x36>
   29cd4:	2010      	movs	r0, #16
   29cd6:	f7f5 f8d1 	bl	1ee7c <nrf_modem_os_alloc>
   29cda:	4604      	mov	r4, r0
   29cdc:	2800      	cmp	r0, #0
   29cde:	d0f7      	beq.n	29cd0 <sockaddr_init+0xe>
   29ce0:	220f      	movs	r2, #15
   29ce2:	2100      	movs	r1, #0
   29ce4:	3001      	adds	r0, #1
   29ce6:	f001 fa8d 	bl	2b204 <memset>
   29cea:	2310      	movs	r3, #16
   29cec:	7023      	strb	r3, [r4, #0]
   29cee:	2301      	movs	r3, #1
   29cf0:	8126      	strh	r6, [r4, #8]
   29cf2:	6063      	str	r3, [r4, #4]
   29cf4:	682b      	ldr	r3, [r5, #0]
   29cf6:	60e3      	str	r3, [r4, #12]
   29cf8:	4620      	mov	r0, r4
   29cfa:	bd70      	pop	{r4, r5, r6, pc}
   29cfc:	2024      	movs	r0, #36	; 0x24
   29cfe:	f7f5 f8bd 	bl	1ee7c <nrf_modem_os_alloc>
   29d02:	4604      	mov	r4, r0
   29d04:	2800      	cmp	r0, #0
   29d06:	d0e3      	beq.n	29cd0 <sockaddr_init+0xe>
   29d08:	2223      	movs	r2, #35	; 0x23
   29d0a:	2100      	movs	r1, #0
   29d0c:	3001      	adds	r0, #1
   29d0e:	f001 fa79 	bl	2b204 <memset>
   29d12:	2324      	movs	r3, #36	; 0x24
   29d14:	7023      	strb	r3, [r4, #0]
   29d16:	2302      	movs	r3, #2
   29d18:	4628      	mov	r0, r5
   29d1a:	6063      	str	r3, [r4, #4]
   29d1c:	8126      	strh	r6, [r4, #8]
   29d1e:	f104 0310 	add.w	r3, r4, #16
   29d22:	f105 0210 	add.w	r2, r5, #16
   29d26:	f850 1b04 	ldr.w	r1, [r0], #4
   29d2a:	4290      	cmp	r0, r2
   29d2c:	f843 1b04 	str.w	r1, [r3], #4
   29d30:	d1f9      	bne.n	29d26 <sockaddr_init+0x64>
   29d32:	e7e1      	b.n	29cf8 <sockaddr_init+0x36>

00029d34 <sock_pollcb>:
   29d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29d36:	2500      	movs	r5, #0
   29d38:	6803      	ldr	r3, [r0, #0]
   29d3a:	4604      	mov	r4, r0
   29d3c:	9300      	str	r3, [sp, #0]
   29d3e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   29d40:	4668      	mov	r0, sp
   29d42:	f8ad 5006 	strh.w	r5, [sp, #6]
   29d46:	f8ad 3004 	strh.w	r3, [sp, #4]
   29d4a:	f000 fccb 	bl	2a6e4 <nrf_poll_one>
   29d4e:	b138      	cbz	r0, 29d60 <sock_pollcb+0x2c>
   29d50:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29d52:	4668      	mov	r0, sp
   29d54:	4798      	blx	r3
   29d56:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   29d5a:	b10b      	cbz	r3, 29d60 <sock_pollcb+0x2c>
   29d5c:	6365      	str	r5, [r4, #52]	; 0x34
   29d5e:	63a5      	str	r5, [r4, #56]	; 0x38
   29d60:	b003      	add	sp, #12
   29d62:	bd30      	pop	{r4, r5, pc}

00029d64 <sock_has_pkt>:
   29d64:	6840      	ldr	r0, [r0, #4]
   29d66:	3800      	subs	r0, #0
   29d68:	bf18      	it	ne
   29d6a:	2001      	movne	r0, #1
   29d6c:	4770      	bx	lr

00029d6e <sock_pkt_append>:
   29d6e:	2300      	movs	r3, #0
   29d70:	600b      	str	r3, [r1, #0]
   29d72:	6883      	ldr	r3, [r0, #8]
   29d74:	b913      	cbnz	r3, 29d7c <sock_pkt_append+0xe>
   29d76:	e9c0 1101 	strd	r1, r1, [r0, #4]
   29d7a:	4770      	bx	lr
   29d7c:	6019      	str	r1, [r3, #0]
   29d7e:	6081      	str	r1, [r0, #8]
   29d80:	4770      	bx	lr

00029d82 <sock_pkt_remove>:
   29d82:	b538      	push	{r3, r4, r5, lr}
   29d84:	4605      	mov	r5, r0
   29d86:	460c      	mov	r4, r1
   29d88:	f7f8 fcaa 	bl	226e0 <rpc_transport_data_rx_suspend>
   29d8c:	68aa      	ldr	r2, [r5, #8]
   29d8e:	6823      	ldr	r3, [r4, #0]
   29d90:	4294      	cmp	r4, r2
   29d92:	606b      	str	r3, [r5, #4]
   29d94:	bf08      	it	eq
   29d96:	60ab      	streq	r3, [r5, #8]
   29d98:	2300      	movs	r3, #0
   29d9a:	4620      	mov	r0, r4
   29d9c:	6023      	str	r3, [r4, #0]
   29d9e:	f000 f904 	bl	29faa <pkt_free>
   29da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29da6:	f7f8 bca1 	b.w	226ec <rpc_transport_data_rx_resume>

00029daa <sock_pkt_peek_head>:
   29daa:	6840      	ldr	r0, [r0, #4]
   29dac:	4770      	bx	lr

00029dae <sock_is_stream>:
   29dae:	6900      	ldr	r0, [r0, #16]
   29db0:	1e43      	subs	r3, r0, #1
   29db2:	4258      	negs	r0, r3
   29db4:	4158      	adcs	r0, r3
   29db6:	4770      	bx	lr

00029db8 <sock_is_datagram>:
   29db8:	6900      	ldr	r0, [r0, #16]
   29dba:	1e83      	subs	r3, r0, #2
   29dbc:	4258      	negs	r0, r3
   29dbe:	4158      	adcs	r0, r3
   29dc0:	4770      	bx	lr

00029dc2 <sock_is_raw>:
   29dc2:	6900      	ldr	r0, [r0, #16]
   29dc4:	1ec3      	subs	r3, r0, #3
   29dc6:	4258      	negs	r0, r3
   29dc8:	4158      	adcs	r0, r3
   29dca:	4770      	bx	lr

00029dcc <sock_proto_is_secure>:
   29dcc:	6940      	ldr	r0, [r0, #20]
   29dce:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   29dd2:	d005      	beq.n	29de0 <sock_proto_is_secure+0x14>
   29dd4:	f240 1311 	movw	r3, #273	; 0x111
   29dd8:	1ac3      	subs	r3, r0, r3
   29dda:	4258      	negs	r0, r3
   29ddc:	4158      	adcs	r0, r3
   29dde:	4770      	bx	lr
   29de0:	2001      	movs	r0, #1
   29de2:	4770      	bx	lr

00029de4 <sock_is_connecting>:
   29de4:	7f00      	ldrb	r0, [r0, #28]
   29de6:	f3c0 0080 	ubfx	r0, r0, #2, #1
   29dea:	4770      	bx	lr

00029dec <sock_is_connected>:
   29dec:	7f00      	ldrb	r0, [r0, #28]
   29dee:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   29df2:	4770      	bx	lr

00029df4 <sock_is_attaching>:
   29df4:	7f00      	ldrb	r0, [r0, #28]
   29df6:	f3c0 1000 	ubfx	r0, r0, #4, #1
   29dfa:	4770      	bx	lr

00029dfc <sock_is_nonblock>:
   29dfc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   29dfe:	f000 0001 	and.w	r0, r0, #1
   29e02:	4770      	bx	lr

00029e04 <sock_is_closed>:
   29e04:	7f00      	ldrb	r0, [r0, #28]
   29e06:	f000 0001 	and.w	r0, r0, #1
   29e0a:	4770      	bx	lr

00029e0c <sock_is_local_closed>:
   29e0c:	7f00      	ldrb	r0, [r0, #28]
   29e0e:	f3c0 0040 	ubfx	r0, r0, #1, #1
   29e12:	4770      	bx	lr

00029e14 <sock_is_eof>:
   29e14:	6903      	ldr	r3, [r0, #16]
   29e16:	2b01      	cmp	r3, #1
   29e18:	d105      	bne.n	29e26 <sock_is_eof+0x12>
   29e1a:	6980      	ldr	r0, [r0, #24]
   29e1c:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   29e20:	4258      	negs	r0, r3
   29e22:	4158      	adcs	r0, r3
   29e24:	4770      	bx	lr
   29e26:	2000      	movs	r0, #0
   29e28:	4770      	bx	lr

00029e2a <sock_has_stream_error>:
   29e2a:	7f00      	ldrb	r0, [r0, #28]
   29e2c:	09c0      	lsrs	r0, r0, #7
   29e2e:	4770      	bx	lr

00029e30 <sock_has_error>:
   29e30:	6983      	ldr	r3, [r0, #24]
   29e32:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   29e36:	bf14      	ite	ne
   29e38:	2001      	movne	r0, #1
   29e3a:	2000      	moveq	r0, #0
   29e3c:	4770      	bx	lr

00029e3e <sock_has_flow_control>:
   29e3e:	7f00      	ldrb	r0, [r0, #28]
   29e40:	f3c0 1080 	ubfx	r0, r0, #6, #1
   29e44:	4770      	bx	lr

00029e46 <sock_has_pollcb>:
   29e46:	6b40      	ldr	r0, [r0, #52]	; 0x34
   29e48:	3800      	subs	r0, #0
   29e4a:	bf18      	it	ne
   29e4c:	2001      	movne	r0, #1
   29e4e:	4770      	bx	lr

00029e50 <sock_has_rai_no_data>:
   29e50:	6b00      	ldr	r0, [r0, #48]	; 0x30
   29e52:	f1a0 0332 	sub.w	r3, r0, #50	; 0x32
   29e56:	4258      	negs	r0, r3
   29e58:	4158      	adcs	r0, r3
   29e5a:	4770      	bx	lr

00029e5c <sock_can_read>:
   29e5c:	6840      	ldr	r0, [r0, #4]
   29e5e:	3800      	subs	r0, #0
   29e60:	bf18      	it	ne
   29e62:	2001      	movne	r0, #1
   29e64:	4770      	bx	lr

00029e66 <sock_can_accept>:
   29e66:	7f40      	ldrb	r0, [r0, #29]
   29e68:	3800      	subs	r0, #0
   29e6a:	bf18      	it	ne
   29e6c:	2001      	movne	r0, #1
   29e6e:	4770      	bx	lr

00029e70 <sock_can_send>:
   29e70:	b510      	push	{r4, lr}
   29e72:	4602      	mov	r2, r0
   29e74:	6904      	ldr	r4, [r0, #16]
   29e76:	f7ff ffa9 	bl	29dcc <sock_proto_is_secure>
   29e7a:	2c01      	cmp	r4, #1
   29e7c:	4601      	mov	r1, r0
   29e7e:	7f13      	ldrb	r3, [r2, #28]
   29e80:	d103      	bne.n	29e8a <sock_can_send+0x1a>
   29e82:	071c      	lsls	r4, r3, #28
   29e84:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   29e88:	d50b      	bpl.n	29ea2 <sock_can_send+0x32>
   29e8a:	b931      	cbnz	r1, 29e9a <sock_can_send+0x2a>
   29e8c:	07d9      	lsls	r1, r3, #31
   29e8e:	d40b      	bmi.n	29ea8 <sock_can_send+0x38>
   29e90:	f3c3 1380 	ubfx	r3, r3, #6, #1
   29e94:	f1c3 0001 	rsb	r0, r3, #1
   29e98:	e003      	b.n	29ea2 <sock_can_send+0x32>
   29e9a:	069a      	lsls	r2, r3, #26
   29e9c:	f3c3 1040 	ubfx	r0, r3, #5, #1
   29ea0:	d4f4      	bmi.n	29e8c <sock_can_send+0x1c>
   29ea2:	f000 0001 	and.w	r0, r0, #1
   29ea6:	bd10      	pop	{r4, pc}
   29ea8:	2000      	movs	r0, #0
   29eaa:	e7fa      	b.n	29ea2 <sock_can_send+0x32>

00029eac <sock_rcvtimeo_ms_get>:
   29eac:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   29eb0:	ea53 0102 	orrs.w	r1, r3, r2
   29eb4:	d009      	beq.n	29eca <sock_rcvtimeo_ms_get+0x1e>
   29eb6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   29eba:	fbb3 f0f1 	udiv	r0, r3, r1
   29ebe:	fb01 0002 	mla	r0, r1, r2, r0
   29ec2:	2801      	cmp	r0, #1
   29ec4:	bfb8      	it	lt
   29ec6:	2001      	movlt	r0, #1
   29ec8:	4770      	bx	lr
   29eca:	f04f 30ff 	mov.w	r0, #4294967295
   29ece:	4770      	bx	lr

00029ed0 <sock_sndtimeo_ms_get>:
   29ed0:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   29ed4:	ea53 0102 	orrs.w	r1, r3, r2
   29ed8:	d009      	beq.n	29eee <sock_sndtimeo_ms_get+0x1e>
   29eda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   29ede:	fbb3 f0f1 	udiv	r0, r3, r1
   29ee2:	fb01 0002 	mla	r0, r1, r2, r0
   29ee6:	2801      	cmp	r0, #1
   29ee8:	bfb8      	it	lt
   29eea:	2001      	movlt	r0, #1
   29eec:	4770      	bx	lr
   29eee:	f04f 30ff 	mov.w	r0, #4294967295
   29ef2:	4770      	bx	lr

00029ef4 <sock_family_is_valid>:
   29ef4:	3801      	subs	r0, #1
   29ef6:	2802      	cmp	r0, #2
   29ef8:	bf8c      	ite	hi
   29efa:	2000      	movhi	r0, #0
   29efc:	2001      	movls	r0, #1
   29efe:	4770      	bx	lr

00029f00 <sock_type_is_valid>:
   29f00:	3801      	subs	r0, #1
   29f02:	2802      	cmp	r0, #2
   29f04:	bf8c      	ite	hi
   29f06:	2000      	movhi	r0, #0
   29f08:	2001      	movls	r0, #1
   29f0a:	4770      	bx	lr

00029f0c <sock_proto_supports_type>:
   29f0c:	2903      	cmp	r1, #3
   29f0e:	d015      	beq.n	29f3c <sock_proto_supports_type+0x30>
   29f10:	2811      	cmp	r0, #17
   29f12:	d00c      	beq.n	29f2e <sock_proto_supports_type+0x22>
   29f14:	dc04      	bgt.n	29f20 <sock_proto_supports_type+0x14>
   29f16:	b188      	cbz	r0, 29f3c <sock_proto_supports_type+0x30>
   29f18:	2806      	cmp	r0, #6
   29f1a:	d00a      	beq.n	29f32 <sock_proto_supports_type+0x26>
   29f1c:	2000      	movs	r0, #0
   29f1e:	4770      	bx	lr
   29f20:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   29f24:	d005      	beq.n	29f32 <sock_proto_supports_type+0x26>
   29f26:	f240 1311 	movw	r3, #273	; 0x111
   29f2a:	4298      	cmp	r0, r3
   29f2c:	d1f6      	bne.n	29f1c <sock_proto_supports_type+0x10>
   29f2e:	2902      	cmp	r1, #2
   29f30:	e000      	b.n	29f34 <sock_proto_supports_type+0x28>
   29f32:	2901      	cmp	r1, #1
   29f34:	bf14      	ite	ne
   29f36:	2000      	movne	r0, #0
   29f38:	2001      	moveq	r0, #1
   29f3a:	4770      	bx	lr
   29f3c:	2001      	movs	r0, #1
   29f3e:	4770      	bx	lr

00029f40 <sock_sockaddr_len_is_valid>:
   29f40:	6843      	ldr	r3, [r0, #4]
   29f42:	2b01      	cmp	r3, #1
   29f44:	d003      	beq.n	29f4e <sock_sockaddr_len_is_valid+0xe>
   29f46:	2b02      	cmp	r3, #2
   29f48:	d009      	beq.n	29f5e <sock_sockaddr_len_is_valid+0x1e>
   29f4a:	2000      	movs	r0, #0
   29f4c:	4770      	bx	lr
   29f4e:	7803      	ldrb	r3, [r0, #0]
   29f50:	2b10      	cmp	r3, #16
   29f52:	d1fa      	bne.n	29f4a <sock_sockaddr_len_is_valid+0xa>
   29f54:	2910      	cmp	r1, #16
   29f56:	bf14      	ite	ne
   29f58:	2000      	movne	r0, #0
   29f5a:	2001      	moveq	r0, #1
   29f5c:	4770      	bx	lr
   29f5e:	7803      	ldrb	r3, [r0, #0]
   29f60:	2b24      	cmp	r3, #36	; 0x24
   29f62:	d1f2      	bne.n	29f4a <sock_sockaddr_len_is_valid+0xa>
   29f64:	2924      	cmp	r1, #36	; 0x24
   29f66:	e7f6      	b.n	29f56 <sock_sockaddr_len_is_valid+0x16>

00029f68 <sock_sockaddr_fam_is_valid>:
   29f68:	68c3      	ldr	r3, [r0, #12]
   29f6a:	2b01      	cmp	r3, #1
   29f6c:	d003      	beq.n	29f76 <sock_sockaddr_fam_is_valid+0xe>
   29f6e:	2b02      	cmp	r3, #2
   29f70:	d007      	beq.n	29f82 <sock_sockaddr_fam_is_valid+0x1a>
   29f72:	2001      	movs	r0, #1
   29f74:	4770      	bx	lr
   29f76:	6848      	ldr	r0, [r1, #4]
   29f78:	2801      	cmp	r0, #1
   29f7a:	bf14      	ite	ne
   29f7c:	2000      	movne	r0, #0
   29f7e:	2001      	moveq	r0, #1
   29f80:	4770      	bx	lr
   29f82:	6848      	ldr	r0, [r1, #4]
   29f84:	2802      	cmp	r0, #2
   29f86:	e7f8      	b.n	29f7a <sock_sockaddr_fam_is_valid+0x12>

00029f88 <pkt_has_next>:
   29f88:	b100      	cbz	r0, 29f8c <pkt_has_next+0x4>
   29f8a:	6800      	ldr	r0, [r0, #0]
   29f8c:	3800      	subs	r0, #0
   29f8e:	bf18      	it	ne
   29f90:	2001      	movne	r0, #1
   29f92:	4770      	bx	lr

00029f94 <pkt_peek_next>:
   29f94:	b100      	cbz	r0, 29f98 <pkt_peek_next+0x4>
   29f96:	6800      	ldr	r0, [r0, #0]
   29f98:	4770      	bx	lr

00029f9a <pkt_bytes_get>:
   29f9a:	8943      	ldrh	r3, [r0, #10]
   29f9c:	6840      	ldr	r0, [r0, #4]
   29f9e:	4418      	add	r0, r3
   29fa0:	4770      	bx	lr

00029fa2 <pkt_bytes_left>:
   29fa2:	8902      	ldrh	r2, [r0, #8]
   29fa4:	8940      	ldrh	r0, [r0, #10]
   29fa6:	1a10      	subs	r0, r2, r0
   29fa8:	4770      	bx	lr

00029faa <pkt_free>:
   29faa:	b510      	push	{r4, lr}
   29fac:	4604      	mov	r4, r0
   29fae:	6840      	ldr	r0, [r0, #4]
   29fb0:	f7ff fe79 	bl	29ca6 <rpc_client_msg_data_rx_free>
   29fb4:	68e0      	ldr	r0, [r4, #12]
   29fb6:	b108      	cbz	r0, 29fbc <pkt_free+0x12>
   29fb8:	f7f4 ff68 	bl	1ee8c <nrf_modem_os_free>
   29fbc:	4620      	mov	r0, r4
   29fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29fc2:	f7f4 bf63 	b.w	1ee8c <nrf_modem_os_free>

00029fc6 <pkt_flush>:
   29fc6:	b510      	push	{r4, lr}
   29fc8:	4604      	mov	r4, r0
   29fca:	6820      	ldr	r0, [r4, #0]
   29fcc:	b900      	cbnz	r0, 29fd0 <pkt_flush+0xa>
   29fce:	bd10      	pop	{r4, pc}
   29fd0:	6862      	ldr	r2, [r4, #4]
   29fd2:	6803      	ldr	r3, [r0, #0]
   29fd4:	4290      	cmp	r0, r2
   29fd6:	6023      	str	r3, [r4, #0]
   29fd8:	bf08      	it	eq
   29fda:	6063      	streq	r3, [r4, #4]
   29fdc:	f7ff ffe5 	bl	29faa <pkt_free>
   29fe0:	e7f3      	b.n	29fca <pkt_flush+0x4>

00029fe2 <on_conf_dnssrv_res>:
   29fe2:	f000 bc71 	b.w	2a8c8 <res_forward>

00029fe6 <nrf_freeaddrinfo>:
   29fe6:	b510      	push	{r4, lr}
   29fe8:	4604      	mov	r4, r0
   29fea:	b160      	cbz	r0, 2a006 <nrf_freeaddrinfo+0x20>
   29fec:	6940      	ldr	r0, [r0, #20]
   29fee:	b108      	cbz	r0, 29ff4 <nrf_freeaddrinfo+0xe>
   29ff0:	f7f4 ff4c 	bl	1ee8c <nrf_modem_os_free>
   29ff4:	69a0      	ldr	r0, [r4, #24]
   29ff6:	b108      	cbz	r0, 29ffc <nrf_freeaddrinfo+0x16>
   29ff8:	f7f4 ff48 	bl	1ee8c <nrf_modem_os_free>
   29ffc:	4620      	mov	r0, r4
   29ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a002:	f7f4 bf43 	b.w	1ee8c <nrf_modem_os_free>
   2a006:	bd10      	pop	{r4, pc}

0002a008 <on_getifaddrs_res>:
   2a008:	f000 bc5e 	b.w	2a8c8 <res_forward>

0002a00c <nrf_socket>:
   2a00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a010:	4681      	mov	r9, r0
   2a012:	460f      	mov	r7, r1
   2a014:	4616      	mov	r6, r2
   2a016:	f7ff ff6d 	bl	29ef4 <sock_family_is_valid>
   2a01a:	b930      	cbnz	r0, 2a02a <nrf_socket+0x1e>
   2a01c:	206a      	movs	r0, #106	; 0x6a
   2a01e:	f7ff f888 	bl	29132 <nrf_modem_os_errno_set>
   2a022:	f04f 30ff 	mov.w	r0, #4294967295
   2a026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a02a:	4630      	mov	r0, r6
   2a02c:	f7f9 f8ee 	bl	2320c <sock_proto_is_valid>
   2a030:	b908      	cbnz	r0, 2a036 <nrf_socket+0x2a>
   2a032:	207b      	movs	r0, #123	; 0x7b
   2a034:	e7f3      	b.n	2a01e <nrf_socket+0x12>
   2a036:	4638      	mov	r0, r7
   2a038:	f7ff ff62 	bl	29f00 <sock_type_is_valid>
   2a03c:	b908      	cbnz	r0, 2a042 <nrf_socket+0x36>
   2a03e:	206b      	movs	r0, #107	; 0x6b
   2a040:	e7ed      	b.n	2a01e <nrf_socket+0x12>
   2a042:	4639      	mov	r1, r7
   2a044:	4630      	mov	r0, r6
   2a046:	f7ff ff61 	bl	29f0c <sock_proto_supports_type>
   2a04a:	2800      	cmp	r0, #0
   2a04c:	d0f7      	beq.n	2a03e <nrf_socket+0x32>
   2a04e:	f7f9 f853 	bl	230f8 <sock_open>
   2a052:	4605      	mov	r5, r0
   2a054:	b908      	cbnz	r0, 2a05a <nrf_socket+0x4e>
   2a056:	2017      	movs	r0, #23
   2a058:	e7e1      	b.n	2a01e <nrf_socket+0x12>
   2a05a:	2000      	movs	r0, #0
   2a05c:	f7ff fdfd 	bl	29c5a <rpc_client_msg_alloc>
   2a060:	4604      	mov	r4, r0
   2a062:	b920      	cbnz	r0, 2a06e <nrf_socket+0x62>
   2a064:	6828      	ldr	r0, [r5, #0]
   2a066:	f7f9 f87f 	bl	23168 <_sock_close>
   2a06a:	2069      	movs	r0, #105	; 0x69
   2a06c:	e7d7      	b.n	2a01e <nrf_socket+0x12>
   2a06e:	2300      	movs	r3, #0
   2a070:	220c      	movs	r2, #12
   2a072:	f04f 38ff 	mov.w	r8, #4294967295
   2a076:	7202      	strb	r2, [r0, #8]
   2a078:	7243      	strb	r3, [r0, #9]
   2a07a:	7283      	strb	r3, [r0, #10]
   2a07c:	72c3      	strb	r3, [r0, #11]
   2a07e:	f880 8010 	strb.w	r8, [r0, #16]
   2a082:	f880 8011 	strb.w	r8, [r0, #17]
   2a086:	f880 8012 	strb.w	r8, [r0, #18]
   2a08a:	f880 8013 	strb.w	r8, [r0, #19]
   2a08e:	4648      	mov	r0, r9
   2a090:	f7f9 ffae 	bl	23ff0 <nrf_af_to_rpc_af>
   2a094:	6160      	str	r0, [r4, #20]
   2a096:	4638      	mov	r0, r7
   2a098:	f000 fb8e 	bl	2a7b8 <nrf_type_to_rpc_type>
   2a09c:	4601      	mov	r1, r0
   2a09e:	61a0      	str	r0, [r4, #24]
   2a0a0:	4630      	mov	r0, r6
   2a0a2:	f000 fb8a 	bl	2a7ba <nrf_proto_to_rpc_proto>
   2a0a6:	4621      	mov	r1, r4
   2a0a8:	61e0      	str	r0, [r4, #28]
   2a0aa:	f247 0001 	movw	r0, #28673	; 0x7001
   2a0ae:	e9c5 9703 	strd	r9, r7, [r5, #12]
   2a0b2:	616e      	str	r6, [r5, #20]
   2a0b4:	f000 fbd8 	bl	2a868 <req_forward>
   2a0b8:	4604      	mov	r4, r0
   2a0ba:	b120      	cbz	r0, 2a0c6 <nrf_socket+0xba>
   2a0bc:	4640      	mov	r0, r8
   2a0be:	f7f9 f853 	bl	23168 <_sock_close>
   2a0c2:	4620      	mov	r0, r4
   2a0c4:	e7ab      	b.n	2a01e <nrf_socket+0x12>
   2a0c6:	6828      	ldr	r0, [r5, #0]
   2a0c8:	e7ad      	b.n	2a026 <nrf_socket+0x1a>

0002a0ca <nrf_connect>:
   2a0ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a0cc:	4607      	mov	r7, r0
   2a0ce:	460d      	mov	r5, r1
   2a0d0:	4616      	mov	r6, r2
   2a0d2:	f7f9 f837 	bl	23144 <sock_find>
   2a0d6:	4604      	mov	r4, r0
   2a0d8:	b938      	cbnz	r0, 2a0ea <nrf_connect+0x20>
   2a0da:	2009      	movs	r0, #9
   2a0dc:	f7ff f829 	bl	29132 <nrf_modem_os_errno_set>
   2a0e0:	f04f 35ff 	mov.w	r5, #4294967295
   2a0e4:	4628      	mov	r0, r5
   2a0e6:	b003      	add	sp, #12
   2a0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a0ea:	f7ff fe8b 	bl	29e04 <sock_is_closed>
   2a0ee:	b108      	cbz	r0, 2a0f4 <nrf_connect+0x2a>
   2a0f0:	69a0      	ldr	r0, [r4, #24]
   2a0f2:	e7f3      	b.n	2a0dc <nrf_connect+0x12>
   2a0f4:	4620      	mov	r0, r4
   2a0f6:	f7ff fe79 	bl	29dec <sock_is_connected>
   2a0fa:	b108      	cbz	r0, 2a100 <nrf_connect+0x36>
   2a0fc:	207f      	movs	r0, #127	; 0x7f
   2a0fe:	e7ed      	b.n	2a0dc <nrf_connect+0x12>
   2a100:	4620      	mov	r0, r4
   2a102:	f7ff fe6f 	bl	29de4 <sock_is_connecting>
   2a106:	b108      	cbz	r0, 2a10c <nrf_connect+0x42>
   2a108:	2078      	movs	r0, #120	; 0x78
   2a10a:	e7e7      	b.n	2a0dc <nrf_connect+0x12>
   2a10c:	b90d      	cbnz	r5, 2a112 <nrf_connect+0x48>
   2a10e:	200e      	movs	r0, #14
   2a110:	e7e4      	b.n	2a0dc <nrf_connect+0x12>
   2a112:	4631      	mov	r1, r6
   2a114:	4628      	mov	r0, r5
   2a116:	f7ff ff13 	bl	29f40 <sock_sockaddr_len_is_valid>
   2a11a:	b908      	cbnz	r0, 2a120 <nrf_connect+0x56>
   2a11c:	2016      	movs	r0, #22
   2a11e:	e7dd      	b.n	2a0dc <nrf_connect+0x12>
   2a120:	4629      	mov	r1, r5
   2a122:	4620      	mov	r0, r4
   2a124:	f7ff ff20 	bl	29f68 <sock_sockaddr_fam_is_valid>
   2a128:	b908      	cbnz	r0, 2a12e <nrf_connect+0x64>
   2a12a:	206a      	movs	r0, #106	; 0x6a
   2a12c:	e7d6      	b.n	2a0dc <nrf_connect+0x12>
   2a12e:	4620      	mov	r0, r4
   2a130:	f7ff fe64 	bl	29dfc <sock_is_nonblock>
   2a134:	4606      	mov	r6, r0
   2a136:	b118      	cbz	r0, 2a140 <nrf_connect+0x76>
   2a138:	6966      	ldr	r6, [r4, #20]
   2a13a:	3e11      	subs	r6, #17
   2a13c:	bf18      	it	ne
   2a13e:	2601      	movne	r6, #1
   2a140:	2000      	movs	r0, #0
   2a142:	f7ff fd8a 	bl	29c5a <rpc_client_msg_alloc>
   2a146:	4602      	mov	r2, r0
   2a148:	b908      	cbnz	r0, 2a14e <nrf_connect+0x84>
   2a14a:	2069      	movs	r0, #105	; 0x69
   2a14c:	e7c6      	b.n	2a0dc <nrf_connect+0x12>
   2a14e:	2300      	movs	r3, #0
   2a150:	2114      	movs	r1, #20
   2a152:	6107      	str	r7, [r0, #16]
   2a154:	7201      	strb	r1, [r0, #8]
   2a156:	7243      	strb	r3, [r0, #9]
   2a158:	7283      	strb	r3, [r0, #10]
   2a15a:	72c3      	strb	r3, [r0, #11]
   2a15c:	6869      	ldr	r1, [r5, #4]
   2a15e:	2901      	cmp	r1, #1
   2a160:	d00e      	beq.n	2a180 <nrf_connect+0xb6>
   2a162:	2902      	cmp	r1, #2
   2a164:	d014      	beq.n	2a190 <nrf_connect+0xc6>
   2a166:	7f23      	ldrb	r3, [r4, #28]
   2a168:	f247 0102 	movw	r1, #28674	; 0x7002
   2a16c:	f043 0304 	orr.w	r3, r3, #4
   2a170:	7723      	strb	r3, [r4, #28]
   2a172:	2004      	movs	r0, #4
   2a174:	60d6      	str	r6, [r2, #12]
   2a176:	f7ff fd8c 	bl	29c92 <rpc_client_msg_send>
   2a17a:	b1ce      	cbz	r6, 2a1b0 <nrf_connect+0xe6>
   2a17c:	2077      	movs	r0, #119	; 0x77
   2a17e:	e7ad      	b.n	2a0dc <nrf_connect+0x12>
   2a180:	8929      	ldrh	r1, [r5, #8]
   2a182:	75c3      	strb	r3, [r0, #23]
   2a184:	8281      	strh	r1, [r0, #20]
   2a186:	2104      	movs	r1, #4
   2a188:	7581      	strb	r1, [r0, #22]
   2a18a:	68eb      	ldr	r3, [r5, #12]
   2a18c:	6183      	str	r3, [r0, #24]
   2a18e:	e7ea      	b.n	2a166 <nrf_connect+0x9c>
   2a190:	8929      	ldrh	r1, [r5, #8]
   2a192:	75c3      	strb	r3, [r0, #23]
   2a194:	8281      	strh	r1, [r0, #20]
   2a196:	2110      	movs	r1, #16
   2a198:	186b      	adds	r3, r5, r1
   2a19a:	7581      	strb	r1, [r0, #22]
   2a19c:	3520      	adds	r5, #32
   2a19e:	f100 0118 	add.w	r1, r0, #24
   2a1a2:	f853 0b04 	ldr.w	r0, [r3], #4
   2a1a6:	42ab      	cmp	r3, r5
   2a1a8:	f841 0b04 	str.w	r0, [r1], #4
   2a1ac:	d1f9      	bne.n	2a1a2 <nrf_connect+0xd8>
   2a1ae:	e7da      	b.n	2a166 <nrf_connect+0x9c>
   2a1b0:	4620      	mov	r0, r4
   2a1b2:	f7ff fe8d 	bl	29ed0 <sock_sndtimeo_ms_get>
   2a1b6:	9001      	str	r0, [sp, #4]
   2a1b8:	4620      	mov	r0, r4
   2a1ba:	f7ff fe13 	bl	29de4 <sock_is_connecting>
   2a1be:	b918      	cbnz	r0, 2a1c8 <nrf_connect+0xfe>
   2a1c0:	69a5      	ldr	r5, [r4, #24]
   2a1c2:	b185      	cbz	r5, 2a1e6 <nrf_connect+0x11c>
   2a1c4:	4628      	mov	r0, r5
   2a1c6:	e789      	b.n	2a0dc <nrf_connect+0x12>
   2a1c8:	2002      	movs	r0, #2
   2a1ca:	a901      	add	r1, sp, #4
   2a1cc:	f7f4 fd5c 	bl	1ec88 <nrf_modem_os_timedwait>
   2a1d0:	f110 0f0b 	cmn.w	r0, #11
   2a1d4:	d005      	beq.n	2a1e2 <nrf_connect+0x118>
   2a1d6:	2800      	cmp	r0, #0
   2a1d8:	d0ee      	beq.n	2a1b8 <nrf_connect+0xee>
   2a1da:	2800      	cmp	r0, #0
   2a1dc:	bfb8      	it	lt
   2a1de:	4240      	neglt	r0, r0
   2a1e0:	e77c      	b.n	2a0dc <nrf_connect+0x12>
   2a1e2:	2074      	movs	r0, #116	; 0x74
   2a1e4:	e77a      	b.n	2a0dc <nrf_connect+0x12>
   2a1e6:	4620      	mov	r0, r4
   2a1e8:	f7ff fdf0 	bl	29dcc <sock_proto_is_secure>
   2a1ec:	2800      	cmp	r0, #0
   2a1ee:	f43f af79 	beq.w	2a0e4 <nrf_connect+0x1a>
   2a1f2:	4620      	mov	r0, r4
   2a1f4:	9901      	ldr	r1, [sp, #4]
   2a1f6:	f7f9 fe83 	bl	23f00 <tls_attach>
   2a1fa:	4605      	mov	r5, r0
   2a1fc:	e772      	b.n	2a0e4 <nrf_connect+0x1a>

0002a1fe <nrf_bind>:
   2a1fe:	b538      	push	{r3, r4, r5, lr}
   2a200:	4605      	mov	r5, r0
   2a202:	460c      	mov	r4, r1
   2a204:	f7f8 ff9e 	bl	23144 <sock_find>
   2a208:	b930      	cbnz	r0, 2a218 <nrf_bind+0x1a>
   2a20a:	2009      	movs	r0, #9
   2a20c:	f7fe ff91 	bl	29132 <nrf_modem_os_errno_set>
   2a210:	f04f 33ff 	mov.w	r3, #4294967295
   2a214:	4618      	mov	r0, r3
   2a216:	bd38      	pop	{r3, r4, r5, pc}
   2a218:	b90c      	cbnz	r4, 2a21e <nrf_bind+0x20>
   2a21a:	200e      	movs	r0, #14
   2a21c:	e7f6      	b.n	2a20c <nrf_bind+0xe>
   2a21e:	4621      	mov	r1, r4
   2a220:	f7ff fea2 	bl	29f68 <sock_sockaddr_fam_is_valid>
   2a224:	b908      	cbnz	r0, 2a22a <nrf_bind+0x2c>
   2a226:	206a      	movs	r0, #106	; 0x6a
   2a228:	e7f0      	b.n	2a20c <nrf_bind+0xe>
   2a22a:	2000      	movs	r0, #0
   2a22c:	f7ff fd15 	bl	29c5a <rpc_client_msg_alloc>
   2a230:	4601      	mov	r1, r0
   2a232:	b908      	cbnz	r0, 2a238 <nrf_bind+0x3a>
   2a234:	2069      	movs	r0, #105	; 0x69
   2a236:	e7e9      	b.n	2a20c <nrf_bind+0xe>
   2a238:	2300      	movs	r3, #0
   2a23a:	2214      	movs	r2, #20
   2a23c:	6105      	str	r5, [r0, #16]
   2a23e:	7202      	strb	r2, [r0, #8]
   2a240:	7243      	strb	r3, [r0, #9]
   2a242:	7283      	strb	r3, [r0, #10]
   2a244:	72c3      	strb	r3, [r0, #11]
   2a246:	6862      	ldr	r2, [r4, #4]
   2a248:	2a01      	cmp	r2, #1
   2a24a:	d009      	beq.n	2a260 <nrf_bind+0x62>
   2a24c:	2a02      	cmp	r2, #2
   2a24e:	d00f      	beq.n	2a270 <nrf_bind+0x72>
   2a250:	f247 0005 	movw	r0, #28677	; 0x7005
   2a254:	f000 fb08 	bl	2a868 <req_forward>
   2a258:	4603      	mov	r3, r0
   2a25a:	2800      	cmp	r0, #0
   2a25c:	d0da      	beq.n	2a214 <nrf_bind+0x16>
   2a25e:	e7d5      	b.n	2a20c <nrf_bind+0xe>
   2a260:	8922      	ldrh	r2, [r4, #8]
   2a262:	75c3      	strb	r3, [r0, #23]
   2a264:	8282      	strh	r2, [r0, #20]
   2a266:	2204      	movs	r2, #4
   2a268:	7582      	strb	r2, [r0, #22]
   2a26a:	68e3      	ldr	r3, [r4, #12]
   2a26c:	6183      	str	r3, [r0, #24]
   2a26e:	e7ef      	b.n	2a250 <nrf_bind+0x52>
   2a270:	8922      	ldrh	r2, [r4, #8]
   2a272:	75c3      	strb	r3, [r0, #23]
   2a274:	8282      	strh	r2, [r0, #20]
   2a276:	2210      	movs	r2, #16
   2a278:	18a3      	adds	r3, r4, r2
   2a27a:	7582      	strb	r2, [r0, #22]
   2a27c:	3420      	adds	r4, #32
   2a27e:	f100 0218 	add.w	r2, r0, #24
   2a282:	f853 0b04 	ldr.w	r0, [r3], #4
   2a286:	42a3      	cmp	r3, r4
   2a288:	f842 0b04 	str.w	r0, [r2], #4
   2a28c:	d1f9      	bne.n	2a282 <nrf_bind+0x84>
   2a28e:	e7df      	b.n	2a250 <nrf_bind+0x52>

0002a290 <nrf_listen>:
   2a290:	b538      	push	{r3, r4, r5, lr}
   2a292:	4605      	mov	r5, r0
   2a294:	460c      	mov	r4, r1
   2a296:	f7f8 ff55 	bl	23144 <sock_find>
   2a29a:	b930      	cbnz	r0, 2a2aa <nrf_listen+0x1a>
   2a29c:	2009      	movs	r0, #9
   2a29e:	f7fe ff48 	bl	29132 <nrf_modem_os_errno_set>
   2a2a2:	f04f 33ff 	mov.w	r3, #4294967295
   2a2a6:	4618      	mov	r0, r3
   2a2a8:	bd38      	pop	{r3, r4, r5, pc}
   2a2aa:	f7ff fd80 	bl	29dae <sock_is_stream>
   2a2ae:	b908      	cbnz	r0, 2a2b4 <nrf_listen+0x24>
   2a2b0:	205f      	movs	r0, #95	; 0x5f
   2a2b2:	e7f4      	b.n	2a29e <nrf_listen+0xe>
   2a2b4:	2000      	movs	r0, #0
   2a2b6:	f7ff fcd0 	bl	29c5a <rpc_client_msg_alloc>
   2a2ba:	4601      	mov	r1, r0
   2a2bc:	b908      	cbnz	r0, 2a2c2 <nrf_listen+0x32>
   2a2be:	2069      	movs	r0, #105	; 0x69
   2a2c0:	e7ed      	b.n	2a29e <nrf_listen+0xe>
   2a2c2:	2300      	movs	r3, #0
   2a2c4:	2204      	movs	r2, #4
   2a2c6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   2a2ca:	7243      	strb	r3, [r0, #9]
   2a2cc:	7283      	strb	r3, [r0, #10]
   2a2ce:	72c3      	strb	r3, [r0, #11]
   2a2d0:	6105      	str	r5, [r0, #16]
   2a2d2:	7202      	strb	r2, [r0, #8]
   2a2d4:	6144      	str	r4, [r0, #20]
   2a2d6:	f247 0008 	movw	r0, #28680	; 0x7008
   2a2da:	f000 fac5 	bl	2a868 <req_forward>
   2a2de:	4603      	mov	r3, r0
   2a2e0:	2800      	cmp	r0, #0
   2a2e2:	d0e0      	beq.n	2a2a6 <nrf_listen+0x16>
   2a2e4:	e7db      	b.n	2a29e <nrf_listen+0xe>

0002a2e6 <nrf_accept>:
   2a2e6:	2300      	movs	r3, #0
   2a2e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a2ec:	b08d      	sub	sp, #52	; 0x34
   2a2ee:	4606      	mov	r6, r0
   2a2f0:	4688      	mov	r8, r1
   2a2f2:	4614      	mov	r4, r2
   2a2f4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2a2f8:	f7f8 ff24 	bl	23144 <sock_find>
   2a2fc:	4605      	mov	r5, r0
   2a2fe:	b938      	cbnz	r0, 2a310 <nrf_accept+0x2a>
   2a300:	2009      	movs	r0, #9
   2a302:	f7fe ff16 	bl	29132 <nrf_modem_os_errno_set>
   2a306:	f04f 30ff 	mov.w	r0, #4294967295
   2a30a:	b00d      	add	sp, #52	; 0x34
   2a30c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2a310:	f1b8 0f00 	cmp.w	r8, #0
   2a314:	d002      	beq.n	2a31c <nrf_accept+0x36>
   2a316:	b91c      	cbnz	r4, 2a320 <nrf_accept+0x3a>
   2a318:	200e      	movs	r0, #14
   2a31a:	e7f2      	b.n	2a302 <nrf_accept+0x1c>
   2a31c:	2c00      	cmp	r4, #0
   2a31e:	d1fb      	bne.n	2a318 <nrf_accept+0x32>
   2a320:	4628      	mov	r0, r5
   2a322:	f7ff fd44 	bl	29dae <sock_is_stream>
   2a326:	b908      	cbnz	r0, 2a32c <nrf_accept+0x46>
   2a328:	205f      	movs	r0, #95	; 0x5f
   2a32a:	e7ea      	b.n	2a302 <nrf_accept+0x1c>
   2a32c:	4628      	mov	r0, r5
   2a32e:	f7ff fd65 	bl	29dfc <sock_is_nonblock>
   2a332:	b128      	cbz	r0, 2a340 <nrf_accept+0x5a>
   2a334:	4628      	mov	r0, r5
   2a336:	f7ff fd96 	bl	29e66 <sock_can_accept>
   2a33a:	b908      	cbnz	r0, 2a340 <nrf_accept+0x5a>
   2a33c:	200b      	movs	r0, #11
   2a33e:	e7e0      	b.n	2a302 <nrf_accept+0x1c>
   2a340:	f7f8 feda 	bl	230f8 <sock_open>
   2a344:	4607      	mov	r7, r0
   2a346:	b908      	cbnz	r0, 2a34c <nrf_accept+0x66>
   2a348:	2017      	movs	r0, #23
   2a34a:	e7da      	b.n	2a302 <nrf_accept+0x1c>
   2a34c:	2000      	movs	r0, #0
   2a34e:	f7ff fc84 	bl	29c5a <rpc_client_msg_alloc>
   2a352:	4605      	mov	r5, r0
   2a354:	b920      	cbnz	r0, 2a360 <nrf_accept+0x7a>
   2a356:	6838      	ldr	r0, [r7, #0]
   2a358:	f7f8 ff06 	bl	23168 <_sock_close>
   2a35c:	2069      	movs	r0, #105	; 0x69
   2a35e:	e7d0      	b.n	2a302 <nrf_accept+0x1c>
   2a360:	6106      	str	r6, [r0, #16]
   2a362:	a901      	add	r1, sp, #4
   2a364:	9702      	str	r7, [sp, #8]
   2a366:	f000 faab 	bl	2a8c0 <req_cookie_set>
   2a36a:	4629      	mov	r1, r5
   2a36c:	f247 000c 	movw	r0, #28684	; 0x700c
   2a370:	f000 fa7a 	bl	2a868 <req_forward>
   2a374:	4606      	mov	r6, r0
   2a376:	b120      	cbz	r0, 2a382 <nrf_accept+0x9c>
   2a378:	6838      	ldr	r0, [r7, #0]
   2a37a:	f7f8 fef5 	bl	23168 <_sock_close>
   2a37e:	4630      	mov	r0, r6
   2a380:	e7bf      	b.n	2a302 <nrf_accept+0x1c>
   2a382:	9d01      	ldr	r5, [sp, #4]
   2a384:	f1b8 0f00 	cmp.w	r8, #0
   2a388:	d006      	beq.n	2a398 <nrf_accept+0xb2>
   2a38a:	b12c      	cbz	r4, 2a398 <nrf_accept+0xb2>
   2a38c:	8beb      	ldrh	r3, [r5, #30]
   2a38e:	2b04      	cmp	r3, #4
   2a390:	d007      	beq.n	2a3a2 <nrf_accept+0xbc>
   2a392:	2b10      	cmp	r3, #16
   2a394:	d01e      	beq.n	2a3d4 <nrf_accept+0xee>
   2a396:	6026      	str	r6, [r4, #0]
   2a398:	4628      	mov	r0, r5
   2a39a:	f7ff fc81 	bl	29ca0 <rpc_client_msg_rx_free>
   2a39e:	6838      	ldr	r0, [r7, #0]
   2a3a0:	e7b3      	b.n	2a30a <nrf_accept+0x24>
   2a3a2:	2310      	movs	r3, #16
   2a3a4:	9003      	str	r0, [sp, #12]
   2a3a6:	f88d 300c 	strb.w	r3, [sp, #12]
   2a3aa:	2301      	movs	r3, #1
   2a3ac:	6826      	ldr	r6, [r4, #0]
   2a3ae:	9005      	str	r0, [sp, #20]
   2a3b0:	2e10      	cmp	r6, #16
   2a3b2:	bf28      	it	cs
   2a3b4:	2610      	movcs	r6, #16
   2a3b6:	9304      	str	r3, [sp, #16]
   2a3b8:	7f2b      	ldrb	r3, [r5, #28]
   2a3ba:	7f6a      	ldrb	r2, [r5, #29]
   2a3bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2a3c0:	f8ad 3014 	strh.w	r3, [sp, #20]
   2a3c4:	6a2b      	ldr	r3, [r5, #32]
   2a3c6:	9306      	str	r3, [sp, #24]
   2a3c8:	4632      	mov	r2, r6
   2a3ca:	4640      	mov	r0, r8
   2a3cc:	a903      	add	r1, sp, #12
   2a3ce:	f000 ff0c 	bl	2b1ea <memcpy>
   2a3d2:	e7e0      	b.n	2a396 <nrf_accept+0xb0>
   2a3d4:	f04f 0924 	mov.w	r9, #36	; 0x24
   2a3d8:	4601      	mov	r1, r0
   2a3da:	464a      	mov	r2, r9
   2a3dc:	a803      	add	r0, sp, #12
   2a3de:	f000 ff11 	bl	2b204 <memset>
   2a3e2:	2302      	movs	r3, #2
   2a3e4:	f88d 900c 	strb.w	r9, [sp, #12]
   2a3e8:	9304      	str	r3, [sp, #16]
   2a3ea:	7f2b      	ldrb	r3, [r5, #28]
   2a3ec:	7f6a      	ldrb	r2, [r5, #29]
   2a3ee:	ae07      	add	r6, sp, #28
   2a3f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2a3f4:	f8ad 3014 	strh.w	r3, [sp, #20]
   2a3f8:	f105 0c30 	add.w	ip, r5, #48	; 0x30
   2a3fc:	f105 0320 	add.w	r3, r5, #32
   2a400:	4632      	mov	r2, r6
   2a402:	6818      	ldr	r0, [r3, #0]
   2a404:	6859      	ldr	r1, [r3, #4]
   2a406:	3308      	adds	r3, #8
   2a408:	c203      	stmia	r2!, {r0, r1}
   2a40a:	4563      	cmp	r3, ip
   2a40c:	4616      	mov	r6, r2
   2a40e:	d1f7      	bne.n	2a400 <nrf_accept+0x11a>
   2a410:	6826      	ldr	r6, [r4, #0]
   2a412:	2e24      	cmp	r6, #36	; 0x24
   2a414:	bf28      	it	cs
   2a416:	2624      	movcs	r6, #36	; 0x24
   2a418:	e7d6      	b.n	2a3c8 <nrf_accept+0xe2>

0002a41a <nrf_recvfrom>:
   2a41a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a41e:	b085      	sub	sp, #20
   2a420:	4690      	mov	r8, r2
   2a422:	e9dd b70e 	ldrd	fp, r7, [sp, #56]	; 0x38
   2a426:	461e      	mov	r6, r3
   2a428:	9101      	str	r1, [sp, #4]
   2a42a:	f403 7a80 	and.w	sl, r3, #256	; 0x100
   2a42e:	f7f8 fe89 	bl	23144 <sock_find>
   2a432:	4604      	mov	r4, r0
   2a434:	b940      	cbnz	r0, 2a448 <nrf_recvfrom+0x2e>
   2a436:	2009      	movs	r0, #9
   2a438:	f7fe fe7b 	bl	29132 <nrf_modem_os_errno_set>
   2a43c:	f04f 39ff 	mov.w	r9, #4294967295
   2a440:	4648      	mov	r0, r9
   2a442:	b005      	add	sp, #20
   2a444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a448:	f436 79a1 	bics.w	r9, r6, #322	; 0x142
   2a44c:	d001      	beq.n	2a452 <nrf_recvfrom+0x38>
   2a44e:	205f      	movs	r0, #95	; 0x5f
   2a450:	e7f2      	b.n	2a438 <nrf_recvfrom+0x1e>
   2a452:	f1bb 0f00 	cmp.w	fp, #0
   2a456:	d002      	beq.n	2a45e <nrf_recvfrom+0x44>
   2a458:	b91f      	cbnz	r7, 2a462 <nrf_recvfrom+0x48>
   2a45a:	200e      	movs	r0, #14
   2a45c:	e7ec      	b.n	2a438 <nrf_recvfrom+0x1e>
   2a45e:	2f00      	cmp	r7, #0
   2a460:	d1fb      	bne.n	2a45a <nrf_recvfrom+0x40>
   2a462:	4620      	mov	r0, r4
   2a464:	f7ff fca3 	bl	29dae <sock_is_stream>
   2a468:	b128      	cbz	r0, 2a476 <nrf_recvfrom+0x5c>
   2a46a:	4620      	mov	r0, r4
   2a46c:	f7ff fcbe 	bl	29dec <sock_is_connected>
   2a470:	b908      	cbnz	r0, 2a476 <nrf_recvfrom+0x5c>
   2a472:	2080      	movs	r0, #128	; 0x80
   2a474:	e7e0      	b.n	2a438 <nrf_recvfrom+0x1e>
   2a476:	f1ba 0f00 	cmp.w	sl, #0
   2a47a:	d117      	bne.n	2a4ac <nrf_recvfrom+0x92>
   2a47c:	4620      	mov	r0, r4
   2a47e:	f7ff fcbd 	bl	29dfc <sock_is_nonblock>
   2a482:	b9a8      	cbnz	r0, 2a4b0 <nrf_recvfrom+0x96>
   2a484:	f3c6 1580 	ubfx	r5, r6, #6, #1
   2a488:	4620      	mov	r0, r4
   2a48a:	f7ff fd0f 	bl	29eac <sock_rcvtimeo_ms_get>
   2a48e:	9003      	str	r0, [sp, #12]
   2a490:	4620      	mov	r0, r4
   2a492:	f7ff fcb7 	bl	29e04 <sock_is_closed>
   2a496:	b1b8      	cbz	r0, 2a4c8 <nrf_recvfrom+0xae>
   2a498:	4620      	mov	r0, r4
   2a49a:	f7ff fc63 	bl	29d64 <sock_has_pkt>
   2a49e:	bb78      	cbnz	r0, 2a500 <nrf_recvfrom+0xe6>
   2a4a0:	4620      	mov	r0, r4
   2a4a2:	f7ff fcc5 	bl	29e30 <sock_has_error>
   2a4a6:	b1c0      	cbz	r0, 2a4da <nrf_recvfrom+0xc0>
   2a4a8:	69a0      	ldr	r0, [r4, #24]
   2a4aa:	e7c5      	b.n	2a438 <nrf_recvfrom+0x1e>
   2a4ac:	2500      	movs	r5, #0
   2a4ae:	e7eb      	b.n	2a488 <nrf_recvfrom+0x6e>
   2a4b0:	2501      	movs	r5, #1
   2a4b2:	e7e9      	b.n	2a488 <nrf_recvfrom+0x6e>
   2a4b4:	2002      	movs	r0, #2
   2a4b6:	a903      	add	r1, sp, #12
   2a4b8:	f7f4 fbe6 	bl	1ec88 <nrf_modem_os_timedwait>
   2a4bc:	2800      	cmp	r0, #0
   2a4be:	d0e7      	beq.n	2a490 <nrf_recvfrom+0x76>
   2a4c0:	2800      	cmp	r0, #0
   2a4c2:	bfb8      	it	lt
   2a4c4:	4240      	neglt	r0, r0
   2a4c6:	e7b7      	b.n	2a438 <nrf_recvfrom+0x1e>
   2a4c8:	4620      	mov	r0, r4
   2a4ca:	f7ff fc4b 	bl	29d64 <sock_has_pkt>
   2a4ce:	2800      	cmp	r0, #0
   2a4d0:	d1e2      	bne.n	2a498 <nrf_recvfrom+0x7e>
   2a4d2:	2d00      	cmp	r5, #0
   2a4d4:	d0ee      	beq.n	2a4b4 <nrf_recvfrom+0x9a>
   2a4d6:	200b      	movs	r0, #11
   2a4d8:	e7ae      	b.n	2a438 <nrf_recvfrom+0x1e>
   2a4da:	4620      	mov	r0, r4
   2a4dc:	f7ff fc9a 	bl	29e14 <sock_is_eof>
   2a4e0:	2800      	cmp	r0, #0
   2a4e2:	d1ad      	bne.n	2a440 <nrf_recvfrom+0x26>
   2a4e4:	4620      	mov	r0, r4
   2a4e6:	f7ff fc91 	bl	29e0c <sock_is_local_closed>
   2a4ea:	b148      	cbz	r0, 2a500 <nrf_recvfrom+0xe6>
   2a4ec:	4620      	mov	r0, r4
   2a4ee:	f7ff fc5e 	bl	29dae <sock_is_stream>
   2a4f2:	2800      	cmp	r0, #0
   2a4f4:	d1a4      	bne.n	2a440 <nrf_recvfrom+0x26>
   2a4f6:	4620      	mov	r0, r4
   2a4f8:	f7ff fc5e 	bl	29db8 <sock_is_datagram>
   2a4fc:	2800      	cmp	r0, #0
   2a4fe:	d19a      	bne.n	2a436 <nrf_recvfrom+0x1c>
   2a500:	4620      	mov	r0, r4
   2a502:	f7ff fc52 	bl	29daa <sock_pkt_peek_head>
   2a506:	4605      	mov	r5, r0
   2a508:	f1bb 0f00 	cmp.w	fp, #0
   2a50c:	d00a      	beq.n	2a524 <nrf_recvfrom+0x10a>
   2a50e:	68c1      	ldr	r1, [r0, #12]
   2a510:	b369      	cbz	r1, 2a56e <nrf_recvfrom+0x154>
   2a512:	780a      	ldrb	r2, [r1, #0]
   2a514:	683b      	ldr	r3, [r7, #0]
   2a516:	4658      	mov	r0, fp
   2a518:	429a      	cmp	r2, r3
   2a51a:	bf28      	it	cs
   2a51c:	461a      	movcs	r2, r3
   2a51e:	603a      	str	r2, [r7, #0]
   2a520:	f000 fe63 	bl	2b1ea <memcpy>
   2a524:	f006 0602 	and.w	r6, r6, #2
   2a528:	4628      	mov	r0, r5
   2a52a:	f7ff fd3a 	bl	29fa2 <pkt_bytes_left>
   2a52e:	4540      	cmp	r0, r8
   2a530:	d81f      	bhi.n	2a572 <nrf_recvfrom+0x158>
   2a532:	4628      	mov	r0, r5
   2a534:	f7ff fd35 	bl	29fa2 <pkt_bytes_left>
   2a538:	4607      	mov	r7, r0
   2a53a:	2f00      	cmp	r7, #0
   2a53c:	d080      	beq.n	2a440 <nrf_recvfrom+0x26>
   2a53e:	9b01      	ldr	r3, [sp, #4]
   2a540:	4628      	mov	r0, r5
   2a542:	eb03 0b09 	add.w	fp, r3, r9
   2a546:	f7ff fd28 	bl	29f9a <pkt_bytes_get>
   2a54a:	463a      	mov	r2, r7
   2a54c:	4601      	mov	r1, r0
   2a54e:	4658      	mov	r0, fp
   2a550:	f000 fe4b 	bl	2b1ea <memcpy>
   2a554:	4620      	mov	r0, r4
   2a556:	44b9      	add	r9, r7
   2a558:	f7ff fc2e 	bl	29db8 <sock_is_datagram>
   2a55c:	b158      	cbz	r0, 2a576 <nrf_recvfrom+0x15c>
   2a55e:	2e00      	cmp	r6, #0
   2a560:	f47f af6e 	bne.w	2a440 <nrf_recvfrom+0x26>
   2a564:	4629      	mov	r1, r5
   2a566:	4620      	mov	r0, r4
   2a568:	f7ff fc0b 	bl	29d82 <sock_pkt_remove>
   2a56c:	e768      	b.n	2a440 <nrf_recvfrom+0x26>
   2a56e:	6039      	str	r1, [r7, #0]
   2a570:	e7d8      	b.n	2a524 <nrf_recvfrom+0x10a>
   2a572:	4647      	mov	r7, r8
   2a574:	e7e1      	b.n	2a53a <nrf_recvfrom+0x120>
   2a576:	4620      	mov	r0, r4
   2a578:	f7ff fc23 	bl	29dc2 <sock_is_raw>
   2a57c:	2800      	cmp	r0, #0
   2a57e:	d1ee      	bne.n	2a55e <nrf_recvfrom+0x144>
   2a580:	b956      	cbnz	r6, 2a598 <nrf_recvfrom+0x17e>
   2a582:	896b      	ldrh	r3, [r5, #10]
   2a584:	4628      	mov	r0, r5
   2a586:	443b      	add	r3, r7
   2a588:	816b      	strh	r3, [r5, #10]
   2a58a:	f7ff fd0a 	bl	29fa2 <pkt_bytes_left>
   2a58e:	b918      	cbnz	r0, 2a598 <nrf_recvfrom+0x17e>
   2a590:	4629      	mov	r1, r5
   2a592:	4620      	mov	r0, r4
   2a594:	f7ff fbf5 	bl	29d82 <sock_pkt_remove>
   2a598:	45b8      	cmp	r8, r7
   2a59a:	f43f af51 	beq.w	2a440 <nrf_recvfrom+0x26>
   2a59e:	f1ba 0f00 	cmp.w	sl, #0
   2a5a2:	d10a      	bne.n	2a5ba <nrf_recvfrom+0x1a0>
   2a5a4:	b976      	cbnz	r6, 2a5c4 <nrf_recvfrom+0x1aa>
   2a5a6:	4620      	mov	r0, r4
   2a5a8:	f7ff fbff 	bl	29daa <sock_pkt_peek_head>
   2a5ac:	e00d      	b.n	2a5ca <nrf_recvfrom+0x1b0>
   2a5ae:	4620      	mov	r0, r4
   2a5b0:	f7ff fc28 	bl	29e04 <sock_is_closed>
   2a5b4:	2800      	cmp	r0, #0
   2a5b6:	f47f af43 	bne.w	2a440 <nrf_recvfrom+0x26>
   2a5ba:	b16e      	cbz	r6, 2a5d8 <nrf_recvfrom+0x1be>
   2a5bc:	4628      	mov	r0, r5
   2a5be:	f7ff fce3 	bl	29f88 <pkt_has_next>
   2a5c2:	b170      	cbz	r0, 2a5e2 <nrf_recvfrom+0x1c8>
   2a5c4:	4628      	mov	r0, r5
   2a5c6:	f7ff fce5 	bl	29f94 <pkt_peek_next>
   2a5ca:	4605      	mov	r5, r0
   2a5cc:	2800      	cmp	r0, #0
   2a5ce:	f43f af37 	beq.w	2a440 <nrf_recvfrom+0x26>
   2a5d2:	eba8 0807 	sub.w	r8, r8, r7
   2a5d6:	e7a7      	b.n	2a528 <nrf_recvfrom+0x10e>
   2a5d8:	4620      	mov	r0, r4
   2a5da:	f7ff fbc3 	bl	29d64 <sock_has_pkt>
   2a5de:	2800      	cmp	r0, #0
   2a5e0:	d1e1      	bne.n	2a5a6 <nrf_recvfrom+0x18c>
   2a5e2:	2002      	movs	r0, #2
   2a5e4:	a903      	add	r1, sp, #12
   2a5e6:	f7f4 fb4f 	bl	1ec88 <nrf_modem_os_timedwait>
   2a5ea:	2800      	cmp	r0, #0
   2a5ec:	d0df      	beq.n	2a5ae <nrf_recvfrom+0x194>
   2a5ee:	f1b9 0f00 	cmp.w	r9, #0
   2a5f2:	f47f af25 	bne.w	2a440 <nrf_recvfrom+0x26>
   2a5f6:	e763      	b.n	2a4c0 <nrf_recvfrom+0xa6>

0002a5f8 <rpc_ip_deinit>:
   2a5f8:	b508      	push	{r3, lr}
   2a5fa:	f7f8 fdcb 	bl	23194 <sock_shutdown>
   2a5fe:	2000      	movs	r0, #0
   2a600:	bd08      	pop	{r3, pc}

0002a602 <tls_setopt_role>:
   2a602:	b508      	push	{r3, lr}
   2a604:	b109      	cbz	r1, 2a60a <tls_setopt_role+0x8>
   2a606:	2a04      	cmp	r2, #4
   2a608:	d005      	beq.n	2a616 <tls_setopt_role+0x14>
   2a60a:	2016      	movs	r0, #22
   2a60c:	f7fe fd91 	bl	29132 <nrf_modem_os_errno_set>
   2a610:	f04f 30ff 	mov.w	r0, #4294967295
   2a614:	e006      	b.n	2a624 <tls_setopt_role+0x22>
   2a616:	780b      	ldrb	r3, [r1, #0]
   2a618:	b12b      	cbz	r3, 2a626 <tls_setopt_role+0x24>
   2a61a:	2b01      	cmp	r3, #1
   2a61c:	d1f5      	bne.n	2a60a <tls_setopt_role+0x8>
   2a61e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   2a622:	2000      	movs	r0, #0
   2a624:	bd08      	pop	{r3, pc}
   2a626:	2302      	movs	r3, #2
   2a628:	e7f9      	b.n	2a61e <tls_setopt_role+0x1c>

0002a62a <tls_setopt_taglist>:
   2a62a:	b510      	push	{r4, lr}
   2a62c:	1e54      	subs	r4, r2, #1
   2a62e:	2c1b      	cmp	r4, #27
   2a630:	d802      	bhi.n	2a638 <tls_setopt_taglist+0xe>
   2a632:	f012 0403 	ands.w	r4, r2, #3
   2a636:	d005      	beq.n	2a644 <tls_setopt_taglist+0x1a>
   2a638:	2016      	movs	r0, #22
   2a63a:	f7fe fd7a 	bl	29132 <nrf_modem_os_errno_set>
   2a63e:	f04f 30ff 	mov.w	r0, #4294967295
   2a642:	bd10      	pop	{r4, pc}
   2a644:	0893      	lsrs	r3, r2, #2
   2a646:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   2a64a:	3048      	adds	r0, #72	; 0x48
   2a64c:	f000 fdcd 	bl	2b1ea <memcpy>
   2a650:	4620      	mov	r0, r4
   2a652:	e7f6      	b.n	2a642 <tls_setopt_taglist+0x18>

0002a654 <tls_setopt_sess_cache>:
   2a654:	b508      	push	{r3, lr}
   2a656:	b109      	cbz	r1, 2a65c <tls_setopt_sess_cache+0x8>
   2a658:	2a04      	cmp	r2, #4
   2a65a:	d005      	beq.n	2a668 <tls_setopt_sess_cache+0x14>
   2a65c:	2016      	movs	r0, #22
   2a65e:	f7fe fd68 	bl	29132 <nrf_modem_os_errno_set>
   2a662:	f04f 30ff 	mov.w	r0, #4294967295
   2a666:	bd08      	pop	{r3, pc}
   2a668:	780b      	ldrb	r3, [r1, #0]
   2a66a:	3b00      	subs	r3, #0
   2a66c:	bf18      	it	ne
   2a66e:	2301      	movne	r3, #1
   2a670:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   2a674:	2000      	movs	r0, #0
   2a676:	e7f6      	b.n	2a666 <tls_setopt_sess_cache+0x12>

0002a678 <tls_setopt_peer_verify>:
   2a678:	b508      	push	{r3, lr}
   2a67a:	b109      	cbz	r1, 2a680 <tls_setopt_peer_verify+0x8>
   2a67c:	2a04      	cmp	r2, #4
   2a67e:	d005      	beq.n	2a68c <tls_setopt_peer_verify+0x14>
   2a680:	2016      	movs	r0, #22
   2a682:	f7fe fd56 	bl	29132 <nrf_modem_os_errno_set>
   2a686:	f04f 30ff 	mov.w	r0, #4294967295
   2a68a:	bd08      	pop	{r3, pc}
   2a68c:	680b      	ldr	r3, [r1, #0]
   2a68e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   2a692:	2000      	movs	r0, #0
   2a694:	e7f9      	b.n	2a68a <tls_setopt_peer_verify+0x12>

0002a696 <tls_setopt_hostname>:
   2a696:	b570      	push	{r4, r5, r6, lr}
   2a698:	4605      	mov	r5, r0
   2a69a:	4614      	mov	r4, r2
   2a69c:	460e      	mov	r6, r1
   2a69e:	b931      	cbnz	r1, 2a6ae <tls_setopt_hostname+0x18>
   2a6a0:	b192      	cbz	r2, 2a6c8 <tls_setopt_hostname+0x32>
   2a6a2:	2016      	movs	r0, #22
   2a6a4:	f7fe fd45 	bl	29132 <nrf_modem_os_errno_set>
   2a6a8:	f04f 30ff 	mov.w	r0, #4294967295
   2a6ac:	bd70      	pop	{r4, r5, r6, pc}
   2a6ae:	2a00      	cmp	r2, #0
   2a6b0:	d0f7      	beq.n	2a6a2 <tls_setopt_hostname+0xc>
   2a6b2:	6c00      	ldr	r0, [r0, #64]	; 0x40
   2a6b4:	b108      	cbz	r0, 2a6ba <tls_setopt_hostname+0x24>
   2a6b6:	f7f4 fbe9 	bl	1ee8c <nrf_modem_os_free>
   2a6ba:	1c60      	adds	r0, r4, #1
   2a6bc:	f7f4 fbde 	bl	1ee7c <nrf_modem_os_alloc>
   2a6c0:	6428      	str	r0, [r5, #64]	; 0x40
   2a6c2:	b938      	cbnz	r0, 2a6d4 <tls_setopt_hostname+0x3e>
   2a6c4:	2069      	movs	r0, #105	; 0x69
   2a6c6:	e7ed      	b.n	2a6a4 <tls_setopt_hostname+0xe>
   2a6c8:	6c00      	ldr	r0, [r0, #64]	; 0x40
   2a6ca:	b108      	cbz	r0, 2a6d0 <tls_setopt_hostname+0x3a>
   2a6cc:	f7f4 fbde 	bl	1ee8c <nrf_modem_os_free>
   2a6d0:	2000      	movs	r0, #0
   2a6d2:	e7eb      	b.n	2a6ac <tls_setopt_hostname+0x16>
   2a6d4:	4622      	mov	r2, r4
   2a6d6:	4631      	mov	r1, r6
   2a6d8:	f000 fd87 	bl	2b1ea <memcpy>
   2a6dc:	2200      	movs	r2, #0
   2a6de:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   2a6e0:	551a      	strb	r2, [r3, r4]
   2a6e2:	e7f5      	b.n	2a6d0 <tls_setopt_hostname+0x3a>

0002a6e4 <nrf_poll_one>:
   2a6e4:	b538      	push	{r3, r4, r5, lr}
   2a6e6:	4604      	mov	r4, r0
   2a6e8:	6800      	ldr	r0, [r0, #0]
   2a6ea:	f7f8 fd2b 	bl	23144 <sock_find>
   2a6ee:	4605      	mov	r5, r0
   2a6f0:	b928      	cbnz	r0, 2a6fe <nrf_poll_one+0x1a>
   2a6f2:	2001      	movs	r0, #1
   2a6f4:	88e3      	ldrh	r3, [r4, #6]
   2a6f6:	f043 0320 	orr.w	r3, r3, #32
   2a6fa:	80e3      	strh	r3, [r4, #6]
   2a6fc:	bd38      	pop	{r3, r4, r5, pc}
   2a6fe:	f7ff fb85 	bl	29e0c <sock_is_local_closed>
   2a702:	2800      	cmp	r0, #0
   2a704:	d1f5      	bne.n	2a6f2 <nrf_poll_one+0xe>
   2a706:	4628      	mov	r0, r5
   2a708:	f7ff fb92 	bl	29e30 <sock_has_error>
   2a70c:	b1f8      	cbz	r0, 2a74e <nrf_poll_one+0x6a>
   2a70e:	88e3      	ldrh	r3, [r4, #6]
   2a710:	f043 0308 	orr.w	r3, r3, #8
   2a714:	80e3      	strh	r3, [r4, #6]
   2a716:	88a3      	ldrh	r3, [r4, #4]
   2a718:	07da      	lsls	r2, r3, #31
   2a71a:	d507      	bpl.n	2a72c <nrf_poll_one+0x48>
   2a71c:	4628      	mov	r0, r5
   2a71e:	f7ff fb9d 	bl	29e5c <sock_can_read>
   2a722:	b1e8      	cbz	r0, 2a760 <nrf_poll_one+0x7c>
   2a724:	88e3      	ldrh	r3, [r4, #6]
   2a726:	f043 0301 	orr.w	r3, r3, #1
   2a72a:	80e3      	strh	r3, [r4, #6]
   2a72c:	88a3      	ldrh	r3, [r4, #4]
   2a72e:	075b      	lsls	r3, r3, #29
   2a730:	d507      	bpl.n	2a742 <nrf_poll_one+0x5e>
   2a732:	4628      	mov	r0, r5
   2a734:	f7ff fb9c 	bl	29e70 <sock_can_send>
   2a738:	b118      	cbz	r0, 2a742 <nrf_poll_one+0x5e>
   2a73a:	88e3      	ldrh	r3, [r4, #6]
   2a73c:	f043 0304 	orr.w	r3, r3, #4
   2a740:	80e3      	strh	r3, [r4, #6]
   2a742:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
   2a746:	3800      	subs	r0, #0
   2a748:	bf18      	it	ne
   2a74a:	2001      	movne	r0, #1
   2a74c:	e7d6      	b.n	2a6fc <nrf_poll_one+0x18>
   2a74e:	4628      	mov	r0, r5
   2a750:	f7ff fb60 	bl	29e14 <sock_is_eof>
   2a754:	2800      	cmp	r0, #0
   2a756:	d0de      	beq.n	2a716 <nrf_poll_one+0x32>
   2a758:	88e3      	ldrh	r3, [r4, #6]
   2a75a:	f043 0310 	orr.w	r3, r3, #16
   2a75e:	e7d9      	b.n	2a714 <nrf_poll_one+0x30>
   2a760:	4628      	mov	r0, r5
   2a762:	f7ff fb80 	bl	29e66 <sock_can_accept>
   2a766:	2800      	cmp	r0, #0
   2a768:	d1dc      	bne.n	2a724 <nrf_poll_one+0x40>
   2a76a:	4628      	mov	r0, r5
   2a76c:	f7ff fb52 	bl	29e14 <sock_is_eof>
   2a770:	2800      	cmp	r0, #0
   2a772:	d1d7      	bne.n	2a724 <nrf_poll_one+0x40>
   2a774:	e7da      	b.n	2a72c <nrf_poll_one+0x48>

0002a776 <nrf_fcntl>:
   2a776:	b538      	push	{r3, r4, r5, lr}
   2a778:	460d      	mov	r5, r1
   2a77a:	4614      	mov	r4, r2
   2a77c:	f7f8 fce2 	bl	23144 <sock_find>
   2a780:	b928      	cbnz	r0, 2a78e <nrf_fcntl+0x18>
   2a782:	2009      	movs	r0, #9
   2a784:	f7fe fcd5 	bl	29132 <nrf_modem_os_errno_set>
   2a788:	f04f 30ff 	mov.w	r0, #4294967295
   2a78c:	e006      	b.n	2a79c <nrf_fcntl+0x26>
   2a78e:	2d03      	cmp	r5, #3
   2a790:	d003      	beq.n	2a79a <nrf_fcntl+0x24>
   2a792:	2d04      	cmp	r5, #4
   2a794:	d003      	beq.n	2a79e <nrf_fcntl+0x28>
   2a796:	2016      	movs	r0, #22
   2a798:	e7f4      	b.n	2a784 <nrf_fcntl+0xe>
   2a79a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   2a79c:	bd38      	pop	{r3, r4, r5, pc}
   2a79e:	2c01      	cmp	r4, #1
   2a7a0:	d8f9      	bhi.n	2a796 <nrf_fcntl+0x20>
   2a7a2:	63c4      	str	r4, [r0, #60]	; 0x3c
   2a7a4:	2000      	movs	r0, #0
   2a7a6:	e7f9      	b.n	2a79c <nrf_fcntl+0x26>

0002a7a8 <rpc_af_to_nrf_af>:
   2a7a8:	1f43      	subs	r3, r0, #5
   2a7aa:	2b00      	cmp	r3, #0
   2a7ac:	d803      	bhi.n	2a7b6 <rpc_af_to_nrf_af+0xe>
   2a7ae:	e8df f003 	tbb	[pc, r3]
   2a7b2:	01          	.byte	0x01
   2a7b3:	00          	.byte	0x00
   2a7b4:	2003      	movs	r0, #3
   2a7b6:	4770      	bx	lr

0002a7b8 <nrf_type_to_rpc_type>:
   2a7b8:	4770      	bx	lr

0002a7ba <nrf_proto_to_rpc_proto>:
   2a7ba:	2829      	cmp	r0, #41	; 0x29
   2a7bc:	d015      	beq.n	2a7ea <nrf_proto_to_rpc_proto+0x30>
   2a7be:	dc05      	bgt.n	2a7cc <nrf_proto_to_rpc_proto+0x12>
   2a7c0:	2806      	cmp	r0, #6
   2a7c2:	d014      	beq.n	2a7ee <nrf_proto_to_rpc_proto+0x34>
   2a7c4:	2811      	cmp	r0, #17
   2a7c6:	d014      	beq.n	2a7f2 <nrf_proto_to_rpc_proto+0x38>
   2a7c8:	b148      	cbz	r0, 2a7de <nrf_proto_to_rpc_proto+0x24>
   2a7ca:	4770      	bx	lr
   2a7cc:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2a7d0:	d00d      	beq.n	2a7ee <nrf_proto_to_rpc_proto+0x34>
   2a7d2:	f240 1311 	movw	r3, #273	; 0x111
   2a7d6:	4298      	cmp	r0, r3
   2a7d8:	d00b      	beq.n	2a7f2 <nrf_proto_to_rpc_proto+0x38>
   2a7da:	28ff      	cmp	r0, #255	; 0xff
   2a7dc:	d10c      	bne.n	2a7f8 <nrf_proto_to_rpc_proto+0x3e>
   2a7de:	2901      	cmp	r1, #1
   2a7e0:	d009      	beq.n	2a7f6 <nrf_proto_to_rpc_proto+0x3c>
   2a7e2:	2902      	cmp	r1, #2
   2a7e4:	bf08      	it	eq
   2a7e6:	2002      	moveq	r0, #2
   2a7e8:	4770      	bx	lr
   2a7ea:	2006      	movs	r0, #6
   2a7ec:	4770      	bx	lr
   2a7ee:	2001      	movs	r0, #1
   2a7f0:	4770      	bx	lr
   2a7f2:	2002      	movs	r0, #2
   2a7f4:	4770      	bx	lr
   2a7f6:	4608      	mov	r0, r1
   2a7f8:	4770      	bx	lr

0002a7fa <nrf_sol_to_rpc_sol>:
   2a7fa:	2829      	cmp	r0, #41	; 0x29
   2a7fc:	d011      	beq.n	2a822 <nrf_sol_to_rpc_sol+0x28>
   2a7fe:	dc0a      	bgt.n	2a816 <nrf_sol_to_rpc_sol+0x1c>
   2a800:	2801      	cmp	r0, #1
   2a802:	d010      	beq.n	2a826 <nrf_sol_to_rpc_sol+0x2c>
   2a804:	2806      	cmp	r0, #6
   2a806:	d010      	beq.n	2a82a <nrf_sol_to_rpc_sol+0x30>
   2a808:	2800      	cmp	r0, #0
   2a80a:	bf08      	it	eq
   2a80c:	2004      	moveq	r0, #4
   2a80e:	bf18      	it	ne
   2a810:	f04f 30ff 	movne.w	r0, #4294967295
   2a814:	4770      	bx	lr
   2a816:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   2a81a:	d008      	beq.n	2a82e <nrf_sol_to_rpc_sol+0x34>
   2a81c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   2a820:	e7f5      	b.n	2a80e <nrf_sol_to_rpc_sol+0x14>
   2a822:	2006      	movs	r0, #6
   2a824:	4770      	bx	lr
   2a826:	2008      	movs	r0, #8
   2a828:	4770      	bx	lr
   2a82a:	2001      	movs	r0, #1
   2a82c:	4770      	bx	lr
   2a82e:	f44f 7080 	mov.w	r0, #256	; 0x100
   2a832:	4770      	bx	lr

0002a834 <rpc_error_to_nrf_gai_errno>:
   2a834:	b508      	push	{r3, lr}
   2a836:	1f03      	subs	r3, r0, #4
   2a838:	2b09      	cmp	r3, #9
   2a83a:	d80f      	bhi.n	2a85c <rpc_error_to_nrf_gai_errno+0x28>
   2a83c:	e8df f003 	tbb	[pc, r3]
   2a840:	0e051108 	.word	0x0e051108
   2a844:	0e0e0e0e 	.word	0x0e0e0e0e
   2a848:	050e      	.short	0x050e
   2a84a:	f06f 0001 	mvn.w	r0, #1
   2a84e:	bd08      	pop	{r3, pc}
   2a850:	2073      	movs	r0, #115	; 0x73
   2a852:	f7fe fc6e 	bl	29132 <nrf_modem_os_errno_set>
   2a856:	f06f 000a 	mvn.w	r0, #10
   2a85a:	e7f8      	b.n	2a84e <rpc_error_to_nrf_gai_errno+0x1a>
   2a85c:	f7f9 fbdc 	bl	24018 <rpc_error_to_nrf_errno>
   2a860:	e7f7      	b.n	2a852 <rpc_error_to_nrf_gai_errno+0x1e>
   2a862:	f06f 0063 	mvn.w	r0, #99	; 0x63
   2a866:	e7f2      	b.n	2a84e <rpc_error_to_nrf_gai_errno+0x1a>

0002a868 <req_forward>:
   2a868:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2a86a:	2300      	movs	r3, #0
   2a86c:	460a      	mov	r2, r1
   2a86e:	f04f 31ff 	mov.w	r1, #4294967295
   2a872:	9303      	str	r3, [sp, #12]
   2a874:	68d6      	ldr	r6, [r2, #12]
   2a876:	ad02      	add	r5, sp, #8
   2a878:	9302      	str	r3, [sp, #8]
   2a87a:	9101      	str	r1, [sp, #4]
   2a87c:	b18e      	cbz	r6, 2a8a2 <req_forward+0x3a>
   2a87e:	4635      	mov	r5, r6
   2a880:	b281      	uxth	r1, r0
   2a882:	602b      	str	r3, [r5, #0]
   2a884:	2004      	movs	r0, #4
   2a886:	f7ff fa04 	bl	29c92 <rpc_client_msg_send>
   2a88a:	682b      	ldr	r3, [r5, #0]
   2a88c:	b15b      	cbz	r3, 2a8a6 <req_forward+0x3e>
   2a88e:	6958      	ldr	r0, [r3, #20]
   2a890:	f7f9 fbc2 	bl	24018 <rpc_error_to_nrf_errno>
   2a894:	4604      	mov	r4, r0
   2a896:	b106      	cbz	r6, 2a89a <req_forward+0x32>
   2a898:	b178      	cbz	r0, 2a8ba <req_forward+0x52>
   2a89a:	6828      	ldr	r0, [r5, #0]
   2a89c:	f7ff fa00 	bl	29ca0 <rpc_client_msg_rx_free>
   2a8a0:	e00b      	b.n	2a8ba <req_forward+0x52>
   2a8a2:	60d5      	str	r5, [r2, #12]
   2a8a4:	e7ec      	b.n	2a880 <req_forward+0x18>
   2a8a6:	2002      	movs	r0, #2
   2a8a8:	a901      	add	r1, sp, #4
   2a8aa:	f7f4 f9ed 	bl	1ec88 <nrf_modem_os_timedwait>
   2a8ae:	2800      	cmp	r0, #0
   2a8b0:	d0eb      	beq.n	2a88a <req_forward+0x22>
   2a8b2:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
   2a8b6:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
   2a8ba:	4620      	mov	r0, r4
   2a8bc:	b004      	add	sp, #16
   2a8be:	bd70      	pop	{r4, r5, r6, pc}

0002a8c0 <req_cookie_set>:
   2a8c0:	60c1      	str	r1, [r0, #12]
   2a8c2:	4770      	bx	lr

0002a8c4 <res_cookie_get>:
   2a8c4:	68c0      	ldr	r0, [r0, #12]
   2a8c6:	4770      	bx	lr

0002a8c8 <res_forward>:
   2a8c8:	68c3      	ldr	r3, [r0, #12]
   2a8ca:	6018      	str	r0, [r3, #0]
   2a8cc:	2001      	movs	r0, #1
   2a8ce:	4770      	bx	lr

0002a8d0 <rpc_dfu_event_handler>:
   2a8d0:	b510      	push	{r4, lr}
   2a8d2:	4604      	mov	r4, r0
   2a8d4:	6800      	ldr	r0, [r0, #0]
   2a8d6:	b108      	cbz	r0, 2a8dc <rpc_dfu_event_handler+0xc>
   2a8d8:	f7ff f9e5 	bl	29ca6 <rpc_client_msg_data_rx_free>
   2a8dc:	68e0      	ldr	r0, [r4, #12]
   2a8de:	b108      	cbz	r0, 2a8e4 <rpc_dfu_event_handler+0x14>
   2a8e0:	6004      	str	r4, [r0, #0]
   2a8e2:	2001      	movs	r0, #1
   2a8e4:	bd10      	pop	{r4, pc}

0002a8e6 <rpc_at_deinit>:
   2a8e6:	2000      	movs	r0, #0
   2a8e8:	4770      	bx	lr

0002a8ea <rpc_delta_dfu_deinit>:
   2a8ea:	2000      	movs	r0, #0
   2a8ec:	4770      	bx	lr

0002a8ee <rpc_delta_dfu_init>:
   2a8ee:	2000      	movs	r0, #0
   2a8f0:	4770      	bx	lr

0002a8f2 <nrf_modem_is_initialized>:
   2a8f2:	f7f9 bcf3 	b.w	242dc <nrf_modem_state_is_initialized>

0002a8f6 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   2a8f6:	4770      	bx	lr

0002a8f8 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2a8f8:	b140      	cbz	r0, 2a90c <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2a8fa:	68c3      	ldr	r3, [r0, #12]
   2a8fc:	7858      	ldrb	r0, [r3, #1]
   2a8fe:	f010 0001 	ands.w	r0, r0, #1
   2a902:	bf1e      	ittt	ne
   2a904:	7818      	ldrbne	r0, [r3, #0]
   2a906:	fab0 f080 	clzne	r0, r0
   2a90a:	0940      	lsrne	r0, r0, #5
}
   2a90c:	4770      	bx	lr

0002a90e <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2a90e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a910:	4605      	mov	r5, r0
   2a912:	460e      	mov	r6, r1
	__asm__ volatile(
   2a914:	f04f 0320 	mov.w	r3, #32
   2a918:	f3ef 8711 	mrs	r7, BASEPRI
   2a91c:	f383 8812 	msr	BASEPRI_MAX, r3
   2a920:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   2a924:	f7fa fca6 	bl	25274 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   2a928:	4631      	mov	r1, r6
   2a92a:	4604      	mov	r4, r0
   2a92c:	4628      	mov	r0, r5
   2a92e:	f7ff f8f1 	bl	29b14 <k_sys_fatal_error_handler>
	__asm__ volatile(
   2a932:	f387 8811 	msr	BASEPRI, r7
   2a936:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2a93a:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2a93c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a940:	f7f0 bdfe 	b.w	1b540 <z_impl_k_thread_abort>

0002a944 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   2a944:	f000 bc5e 	b.w	2b204 <memset>

0002a948 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a948:	f000 bc4f 	b.w	2b1ea <memcpy>

0002a94c <k_heap_init>:
{
   2a94c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2a94e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2a952:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2a956:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2a958:	f7fc bce3 	b.w	27322 <sys_heap_init>

0002a95c <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2a95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a960:	b085      	sub	sp, #20
   2a962:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   2a966:	4607      	mov	r7, r0
   2a968:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2a96a:	4650      	mov	r0, sl
   2a96c:	4621      	mov	r1, r4
{
   2a96e:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2a970:	f000 fa73 	bl	2ae5a <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2a974:	f1b4 3fff 	cmp.w	r4, #4294967295
   2a978:	bf08      	it	eq
   2a97a:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2a97e:	4605      	mov	r5, r0
   2a980:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2a982:	bf04      	itt	eq
   2a984:	f04f 35ff 	moveq.w	r5, #4294967295
   2a988:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2a98c:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   2a990:	f04f 0320 	mov.w	r3, #32
   2a994:	f3ef 8411 	mrs	r4, BASEPRI
   2a998:	f383 8812 	msr	BASEPRI_MAX, r3
   2a99c:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2a9a0:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2a9a4:	464a      	mov	r2, r9
   2a9a6:	4641      	mov	r1, r8
   2a9a8:	4638      	mov	r0, r7
   2a9aa:	f7fc fc53 	bl	27254 <sys_heap_aligned_alloc>
   2a9ae:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2a9b0:	f7fa fe18 	bl	255e4 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2a9b4:	9b03      	ldr	r3, [sp, #12]
   2a9b6:	b13b      	cbz	r3, 2a9c8 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   2a9b8:	f384 8811 	msr	BASEPRI, r4
   2a9bc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2a9c0:	4618      	mov	r0, r3
   2a9c2:	b005      	add	sp, #20
   2a9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2a9c8:	1a28      	subs	r0, r5, r0
   2a9ca:	eb66 0101 	sbc.w	r1, r6, r1
   2a9ce:	2801      	cmp	r0, #1
   2a9d0:	f171 0200 	sbcs.w	r2, r1, #0
   2a9d4:	dbf0      	blt.n	2a9b8 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2a9d6:	e9cd 0100 	strd	r0, r1, [sp]
   2a9da:	465a      	mov	r2, fp
   2a9dc:	4621      	mov	r1, r4
   2a9de:	4650      	mov	r0, sl
   2a9e0:	f7fa faae 	bl	24f40 <z_pend_curr>
	__asm__ volatile(
   2a9e4:	f04f 0320 	mov.w	r3, #32
   2a9e8:	f3ef 8411 	mrs	r4, BASEPRI
   2a9ec:	f383 8812 	msr	BASEPRI_MAX, r3
   2a9f0:	f3bf 8f6f 	isb	sy
	return k;
   2a9f4:	e7d6      	b.n	2a9a4 <k_heap_aligned_alloc+0x48>

0002a9f6 <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   2a9f6:	b507      	push	{r0, r1, r2, lr}
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   2a9f8:	e9cd 2300 	strd	r2, r3, [sp]
   2a9fc:	460a      	mov	r2, r1
   2a9fe:	2104      	movs	r1, #4
   2aa00:	f7ff ffac 	bl	2a95c <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   2aa04:	b003      	add	sp, #12
   2aa06:	f85d fb04 	ldr.w	pc, [sp], #4

0002aa0a <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   2aa0a:	b538      	push	{r3, r4, r5, lr}
   2aa0c:	4604      	mov	r4, r0
   2aa0e:	f04f 0320 	mov.w	r3, #32
   2aa12:	f3ef 8511 	mrs	r5, BASEPRI
   2aa16:	f383 8812 	msr	BASEPRI_MAX, r3
   2aa1a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2aa1e:	f7fc fbe1 	bl	271e4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2aa22:	f104 000c 	add.w	r0, r4, #12
   2aa26:	f000 f9b5 	bl	2ad94 <z_unpend_all>
   2aa2a:	b130      	cbz	r0, 2aa3a <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2aa2c:	4629      	mov	r1, r5
   2aa2e:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2aa32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2aa36:	f7fa bae7 	b.w	25008 <z_reschedule>
	__asm__ volatile(
   2aa3a:	f385 8811 	msr	BASEPRI, r5
   2aa3e:	f3bf 8f6f 	isb	sy
}
   2aa42:	bd38      	pop	{r3, r4, r5, pc}

0002aa44 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2aa44:	f3ef 8005 	mrs	r0, IPSR
}
   2aa48:	3800      	subs	r0, #0
   2aa4a:	bf18      	it	ne
   2aa4c:	2001      	movne	r0, #1
   2aa4e:	4770      	bx	lr

0002aa50 <z_impl_k_thread_name_set>:
}
   2aa50:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2aa54:	4770      	bx	lr

0002aa56 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2aa56:	f7fa bae9 	b.w	2502c <z_sched_start>

0002aa5a <z_pm_save_idle_exit>:
{
   2aa5a:	b508      	push	{r3, lr}
	pm_system_resume();
   2aa5c:	f7ef ffce 	bl	1a9fc <pm_system_resume>
}
   2aa60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2aa64:	f7fe bb56 	b.w	29114 <sys_clock_idle_exit>

0002aa68 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2aa68:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2aa6c:	428b      	cmp	r3, r1
   2aa6e:	d001      	beq.n	2aa74 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2aa70:	f7fa ba84 	b.w	24f7c <z_set_prio>
}
   2aa74:	2000      	movs	r0, #0
   2aa76:	4770      	bx	lr

0002aa78 <z_impl_k_mutex_init>:
{
   2aa78:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2aa7a:	2000      	movs	r0, #0
   2aa7c:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   2aa80:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   2aa84:	4770      	bx	lr

0002aa86 <queue_insert>:
{
   2aa86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2aa8a:	4699      	mov	r9, r3
   2aa8c:	4604      	mov	r4, r0
   2aa8e:	460d      	mov	r5, r1
   2aa90:	4690      	mov	r8, r2
   2aa92:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2aa96:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2aa9a:	f04f 0220 	mov.w	r2, #32
   2aa9e:	f3ef 8711 	mrs	r7, BASEPRI
   2aaa2:	f382 8812 	msr	BASEPRI_MAX, r2
   2aaa6:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2aaaa:	b103      	cbz	r3, 2aaae <queue_insert+0x28>
	return list->tail;
   2aaac:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2aaae:	4630      	mov	r0, r6
   2aab0:	f000 f926 	bl	2ad00 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2aab4:	b158      	cbz	r0, 2aace <queue_insert+0x48>
   2aab6:	2300      	movs	r3, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2aab8:	f8c0 8014 	str.w	r8, [r0, #20]
   2aabc:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2aabe:	f000 f8e9 	bl	2ac94 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2aac2:	4630      	mov	r0, r6
   2aac4:	4639      	mov	r1, r7
   2aac6:	f7fa fa9f 	bl	25008 <z_reschedule>
		return 0;
   2aaca:	2000      	movs	r0, #0
   2aacc:	e00c      	b.n	2aae8 <queue_insert+0x62>
	if (alloc) {
   2aace:	f1b9 0f00 	cmp.w	r9, #0
   2aad2:	d01b      	beq.n	2ab0c <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   2aad4:	2108      	movs	r1, #8
   2aad6:	f7fa fe31 	bl	2573c <z_thread_aligned_alloc>
		if (anode == NULL) {
   2aada:	b938      	cbnz	r0, 2aaec <queue_insert+0x66>
	__asm__ volatile(
   2aadc:	f387 8811 	msr	BASEPRI, r7
   2aae0:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2aae4:	f06f 000b 	mvn.w	r0, #11
}
   2aae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2aaec:	2201      	movs	r2, #1
		anode->data = data;
   2aaee:	f8c0 8004 	str.w	r8, [r0, #4]
   2aaf2:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2aaf4:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2aaf6:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2aafa:	b95d      	cbnz	r5, 2ab14 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2aafc:	6822      	ldr	r2, [r4, #0]
   2aafe:	430a      	orrs	r2, r1
   2ab00:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2ab02:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   2ab04:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2ab06:	b96a      	cbnz	r2, 2ab24 <queue_insert+0x9e>
	list->tail = node;
   2ab08:	6060      	str	r0, [r4, #4]
}
   2ab0a:	e00b      	b.n	2ab24 <queue_insert+0x9e>
}
   2ab0c:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   2ab0e:	f8c8 9000 	str.w	r9, [r8]
}
   2ab12:	e7ef      	b.n	2aaf4 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2ab14:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2ab16:	2a03      	cmp	r2, #3
   2ab18:	d810      	bhi.n	2ab3c <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ab1a:	6001      	str	r1, [r0, #0]
	return list->tail;
   2ab1c:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2ab1e:	b939      	cbnz	r1, 2ab30 <queue_insert+0xaa>
	list->head = node;
   2ab20:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2ab24:	2104      	movs	r1, #4
   2ab26:	f104 0010 	add.w	r0, r4, #16
   2ab2a:	f000 faf8 	bl	2b11e <z_handle_obj_poll_events>
   2ab2e:	e7c8      	b.n	2aac2 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ab30:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ab32:	f002 0203 	and.w	r2, r2, #3
   2ab36:	4302      	orrs	r2, r0
   2ab38:	600a      	str	r2, [r1, #0]
   2ab3a:	e7e5      	b.n	2ab08 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2ab3c:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ab40:	430a      	orrs	r2, r1
   2ab42:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ab44:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ab46:	f002 0203 	and.w	r2, r2, #3
   2ab4a:	ea40 0302 	orr.w	r3, r0, r2
   2ab4e:	602b      	str	r3, [r5, #0]
}
   2ab50:	e7e8      	b.n	2ab24 <queue_insert+0x9e>

0002ab52 <z_queue_node_peek>:
{
   2ab52:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2ab54:	4604      	mov	r4, r0
   2ab56:	b130      	cbz	r0, 2ab66 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ab58:	6802      	ldr	r2, [r0, #0]
   2ab5a:	0793      	lsls	r3, r2, #30
   2ab5c:	d003      	beq.n	2ab66 <z_queue_node_peek+0x14>
		ret = anode->data;
   2ab5e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2ab60:	b109      	cbz	r1, 2ab66 <z_queue_node_peek+0x14>
			k_free(anode);
   2ab62:	f000 fb07 	bl	2b174 <k_free>
}
   2ab66:	4620      	mov	r0, r4
   2ab68:	bd10      	pop	{r4, pc}

0002ab6a <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   2ab6a:	2301      	movs	r3, #1
{
   2ab6c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2ab6e:	9300      	str	r3, [sp, #0]
   2ab70:	2300      	movs	r3, #0
{
   2ab72:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2ab74:	4619      	mov	r1, r3
   2ab76:	f7ff ff86 	bl	2aa86 <queue_insert>
}
   2ab7a:	b003      	add	sp, #12
   2ab7c:	f85d fb04 	ldr.w	pc, [sp], #4

0002ab80 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2ab80:	b15a      	cbz	r2, 2ab9a <z_impl_k_sem_init+0x1a>
   2ab82:	428a      	cmp	r2, r1
   2ab84:	d309      	bcc.n	2ab9a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2ab86:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2ab8a:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2ab8e:	e9c0 0000 	strd	r0, r0, [r0]
   2ab92:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2ab96:	2000      	movs	r0, #0
   2ab98:	4770      	bx	lr
		return -EINVAL;
   2ab9a:	f06f 0015 	mvn.w	r0, #21
}
   2ab9e:	4770      	bx	lr

0002aba0 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   2aba0:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   2aba2:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2aba4:	408b      	lsls	r3, r1
   2aba6:	ea22 0303 	bic.w	r3, r2, r3
   2abaa:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2abac:	fa22 f001 	lsr.w	r0, r2, r1
}
   2abb0:	f000 0001 	and.w	r0, r0, #1
   2abb4:	4770      	bx	lr

0002abb6 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2abb6:	b120      	cbz	r0, 2abc2 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2abb8:	2200      	movs	r2, #0
   2abba:	3090      	adds	r0, #144	; 0x90
   2abbc:	4611      	mov	r1, r2
   2abbe:	f000 b8f9 	b.w	2adb4 <z_sched_wake>
}
   2abc2:	4770      	bx	lr

0002abc4 <z_work_submit_to_queue>:
{
   2abc4:	b513      	push	{r0, r1, r4, lr}
   2abc6:	9001      	str	r0, [sp, #4]
   2abc8:	4608      	mov	r0, r1
	__asm__ volatile(
   2abca:	f04f 0320 	mov.w	r3, #32
   2abce:	f3ef 8411 	mrs	r4, BASEPRI
   2abd2:	f383 8812 	msr	BASEPRI_MAX, r3
   2abd6:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2abda:	a901      	add	r1, sp, #4
   2abdc:	f7f9 ffd6 	bl	24b8c <submit_to_queue_locked>
	__asm__ volatile(
   2abe0:	f384 8811 	msr	BASEPRI, r4
   2abe4:	f3bf 8f6f 	isb	sy
}
   2abe8:	b002      	add	sp, #8
   2abea:	bd10      	pop	{r4, pc}

0002abec <k_work_submit_to_queue>:
{
   2abec:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2abee:	f7ff ffe9 	bl	2abc4 <z_work_submit_to_queue>
	if (ret > 0) {
   2abf2:	1e04      	subs	r4, r0, #0
   2abf4:	dd09      	ble.n	2ac0a <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2abf6:	f04f 0320 	mov.w	r3, #32
   2abfa:	f3ef 8011 	mrs	r0, BASEPRI
   2abfe:	f383 8812 	msr	BASEPRI_MAX, r3
   2ac02:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2ac06:	f000 f8af 	bl	2ad68 <z_reschedule_irqlock>
}
   2ac0a:	4620      	mov	r0, r4
   2ac0c:	bd10      	pop	{r4, pc}

0002ac0e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2ac0e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2ac12:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2ac14:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2ac16:	2300      	movs	r3, #0
	node->prev = NULL;
   2ac18:	e9c0 3300 	strd	r3, r3, [r0]
}
   2ac1c:	4770      	bx	lr

0002ac1e <unpend_thread_no_timeout>:
{
   2ac1e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2ac20:	f7ff fff5 	bl	2ac0e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2ac24:	7b43      	ldrb	r3, [r0, #13]
   2ac26:	f023 0302 	bic.w	r3, r3, #2
   2ac2a:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2ac2c:	2300      	movs	r3, #0
   2ac2e:	6083      	str	r3, [r0, #8]
}
   2ac30:	bd08      	pop	{r3, pc}

0002ac32 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2ac32:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2ac36:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2ac3a:	4283      	cmp	r3, r0
		return b2 - b1;
   2ac3c:	bf14      	ite	ne
   2ac3e:	1ac0      	subne	r0, r0, r3
	return 0;
   2ac40:	2000      	moveq	r0, #0
}
   2ac42:	4770      	bx	lr

0002ac44 <add_to_waitq_locked>:
{
   2ac44:	b538      	push	{r3, r4, r5, lr}
   2ac46:	4604      	mov	r4, r0
   2ac48:	460d      	mov	r5, r1
	unready_thread(thread);
   2ac4a:	f7fa f919 	bl	24e80 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2ac4e:	7b63      	ldrb	r3, [r4, #13]
   2ac50:	f043 0302 	orr.w	r3, r3, #2
   2ac54:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2ac56:	b1e5      	cbz	r5, 2ac92 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   2ac58:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   2ac5a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ac5c:	429d      	cmp	r5, r3
   2ac5e:	d109      	bne.n	2ac74 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   2ac60:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2ac62:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2ac66:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2ac68:	606c      	str	r4, [r5, #4]
}
   2ac6a:	e012      	b.n	2ac92 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   2ac6c:	686a      	ldr	r2, [r5, #4]
   2ac6e:	4293      	cmp	r3, r2
   2ac70:	d0f6      	beq.n	2ac60 <add_to_waitq_locked+0x1c>
   2ac72:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2ac74:	2b00      	cmp	r3, #0
   2ac76:	d0f3      	beq.n	2ac60 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   2ac78:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2ac7c:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   2ac80:	428a      	cmp	r2, r1
   2ac82:	d0f3      	beq.n	2ac6c <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2ac84:	4291      	cmp	r1, r2
   2ac86:	ddf1      	ble.n	2ac6c <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   2ac88:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2ac8a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2ac8e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2ac90:	605c      	str	r4, [r3, #4]
}
   2ac92:	bd38      	pop	{r3, r4, r5, pc}

0002ac94 <z_ready_thread>:
{
   2ac94:	b510      	push	{r4, lr}
   2ac96:	f04f 0320 	mov.w	r3, #32
   2ac9a:	f3ef 8411 	mrs	r4, BASEPRI
   2ac9e:	f383 8812 	msr	BASEPRI_MAX, r3
   2aca2:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2aca6:	f7fa f8b7 	bl	24e18 <ready_thread>
	__asm__ volatile(
   2acaa:	f384 8811 	msr	BASEPRI, r4
   2acae:	f3bf 8f6f 	isb	sy
}
   2acb2:	bd10      	pop	{r4, pc}

0002acb4 <z_sched_wake_thread>:
{
   2acb4:	b538      	push	{r3, r4, r5, lr}
   2acb6:	4604      	mov	r4, r0
	__asm__ volatile(
   2acb8:	f04f 0320 	mov.w	r3, #32
   2acbc:	f3ef 8511 	mrs	r5, BASEPRI
   2acc0:	f383 8812 	msr	BASEPRI_MAX, r3
   2acc4:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2acc8:	7b43      	ldrb	r3, [r0, #13]
   2acca:	f013 0f28 	tst.w	r3, #40	; 0x28
   2acce:	d10b      	bne.n	2ace8 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   2acd0:	6883      	ldr	r3, [r0, #8]
   2acd2:	b10b      	cbz	r3, 2acd8 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   2acd4:	f7ff ffa3 	bl	2ac1e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2acd8:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   2acda:	b951      	cbnz	r1, 2acf2 <z_sched_wake_thread+0x3e>
   2acdc:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
   2ace0:	4620      	mov	r0, r4
   2ace2:	7363      	strb	r3, [r4, #13]
   2ace4:	f7fa f898 	bl	24e18 <ready_thread>
	__asm__ volatile(
   2ace8:	f385 8811 	msr	BASEPRI, r5
   2acec:	f3bf 8f6f 	isb	sy
}
   2acf0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2acf2:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   2acf6:	e7f3      	b.n	2ace0 <z_sched_wake_thread+0x2c>

0002acf8 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   2acf8:	2101      	movs	r1, #1
   2acfa:	3818      	subs	r0, #24
   2acfc:	f7ff bfda 	b.w	2acb4 <z_sched_wake_thread>

0002ad00 <z_unpend_first_thread>:
{
   2ad00:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2ad02:	f04f 0320 	mov.w	r3, #32
   2ad06:	f3ef 8511 	mrs	r5, BASEPRI
   2ad0a:	f383 8812 	msr	BASEPRI_MAX, r3
   2ad0e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2ad12:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ad14:	42a0      	cmp	r0, r4
   2ad16:	d00d      	beq.n	2ad34 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   2ad18:	b134      	cbz	r4, 2ad28 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   2ad1a:	4620      	mov	r0, r4
   2ad1c:	f7ff ff7f 	bl	2ac1e <unpend_thread_no_timeout>
   2ad20:	f104 0018 	add.w	r0, r4, #24
   2ad24:	f000 f869 	bl	2adfa <z_abort_timeout>
	__asm__ volatile(
   2ad28:	f385 8811 	msr	BASEPRI, r5
   2ad2c:	f3bf 8f6f 	isb	sy
}
   2ad30:	4620      	mov	r0, r4
   2ad32:	bd38      	pop	{r3, r4, r5, pc}
   2ad34:	2400      	movs	r4, #0
   2ad36:	e7f7      	b.n	2ad28 <z_unpend_first_thread+0x28>

0002ad38 <z_unpend_thread>:
{
   2ad38:	4601      	mov	r1, r0
   2ad3a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ad3c:	f04f 0320 	mov.w	r3, #32
   2ad40:	f3ef 8411 	mrs	r4, BASEPRI
   2ad44:	f383 8812 	msr	BASEPRI_MAX, r3
   2ad48:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   2ad4c:	6883      	ldr	r3, [r0, #8]
   2ad4e:	b10b      	cbz	r3, 2ad54 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   2ad50:	f7ff ff65 	bl	2ac1e <unpend_thread_no_timeout>
	__asm__ volatile(
   2ad54:	f384 8811 	msr	BASEPRI, r4
   2ad58:	f3bf 8f6f 	isb	sy
}
   2ad5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2ad60:	f101 0018 	add.w	r0, r1, #24
   2ad64:	f000 b849 	b.w	2adfa <z_abort_timeout>

0002ad68 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2ad68:	4603      	mov	r3, r0
   2ad6a:	b920      	cbnz	r0, 2ad76 <z_reschedule_irqlock+0xe>
   2ad6c:	f3ef 8205 	mrs	r2, IPSR
   2ad70:	b90a      	cbnz	r2, 2ad76 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2ad72:	f7f0 b955 	b.w	1b020 <arch_swap>
   2ad76:	f383 8811 	msr	BASEPRI, r3
   2ad7a:	f3bf 8f6f 	isb	sy
}
   2ad7e:	4770      	bx	lr

0002ad80 <z_reschedule_unlocked>:
	__asm__ volatile(
   2ad80:	f04f 0320 	mov.w	r3, #32
   2ad84:	f3ef 8011 	mrs	r0, BASEPRI
   2ad88:	f383 8812 	msr	BASEPRI_MAX, r3
   2ad8c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2ad90:	f7ff bfea 	b.w	2ad68 <z_reschedule_irqlock>

0002ad94 <z_unpend_all>:
{
   2ad94:	b538      	push	{r3, r4, r5, lr}
   2ad96:	4605      	mov	r5, r0
	int need_sched = 0;
   2ad98:	2000      	movs	r0, #0
	return list->head == list;
   2ad9a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ad9c:	42a5      	cmp	r5, r4
   2ad9e:	d000      	beq.n	2ada2 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2ada0:	b904      	cbnz	r4, 2ada4 <z_unpend_all+0x10>
}
   2ada2:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2ada4:	4620      	mov	r0, r4
   2ada6:	f7ff ffc7 	bl	2ad38 <z_unpend_thread>
		z_ready_thread(thread);
   2adaa:	4620      	mov	r0, r4
   2adac:	f7ff ff72 	bl	2ac94 <z_ready_thread>
		need_sched = 1;
   2adb0:	2001      	movs	r0, #1
   2adb2:	e7f2      	b.n	2ad9a <z_unpend_all+0x6>

0002adb4 <z_sched_wake>:
{
   2adb4:	b538      	push	{r3, r4, r5, lr}
   2adb6:	f04f 0320 	mov.w	r3, #32
   2adba:	f3ef 8511 	mrs	r5, BASEPRI
   2adbe:	f383 8812 	msr	BASEPRI_MAX, r3
   2adc2:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2adc6:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2adc8:	42a0      	cmp	r0, r4
   2adca:	d012      	beq.n	2adf2 <z_sched_wake+0x3e>
		if (thread != NULL) {
   2adcc:	b19c      	cbz	r4, 2adf6 <z_sched_wake+0x42>
   2adce:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   2add0:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   2add2:	4620      	mov	r0, r4
   2add4:	f7ff ff23 	bl	2ac1e <unpend_thread_no_timeout>
   2add8:	f104 0018 	add.w	r0, r4, #24
   2addc:	f000 f80d 	bl	2adfa <z_abort_timeout>
			ready_thread(thread);
   2ade0:	4620      	mov	r0, r4
   2ade2:	f7fa f819 	bl	24e18 <ready_thread>
			ret = true;
   2ade6:	2001      	movs	r0, #1
	__asm__ volatile(
   2ade8:	f385 8811 	msr	BASEPRI, r5
   2adec:	f3bf 8f6f 	isb	sy
}
   2adf0:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   2adf2:	2000      	movs	r0, #0
   2adf4:	e7f8      	b.n	2ade8 <z_sched_wake+0x34>
   2adf6:	4620      	mov	r0, r4
   2adf8:	e7f6      	b.n	2ade8 <z_sched_wake+0x34>

0002adfa <z_abort_timeout>:
{
   2adfa:	b510      	push	{r4, lr}
	__asm__ volatile(
   2adfc:	f04f 0220 	mov.w	r2, #32
   2ae00:	f3ef 8411 	mrs	r4, BASEPRI
   2ae04:	f382 8812 	msr	BASEPRI_MAX, r2
   2ae08:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2ae0c:	6803      	ldr	r3, [r0, #0]
   2ae0e:	b13b      	cbz	r3, 2ae20 <z_abort_timeout+0x26>
			remove_timeout(to);
   2ae10:	f7fa faec 	bl	253ec <remove_timeout>
			ret = 0;
   2ae14:	2000      	movs	r0, #0
	__asm__ volatile(
   2ae16:	f384 8811 	msr	BASEPRI, r4
   2ae1a:	f3bf 8f6f 	isb	sy
}
   2ae1e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2ae20:	f06f 0015 	mvn.w	r0, #21
   2ae24:	e7f7      	b.n	2ae16 <z_abort_timeout+0x1c>

0002ae26 <z_get_next_timeout_expiry>:
{
   2ae26:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ae28:	f04f 0320 	mov.w	r3, #32
   2ae2c:	f3ef 8411 	mrs	r4, BASEPRI
   2ae30:	f383 8812 	msr	BASEPRI_MAX, r3
   2ae34:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2ae38:	f7fa fab8 	bl	253ac <next_timeout>
	__asm__ volatile(
   2ae3c:	f384 8811 	msr	BASEPRI, r4
   2ae40:	f3bf 8f6f 	isb	sy
}
   2ae44:	bd10      	pop	{r4, pc}

0002ae46 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2ae46:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2ae48:	f7fa fbcc 	bl	255e4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2ae4c:	bd08      	pop	{r3, pc}

0002ae4e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2ae4e:	f7fa bbc9 	b.w	255e4 <sys_clock_tick_get>

0002ae52 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2ae52:	b108      	cbz	r0, 2ae58 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2ae54:	f7ef bd98 	b.w	1a988 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2ae58:	4770      	bx	lr

0002ae5a <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ae5a:	f1b1 3fff 	cmp.w	r1, #4294967295
   2ae5e:	bf08      	it	eq
   2ae60:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2ae64:	b538      	push	{r3, r4, r5, lr}
   2ae66:	460c      	mov	r4, r1
   2ae68:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ae6a:	d014      	beq.n	2ae96 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2ae6c:	4308      	orrs	r0, r1
   2ae6e:	d103      	bne.n	2ae78 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2ae70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2ae74:	f7fa bbb6 	b.w	255e4 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2ae78:	f06f 0001 	mvn.w	r0, #1
   2ae7c:	f04f 33ff 	mov.w	r3, #4294967295
   2ae80:	1b40      	subs	r0, r0, r5
   2ae82:	eb63 0101 	sbc.w	r1, r3, r1
   2ae86:	2900      	cmp	r1, #0
   2ae88:	da04      	bge.n	2ae94 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   2ae8a:	f7fa fbab 	bl	255e4 <sys_clock_tick_get>
   2ae8e:	1940      	adds	r0, r0, r5
   2ae90:	eb41 0104 	adc.w	r1, r1, r4
}
   2ae94:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2ae96:	f04f 30ff 	mov.w	r0, #4294967295
   2ae9a:	4601      	mov	r1, r0
   2ae9c:	e7fa      	b.n	2ae94 <sys_clock_timeout_end_calc+0x3a>

0002ae9e <add_event>:
{
   2ae9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aea0:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2aea2:	e9d0 1300 	ldrd	r1, r3, [r0]
   2aea6:	4288      	cmp	r0, r1
   2aea8:	4604      	mov	r4, r0
   2aeaa:	d105      	bne.n	2aeb8 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2aeac:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2aeae:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2aeb2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2aeb4:	6065      	str	r5, [r4, #4]
   2aeb6:	e01d      	b.n	2aef4 <add_event+0x56>
	if ((pending == NULL) ||
   2aeb8:	2b00      	cmp	r3, #0
   2aeba:	d0f7      	beq.n	2aeac <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2aebc:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2aebe:	b100      	cbz	r0, 2aec2 <add_event+0x24>
   2aec0:	3860      	subs	r0, #96	; 0x60
   2aec2:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2aec6:	4639      	mov	r1, r7
   2aec8:	f7ff feb3 	bl	2ac32 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2aecc:	2800      	cmp	r0, #0
   2aece:	dced      	bgt.n	2aeac <add_event+0xe>
	return list->head == list;
   2aed0:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2aed2:	42b4      	cmp	r4, r6
   2aed4:	d0ea      	beq.n	2aeac <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2aed6:	2e00      	cmp	r6, #0
   2aed8:	d0e8      	beq.n	2aeac <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2aeda:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2aedc:	b101      	cbz	r1, 2aee0 <add_event+0x42>
   2aede:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2aee0:	4638      	mov	r0, r7
   2aee2:	f7ff fea6 	bl	2ac32 <z_sched_prio_cmp>
   2aee6:	2800      	cmp	r0, #0
   2aee8:	dd05      	ble.n	2aef6 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   2aeea:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2aeec:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2aef0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2aef2:	6075      	str	r5, [r6, #4]
}
   2aef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2aef6:	6863      	ldr	r3, [r4, #4]
   2aef8:	429e      	cmp	r6, r3
   2aefa:	d0d7      	beq.n	2aeac <add_event+0xe>
   2aefc:	6836      	ldr	r6, [r6, #0]
   2aefe:	e7ea      	b.n	2aed6 <add_event+0x38>

0002af00 <register_events>:
{
   2af00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2af04:	2500      	movs	r5, #0
{
   2af06:	468b      	mov	fp, r1
   2af08:	4614      	mov	r4, r2
   2af0a:	461f      	mov	r7, r3
   2af0c:	4682      	mov	sl, r0
	int events_registered = 0;
   2af0e:	462e      	mov	r6, r5
	event->poller = NULL;
   2af10:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2af12:	455d      	cmp	r5, fp
   2af14:	db02      	blt.n	2af1c <register_events+0x1c>
}
   2af16:	4630      	mov	r0, r6
   2af18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   2af1c:	f04f 0320 	mov.w	r3, #32
   2af20:	f3ef 8911 	mrs	r9, BASEPRI
   2af24:	f383 8812 	msr	BASEPRI_MAX, r3
   2af28:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2af2c:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2af30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2af34:	3b01      	subs	r3, #1
   2af36:	2b07      	cmp	r3, #7
   2af38:	d80f      	bhi.n	2af5a <register_events+0x5a>
   2af3a:	e8df f003 	tbb	[pc, r3]
   2af3e:	041e      	.short	0x041e
   2af40:	0e0e0a0e 	.word	0x0e0e0a0e
   2af44:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   2af46:	f8da 3010 	ldr.w	r3, [sl, #16]
   2af4a:	689b      	ldr	r3, [r3, #8]
   2af4c:	b12b      	cbz	r3, 2af5a <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2af4e:	2302      	movs	r3, #2
   2af50:	e020      	b.n	2af94 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2af52:	f8da 3010 	ldr.w	r3, [sl, #16]
   2af56:	681b      	ldr	r3, [r3, #0]
   2af58:	bb8b      	cbnz	r3, 2afbe <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2af5a:	bb47      	cbnz	r7, 2afae <register_events+0xae>
   2af5c:	7823      	ldrb	r3, [r4, #0]
   2af5e:	b333      	cbz	r3, 2afae <register_events+0xae>
	switch (event->type) {
   2af60:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2af64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2af68:	3b01      	subs	r3, #1
   2af6a:	2b07      	cmp	r3, #7
   2af6c:	d830      	bhi.n	2afd0 <register_events+0xd0>
   2af6e:	e8df f003 	tbb	[pc, r3]
   2af72:	2833      	.short	0x2833
   2af74:	2f2f282f 	.word	0x2f2f282f
   2af78:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   2af7a:	f8da 3010 	ldr.w	r3, [sl, #16]
   2af7e:	689b      	ldr	r3, [r3, #8]
   2af80:	2b00      	cmp	r3, #0
   2af82:	d0ea      	beq.n	2af5a <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2af84:	2301      	movs	r3, #1
   2af86:	e005      	b.n	2af94 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2af88:	f8da 3010 	ldr.w	r3, [sl, #16]
   2af8c:	6a1b      	ldr	r3, [r3, #32]
   2af8e:	2b00      	cmp	r3, #0
   2af90:	d0e3      	beq.n	2af5a <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2af92:	2310      	movs	r3, #16
	event->state |= state;
   2af94:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2af98:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2af9c:	f3c2 3186 	ubfx	r1, r2, #14, #7
   2afa0:	430b      	orrs	r3, r1
   2afa2:	f363 3294 	bfi	r2, r3, #14, #7
   2afa6:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2afaa:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2afae:	f389 8811 	msr	BASEPRI, r9
   2afb2:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2afb6:	3501      	adds	r5, #1
   2afb8:	f10a 0a14 	add.w	sl, sl, #20
   2afbc:	e7a9      	b.n	2af12 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2afbe:	2304      	movs	r3, #4
   2afc0:	e7e8      	b.n	2af94 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2afc2:	4622      	mov	r2, r4
   2afc4:	4651      	mov	r1, sl
   2afc6:	f8da 0010 	ldr.w	r0, [sl, #16]
   2afca:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2afcc:	f7ff ff67 	bl	2ae9e <add_event>
	event->poller = poller;
   2afd0:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2afd4:	3601      	adds	r6, #1
   2afd6:	e7ea      	b.n	2afae <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2afd8:	4622      	mov	r2, r4
   2afda:	4651      	mov	r1, sl
   2afdc:	f8da 0010 	ldr.w	r0, [sl, #16]
   2afe0:	e7f4      	b.n	2afcc <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2afe2:	f8da 0010 	ldr.w	r0, [sl, #16]
   2afe6:	4622      	mov	r2, r4
   2afe8:	4651      	mov	r1, sl
   2afea:	3024      	adds	r0, #36	; 0x24
   2afec:	e7ee      	b.n	2afcc <register_events+0xcc>

0002afee <signal_poll_event>:
{
   2afee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2aff2:	6884      	ldr	r4, [r0, #8]
{
   2aff4:	4605      	mov	r5, r0
   2aff6:	460e      	mov	r6, r1
	if (poller != NULL) {
   2aff8:	b144      	cbz	r4, 2b00c <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2affa:	7863      	ldrb	r3, [r4, #1]
   2affc:	2b01      	cmp	r3, #1
   2affe:	d12e      	bne.n	2b05e <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   2b000:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2b004:	f013 0302 	ands.w	r3, r3, #2
   2b008:	d10a      	bne.n	2b020 <signal_poll_event+0x32>
		poller->is_polling = false;
   2b00a:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2b00c:	2000      	movs	r0, #0
	event->state |= state;
   2b00e:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   2b010:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2b012:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2b016:	4316      	orrs	r6, r2
   2b018:	f366 3394 	bfi	r3, r6, #14, #7
   2b01c:	60eb      	str	r3, [r5, #12]
	return retcode;
   2b01e:	e03e      	b.n	2b09e <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2b020:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2b024:	f1b3 3fff 	cmp.w	r3, #4294967295
   2b028:	bf08      	it	eq
   2b02a:	f112 0f02 	cmneq.w	r2, #2
   2b02e:	d032      	beq.n	2b096 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2b030:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2b034:	4640      	mov	r0, r8
   2b036:	f7ff fe7f 	bl	2ad38 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2b03a:	2e08      	cmp	r6, #8
   2b03c:	bf0c      	ite	eq
   2b03e:	f06f 0303 	mvneq.w	r3, #3
   2b042:	2300      	movne	r3, #0
   2b044:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2b046:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2b04a:	06db      	lsls	r3, r3, #27
   2b04c:	d109      	bne.n	2b062 <signal_poll_event+0x74>
   2b04e:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2b052:	b937      	cbnz	r7, 2b062 <signal_poll_event+0x74>
	z_ready_thread(thread);
   2b054:	4640      	mov	r0, r8
   2b056:	f7ff fe1d 	bl	2ac94 <z_ready_thread>
		poller->is_polling = false;
   2b05a:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2b05c:	e7d6      	b.n	2b00c <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2b05e:	2b02      	cmp	r3, #2
   2b060:	d001      	beq.n	2b066 <signal_poll_event+0x78>
		poller->is_polling = false;
   2b062:	2300      	movs	r3, #0
   2b064:	e7d1      	b.n	2b00a <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2b066:	7823      	ldrb	r3, [r4, #0]
   2b068:	2b00      	cmp	r3, #0
   2b06a:	d0cf      	beq.n	2b00c <signal_poll_event+0x1e>
   2b06c:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2b070:	2f00      	cmp	r7, #0
   2b072:	d0f2      	beq.n	2b05a <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2b074:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2b078:	f1a4 0914 	sub.w	r9, r4, #20
   2b07c:	f104 0014 	add.w	r0, r4, #20
   2b080:	f7ff febb 	bl	2adfa <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   2b084:	4649      	mov	r1, r9
   2b086:	4638      	mov	r0, r7
		twork->poll_result = 0;
   2b088:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2b08c:	f7ff fd9a 	bl	2abc4 <z_work_submit_to_queue>
		poller->is_polling = false;
   2b090:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2b094:	e7ba      	b.n	2b00c <signal_poll_event+0x1e>
		poller->is_polling = false;
   2b096:	2300      	movs	r3, #0
		return -EAGAIN;
   2b098:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   2b09c:	7023      	strb	r3, [r4, #0]
}
   2b09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002b0a2 <clear_event_registrations>:
	while (num_events--) {
   2b0a2:	2314      	movs	r3, #20
{
   2b0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	event->poller = NULL;
   2b0a6:	2400      	movs	r4, #0
	switch (event->type) {
   2b0a8:	f44f 768b 	mov.w	r6, #278	; 0x116
   2b0ac:	fb03 0001 	mla	r0, r3, r1, r0
	while (num_events--) {
   2b0b0:	b901      	cbnz	r1, 2b0b4 <clear_event_registrations+0x12>
}
   2b0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   2b0b4:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   2b0b8:	f1a0 0714 	sub.w	r7, r0, #20
   2b0bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2b0c0:	2b08      	cmp	r3, #8
	event->poller = NULL;
   2b0c2:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2b0c6:	d80c      	bhi.n	2b0e2 <clear_event_registrations+0x40>
   2b0c8:	fa26 f303 	lsr.w	r3, r6, r3
   2b0cc:	07db      	lsls	r3, r3, #31
   2b0ce:	d508      	bpl.n	2b0e2 <clear_event_registrations+0x40>
	return node->next != NULL;
   2b0d0:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2b0d4:	b12b      	cbz	r3, 2b0e2 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   2b0d6:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2b0da:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2b0dc:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2b0de:	e940 4405 	strd	r4, r4, [r0, #-20]
   2b0e2:	f382 8811 	msr	BASEPRI, r2
   2b0e6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2b0ea:	f04f 0320 	mov.w	r3, #32
   2b0ee:	f3ef 8211 	mrs	r2, BASEPRI
   2b0f2:	f383 8812 	msr	BASEPRI_MAX, r3
   2b0f6:	f3bf 8f6f 	isb	sy
   2b0fa:	4638      	mov	r0, r7
   2b0fc:	3901      	subs	r1, #1
   2b0fe:	e7d7      	b.n	2b0b0 <clear_event_registrations+0xe>

0002b100 <k_poll_event_init>:
{
   2b100:	b510      	push	{r4, lr}
	event->poller = NULL;
   2b102:	2400      	movs	r4, #0
	event->type = type;
   2b104:	0552      	lsls	r2, r2, #21
   2b106:	0209      	lsls	r1, r1, #8
   2b108:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   2b10c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   2b110:	430a      	orrs	r2, r1
   2b112:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2b114:	6084      	str	r4, [r0, #8]
	event->type = type;
   2b116:	430a      	orrs	r2, r1
	event->obj = obj;
   2b118:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   2b11c:	bd10      	pop	{r4, pc}

0002b11e <z_handle_obj_poll_events>:
{
   2b11e:	4603      	mov	r3, r0
	return list->head == list;
   2b120:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2b122:	4283      	cmp	r3, r0
   2b124:	d008      	beq.n	2b138 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2b126:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2b12a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2b12c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2b12e:	2300      	movs	r3, #0
	node->prev = NULL;
   2b130:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2b134:	f7ff bf5b 	b.w	2afee <signal_poll_event>
}
   2b138:	4770      	bx	lr

0002b13a <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2b13a:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2b13c:	e9c0 0000 	strd	r0, r0, [r0]
   2b140:	6083      	str	r3, [r0, #8]
}
   2b142:	4770      	bx	lr

0002b144 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   2b144:	6883      	ldr	r3, [r0, #8]
   2b146:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   2b148:	68c3      	ldr	r3, [r0, #12]
   2b14a:	6013      	str	r3, [r2, #0]
}
   2b14c:	4770      	bx	lr

0002b14e <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2b14e:	3204      	adds	r2, #4
{
   2b150:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   2b152:	4604      	mov	r4, r0
   2b154:	d208      	bcs.n	2b168 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2b156:	2600      	movs	r6, #0
   2b158:	2700      	movs	r7, #0
   2b15a:	f041 0104 	orr.w	r1, r1, #4
   2b15e:	e9cd 6700 	strd	r6, r7, [sp]
   2b162:	f7ff fbfb 	bl	2a95c <k_heap_aligned_alloc>
	if (mem == NULL) {
   2b166:	b910      	cbnz	r0, 2b16e <z_heap_aligned_alloc+0x20>
		return NULL;
   2b168:	2000      	movs	r0, #0
}
   2b16a:	b002      	add	sp, #8
   2b16c:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   2b16e:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   2b172:	e7fa      	b.n	2b16a <z_heap_aligned_alloc+0x1c>

0002b174 <k_free>:
	if (ptr != NULL) {
   2b174:	b120      	cbz	r0, 2b180 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2b176:	1f01      	subs	r1, r0, #4
   2b178:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2b17c:	f7ff bc45 	b.w	2aa0a <k_heap_free>
}
   2b180:	4770      	bx	lr

0002b182 <k_malloc>:
{
   2b182:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2b184:	2004      	movs	r0, #4
   2b186:	f7fa bacb 	b.w	25720 <k_aligned_alloc>

0002b18a <k_calloc>:
{
   2b18a:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   2b18c:	fba0 5401 	umull	r5, r4, r0, r1
   2b190:	b924      	cbnz	r4, 2b19c <k_calloc+0x12>
	ret = k_malloc(bounds);
   2b192:	4628      	mov	r0, r5
   2b194:	f7ff fff5 	bl	2b182 <k_malloc>
	if (ret != NULL) {
   2b198:	4606      	mov	r6, r0
   2b19a:	b910      	cbnz	r0, 2b1a2 <k_calloc+0x18>
		return NULL;
   2b19c:	2600      	movs	r6, #0
}
   2b19e:	4630      	mov	r0, r6
   2b1a0:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3(memset, void *, int)
   2b1a2:	462a      	mov	r2, r5
   2b1a4:	4621      	mov	r1, r4
   2b1a6:	f000 f82d 	bl	2b204 <memset>
   2b1aa:	e7f8      	b.n	2b19e <k_calloc+0x14>

0002b1ac <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2b1ac:	4770      	bx	lr

0002b1ae <memchr>:
   2b1ae:	b2c9      	uxtb	r1, r1
   2b1b0:	4603      	mov	r3, r0
   2b1b2:	4402      	add	r2, r0
   2b1b4:	b510      	push	{r4, lr}
   2b1b6:	4293      	cmp	r3, r2
   2b1b8:	4618      	mov	r0, r3
   2b1ba:	d101      	bne.n	2b1c0 <memchr+0x12>
   2b1bc:	2000      	movs	r0, #0
   2b1be:	e003      	b.n	2b1c8 <memchr+0x1a>
   2b1c0:	7804      	ldrb	r4, [r0, #0]
   2b1c2:	3301      	adds	r3, #1
   2b1c4:	428c      	cmp	r4, r1
   2b1c6:	d1f6      	bne.n	2b1b6 <memchr+0x8>
   2b1c8:	bd10      	pop	{r4, pc}

0002b1ca <memcmp>:
   2b1ca:	3901      	subs	r1, #1
   2b1cc:	4402      	add	r2, r0
   2b1ce:	b510      	push	{r4, lr}
   2b1d0:	4290      	cmp	r0, r2
   2b1d2:	d101      	bne.n	2b1d8 <memcmp+0xe>
   2b1d4:	2000      	movs	r0, #0
   2b1d6:	e005      	b.n	2b1e4 <memcmp+0x1a>
   2b1d8:	7803      	ldrb	r3, [r0, #0]
   2b1da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2b1de:	42a3      	cmp	r3, r4
   2b1e0:	d001      	beq.n	2b1e6 <memcmp+0x1c>
   2b1e2:	1b18      	subs	r0, r3, r4
   2b1e4:	bd10      	pop	{r4, pc}
   2b1e6:	3001      	adds	r0, #1
   2b1e8:	e7f2      	b.n	2b1d0 <memcmp+0x6>

0002b1ea <memcpy>:
   2b1ea:	440a      	add	r2, r1
   2b1ec:	1e43      	subs	r3, r0, #1
   2b1ee:	4291      	cmp	r1, r2
   2b1f0:	d100      	bne.n	2b1f4 <memcpy+0xa>
   2b1f2:	4770      	bx	lr
   2b1f4:	b510      	push	{r4, lr}
   2b1f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   2b1fa:	4291      	cmp	r1, r2
   2b1fc:	f803 4f01 	strb.w	r4, [r3, #1]!
   2b200:	d1f9      	bne.n	2b1f6 <memcpy+0xc>
   2b202:	bd10      	pop	{r4, pc}

0002b204 <memset>:
   2b204:	4402      	add	r2, r0
   2b206:	4603      	mov	r3, r0
   2b208:	4293      	cmp	r3, r2
   2b20a:	d100      	bne.n	2b20e <memset+0xa>
   2b20c:	4770      	bx	lr
   2b20e:	f803 1b01 	strb.w	r1, [r3], #1
   2b212:	e7f9      	b.n	2b208 <memset+0x4>

0002b214 <__sread>:
   2b214:	b510      	push	{r4, lr}
   2b216:	460c      	mov	r4, r1
   2b218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2b21c:	f7fb fd1e 	bl	26c5c <_read_r>
   2b220:	2800      	cmp	r0, #0
   2b222:	bfab      	itete	ge
   2b224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   2b226:	89a3      	ldrhlt	r3, [r4, #12]
   2b228:	181b      	addge	r3, r3, r0
   2b22a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   2b22e:	bfac      	ite	ge
   2b230:	6563      	strge	r3, [r4, #84]	; 0x54
   2b232:	81a3      	strhlt	r3, [r4, #12]
   2b234:	bd10      	pop	{r4, pc}

0002b236 <__seofread>:
   2b236:	2000      	movs	r0, #0
   2b238:	4770      	bx	lr

0002b23a <__swrite>:
   2b23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b23e:	461f      	mov	r7, r3
   2b240:	898b      	ldrh	r3, [r1, #12]
   2b242:	4605      	mov	r5, r0
   2b244:	460c      	mov	r4, r1
   2b246:	05db      	lsls	r3, r3, #23
   2b248:	4616      	mov	r6, r2
   2b24a:	d505      	bpl.n	2b258 <__swrite+0x1e>
   2b24c:	2302      	movs	r3, #2
   2b24e:	2200      	movs	r2, #0
   2b250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2b254:	f7fa febe 	bl	25fd4 <_lseek_r>
   2b258:	89a3      	ldrh	r3, [r4, #12]
   2b25a:	4632      	mov	r2, r6
   2b25c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2b260:	4628      	mov	r0, r5
   2b262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2b266:	81a3      	strh	r3, [r4, #12]
   2b268:	463b      	mov	r3, r7
   2b26a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2b26e:	f7fa bdcf 	b.w	25e10 <_write_r>

0002b272 <__sseek>:
   2b272:	b510      	push	{r4, lr}
   2b274:	460c      	mov	r4, r1
   2b276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2b27a:	f7fa feab 	bl	25fd4 <_lseek_r>
   2b27e:	1c43      	adds	r3, r0, #1
   2b280:	89a3      	ldrh	r3, [r4, #12]
   2b282:	bf15      	itete	ne
   2b284:	6560      	strne	r0, [r4, #84]	; 0x54
   2b286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   2b28a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   2b28e:	81a3      	strheq	r3, [r4, #12]
   2b290:	bf18      	it	ne
   2b292:	81a3      	strhne	r3, [r4, #12]
   2b294:	bd10      	pop	{r4, pc}

0002b296 <__sclose>:
   2b296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2b29a:	f7fa bdcb 	b.w	25e34 <_close_r>

0002b29e <strchr>:
   2b29e:	b2c9      	uxtb	r1, r1
   2b2a0:	4603      	mov	r3, r0
   2b2a2:	4618      	mov	r0, r3
   2b2a4:	f813 2b01 	ldrb.w	r2, [r3], #1
   2b2a8:	b112      	cbz	r2, 2b2b0 <strchr+0x12>
   2b2aa:	428a      	cmp	r2, r1
   2b2ac:	d1f9      	bne.n	2b2a2 <strchr+0x4>
   2b2ae:	4770      	bx	lr
   2b2b0:	2900      	cmp	r1, #0
   2b2b2:	bf18      	it	ne
   2b2b4:	2000      	movne	r0, #0
   2b2b6:	4770      	bx	lr

0002b2b8 <strcpy>:
   2b2b8:	4603      	mov	r3, r0
   2b2ba:	f811 2b01 	ldrb.w	r2, [r1], #1
   2b2be:	f803 2b01 	strb.w	r2, [r3], #1
   2b2c2:	2a00      	cmp	r2, #0
   2b2c4:	d1f9      	bne.n	2b2ba <strcpy+0x2>
   2b2c6:	4770      	bx	lr

0002b2c8 <strncmp>:
   2b2c8:	b510      	push	{r4, lr}
   2b2ca:	b16a      	cbz	r2, 2b2e8 <strncmp+0x20>
   2b2cc:	3901      	subs	r1, #1
   2b2ce:	1884      	adds	r4, r0, r2
   2b2d0:	f810 2b01 	ldrb.w	r2, [r0], #1
   2b2d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2b2d8:	429a      	cmp	r2, r3
   2b2da:	d103      	bne.n	2b2e4 <strncmp+0x1c>
   2b2dc:	42a0      	cmp	r0, r4
   2b2de:	d001      	beq.n	2b2e4 <strncmp+0x1c>
   2b2e0:	2a00      	cmp	r2, #0
   2b2e2:	d1f5      	bne.n	2b2d0 <strncmp+0x8>
   2b2e4:	1ad0      	subs	r0, r2, r3
   2b2e6:	bd10      	pop	{r4, pc}
   2b2e8:	4610      	mov	r0, r2
   2b2ea:	e7fc      	b.n	2b2e6 <strncmp+0x1e>

0002b2ec <strncpy>:
   2b2ec:	3901      	subs	r1, #1
   2b2ee:	4603      	mov	r3, r0
   2b2f0:	b510      	push	{r4, lr}
   2b2f2:	b132      	cbz	r2, 2b302 <strncpy+0x16>
   2b2f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2b2f8:	3a01      	subs	r2, #1
   2b2fa:	f803 4b01 	strb.w	r4, [r3], #1
   2b2fe:	2c00      	cmp	r4, #0
   2b300:	d1f7      	bne.n	2b2f2 <strncpy+0x6>
   2b302:	441a      	add	r2, r3
   2b304:	2100      	movs	r1, #0
   2b306:	4293      	cmp	r3, r2
   2b308:	d100      	bne.n	2b30c <strncpy+0x20>
   2b30a:	bd10      	pop	{r4, pc}
   2b30c:	f803 1b01 	strb.w	r1, [r3], #1
   2b310:	e7f9      	b.n	2b306 <strncpy+0x1a>

0002b312 <strnlen>:
   2b312:	4602      	mov	r2, r0
   2b314:	4401      	add	r1, r0
   2b316:	b510      	push	{r4, lr}
   2b318:	428a      	cmp	r2, r1
   2b31a:	4613      	mov	r3, r2
   2b31c:	d003      	beq.n	2b326 <strnlen+0x14>
   2b31e:	781c      	ldrb	r4, [r3, #0]
   2b320:	3201      	adds	r2, #1
   2b322:	2c00      	cmp	r4, #0
   2b324:	d1f8      	bne.n	2b318 <strnlen+0x6>
   2b326:	1a18      	subs	r0, r3, r0
   2b328:	bd10      	pop	{r4, pc}

0002b32a <strrchr>:
   2b32a:	b538      	push	{r3, r4, r5, lr}
   2b32c:	4603      	mov	r3, r0
   2b32e:	460c      	mov	r4, r1
   2b330:	b969      	cbnz	r1, 2b34e <strrchr+0x24>
   2b332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b336:	f7ff bfb2 	b.w	2b29e <strchr>
   2b33a:	1c43      	adds	r3, r0, #1
   2b33c:	4605      	mov	r5, r0
   2b33e:	4621      	mov	r1, r4
   2b340:	4618      	mov	r0, r3
   2b342:	f7ff ffac 	bl	2b29e <strchr>
   2b346:	2800      	cmp	r0, #0
   2b348:	d1f7      	bne.n	2b33a <strrchr+0x10>
   2b34a:	4628      	mov	r0, r5
   2b34c:	bd38      	pop	{r3, r4, r5, pc}
   2b34e:	2500      	movs	r5, #0
   2b350:	e7f5      	b.n	2b33e <strrchr+0x14>

0002b352 <strstr>:
   2b352:	780a      	ldrb	r2, [r1, #0]
   2b354:	b570      	push	{r4, r5, r6, lr}
   2b356:	b96a      	cbnz	r2, 2b374 <strstr+0x22>
   2b358:	bd70      	pop	{r4, r5, r6, pc}
   2b35a:	429a      	cmp	r2, r3
   2b35c:	d109      	bne.n	2b372 <strstr+0x20>
   2b35e:	460c      	mov	r4, r1
   2b360:	4605      	mov	r5, r0
   2b362:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2b366:	2b00      	cmp	r3, #0
   2b368:	d0f6      	beq.n	2b358 <strstr+0x6>
   2b36a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   2b36e:	429e      	cmp	r6, r3
   2b370:	d0f7      	beq.n	2b362 <strstr+0x10>
   2b372:	3001      	adds	r0, #1
   2b374:	7803      	ldrb	r3, [r0, #0]
   2b376:	2b00      	cmp	r3, #0
   2b378:	d1ef      	bne.n	2b35a <strstr+0x8>
   2b37a:	4618      	mov	r0, r3
   2b37c:	e7ec      	b.n	2b358 <strstr+0x6>

0002b37e <_strtol_r>:
   2b37e:	f7fa bb69 	b.w	25a54 <_strtol_l.constprop.0>

0002b382 <_strtoul_r>:
   2b382:	f7fa bc8d 	b.w	25ca0 <_strtoul_l.constprop.0>

0002b386 <_vsniprintf_r>:
   2b386:	b530      	push	{r4, r5, lr}
   2b388:	4614      	mov	r4, r2
   2b38a:	b09b      	sub	sp, #108	; 0x6c
   2b38c:	4605      	mov	r5, r0
   2b38e:	461a      	mov	r2, r3
   2b390:	2c00      	cmp	r4, #0
   2b392:	da05      	bge.n	2b3a0 <_vsniprintf_r+0x1a>
   2b394:	238b      	movs	r3, #139	; 0x8b
   2b396:	6003      	str	r3, [r0, #0]
   2b398:	f04f 30ff 	mov.w	r0, #4294967295
   2b39c:	b01b      	add	sp, #108	; 0x6c
   2b39e:	bd30      	pop	{r4, r5, pc}
   2b3a0:	f44f 7302 	mov.w	r3, #520	; 0x208
   2b3a4:	9100      	str	r1, [sp, #0]
   2b3a6:	9104      	str	r1, [sp, #16]
   2b3a8:	4669      	mov	r1, sp
   2b3aa:	f8ad 300c 	strh.w	r3, [sp, #12]
   2b3ae:	bf14      	ite	ne
   2b3b0:	f104 33ff 	addne.w	r3, r4, #4294967295
   2b3b4:	4623      	moveq	r3, r4
   2b3b6:	9302      	str	r3, [sp, #8]
   2b3b8:	9305      	str	r3, [sp, #20]
   2b3ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b3be:	f8ad 300e 	strh.w	r3, [sp, #14]
   2b3c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2b3c4:	f7fa fe24 	bl	26010 <_svfiprintf_r>
   2b3c8:	1c43      	adds	r3, r0, #1
   2b3ca:	bfbc      	itt	lt
   2b3cc:	238b      	movlt	r3, #139	; 0x8b
   2b3ce:	602b      	strlt	r3, [r5, #0]
   2b3d0:	2c00      	cmp	r4, #0
   2b3d2:	d0e3      	beq.n	2b39c <_vsniprintf_r+0x16>
   2b3d4:	9b00      	ldr	r3, [sp, #0]
   2b3d6:	2200      	movs	r2, #0
   2b3d8:	701a      	strb	r2, [r3, #0]
   2b3da:	e7df      	b.n	2b39c <_vsniprintf_r+0x16>

0002b3dc <__sfmoreglue>:
   2b3dc:	b570      	push	{r4, r5, r6, lr}
   2b3de:	2368      	movs	r3, #104	; 0x68
   2b3e0:	1e4d      	subs	r5, r1, #1
   2b3e2:	460e      	mov	r6, r1
   2b3e4:	435d      	muls	r5, r3
   2b3e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
   2b3ea:	f7fa fa31 	bl	25850 <_malloc_r>
   2b3ee:	4604      	mov	r4, r0
   2b3f0:	b140      	cbz	r0, 2b404 <__sfmoreglue+0x28>
   2b3f2:	2100      	movs	r1, #0
   2b3f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
   2b3f8:	e9c0 1600 	strd	r1, r6, [r0]
   2b3fc:	300c      	adds	r0, #12
   2b3fe:	60a0      	str	r0, [r4, #8]
   2b400:	f7ff ff00 	bl	2b204 <memset>
   2b404:	4620      	mov	r0, r4
   2b406:	bd70      	pop	{r4, r5, r6, pc}

0002b408 <_fwalk_reent>:
   2b408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b40c:	4606      	mov	r6, r0
   2b40e:	4688      	mov	r8, r1
   2b410:	f100 0448 	add.w	r4, r0, #72	; 0x48
   2b414:	2700      	movs	r7, #0
   2b416:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   2b41a:	f1b9 0901 	subs.w	r9, r9, #1
   2b41e:	d505      	bpl.n	2b42c <_fwalk_reent+0x24>
   2b420:	6824      	ldr	r4, [r4, #0]
   2b422:	2c00      	cmp	r4, #0
   2b424:	d1f7      	bne.n	2b416 <_fwalk_reent+0xe>
   2b426:	4638      	mov	r0, r7
   2b428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2b42c:	89ab      	ldrh	r3, [r5, #12]
   2b42e:	2b01      	cmp	r3, #1
   2b430:	d907      	bls.n	2b442 <_fwalk_reent+0x3a>
   2b432:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   2b436:	3301      	adds	r3, #1
   2b438:	d003      	beq.n	2b442 <_fwalk_reent+0x3a>
   2b43a:	4629      	mov	r1, r5
   2b43c:	4630      	mov	r0, r6
   2b43e:	47c0      	blx	r8
   2b440:	4307      	orrs	r7, r0
   2b442:	3568      	adds	r5, #104	; 0x68
   2b444:	e7e9      	b.n	2b41a <_fwalk_reent+0x12>

0002b446 <__ssputs_r>:
   2b446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b44a:	461f      	mov	r7, r3
   2b44c:	688e      	ldr	r6, [r1, #8]
   2b44e:	4682      	mov	sl, r0
   2b450:	460c      	mov	r4, r1
   2b452:	42be      	cmp	r6, r7
   2b454:	4690      	mov	r8, r2
   2b456:	680b      	ldr	r3, [r1, #0]
   2b458:	d82d      	bhi.n	2b4b6 <__ssputs_r+0x70>
   2b45a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2b45e:	f412 6f90 	tst.w	r2, #1152	; 0x480
   2b462:	d026      	beq.n	2b4b2 <__ssputs_r+0x6c>
   2b464:	6965      	ldr	r5, [r4, #20]
   2b466:	6909      	ldr	r1, [r1, #16]
   2b468:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2b46c:	eba3 0901 	sub.w	r9, r3, r1
   2b470:	1c7b      	adds	r3, r7, #1
   2b472:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2b476:	444b      	add	r3, r9
   2b478:	106d      	asrs	r5, r5, #1
   2b47a:	429d      	cmp	r5, r3
   2b47c:	bf38      	it	cc
   2b47e:	461d      	movcc	r5, r3
   2b480:	0553      	lsls	r3, r2, #21
   2b482:	d527      	bpl.n	2b4d4 <__ssputs_r+0x8e>
   2b484:	4629      	mov	r1, r5
   2b486:	f7fa f9e3 	bl	25850 <_malloc_r>
   2b48a:	4606      	mov	r6, r0
   2b48c:	b360      	cbz	r0, 2b4e8 <__ssputs_r+0xa2>
   2b48e:	464a      	mov	r2, r9
   2b490:	6921      	ldr	r1, [r4, #16]
   2b492:	f7ff feaa 	bl	2b1ea <memcpy>
   2b496:	89a3      	ldrh	r3, [r4, #12]
   2b498:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   2b49c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2b4a0:	81a3      	strh	r3, [r4, #12]
   2b4a2:	6126      	str	r6, [r4, #16]
   2b4a4:	444e      	add	r6, r9
   2b4a6:	6165      	str	r5, [r4, #20]
   2b4a8:	eba5 0509 	sub.w	r5, r5, r9
   2b4ac:	6026      	str	r6, [r4, #0]
   2b4ae:	463e      	mov	r6, r7
   2b4b0:	60a5      	str	r5, [r4, #8]
   2b4b2:	42be      	cmp	r6, r7
   2b4b4:	d900      	bls.n	2b4b8 <__ssputs_r+0x72>
   2b4b6:	463e      	mov	r6, r7
   2b4b8:	4632      	mov	r2, r6
   2b4ba:	4641      	mov	r1, r8
   2b4bc:	6820      	ldr	r0, [r4, #0]
   2b4be:	f000 fa22 	bl	2b906 <memmove>
   2b4c2:	68a3      	ldr	r3, [r4, #8]
   2b4c4:	2000      	movs	r0, #0
   2b4c6:	1b9b      	subs	r3, r3, r6
   2b4c8:	60a3      	str	r3, [r4, #8]
   2b4ca:	6823      	ldr	r3, [r4, #0]
   2b4cc:	4433      	add	r3, r6
   2b4ce:	6023      	str	r3, [r4, #0]
   2b4d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b4d4:	462a      	mov	r2, r5
   2b4d6:	f000 fa30 	bl	2b93a <_realloc_r>
   2b4da:	4606      	mov	r6, r0
   2b4dc:	2800      	cmp	r0, #0
   2b4de:	d1e0      	bne.n	2b4a2 <__ssputs_r+0x5c>
   2b4e0:	6921      	ldr	r1, [r4, #16]
   2b4e2:	4650      	mov	r0, sl
   2b4e4:	f7fa f96a 	bl	257bc <_free_r>
   2b4e8:	230c      	movs	r3, #12
   2b4ea:	f04f 30ff 	mov.w	r0, #4294967295
   2b4ee:	f8ca 3000 	str.w	r3, [sl]
   2b4f2:	89a3      	ldrh	r3, [r4, #12]
   2b4f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b4f8:	81a3      	strh	r3, [r4, #12]
   2b4fa:	e7e9      	b.n	2b4d0 <__ssputs_r+0x8a>

0002b4fc <_sungetc_r>:
   2b4fc:	b538      	push	{r3, r4, r5, lr}
   2b4fe:	1c4b      	adds	r3, r1, #1
   2b500:	4614      	mov	r4, r2
   2b502:	d103      	bne.n	2b50c <_sungetc_r+0x10>
   2b504:	f04f 35ff 	mov.w	r5, #4294967295
   2b508:	4628      	mov	r0, r5
   2b50a:	bd38      	pop	{r3, r4, r5, pc}
   2b50c:	8993      	ldrh	r3, [r2, #12]
   2b50e:	b2cd      	uxtb	r5, r1
   2b510:	f023 0320 	bic.w	r3, r3, #32
   2b514:	8193      	strh	r3, [r2, #12]
   2b516:	6853      	ldr	r3, [r2, #4]
   2b518:	6b52      	ldr	r2, [r2, #52]	; 0x34
   2b51a:	b18a      	cbz	r2, 2b540 <_sungetc_r+0x44>
   2b51c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2b51e:	429a      	cmp	r2, r3
   2b520:	dd08      	ble.n	2b534 <_sungetc_r+0x38>
   2b522:	6823      	ldr	r3, [r4, #0]
   2b524:	1e5a      	subs	r2, r3, #1
   2b526:	6022      	str	r2, [r4, #0]
   2b528:	f803 5c01 	strb.w	r5, [r3, #-1]
   2b52c:	6863      	ldr	r3, [r4, #4]
   2b52e:	3301      	adds	r3, #1
   2b530:	6063      	str	r3, [r4, #4]
   2b532:	e7e9      	b.n	2b508 <_sungetc_r+0xc>
   2b534:	4621      	mov	r1, r4
   2b536:	f000 f90b 	bl	2b750 <__submore>
   2b53a:	2800      	cmp	r0, #0
   2b53c:	d0f1      	beq.n	2b522 <_sungetc_r+0x26>
   2b53e:	e7e1      	b.n	2b504 <_sungetc_r+0x8>
   2b540:	6921      	ldr	r1, [r4, #16]
   2b542:	6822      	ldr	r2, [r4, #0]
   2b544:	b141      	cbz	r1, 2b558 <_sungetc_r+0x5c>
   2b546:	4291      	cmp	r1, r2
   2b548:	d206      	bcs.n	2b558 <_sungetc_r+0x5c>
   2b54a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   2b54e:	42a9      	cmp	r1, r5
   2b550:	d102      	bne.n	2b558 <_sungetc_r+0x5c>
   2b552:	3a01      	subs	r2, #1
   2b554:	6022      	str	r2, [r4, #0]
   2b556:	e7ea      	b.n	2b52e <_sungetc_r+0x32>
   2b558:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
   2b55c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2b560:	6363      	str	r3, [r4, #52]	; 0x34
   2b562:	2303      	movs	r3, #3
   2b564:	63a3      	str	r3, [r4, #56]	; 0x38
   2b566:	4623      	mov	r3, r4
   2b568:	f803 5f46 	strb.w	r5, [r3, #70]!
   2b56c:	6023      	str	r3, [r4, #0]
   2b56e:	2301      	movs	r3, #1
   2b570:	e7de      	b.n	2b530 <_sungetc_r+0x34>

0002b572 <__ssrefill_r>:
   2b572:	b510      	push	{r4, lr}
   2b574:	460c      	mov	r4, r1
   2b576:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2b578:	b169      	cbz	r1, 2b596 <__ssrefill_r+0x24>
   2b57a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2b57e:	4299      	cmp	r1, r3
   2b580:	d001      	beq.n	2b586 <__ssrefill_r+0x14>
   2b582:	f7fa f91b 	bl	257bc <_free_r>
   2b586:	2000      	movs	r0, #0
   2b588:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2b58a:	6360      	str	r0, [r4, #52]	; 0x34
   2b58c:	6063      	str	r3, [r4, #4]
   2b58e:	b113      	cbz	r3, 2b596 <__ssrefill_r+0x24>
   2b590:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2b592:	6023      	str	r3, [r4, #0]
   2b594:	bd10      	pop	{r4, pc}
   2b596:	6923      	ldr	r3, [r4, #16]
   2b598:	f04f 30ff 	mov.w	r0, #4294967295
   2b59c:	6023      	str	r3, [r4, #0]
   2b59e:	2300      	movs	r3, #0
   2b5a0:	6063      	str	r3, [r4, #4]
   2b5a2:	89a3      	ldrh	r3, [r4, #12]
   2b5a4:	f043 0320 	orr.w	r3, r3, #32
   2b5a8:	81a3      	strh	r3, [r4, #12]
   2b5aa:	e7f3      	b.n	2b594 <__ssrefill_r+0x22>

0002b5ac <__sfputc_r>:
   2b5ac:	6893      	ldr	r3, [r2, #8]
   2b5ae:	3b01      	subs	r3, #1
   2b5b0:	2b00      	cmp	r3, #0
   2b5b2:	6093      	str	r3, [r2, #8]
   2b5b4:	b410      	push	{r4}
   2b5b6:	da07      	bge.n	2b5c8 <__sfputc_r+0x1c>
   2b5b8:	6994      	ldr	r4, [r2, #24]
   2b5ba:	42a3      	cmp	r3, r4
   2b5bc:	db01      	blt.n	2b5c2 <__sfputc_r+0x16>
   2b5be:	290a      	cmp	r1, #10
   2b5c0:	d102      	bne.n	2b5c8 <__sfputc_r+0x1c>
   2b5c2:	bc10      	pop	{r4}
   2b5c4:	f7fb bb5c 	b.w	26c80 <__swbuf_r>
   2b5c8:	6813      	ldr	r3, [r2, #0]
   2b5ca:	1c58      	adds	r0, r3, #1
   2b5cc:	6010      	str	r0, [r2, #0]
   2b5ce:	4608      	mov	r0, r1
   2b5d0:	7019      	strb	r1, [r3, #0]
   2b5d2:	bc10      	pop	{r4}
   2b5d4:	4770      	bx	lr

0002b5d6 <__sfputs_r>:
   2b5d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b5d8:	4606      	mov	r6, r0
   2b5da:	460f      	mov	r7, r1
   2b5dc:	4614      	mov	r4, r2
   2b5de:	18d5      	adds	r5, r2, r3
   2b5e0:	42ac      	cmp	r4, r5
   2b5e2:	d101      	bne.n	2b5e8 <__sfputs_r+0x12>
   2b5e4:	2000      	movs	r0, #0
   2b5e6:	e007      	b.n	2b5f8 <__sfputs_r+0x22>
   2b5e8:	463a      	mov	r2, r7
   2b5ea:	f814 1b01 	ldrb.w	r1, [r4], #1
   2b5ee:	4630      	mov	r0, r6
   2b5f0:	f7ff ffdc 	bl	2b5ac <__sfputc_r>
   2b5f4:	1c43      	adds	r3, r0, #1
   2b5f6:	d1f3      	bne.n	2b5e0 <__sfputs_r+0xa>
   2b5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b5fa <_printf_common>:
   2b5fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b5fe:	4616      	mov	r6, r2
   2b600:	4698      	mov	r8, r3
   2b602:	688a      	ldr	r2, [r1, #8]
   2b604:	4607      	mov	r7, r0
   2b606:	690b      	ldr	r3, [r1, #16]
   2b608:	460c      	mov	r4, r1
   2b60a:	f8dd 9020 	ldr.w	r9, [sp, #32]
   2b60e:	4293      	cmp	r3, r2
   2b610:	bfb8      	it	lt
   2b612:	4613      	movlt	r3, r2
   2b614:	6033      	str	r3, [r6, #0]
   2b616:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2b61a:	b10a      	cbz	r2, 2b620 <_printf_common+0x26>
   2b61c:	3301      	adds	r3, #1
   2b61e:	6033      	str	r3, [r6, #0]
   2b620:	6823      	ldr	r3, [r4, #0]
   2b622:	0699      	lsls	r1, r3, #26
   2b624:	bf42      	ittt	mi
   2b626:	6833      	ldrmi	r3, [r6, #0]
   2b628:	3302      	addmi	r3, #2
   2b62a:	6033      	strmi	r3, [r6, #0]
   2b62c:	6825      	ldr	r5, [r4, #0]
   2b62e:	f015 0506 	ands.w	r5, r5, #6
   2b632:	d106      	bne.n	2b642 <_printf_common+0x48>
   2b634:	f104 0a19 	add.w	sl, r4, #25
   2b638:	68e3      	ldr	r3, [r4, #12]
   2b63a:	6832      	ldr	r2, [r6, #0]
   2b63c:	1a9b      	subs	r3, r3, r2
   2b63e:	42ab      	cmp	r3, r5
   2b640:	dc2b      	bgt.n	2b69a <_printf_common+0xa0>
   2b642:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   2b646:	6822      	ldr	r2, [r4, #0]
   2b648:	3b00      	subs	r3, #0
   2b64a:	bf18      	it	ne
   2b64c:	2301      	movne	r3, #1
   2b64e:	0692      	lsls	r2, r2, #26
   2b650:	d430      	bmi.n	2b6b4 <_printf_common+0xba>
   2b652:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2b656:	4641      	mov	r1, r8
   2b658:	4638      	mov	r0, r7
   2b65a:	47c8      	blx	r9
   2b65c:	3001      	adds	r0, #1
   2b65e:	d023      	beq.n	2b6a8 <_printf_common+0xae>
   2b660:	6823      	ldr	r3, [r4, #0]
   2b662:	341a      	adds	r4, #26
   2b664:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   2b668:	f003 0306 	and.w	r3, r3, #6
   2b66c:	2b04      	cmp	r3, #4
   2b66e:	bf0a      	itet	eq
   2b670:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   2b674:	2500      	movne	r5, #0
   2b676:	6833      	ldreq	r3, [r6, #0]
   2b678:	f04f 0600 	mov.w	r6, #0
   2b67c:	bf08      	it	eq
   2b67e:	1aed      	subeq	r5, r5, r3
   2b680:	f854 3c12 	ldr.w	r3, [r4, #-18]
   2b684:	bf08      	it	eq
   2b686:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2b68a:	4293      	cmp	r3, r2
   2b68c:	bfc4      	itt	gt
   2b68e:	1a9b      	subgt	r3, r3, r2
   2b690:	18ed      	addgt	r5, r5, r3
   2b692:	42b5      	cmp	r5, r6
   2b694:	d11a      	bne.n	2b6cc <_printf_common+0xd2>
   2b696:	2000      	movs	r0, #0
   2b698:	e008      	b.n	2b6ac <_printf_common+0xb2>
   2b69a:	2301      	movs	r3, #1
   2b69c:	4652      	mov	r2, sl
   2b69e:	4641      	mov	r1, r8
   2b6a0:	4638      	mov	r0, r7
   2b6a2:	47c8      	blx	r9
   2b6a4:	3001      	adds	r0, #1
   2b6a6:	d103      	bne.n	2b6b0 <_printf_common+0xb6>
   2b6a8:	f04f 30ff 	mov.w	r0, #4294967295
   2b6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b6b0:	3501      	adds	r5, #1
   2b6b2:	e7c1      	b.n	2b638 <_printf_common+0x3e>
   2b6b4:	18e1      	adds	r1, r4, r3
   2b6b6:	1c5a      	adds	r2, r3, #1
   2b6b8:	2030      	movs	r0, #48	; 0x30
   2b6ba:	3302      	adds	r3, #2
   2b6bc:	4422      	add	r2, r4
   2b6be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2b6c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2b6c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2b6ca:	e7c2      	b.n	2b652 <_printf_common+0x58>
   2b6cc:	2301      	movs	r3, #1
   2b6ce:	4622      	mov	r2, r4
   2b6d0:	4641      	mov	r1, r8
   2b6d2:	4638      	mov	r0, r7
   2b6d4:	47c8      	blx	r9
   2b6d6:	3001      	adds	r0, #1
   2b6d8:	d0e6      	beq.n	2b6a8 <_printf_common+0xae>
   2b6da:	3601      	adds	r6, #1
   2b6dc:	e7d9      	b.n	2b692 <_printf_common+0x98>

0002b6de <__sccl>:
   2b6de:	b570      	push	{r4, r5, r6, lr}
   2b6e0:	780b      	ldrb	r3, [r1, #0]
   2b6e2:	4604      	mov	r4, r0
   2b6e4:	3801      	subs	r0, #1
   2b6e6:	2b5e      	cmp	r3, #94	; 0x5e
   2b6e8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   2b6ec:	bf13      	iteet	ne
   2b6ee:	1c4a      	addne	r2, r1, #1
   2b6f0:	1c8a      	addeq	r2, r1, #2
   2b6f2:	784b      	ldrbeq	r3, [r1, #1]
   2b6f4:	2100      	movne	r1, #0
   2b6f6:	bf08      	it	eq
   2b6f8:	2101      	moveq	r1, #1
   2b6fa:	f800 1f01 	strb.w	r1, [r0, #1]!
   2b6fe:	42a8      	cmp	r0, r5
   2b700:	d1fb      	bne.n	2b6fa <__sccl+0x1c>
   2b702:	b90b      	cbnz	r3, 2b708 <__sccl+0x2a>
   2b704:	1e50      	subs	r0, r2, #1
   2b706:	bd70      	pop	{r4, r5, r6, pc}
   2b708:	f081 0101 	eor.w	r1, r1, #1
   2b70c:	4610      	mov	r0, r2
   2b70e:	54e1      	strb	r1, [r4, r3]
   2b710:	4602      	mov	r2, r0
   2b712:	f812 5b01 	ldrb.w	r5, [r2], #1
   2b716:	2d2d      	cmp	r5, #45	; 0x2d
   2b718:	d005      	beq.n	2b726 <__sccl+0x48>
   2b71a:	2d5d      	cmp	r5, #93	; 0x5d
   2b71c:	d016      	beq.n	2b74c <__sccl+0x6e>
   2b71e:	2d00      	cmp	r5, #0
   2b720:	d0f1      	beq.n	2b706 <__sccl+0x28>
   2b722:	462b      	mov	r3, r5
   2b724:	e7f2      	b.n	2b70c <__sccl+0x2e>
   2b726:	7846      	ldrb	r6, [r0, #1]
   2b728:	2e5d      	cmp	r6, #93	; 0x5d
   2b72a:	d0fa      	beq.n	2b722 <__sccl+0x44>
   2b72c:	42b3      	cmp	r3, r6
   2b72e:	dcf8      	bgt.n	2b722 <__sccl+0x44>
   2b730:	3002      	adds	r0, #2
   2b732:	461a      	mov	r2, r3
   2b734:	3201      	adds	r2, #1
   2b736:	4296      	cmp	r6, r2
   2b738:	54a1      	strb	r1, [r4, r2]
   2b73a:	dcfb      	bgt.n	2b734 <__sccl+0x56>
   2b73c:	1af2      	subs	r2, r6, r3
   2b73e:	1c5d      	adds	r5, r3, #1
   2b740:	3a01      	subs	r2, #1
   2b742:	42b3      	cmp	r3, r6
   2b744:	bfa8      	it	ge
   2b746:	2200      	movge	r2, #0
   2b748:	18ab      	adds	r3, r5, r2
   2b74a:	e7e1      	b.n	2b710 <__sccl+0x32>
   2b74c:	4610      	mov	r0, r2
   2b74e:	e7da      	b.n	2b706 <__sccl+0x28>

0002b750 <__submore>:
   2b750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b754:	460c      	mov	r4, r1
   2b756:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2b758:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2b75c:	4299      	cmp	r1, r3
   2b75e:	d11a      	bne.n	2b796 <__submore+0x46>
   2b760:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2b764:	f7fa f874 	bl	25850 <_malloc_r>
   2b768:	b918      	cbnz	r0, 2b772 <__submore+0x22>
   2b76a:	f04f 30ff 	mov.w	r0, #4294967295
   2b76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b772:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2b776:	6360      	str	r0, [r4, #52]	; 0x34
   2b778:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   2b77c:	63a3      	str	r3, [r4, #56]	; 0x38
   2b77e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   2b782:	7083      	strb	r3, [r0, #2]
   2b784:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   2b788:	7043      	strb	r3, [r0, #1]
   2b78a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   2b78e:	7003      	strb	r3, [r0, #0]
   2b790:	6020      	str	r0, [r4, #0]
   2b792:	2000      	movs	r0, #0
   2b794:	e7eb      	b.n	2b76e <__submore+0x1e>
   2b796:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   2b798:	0077      	lsls	r7, r6, #1
   2b79a:	463a      	mov	r2, r7
   2b79c:	f000 f8cd 	bl	2b93a <_realloc_r>
   2b7a0:	4605      	mov	r5, r0
   2b7a2:	2800      	cmp	r0, #0
   2b7a4:	d0e1      	beq.n	2b76a <__submore+0x1a>
   2b7a6:	eb00 0806 	add.w	r8, r0, r6
   2b7aa:	4601      	mov	r1, r0
   2b7ac:	4632      	mov	r2, r6
   2b7ae:	4640      	mov	r0, r8
   2b7b0:	f7ff fd1b 	bl	2b1ea <memcpy>
   2b7b4:	f8c4 8000 	str.w	r8, [r4]
   2b7b8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   2b7bc:	e7e9      	b.n	2b792 <__submore+0x42>

0002b7be <__sflush_r>:
   2b7be:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2b7c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b7c4:	0717      	lsls	r7, r2, #28
   2b7c6:	4605      	mov	r5, r0
   2b7c8:	460c      	mov	r4, r1
   2b7ca:	d456      	bmi.n	2b87a <__sflush_r+0xbc>
   2b7cc:	684b      	ldr	r3, [r1, #4]
   2b7ce:	2b00      	cmp	r3, #0
   2b7d0:	dc02      	bgt.n	2b7d8 <__sflush_r+0x1a>
   2b7d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   2b7d4:	2b00      	cmp	r3, #0
   2b7d6:	dd3d      	ble.n	2b854 <__sflush_r+0x96>
   2b7d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2b7da:	2e00      	cmp	r6, #0
   2b7dc:	d03a      	beq.n	2b854 <__sflush_r+0x96>
   2b7de:	2300      	movs	r3, #0
   2b7e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   2b7e4:	682f      	ldr	r7, [r5, #0]
   2b7e6:	6a21      	ldr	r1, [r4, #32]
   2b7e8:	602b      	str	r3, [r5, #0]
   2b7ea:	d025      	beq.n	2b838 <__sflush_r+0x7a>
   2b7ec:	6d62      	ldr	r2, [r4, #84]	; 0x54
   2b7ee:	89a3      	ldrh	r3, [r4, #12]
   2b7f0:	0758      	lsls	r0, r3, #29
   2b7f2:	d505      	bpl.n	2b800 <__sflush_r+0x42>
   2b7f4:	6863      	ldr	r3, [r4, #4]
   2b7f6:	1ad2      	subs	r2, r2, r3
   2b7f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b7fa:	b10b      	cbz	r3, 2b800 <__sflush_r+0x42>
   2b7fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2b7fe:	1ad2      	subs	r2, r2, r3
   2b800:	6a21      	ldr	r1, [r4, #32]
   2b802:	2300      	movs	r3, #0
   2b804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2b806:	4628      	mov	r0, r5
   2b808:	47b0      	blx	r6
   2b80a:	1c41      	adds	r1, r0, #1
   2b80c:	d024      	beq.n	2b858 <__sflush_r+0x9a>
   2b80e:	2300      	movs	r3, #0
   2b810:	6063      	str	r3, [r4, #4]
   2b812:	6923      	ldr	r3, [r4, #16]
   2b814:	6023      	str	r3, [r4, #0]
   2b816:	89a3      	ldrh	r3, [r4, #12]
   2b818:	04da      	lsls	r2, r3, #19
   2b81a:	d500      	bpl.n	2b81e <__sflush_r+0x60>
   2b81c:	6560      	str	r0, [r4, #84]	; 0x54
   2b81e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2b820:	602f      	str	r7, [r5, #0]
   2b822:	b1b9      	cbz	r1, 2b854 <__sflush_r+0x96>
   2b824:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2b828:	4299      	cmp	r1, r3
   2b82a:	d002      	beq.n	2b832 <__sflush_r+0x74>
   2b82c:	4628      	mov	r0, r5
   2b82e:	f7f9 ffc5 	bl	257bc <_free_r>
   2b832:	2300      	movs	r3, #0
   2b834:	6363      	str	r3, [r4, #52]	; 0x34
   2b836:	e00d      	b.n	2b854 <__sflush_r+0x96>
   2b838:	2301      	movs	r3, #1
   2b83a:	4628      	mov	r0, r5
   2b83c:	47b0      	blx	r6
   2b83e:	1c46      	adds	r6, r0, #1
   2b840:	4602      	mov	r2, r0
   2b842:	d1d4      	bne.n	2b7ee <__sflush_r+0x30>
   2b844:	682b      	ldr	r3, [r5, #0]
   2b846:	2b00      	cmp	r3, #0
   2b848:	d0d1      	beq.n	2b7ee <__sflush_r+0x30>
   2b84a:	2b1d      	cmp	r3, #29
   2b84c:	d001      	beq.n	2b852 <__sflush_r+0x94>
   2b84e:	2b16      	cmp	r3, #22
   2b850:	d129      	bne.n	2b8a6 <__sflush_r+0xe8>
   2b852:	602f      	str	r7, [r5, #0]
   2b854:	2000      	movs	r0, #0
   2b856:	e02d      	b.n	2b8b4 <__sflush_r+0xf6>
   2b858:	682a      	ldr	r2, [r5, #0]
   2b85a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2b85e:	b142      	cbz	r2, 2b872 <__sflush_r+0xb4>
   2b860:	2a1d      	cmp	r2, #29
   2b862:	d001      	beq.n	2b868 <__sflush_r+0xaa>
   2b864:	2a16      	cmp	r2, #22
   2b866:	d120      	bne.n	2b8aa <__sflush_r+0xec>
   2b868:	2300      	movs	r3, #0
   2b86a:	6063      	str	r3, [r4, #4]
   2b86c:	6923      	ldr	r3, [r4, #16]
   2b86e:	6023      	str	r3, [r4, #0]
   2b870:	e7d5      	b.n	2b81e <__sflush_r+0x60>
   2b872:	6062      	str	r2, [r4, #4]
   2b874:	6922      	ldr	r2, [r4, #16]
   2b876:	6022      	str	r2, [r4, #0]
   2b878:	e7ce      	b.n	2b818 <__sflush_r+0x5a>
   2b87a:	690f      	ldr	r7, [r1, #16]
   2b87c:	2f00      	cmp	r7, #0
   2b87e:	d0e9      	beq.n	2b854 <__sflush_r+0x96>
   2b880:	0793      	lsls	r3, r2, #30
   2b882:	680e      	ldr	r6, [r1, #0]
   2b884:	600f      	str	r7, [r1, #0]
   2b886:	bf0c      	ite	eq
   2b888:	694b      	ldreq	r3, [r1, #20]
   2b88a:	2300      	movne	r3, #0
   2b88c:	1bf6      	subs	r6, r6, r7
   2b88e:	608b      	str	r3, [r1, #8]
   2b890:	2e00      	cmp	r6, #0
   2b892:	dddf      	ble.n	2b854 <__sflush_r+0x96>
   2b894:	4633      	mov	r3, r6
   2b896:	463a      	mov	r2, r7
   2b898:	6a21      	ldr	r1, [r4, #32]
   2b89a:	4628      	mov	r0, r5
   2b89c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   2b8a0:	47e0      	blx	ip
   2b8a2:	2800      	cmp	r0, #0
   2b8a4:	dc07      	bgt.n	2b8b6 <__sflush_r+0xf8>
   2b8a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2b8aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b8ae:	f04f 30ff 	mov.w	r0, #4294967295
   2b8b2:	81a3      	strh	r3, [r4, #12]
   2b8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b8b6:	4407      	add	r7, r0
   2b8b8:	1a36      	subs	r6, r6, r0
   2b8ba:	e7e9      	b.n	2b890 <__sflush_r+0xd2>

0002b8bc <__swhatbuf_r>:
   2b8bc:	b570      	push	{r4, r5, r6, lr}
   2b8be:	460c      	mov	r4, r1
   2b8c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2b8c4:	b096      	sub	sp, #88	; 0x58
   2b8c6:	4615      	mov	r5, r2
   2b8c8:	2900      	cmp	r1, #0
   2b8ca:	461e      	mov	r6, r3
   2b8cc:	da0c      	bge.n	2b8e8 <__swhatbuf_r+0x2c>
   2b8ce:	89a3      	ldrh	r3, [r4, #12]
   2b8d0:	2100      	movs	r1, #0
   2b8d2:	f013 0f80 	tst.w	r3, #128	; 0x80
   2b8d6:	bf14      	ite	ne
   2b8d8:	2340      	movne	r3, #64	; 0x40
   2b8da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   2b8de:	2000      	movs	r0, #0
   2b8e0:	6031      	str	r1, [r6, #0]
   2b8e2:	602b      	str	r3, [r5, #0]
   2b8e4:	b016      	add	sp, #88	; 0x58
   2b8e6:	bd70      	pop	{r4, r5, r6, pc}
   2b8e8:	466a      	mov	r2, sp
   2b8ea:	f7fb fb03 	bl	26ef4 <_fstat_r>
   2b8ee:	2800      	cmp	r0, #0
   2b8f0:	dbed      	blt.n	2b8ce <__swhatbuf_r+0x12>
   2b8f2:	9901      	ldr	r1, [sp, #4]
   2b8f4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   2b8f8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   2b8fc:	4259      	negs	r1, r3
   2b8fe:	4159      	adcs	r1, r3
   2b900:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2b904:	e7eb      	b.n	2b8de <__swhatbuf_r+0x22>

0002b906 <memmove>:
   2b906:	4288      	cmp	r0, r1
   2b908:	b510      	push	{r4, lr}
   2b90a:	eb01 0402 	add.w	r4, r1, r2
   2b90e:	d902      	bls.n	2b916 <memmove+0x10>
   2b910:	4284      	cmp	r4, r0
   2b912:	4623      	mov	r3, r4
   2b914:	d807      	bhi.n	2b926 <memmove+0x20>
   2b916:	1e43      	subs	r3, r0, #1
   2b918:	42a1      	cmp	r1, r4
   2b91a:	d008      	beq.n	2b92e <memmove+0x28>
   2b91c:	f811 2b01 	ldrb.w	r2, [r1], #1
   2b920:	f803 2f01 	strb.w	r2, [r3, #1]!
   2b924:	e7f8      	b.n	2b918 <memmove+0x12>
   2b926:	4402      	add	r2, r0
   2b928:	4601      	mov	r1, r0
   2b92a:	428a      	cmp	r2, r1
   2b92c:	d100      	bne.n	2b930 <memmove+0x2a>
   2b92e:	bd10      	pop	{r4, pc}
   2b930:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2b934:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2b938:	e7f7      	b.n	2b92a <memmove+0x24>

0002b93a <_realloc_r>:
   2b93a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b93c:	4607      	mov	r7, r0
   2b93e:	4615      	mov	r5, r2
   2b940:	460c      	mov	r4, r1
   2b942:	b921      	cbnz	r1, 2b94e <_realloc_r+0x14>
   2b944:	4611      	mov	r1, r2
   2b946:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2b94a:	f7f9 bf81 	b.w	25850 <_malloc_r>
   2b94e:	b922      	cbnz	r2, 2b95a <_realloc_r+0x20>
   2b950:	f7f9 ff34 	bl	257bc <_free_r>
   2b954:	2400      	movs	r4, #0
   2b956:	4620      	mov	r0, r4
   2b958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b95a:	f000 f813 	bl	2b984 <_malloc_usable_size_r>
   2b95e:	42a8      	cmp	r0, r5
   2b960:	d2f9      	bcs.n	2b956 <_realloc_r+0x1c>
   2b962:	4629      	mov	r1, r5
   2b964:	4638      	mov	r0, r7
   2b966:	f7f9 ff73 	bl	25850 <_malloc_r>
   2b96a:	4606      	mov	r6, r0
   2b96c:	2800      	cmp	r0, #0
   2b96e:	d0f1      	beq.n	2b954 <_realloc_r+0x1a>
   2b970:	4621      	mov	r1, r4
   2b972:	462a      	mov	r2, r5
   2b974:	f7ff fc39 	bl	2b1ea <memcpy>
   2b978:	4621      	mov	r1, r4
   2b97a:	4638      	mov	r0, r7
   2b97c:	4634      	mov	r4, r6
   2b97e:	f7f9 ff1d 	bl	257bc <_free_r>
   2b982:	e7e8      	b.n	2b956 <_realloc_r+0x1c>

0002b984 <_malloc_usable_size_r>:
   2b984:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2b988:	1f18      	subs	r0, r3, #4
   2b98a:	2b00      	cmp	r3, #0
   2b98c:	bfbc      	itt	lt
   2b98e:	580b      	ldrlt	r3, [r1, r0]
   2b990:	18c0      	addlt	r0, r0, r3
   2b992:	4770      	bx	lr
